
OlcumH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cbc  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08005e88  08005e88  00006e88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed0  08005ed0  00007080  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed0  08005ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ed8  08005ed8  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005edc  08005edc  00006edc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08005ee0  00007000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000027c  20000080  08005f60  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005f60  000072fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b0d9  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a14  00000000  00000000  00012189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00013ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ed  00000000  00000000  000145c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022055  00000000  00000000  00014db5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da78  00000000  00000000  00036e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc8f0  00000000  00000000  00044882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111172  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003580  00000000  00000000  001111b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00114738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000080 	.word	0x20000080
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005e6c 	.word	0x08005e6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000084 	.word	0x20000084
 8000204:	08005e6c 	.word	0x08005e6c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2iz>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae8:	d215      	bcs.n	8000b16 <__aeabi_d2iz+0x36>
 8000aea:	d511      	bpl.n	8000b10 <__aeabi_d2iz+0x30>
 8000aec:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d912      	bls.n	8000b1c <__aeabi_d2iz+0x3c>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b06:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	4240      	negne	r0, r0
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1a:	d105      	bne.n	8000b28 <__aeabi_d2iz+0x48>
 8000b1c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b20:	bf08      	it	eq
 8000b22:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2f>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b78:	bf24      	itt	cs
 8000b7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b82:	d90d      	bls.n	8000ba0 <__aeabi_d2f+0x30>
 8000b84:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b90:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba4:	d121      	bne.n	8000bea <__aeabi_d2f+0x7a>
 8000ba6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000baa:	bfbc      	itt	lt
 8000bac:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bb0:	4770      	bxlt	lr
 8000bb2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bba:	f1c2 0218 	rsb	r2, r2, #24
 8000bbe:	f1c2 0c20 	rsb	ip, r2, #32
 8000bc2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bca:	bf18      	it	ne
 8000bcc:	f040 0001 	orrne.w	r0, r0, #1
 8000bd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bdc:	ea40 000c 	orr.w	r0, r0, ip
 8000be0:	fa23 f302 	lsr.w	r3, r3, r2
 8000be4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be8:	e7cc      	b.n	8000b84 <__aeabi_d2f+0x14>
 8000bea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bee:	d107      	bne.n	8000c00 <__aeabi_d2f+0x90>
 8000bf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf4:	bf1e      	ittt	ne
 8000bf6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bfa:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfe:	4770      	bxne	lr
 8000c00:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c04:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <__aeabi_uldivmod>:
 8000c10:	b953      	cbnz	r3, 8000c28 <__aeabi_uldivmod+0x18>
 8000c12:	b94a      	cbnz	r2, 8000c28 <__aeabi_uldivmod+0x18>
 8000c14:	2900      	cmp	r1, #0
 8000c16:	bf08      	it	eq
 8000c18:	2800      	cmpeq	r0, #0
 8000c1a:	bf1c      	itt	ne
 8000c1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c20:	f04f 30ff 	movne.w	r0, #4294967295
 8000c24:	f000 b96a 	b.w	8000efc <__aeabi_idiv0>
 8000c28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c30:	f000 f806 	bl	8000c40 <__udivmoddi4>
 8000c34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3c:	b004      	add	sp, #16
 8000c3e:	4770      	bx	lr

08000c40 <__udivmoddi4>:
 8000c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c44:	9d08      	ldr	r5, [sp, #32]
 8000c46:	460c      	mov	r4, r1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d14e      	bne.n	8000cea <__udivmoddi4+0xaa>
 8000c4c:	4694      	mov	ip, r2
 8000c4e:	458c      	cmp	ip, r1
 8000c50:	4686      	mov	lr, r0
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	d962      	bls.n	8000d1e <__udivmoddi4+0xde>
 8000c58:	b14a      	cbz	r2, 8000c6e <__udivmoddi4+0x2e>
 8000c5a:	f1c2 0320 	rsb	r3, r2, #32
 8000c5e:	4091      	lsls	r1, r2
 8000c60:	fa20 f303 	lsr.w	r3, r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	4319      	orrs	r1, r3
 8000c6a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c72:	fa1f f68c 	uxth.w	r6, ip
 8000c76:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c7a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7e:	fb07 1114 	mls	r1, r7, r4, r1
 8000c82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c86:	fb04 f106 	mul.w	r1, r4, r6
 8000c8a:	4299      	cmp	r1, r3
 8000c8c:	d90a      	bls.n	8000ca4 <__udivmoddi4+0x64>
 8000c8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c92:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c96:	f080 8112 	bcs.w	8000ebe <__udivmoddi4+0x27e>
 8000c9a:	4299      	cmp	r1, r3
 8000c9c:	f240 810f 	bls.w	8000ebe <__udivmoddi4+0x27e>
 8000ca0:	3c02      	subs	r4, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1a59      	subs	r1, r3, r1
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cae:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb6:	fb00 f606 	mul.w	r6, r0, r6
 8000cba:	429e      	cmp	r6, r3
 8000cbc:	d90a      	bls.n	8000cd4 <__udivmoddi4+0x94>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cc6:	f080 80fc 	bcs.w	8000ec2 <__udivmoddi4+0x282>
 8000cca:	429e      	cmp	r6, r3
 8000ccc:	f240 80f9 	bls.w	8000ec2 <__udivmoddi4+0x282>
 8000cd0:	4463      	add	r3, ip
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	1b9b      	subs	r3, r3, r6
 8000cd6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cda:	2100      	movs	r1, #0
 8000cdc:	b11d      	cbz	r5, 8000ce6 <__udivmoddi4+0xa6>
 8000cde:	40d3      	lsrs	r3, r2
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d905      	bls.n	8000cfa <__udivmoddi4+0xba>
 8000cee:	b10d      	cbz	r5, 8000cf4 <__udivmoddi4+0xb4>
 8000cf0:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e7f5      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000cfa:	fab3 f183 	clz	r1, r3
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d146      	bne.n	8000d90 <__udivmoddi4+0x150>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d302      	bcc.n	8000d0c <__udivmoddi4+0xcc>
 8000d06:	4290      	cmp	r0, r2
 8000d08:	f0c0 80f0 	bcc.w	8000eec <__udivmoddi4+0x2ac>
 8000d0c:	1a86      	subs	r6, r0, r2
 8000d0e:	eb64 0303 	sbc.w	r3, r4, r3
 8000d12:	2001      	movs	r0, #1
 8000d14:	2d00      	cmp	r5, #0
 8000d16:	d0e6      	beq.n	8000ce6 <__udivmoddi4+0xa6>
 8000d18:	e9c5 6300 	strd	r6, r3, [r5]
 8000d1c:	e7e3      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000d1e:	2a00      	cmp	r2, #0
 8000d20:	f040 8090 	bne.w	8000e44 <__udivmoddi4+0x204>
 8000d24:	eba1 040c 	sub.w	r4, r1, ip
 8000d28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d2c:	fa1f f78c 	uxth.w	r7, ip
 8000d30:	2101      	movs	r1, #1
 8000d32:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d3a:	fb08 4416 	mls	r4, r8, r6, r4
 8000d3e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d42:	fb07 f006 	mul.w	r0, r7, r6
 8000d46:	4298      	cmp	r0, r3
 8000d48:	d908      	bls.n	8000d5c <__udivmoddi4+0x11c>
 8000d4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x11a>
 8000d54:	4298      	cmp	r0, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2b4>
 8000d5a:	4626      	mov	r6, r4
 8000d5c:	1a1c      	subs	r4, r3, r0
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d66:	fb08 4410 	mls	r4, r8, r0, r4
 8000d6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d6e:	fb00 f707 	mul.w	r7, r0, r7
 8000d72:	429f      	cmp	r7, r3
 8000d74:	d908      	bls.n	8000d88 <__udivmoddi4+0x148>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x146>
 8000d80:	429f      	cmp	r7, r3
 8000d82:	f200 80b0 	bhi.w	8000ee6 <__udivmoddi4+0x2a6>
 8000d86:	4620      	mov	r0, r4
 8000d88:	1bdb      	subs	r3, r3, r7
 8000d8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0x9c>
 8000d90:	f1c1 0620 	rsb	r6, r1, #32
 8000d94:	408b      	lsls	r3, r1
 8000d96:	fa22 f706 	lsr.w	r7, r2, r6
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000da0:	fa04 f301 	lsl.w	r3, r4, r1
 8000da4:	ea43 030c 	orr.w	r3, r3, ip
 8000da8:	40f4      	lsrs	r4, r6
 8000daa:	fa00 f801 	lsl.w	r8, r0, r1
 8000dae:	0c38      	lsrs	r0, r7, #16
 8000db0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000db4:	fbb4 fef0 	udiv	lr, r4, r0
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fb00 441e 	mls	r4, r0, lr, r4
 8000dc0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc4:	fb0e f90c 	mul.w	r9, lr, ip
 8000dc8:	45a1      	cmp	r9, r4
 8000dca:	fa02 f201 	lsl.w	r2, r2, r1
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x1a6>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dd6:	f080 8084 	bcs.w	8000ee2 <__udivmoddi4+0x2a2>
 8000dda:	45a1      	cmp	r9, r4
 8000ddc:	f240 8081 	bls.w	8000ee2 <__udivmoddi4+0x2a2>
 8000de0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	eba4 0409 	sub.w	r4, r4, r9
 8000dea:	fa1f f983 	uxth.w	r9, r3
 8000dee:	fbb4 f3f0 	udiv	r3, r4, r0
 8000df2:	fb00 4413 	mls	r4, r0, r3, r4
 8000df6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfa:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dfe:	45a4      	cmp	ip, r4
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x1d2>
 8000e02:	193c      	adds	r4, r7, r4
 8000e04:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e08:	d267      	bcs.n	8000eda <__udivmoddi4+0x29a>
 8000e0a:	45a4      	cmp	ip, r4
 8000e0c:	d965      	bls.n	8000eda <__udivmoddi4+0x29a>
 8000e0e:	3b02      	subs	r3, #2
 8000e10:	443c      	add	r4, r7
 8000e12:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e16:	fba0 9302 	umull	r9, r3, r0, r2
 8000e1a:	eba4 040c 	sub.w	r4, r4, ip
 8000e1e:	429c      	cmp	r4, r3
 8000e20:	46ce      	mov	lr, r9
 8000e22:	469c      	mov	ip, r3
 8000e24:	d351      	bcc.n	8000eca <__udivmoddi4+0x28a>
 8000e26:	d04e      	beq.n	8000ec6 <__udivmoddi4+0x286>
 8000e28:	b155      	cbz	r5, 8000e40 <__udivmoddi4+0x200>
 8000e2a:	ebb8 030e 	subs.w	r3, r8, lr
 8000e2e:	eb64 040c 	sbc.w	r4, r4, ip
 8000e32:	fa04 f606 	lsl.w	r6, r4, r6
 8000e36:	40cb      	lsrs	r3, r1
 8000e38:	431e      	orrs	r6, r3
 8000e3a:	40cc      	lsrs	r4, r1
 8000e3c:	e9c5 6400 	strd	r6, r4, [r5]
 8000e40:	2100      	movs	r1, #0
 8000e42:	e750      	b.n	8000ce6 <__udivmoddi4+0xa6>
 8000e44:	f1c2 0320 	rsb	r3, r2, #32
 8000e48:	fa20 f103 	lsr.w	r1, r0, r3
 8000e4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e50:	fa24 f303 	lsr.w	r3, r4, r3
 8000e54:	4094      	lsls	r4, r2
 8000e56:	430c      	orrs	r4, r1
 8000e58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e5c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e68:	fb08 3110 	mls	r1, r8, r0, r3
 8000e6c:	0c23      	lsrs	r3, r4, #16
 8000e6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e72:	fb00 f107 	mul.w	r1, r0, r7
 8000e76:	4299      	cmp	r1, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x24c>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e82:	d22c      	bcs.n	8000ede <__udivmoddi4+0x29e>
 8000e84:	4299      	cmp	r1, r3
 8000e86:	d92a      	bls.n	8000ede <__udivmoddi4+0x29e>
 8000e88:	3802      	subs	r0, #2
 8000e8a:	4463      	add	r3, ip
 8000e8c:	1a5b      	subs	r3, r3, r1
 8000e8e:	b2a4      	uxth	r4, r4
 8000e90:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e94:	fb08 3311 	mls	r3, r8, r1, r3
 8000e98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e9c:	fb01 f307 	mul.w	r3, r1, r7
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	d908      	bls.n	8000eb6 <__udivmoddi4+0x276>
 8000ea4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000eac:	d213      	bcs.n	8000ed6 <__udivmoddi4+0x296>
 8000eae:	42a3      	cmp	r3, r4
 8000eb0:	d911      	bls.n	8000ed6 <__udivmoddi4+0x296>
 8000eb2:	3902      	subs	r1, #2
 8000eb4:	4464      	add	r4, ip
 8000eb6:	1ae4      	subs	r4, r4, r3
 8000eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ebc:	e739      	b.n	8000d32 <__udivmoddi4+0xf2>
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	e6f0      	b.n	8000ca4 <__udivmoddi4+0x64>
 8000ec2:	4608      	mov	r0, r1
 8000ec4:	e706      	b.n	8000cd4 <__udivmoddi4+0x94>
 8000ec6:	45c8      	cmp	r8, r9
 8000ec8:	d2ae      	bcs.n	8000e28 <__udivmoddi4+0x1e8>
 8000eca:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ece:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ed2:	3801      	subs	r0, #1
 8000ed4:	e7a8      	b.n	8000e28 <__udivmoddi4+0x1e8>
 8000ed6:	4631      	mov	r1, r6
 8000ed8:	e7ed      	b.n	8000eb6 <__udivmoddi4+0x276>
 8000eda:	4603      	mov	r3, r0
 8000edc:	e799      	b.n	8000e12 <__udivmoddi4+0x1d2>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e7d4      	b.n	8000e8c <__udivmoddi4+0x24c>
 8000ee2:	46d6      	mov	lr, sl
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1a6>
 8000ee6:	4463      	add	r3, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e74d      	b.n	8000d88 <__udivmoddi4+0x148>
 8000eec:	4606      	mov	r6, r0
 8000eee:	4623      	mov	r3, r4
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	e70f      	b.n	8000d14 <__udivmoddi4+0xd4>
 8000ef4:	3e02      	subs	r6, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	e730      	b.n	8000d5c <__udivmoddi4+0x11c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f06:	f000 fe9f 	bl	8001c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0a:	f000 fb9d 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0e:	f000 fc61 	bl	80017d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f12:	f000 fc35 	bl	8001780 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f16:	f000 fc05 	bl	8001724 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, 0xEE, 1, 100);
 8000f1a:	2364      	movs	r3, #100	@ 0x64
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	21ee      	movs	r1, #238	@ 0xee
 8000f20:	48a6      	ldr	r0, [pc, #664]	@ (80011bc <main+0x2bc>)
 8000f22:	f001 fe2b 	bl	8002b7c <HAL_I2C_IsDeviceReady>
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]

  HAL_I2C_Mem_Read(&hi2c1,0xEF,Callib_Start,1,&tmprtr2,22,100);
 8000f2a:	4ba5      	ldr	r3, [pc, #660]	@ (80011c0 <main+0x2c0>)
 8000f2c:	881a      	ldrh	r2, [r3, #0]
 8000f2e:	2364      	movs	r3, #100	@ 0x64
 8000f30:	9302      	str	r3, [sp, #8]
 8000f32:	2316      	movs	r3, #22
 8000f34:	9301      	str	r3, [sp, #4]
 8000f36:	4ba3      	ldr	r3, [pc, #652]	@ (80011c4 <main+0x2c4>)
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	21ef      	movs	r1, #239	@ 0xef
 8000f3e:	489f      	ldr	r0, [pc, #636]	@ (80011bc <main+0x2bc>)
 8000f40:	f001 fbea 	bl	8002718 <HAL_I2C_Mem_Read>

    		  	AC1 = ((tmprtr2[0] << 8) | tmprtr2[1]);
 8000f44:	4b9f      	ldr	r3, [pc, #636]	@ (80011c4 <main+0x2c4>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	021b      	lsls	r3, r3, #8
 8000f4a:	b21a      	sxth	r2, r3
 8000f4c:	4b9d      	ldr	r3, [pc, #628]	@ (80011c4 <main+0x2c4>)
 8000f4e:	785b      	ldrb	r3, [r3, #1]
 8000f50:	b21b      	sxth	r3, r3
 8000f52:	4313      	orrs	r3, r2
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4b9c      	ldr	r3, [pc, #624]	@ (80011c8 <main+0x2c8>)
 8000f58:	801a      	strh	r2, [r3, #0]
    		    AC2 = ((tmprtr2[2] << 8) | tmprtr2[3]);
 8000f5a:	4b9a      	ldr	r3, [pc, #616]	@ (80011c4 <main+0x2c4>)
 8000f5c:	789b      	ldrb	r3, [r3, #2]
 8000f5e:	021b      	lsls	r3, r3, #8
 8000f60:	b21a      	sxth	r2, r3
 8000f62:	4b98      	ldr	r3, [pc, #608]	@ (80011c4 <main+0x2c4>)
 8000f64:	78db      	ldrb	r3, [r3, #3]
 8000f66:	b21b      	sxth	r3, r3
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	b21a      	sxth	r2, r3
 8000f6c:	4b97      	ldr	r3, [pc, #604]	@ (80011cc <main+0x2cc>)
 8000f6e:	801a      	strh	r2, [r3, #0]
    		  	AC3 = ((tmprtr2[4] << 8) | tmprtr2[5]);
 8000f70:	4b94      	ldr	r3, [pc, #592]	@ (80011c4 <main+0x2c4>)
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b92      	ldr	r3, [pc, #584]	@ (80011c4 <main+0x2c4>)
 8000f7a:	795b      	ldrb	r3, [r3, #5]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21a      	sxth	r2, r3
 8000f82:	4b93      	ldr	r3, [pc, #588]	@ (80011d0 <main+0x2d0>)
 8000f84:	801a      	strh	r2, [r3, #0]
    		  	AC4 = ((tmprtr2[6] << 8) | tmprtr2[7]);
 8000f86:	4b8f      	ldr	r3, [pc, #572]	@ (80011c4 <main+0x2c4>)
 8000f88:	799b      	ldrb	r3, [r3, #6]
 8000f8a:	021b      	lsls	r3, r3, #8
 8000f8c:	b21a      	sxth	r2, r3
 8000f8e:	4b8d      	ldr	r3, [pc, #564]	@ (80011c4 <main+0x2c4>)
 8000f90:	79db      	ldrb	r3, [r3, #7]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b21b      	sxth	r3, r3
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b8e      	ldr	r3, [pc, #568]	@ (80011d4 <main+0x2d4>)
 8000f9c:	801a      	strh	r2, [r3, #0]
    		  	AC5 = ((tmprtr2[8] << 8) | tmprtr2[9]);
 8000f9e:	4b89      	ldr	r3, [pc, #548]	@ (80011c4 <main+0x2c4>)
 8000fa0:	7a1b      	ldrb	r3, [r3, #8]
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	4b87      	ldr	r3, [pc, #540]	@ (80011c4 <main+0x2c4>)
 8000fa8:	7a5b      	ldrb	r3, [r3, #9]
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	4313      	orrs	r3, r2
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	4b89      	ldr	r3, [pc, #548]	@ (80011d8 <main+0x2d8>)
 8000fb4:	801a      	strh	r2, [r3, #0]
    		  	AC6 = ((tmprtr2[10] << 8) | tmprtr2[11]);
 8000fb6:	4b83      	ldr	r3, [pc, #524]	@ (80011c4 <main+0x2c4>)
 8000fb8:	7a9b      	ldrb	r3, [r3, #10]
 8000fba:	021b      	lsls	r3, r3, #8
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b81      	ldr	r3, [pc, #516]	@ (80011c4 <main+0x2c4>)
 8000fc0:	7adb      	ldrb	r3, [r3, #11]
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b21b      	sxth	r3, r3
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b84      	ldr	r3, [pc, #528]	@ (80011dc <main+0x2dc>)
 8000fcc:	801a      	strh	r2, [r3, #0]
    		  	B1 = ((tmprtr2[12] << 8) | tmprtr2[13]);
 8000fce:	4b7d      	ldr	r3, [pc, #500]	@ (80011c4 <main+0x2c4>)
 8000fd0:	7b1b      	ldrb	r3, [r3, #12]
 8000fd2:	021b      	lsls	r3, r3, #8
 8000fd4:	b21a      	sxth	r2, r3
 8000fd6:	4b7b      	ldr	r3, [pc, #492]	@ (80011c4 <main+0x2c4>)
 8000fd8:	7b5b      	ldrb	r3, [r3, #13]
 8000fda:	b21b      	sxth	r3, r3
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	b21a      	sxth	r2, r3
 8000fe0:	4b7f      	ldr	r3, [pc, #508]	@ (80011e0 <main+0x2e0>)
 8000fe2:	801a      	strh	r2, [r3, #0]
    		  	B2 = ((tmprtr2[14] << 8) | tmprtr2[15]);
 8000fe4:	4b77      	ldr	r3, [pc, #476]	@ (80011c4 <main+0x2c4>)
 8000fe6:	7b9b      	ldrb	r3, [r3, #14]
 8000fe8:	021b      	lsls	r3, r3, #8
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	4b75      	ldr	r3, [pc, #468]	@ (80011c4 <main+0x2c4>)
 8000fee:	7bdb      	ldrb	r3, [r3, #15]
 8000ff0:	b21b      	sxth	r3, r3
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b21a      	sxth	r2, r3
 8000ff6:	4b7b      	ldr	r3, [pc, #492]	@ (80011e4 <main+0x2e4>)
 8000ff8:	801a      	strh	r2, [r3, #0]
    		  	MB = ((tmprtr2[16] << 8) | tmprtr2[17]);
 8000ffa:	4b72      	ldr	r3, [pc, #456]	@ (80011c4 <main+0x2c4>)
 8000ffc:	7c1b      	ldrb	r3, [r3, #16]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b70      	ldr	r3, [pc, #448]	@ (80011c4 <main+0x2c4>)
 8001004:	7c5b      	ldrb	r3, [r3, #17]
 8001006:	b21b      	sxth	r3, r3
 8001008:	4313      	orrs	r3, r2
 800100a:	b21a      	sxth	r2, r3
 800100c:	4b76      	ldr	r3, [pc, #472]	@ (80011e8 <main+0x2e8>)
 800100e:	801a      	strh	r2, [r3, #0]
    		  	MC = ((tmprtr2[18] << 8) | tmprtr2[19]);
 8001010:	4b6c      	ldr	r3, [pc, #432]	@ (80011c4 <main+0x2c4>)
 8001012:	7c9b      	ldrb	r3, [r3, #18]
 8001014:	021b      	lsls	r3, r3, #8
 8001016:	b21a      	sxth	r2, r3
 8001018:	4b6a      	ldr	r3, [pc, #424]	@ (80011c4 <main+0x2c4>)
 800101a:	7cdb      	ldrb	r3, [r3, #19]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21a      	sxth	r2, r3
 8001022:	4b72      	ldr	r3, [pc, #456]	@ (80011ec <main+0x2ec>)
 8001024:	801a      	strh	r2, [r3, #0]
    		  	MD = ((tmprtr2[20] << 8) | tmprtr2[21]);
 8001026:	4b67      	ldr	r3, [pc, #412]	@ (80011c4 <main+0x2c4>)
 8001028:	7d1b      	ldrb	r3, [r3, #20]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	4b65      	ldr	r3, [pc, #404]	@ (80011c4 <main+0x2c4>)
 8001030:	7d5b      	ldrb	r3, [r3, #21]
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	b21a      	sxth	r2, r3
 8001038:	4b6d      	ldr	r3, [pc, #436]	@ (80011f0 <main+0x2f0>)
 800103a:	801a      	strh	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	while(1)
  {
  			HAL_I2C_Mem_Write(&hi2c1, 0xEF, 0xF4, 1, &datatowrite, 1, 100);
 800103c:	2364      	movs	r3, #100	@ 0x64
 800103e:	9302      	str	r3, [sp, #8]
 8001040:	2301      	movs	r3, #1
 8001042:	9301      	str	r3, [sp, #4]
 8001044:	4b6b      	ldr	r3, [pc, #428]	@ (80011f4 <main+0x2f4>)
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	2301      	movs	r3, #1
 800104a:	22f4      	movs	r2, #244	@ 0xf4
 800104c:	21ef      	movs	r1, #239	@ 0xef
 800104e:	485b      	ldr	r0, [pc, #364]	@ (80011bc <main+0x2bc>)
 8001050:	f001 fa68 	bl	8002524 <HAL_I2C_Mem_Write>
  			HAL_Delay (5);
 8001054:	2005      	movs	r0, #5
 8001056:	f000 fe69 	bl	8001d2c <HAL_Delay>
  		  	HAL_I2C_Mem_Read(&hi2c1,0XEF, 0XF6,1,&temprtr1,2,100);
 800105a:	2364      	movs	r3, #100	@ 0x64
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2302      	movs	r3, #2
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	4b65      	ldr	r3, [pc, #404]	@ (80011f8 <main+0x2f8>)
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2301      	movs	r3, #1
 8001068:	22f6      	movs	r2, #246	@ 0xf6
 800106a:	21ef      	movs	r1, #239	@ 0xef
 800106c:	4853      	ldr	r0, [pc, #332]	@ (80011bc <main+0x2bc>)
 800106e:	f001 fb53 	bl	8002718 <HAL_I2C_Mem_Read>
  		  	//callibstart 0xAA




  		  	UT = ((temprtr1[0]<<8) + temprtr1[1]);
 8001072:	4b61      	ldr	r3, [pc, #388]	@ (80011f8 <main+0x2f8>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	4a5f      	ldr	r2, [pc, #380]	@ (80011f8 <main+0x2f8>)
 800107a:	7852      	ldrb	r2, [r2, #1]
 800107c:	4413      	add	r3, r2
 800107e:	4a5f      	ldr	r2, [pc, #380]	@ (80011fc <main+0x2fc>)
 8001080:	6013      	str	r3, [r2, #0]
  		  	HAL_Delay(5);
 8001082:	2005      	movs	r0, #5
 8001084:	f000 fe52 	bl	8001d2c <HAL_Delay>

  		  	HAL_I2C_Mem_Write(&hi2c1, 0xEF, 0XF4, 1, &datatowriteBP, 1, 100);
 8001088:	2364      	movs	r3, #100	@ 0x64
 800108a:	9302      	str	r3, [sp, #8]
 800108c:	2301      	movs	r3, #1
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	4b5b      	ldr	r3, [pc, #364]	@ (8001200 <main+0x300>)
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2301      	movs	r3, #1
 8001096:	22f4      	movs	r2, #244	@ 0xf4
 8001098:	21ef      	movs	r1, #239	@ 0xef
 800109a:	4848      	ldr	r0, [pc, #288]	@ (80011bc <main+0x2bc>)
 800109c:	f001 fa42 	bl	8002524 <HAL_I2C_Mem_Write>
  		  	HAL_Delay (5);
 80010a0:	2005      	movs	r0, #5
 80010a2:	f000 fe43 	bl	8001d2c <HAL_Delay>
  		  	HAL_I2C_Mem_Read(&hi2c1, 0xEF,0xF6 , 1, &BP1, 3, 100);//F6/F7/F8
 80010a6:	2364      	movs	r3, #100	@ 0x64
 80010a8:	9302      	str	r3, [sp, #8]
 80010aa:	2303      	movs	r3, #3
 80010ac:	9301      	str	r3, [sp, #4]
 80010ae:	4b55      	ldr	r3, [pc, #340]	@ (8001204 <main+0x304>)
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2301      	movs	r3, #1
 80010b4:	22f6      	movs	r2, #246	@ 0xf6
 80010b6:	21ef      	movs	r1, #239	@ 0xef
 80010b8:	4840      	ldr	r0, [pc, #256]	@ (80011bc <main+0x2bc>)
 80010ba:	f001 fb2d 	bl	8002718 <HAL_I2C_Mem_Read>
  		  	HAL_Delay (8);
 80010be:	2008      	movs	r0, #8
 80010c0:	f000 fe34 	bl	8001d2c <HAL_Delay>
  		  	UP=((BP1[0]<<16)+(BP1[1]<<8)+BP1[2])>>(8-1);
 80010c4:	4b4f      	ldr	r3, [pc, #316]	@ (8001204 <main+0x304>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001204 <main+0x304>)
 80010cc:	785b      	ldrb	r3, [r3, #1]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	4413      	add	r3, r2
 80010d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001204 <main+0x304>)
 80010d4:	7892      	ldrb	r2, [r2, #2]
 80010d6:	4413      	add	r3, r2
 80010d8:	11db      	asrs	r3, r3, #7
 80010da:	4a4b      	ldr	r2, [pc, #300]	@ (8001208 <main+0x308>)
 80010dc:	6013      	str	r3, [r2, #0]

  		  	X1 = ((UT-AC6)*AC5)/pow(2,15);
 80010de:	4b47      	ldr	r3, [pc, #284]	@ (80011fc <main+0x2fc>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a3e      	ldr	r2, [pc, #248]	@ (80011dc <main+0x2dc>)
 80010e4:	8812      	ldrh	r2, [r2, #0]
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	4a3b      	ldr	r2, [pc, #236]	@ (80011d8 <main+0x2d8>)
 80010ea:	8812      	ldrh	r2, [r2, #0]
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f9db 	bl	80004ac <__aeabi_i2d>
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	4b44      	ldr	r3, [pc, #272]	@ (800120c <main+0x30c>)
 80010fc:	f7ff fb6a 	bl	80007d4 <__aeabi_ddiv>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f7ff fcea 	bl	8000ae0 <__aeabi_d2iz>
 800110c:	4603      	mov	r3, r0
 800110e:	4a40      	ldr	r2, [pc, #256]	@ (8001210 <main+0x310>)
 8001110:	6013      	str	r3, [r2, #0]
  		  	X2=MC*pow(2,11)/(X1+MD);
 8001112:	4b36      	ldr	r3, [pc, #216]	@ (80011ec <main+0x2ec>)
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f9c7 	bl	80004ac <__aeabi_i2d>
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <main+0x314>)
 8001124:	f7ff fa2c 	bl	8000580 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4614      	mov	r4, r2
 800112e:	461d      	mov	r5, r3
 8001130:	4b2f      	ldr	r3, [pc, #188]	@ (80011f0 <main+0x2f0>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	461a      	mov	r2, r3
 8001138:	4b35      	ldr	r3, [pc, #212]	@ (8001210 <main+0x310>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4413      	add	r3, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9b4 	bl	80004ac <__aeabi_i2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	f7ff fb42 	bl	80007d4 <__aeabi_ddiv>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4610      	mov	r0, r2
 8001156:	4619      	mov	r1, r3
 8001158:	f7ff fcc2 	bl	8000ae0 <__aeabi_d2iz>
 800115c:	4603      	mov	r3, r0
 800115e:	4a2e      	ldr	r2, [pc, #184]	@ (8001218 <main+0x318>)
 8001160:	6013      	str	r3, [r2, #0]
  		  	B5=X1+X2;
 8001162:	4b2b      	ldr	r3, [pc, #172]	@ (8001210 <main+0x310>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <main+0x318>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4413      	add	r3, r2
 800116c:	4a2b      	ldr	r2, [pc, #172]	@ (800121c <main+0x31c>)
 800116e:	6013      	str	r3, [r2, #0]
  		  	T=(B5+8)/pow(2,4)/10;
 8001170:	4b2a      	ldr	r3, [pc, #168]	@ (800121c <main+0x31c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	3308      	adds	r3, #8
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f998 	bl	80004ac <__aeabi_i2d>
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <main+0x320>)
 8001182:	f7ff fb27 	bl	80007d4 <__aeabi_ddiv>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4610      	mov	r0, r2
 800118c:	4619      	mov	r1, r3
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <main+0x324>)
 8001194:	f7ff fb1e 	bl	80007d4 <__aeabi_ddiv>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f7ff fc9e 	bl	8000ae0 <__aeabi_d2iz>
 80011a4:	4603      	mov	r3, r0
 80011a6:	4a20      	ldr	r2, [pc, #128]	@ (8001228 <main+0x328>)
 80011a8:	6013      	str	r3, [r2, #0]
  		  	HAL_Delay(5);
 80011aa:	2005      	movs	r0, #5
 80011ac:	f000 fdbe 	bl	8001d2c <HAL_Delay>
  		  	B6 = B5-4000;
 80011b0:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <main+0x31c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 80011b8:	e038      	b.n	800122c <main+0x32c>
 80011ba:	bf00      	nop
 80011bc:	2000009c 	.word	0x2000009c
 80011c0:	20000002 	.word	0x20000002
 80011c4:	2000013c 	.word	0x2000013c
 80011c8:	20000152 	.word	0x20000152
 80011cc:	20000154 	.word	0x20000154
 80011d0:	20000156 	.word	0x20000156
 80011d4:	20000158 	.word	0x20000158
 80011d8:	2000015a 	.word	0x2000015a
 80011dc:	2000015c 	.word	0x2000015c
 80011e0:	2000015e 	.word	0x2000015e
 80011e4:	20000160 	.word	0x20000160
 80011e8:	20000162 	.word	0x20000162
 80011ec:	20000164 	.word	0x20000164
 80011f0:	20000166 	.word	0x20000166
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000138 	.word	0x20000138
 80011fc:	20000168 	.word	0x20000168
 8001200:	20000004 	.word	0x20000004
 8001204:	2000016c 	.word	0x2000016c
 8001208:	20000170 	.word	0x20000170
 800120c:	40e00000 	.word	0x40e00000
 8001210:	20000174 	.word	0x20000174
 8001214:	40a00000 	.word	0x40a00000
 8001218:	20000178 	.word	0x20000178
 800121c:	2000017c 	.word	0x2000017c
 8001220:	40300000 	.word	0x40300000
 8001224:	40240000 	.word	0x40240000
 8001228:	20000180 	.word	0x20000180
 800122c:	4a7b      	ldr	r2, [pc, #492]	@ (800141c <main+0x51c>)
 800122e:	6013      	str	r3, [r2, #0]
  		  	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001230:	4b7b      	ldr	r3, [pc, #492]	@ (8001420 <main+0x520>)
 8001232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f938 	bl	80004ac <__aeabi_i2d>
 800123c:	4604      	mov	r4, r0
 800123e:	460d      	mov	r5, r1
 8001240:	4b76      	ldr	r3, [pc, #472]	@ (800141c <main+0x51c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a75      	ldr	r2, [pc, #468]	@ (800141c <main+0x51c>)
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	fb02 f303 	mul.w	r3, r2, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f92d 	bl	80004ac <__aeabi_i2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b73      	ldr	r3, [pc, #460]	@ (8001424 <main+0x524>)
 8001258:	f7ff fabc 	bl	80007d4 <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4620      	mov	r0, r4
 8001262:	4629      	mov	r1, r5
 8001264:	f7ff f98c 	bl	8000580 <__aeabi_dmul>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f04f 0200 	mov.w	r2, #0
 8001274:	4b6c      	ldr	r3, [pc, #432]	@ (8001428 <main+0x528>)
 8001276:	f7ff faad 	bl	80007d4 <__aeabi_ddiv>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4610      	mov	r0, r2
 8001280:	4619      	mov	r1, r3
 8001282:	f7ff fc2d 	bl	8000ae0 <__aeabi_d2iz>
 8001286:	4603      	mov	r3, r0
 8001288:	4a68      	ldr	r2, [pc, #416]	@ (800142c <main+0x52c>)
 800128a:	6013      	str	r3, [r2, #0]
  		  	X2 = AC2*B6/(pow(2,11));
 800128c:	4b68      	ldr	r3, [pc, #416]	@ (8001430 <main+0x530>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	461a      	mov	r2, r3
 8001294:	4b61      	ldr	r3, [pc, #388]	@ (800141c <main+0x51c>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	fb02 f303 	mul.w	r3, r2, r3
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f905 	bl	80004ac <__aeabi_i2d>
 80012a2:	f04f 0200 	mov.w	r2, #0
 80012a6:	4b60      	ldr	r3, [pc, #384]	@ (8001428 <main+0x528>)
 80012a8:	f7ff fa94 	bl	80007d4 <__aeabi_ddiv>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fc14 	bl	8000ae0 <__aeabi_d2iz>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a5e      	ldr	r2, [pc, #376]	@ (8001434 <main+0x534>)
 80012bc:	6013      	str	r3, [r2, #0]
  		  	X3 = X1+X2;
 80012be:	4b5b      	ldr	r3, [pc, #364]	@ (800142c <main+0x52c>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001434 <main+0x534>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a5b      	ldr	r2, [pc, #364]	@ (8001438 <main+0x538>)
 80012ca:	6013      	str	r3, [r2, #0]
  		  	B3 = (((AC1*4+X3)<<1)+2)/4;
 80012cc:	4b5b      	ldr	r3, [pc, #364]	@ (800143c <main+0x53c>)
 80012ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d2:	009a      	lsls	r2, r3, #2
 80012d4:	4b58      	ldr	r3, [pc, #352]	@ (8001438 <main+0x538>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	3302      	adds	r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	da00      	bge.n	80012e4 <main+0x3e4>
 80012e2:	3303      	adds	r3, #3
 80012e4:	109b      	asrs	r3, r3, #2
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b55      	ldr	r3, [pc, #340]	@ (8001440 <main+0x540>)
 80012ea:	601a      	str	r2, [r3, #0]
  		  	X1 = AC3*B6/pow(2,13);
 80012ec:	4b55      	ldr	r3, [pc, #340]	@ (8001444 <main+0x544>)
 80012ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b49      	ldr	r3, [pc, #292]	@ (800141c <main+0x51c>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	fb02 f303 	mul.w	r3, r2, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f8d5 	bl	80004ac <__aeabi_i2d>
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b50      	ldr	r3, [pc, #320]	@ (8001448 <main+0x548>)
 8001308:	f7ff fa64 	bl	80007d4 <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f7ff fbe4 	bl	8000ae0 <__aeabi_d2iz>
 8001318:	4603      	mov	r3, r0
 800131a:	4a44      	ldr	r2, [pc, #272]	@ (800142c <main+0x52c>)
 800131c:	6013      	str	r3, [r2, #0]
  		  	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 800131e:	4b4b      	ldr	r3, [pc, #300]	@ (800144c <main+0x54c>)
 8001320:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8c1 	bl	80004ac <__aeabi_i2d>
 800132a:	4604      	mov	r4, r0
 800132c:	460d      	mov	r5, r1
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <main+0x51c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a3a      	ldr	r2, [pc, #232]	@ (800141c <main+0x51c>)
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff f8b6 	bl	80004ac <__aeabi_i2d>
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <main+0x524>)
 8001346:	f7ff fa45 	bl	80007d4 <__aeabi_ddiv>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7ff f915 	bl	8000580 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b3b      	ldr	r3, [pc, #236]	@ (8001450 <main+0x550>)
 8001364:	f7ff fa36 	bl	80007d4 <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fbb6 	bl	8000ae0 <__aeabi_d2iz>
 8001374:	4603      	mov	r3, r0
 8001376:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <main+0x534>)
 8001378:	6013      	str	r3, [r2, #0]
  		  	X3 = ((X1+X2)+2)/pow(2,2);
 800137a:	4b2c      	ldr	r3, [pc, #176]	@ (800142c <main+0x52c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <main+0x534>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	3302      	adds	r3, #2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff f890 	bl	80004ac <__aeabi_i2d>
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b30      	ldr	r3, [pc, #192]	@ (8001454 <main+0x554>)
 8001392:	f7ff fa1f 	bl	80007d4 <__aeabi_ddiv>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f7ff fb9f 	bl	8000ae0 <__aeabi_d2iz>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4a24      	ldr	r2, [pc, #144]	@ (8001438 <main+0x538>)
 80013a6:	6013      	str	r3, [r2, #0]
  		  	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 80013a8:	4b2b      	ldr	r3, [pc, #172]	@ (8001458 <main+0x558>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <main+0x538>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f866 	bl	800048c <__aeabi_ui2d>
 80013c0:	f04f 0200 	mov.w	r2, #0
 80013c4:	4b25      	ldr	r3, [pc, #148]	@ (800145c <main+0x55c>)
 80013c6:	f7ff fa05 	bl	80007d4 <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fbad 	bl	8000b30 <__aeabi_d2uiz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	4a21      	ldr	r2, [pc, #132]	@ (8001460 <main+0x560>)
 80013da:	6013      	str	r3, [r2, #0]
  		  	B7 = ((unsigned long)UP-B3)*(50000>>1);
 80013dc:	4b21      	ldr	r3, [pc, #132]	@ (8001464 <main+0x564>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <main+0x540>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <main+0x568>)
 80013f2:	6013      	str	r3, [r2, #0]
  		  	if (B7<0x80000000){p = (B7*2)/B4;}
 80013f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <main+0x568>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db39      	blt.n	8001470 <main+0x570>
 80013fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001468 <main+0x568>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	005a      	lsls	r2, r3, #1
 8001402:	4b17      	ldr	r3, [pc, #92]	@ (8001460 <main+0x560>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	fbb2 f3f3 	udiv	r3, r2, r3
 800140a:	ee07 3a90 	vmov	s15, r3
 800140e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001412:	4b16      	ldr	r3, [pc, #88]	@ (800146c <main+0x56c>)
 8001414:	edc3 7a00 	vstr	s15, [r3]
 8001418:	e038      	b.n	800148c <main+0x58c>
 800141a:	bf00      	nop
 800141c:	20000184 	.word	0x20000184
 8001420:	20000160 	.word	0x20000160
 8001424:	40b00000 	.word	0x40b00000
 8001428:	40a00000 	.word	0x40a00000
 800142c:	20000174 	.word	0x20000174
 8001430:	20000154 	.word	0x20000154
 8001434:	20000178 	.word	0x20000178
 8001438:	20000188 	.word	0x20000188
 800143c:	20000152 	.word	0x20000152
 8001440:	2000018c 	.word	0x2000018c
 8001444:	20000156 	.word	0x20000156
 8001448:	40c00000 	.word	0x40c00000
 800144c:	2000015e 	.word	0x2000015e
 8001450:	40f00000 	.word	0x40f00000
 8001454:	40100000 	.word	0x40100000
 8001458:	20000158 	.word	0x20000158
 800145c:	40e00000 	.word	0x40e00000
 8001460:	20000190 	.word	0x20000190
 8001464:	20000170 	.word	0x20000170
 8001468:	20000194 	.word	0x20000194
 800146c:	20000198 	.word	0x20000198
  		  		else p = (B7/B4)*2;
 8001470:	4b67      	ldr	r3, [pc, #412]	@ (8001610 <main+0x710>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	4b67      	ldr	r3, [pc, #412]	@ (8001614 <main+0x714>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fbb2 f3f3 	udiv	r3, r2, r3
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	ee07 3a90 	vmov	s15, r3
 8001482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001486:	4b64      	ldr	r3, [pc, #400]	@ (8001618 <main+0x718>)
 8001488:	edc3 7a00 	vstr	s15, [r3]
  		  	HAL_Delay(5);
 800148c:	2005      	movs	r0, #5
 800148e:	f000 fc4d 	bl	8001d2c <HAL_Delay>
  		  	X1=(p/(pow(2,8))*p/(pow(2,8)));
 8001492:	4b61      	ldr	r3, [pc, #388]	@ (8001618 <main+0x718>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f81a 	bl	80004d0 <__aeabi_f2d>
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	4b5e      	ldr	r3, [pc, #376]	@ (800161c <main+0x71c>)
 80014a2:	f7ff f997 	bl	80007d4 <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4614      	mov	r4, r2
 80014ac:	461d      	mov	r5, r3
 80014ae:	4b5a      	ldr	r3, [pc, #360]	@ (8001618 <main+0x718>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff f80c 	bl	80004d0 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4620      	mov	r0, r4
 80014be:	4629      	mov	r1, r5
 80014c0:	f7ff f85e 	bl	8000580 <__aeabi_dmul>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	4b52      	ldr	r3, [pc, #328]	@ (800161c <main+0x71c>)
 80014d2:	f7ff f97f 	bl	80007d4 <__aeabi_ddiv>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f7ff faff 	bl	8000ae0 <__aeabi_d2iz>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001620 <main+0x720>)
 80014e6:	6013      	str	r3, [r2, #0]
  		  	X1=X1*3038/pow(2,16);
 80014e8:	4b4d      	ldr	r3, [pc, #308]	@ (8001620 <main+0x720>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f640 32de 	movw	r2, #3038	@ 0xbde
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7fe ffd9 	bl	80004ac <__aeabi_i2d>
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	4b49      	ldr	r3, [pc, #292]	@ (8001624 <main+0x724>)
 8001500:	f7ff f968 	bl	80007d4 <__aeabi_ddiv>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fae8 	bl	8000ae0 <__aeabi_d2iz>
 8001510:	4603      	mov	r3, r0
 8001512:	4a43      	ldr	r2, [pc, #268]	@ (8001620 <main+0x720>)
 8001514:	6013      	str	r3, [r2, #0]
  		  	X2=(-7357*p)/pow(2,16);
 8001516:	4b40      	ldr	r3, [pc, #256]	@ (8001618 <main+0x718>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001628 <main+0x728>
 8001520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001524:	ee17 0a90 	vmov	r0, s15
 8001528:	f7fe ffd2 	bl	80004d0 <__aeabi_f2d>
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b3c      	ldr	r3, [pc, #240]	@ (8001624 <main+0x724>)
 8001532:	f7ff f94f 	bl	80007d4 <__aeabi_ddiv>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff facf 	bl	8000ae0 <__aeabi_d2iz>
 8001542:	4603      	mov	r3, r0
 8001544:	4a39      	ldr	r2, [pc, #228]	@ (800162c <main+0x72c>)
 8001546:	6013      	str	r3, [r2, #0]
  		  	HAL_Delay(5);
 8001548:	2005      	movs	r0, #5
 800154a:	f000 fbef 	bl	8001d2c <HAL_Delay>
  		  	p=p+((X1+X2+3791)/pow(2,4));
 800154e:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <main+0x718>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4618      	mov	r0, r3
 8001554:	f7fe ffbc 	bl	80004d0 <__aeabi_f2d>
 8001558:	4604      	mov	r4, r0
 800155a:	460d      	mov	r5, r1
 800155c:	4b30      	ldr	r3, [pc, #192]	@ (8001620 <main+0x720>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b32      	ldr	r3, [pc, #200]	@ (800162c <main+0x72c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4413      	add	r3, r2
 8001566:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe ff9e 	bl	80004ac <__aeabi_i2d>
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	4b2e      	ldr	r3, [pc, #184]	@ (8001630 <main+0x730>)
 8001576:	f7ff f92d 	bl	80007d4 <__aeabi_ddiv>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4620      	mov	r0, r4
 8001580:	4629      	mov	r1, r5
 8001582:	f7fe fe47 	bl	8000214 <__adddf3>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff faef 	bl	8000b70 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	4a20      	ldr	r2, [pc, #128]	@ (8001618 <main+0x718>)
 8001596:	6013      	str	r3, [r2, #0]
  		  	p1=p/101325;
 8001598:	4b1f      	ldr	r3, [pc, #124]	@ (8001618 <main+0x718>)
 800159a:	ed93 7a00 	vldr	s14, [r3]
 800159e:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001634 <main+0x734>
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	4b24      	ldr	r3, [pc, #144]	@ (8001638 <main+0x738>)
 80015a8:	edc3 7a00 	vstr	s15, [r3]
  		  	HAL_Delay(5);
 80015ac:	2005      	movs	r0, #5
 80015ae:	f000 fbbd 	bl	8001d2c <HAL_Delay>
  		  	k=pow(p1,0.19029);
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <main+0x738>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff8a 	bl	80004d0 <__aeabi_f2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8001608 <main+0x708>
 80015c4:	ec43 2b10 	vmov	d0, r2, r3
 80015c8:	f003 fcf0 	bl	8004fac <pow>
 80015cc:	ec53 2b10 	vmov	r2, r3, d0
 80015d0:	4610      	mov	r0, r2
 80015d2:	4619      	mov	r1, r3
 80015d4:	f7ff facc 	bl	8000b70 <__aeabi_d2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a18      	ldr	r2, [pc, #96]	@ (800163c <main+0x73c>)
 80015dc:	6013      	str	r3, [r2, #0]
  		  	altitude=44330*(1-k);
 80015de:	4b17      	ldr	r3, [pc, #92]	@ (800163c <main+0x73c>)
 80015e0:	edd3 7a00 	vldr	s15, [r3]
 80015e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80015e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ec:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001640 <main+0x740>
 80015f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f8:	ee17 2a90 	vmov	r2, s15
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <main+0x744>)
 80015fe:	601a      	str	r2, [r3, #0]
  		  	printf("z");
 8001600:	207a      	movs	r0, #122	@ 0x7a
 8001602:	f003 f90b 	bl	800481c <putchar>
  {
 8001606:	e519      	b.n	800103c <main+0x13c>
 8001608:	3760bf5d 	.word	0x3760bf5d
 800160c:	3fc85b6c 	.word	0x3fc85b6c
 8001610:	20000194 	.word	0x20000194
 8001614:	20000190 	.word	0x20000190
 8001618:	20000198 	.word	0x20000198
 800161c:	40700000 	.word	0x40700000
 8001620:	20000174 	.word	0x20000174
 8001624:	40f00000 	.word	0x40f00000
 8001628:	c5e5e800 	.word	0xc5e5e800
 800162c:	20000178 	.word	0x20000178
 8001630:	40300000 	.word	0x40300000
 8001634:	47c5e680 	.word	0x47c5e680
 8001638:	2000019c 	.word	0x2000019c
 800163c:	200001a4 	.word	0x200001a4
 8001640:	472d2a00 	.word	0x472d2a00
 8001644:	200001a0 	.word	0x200001a0

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	@ 0x50
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 031c 	add.w	r3, r7, #28
 8001652:	2234      	movs	r2, #52	@ 0x34
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f003 f92b 	bl	80048b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <SystemClock_Config+0xd4>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	4a29      	ldr	r2, [pc, #164]	@ (800171c <SystemClock_Config+0xd4>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	@ 0x40
 800167c:	4b27      	ldr	r3, [pc, #156]	@ (800171c <SystemClock_Config+0xd4>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001688:	2300      	movs	r3, #0
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4b24      	ldr	r3, [pc, #144]	@ (8001720 <SystemClock_Config+0xd8>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001694:	4a22      	ldr	r2, [pc, #136]	@ (8001720 <SystemClock_Config+0xd8>)
 8001696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b20      	ldr	r3, [pc, #128]	@ (8001720 <SystemClock_Config+0xd8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a8:	2302      	movs	r3, #2
 80016aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b0:	2310      	movs	r3, #16
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2302      	movs	r3, #2
 80016b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016bc:	2310      	movs	r3, #16
 80016be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016c0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016c6:	2304      	movs	r3, #4
 80016c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016ca:	2302      	movs	r3, #2
 80016cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016ce:	2302      	movs	r3, #2
 80016d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4618      	mov	r0, r3
 80016d8:	f002 fa7c 	bl	8003bd4 <HAL_RCC_OscConfig>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016e2:	f000 f8e5 	bl	80018b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e6:	230f      	movs	r3, #15
 80016e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ea:	2302      	movs	r3, #2
 80016ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016fc:	f107 0308 	add.w	r3, r7, #8
 8001700:	2102      	movs	r1, #2
 8001702:	4618      	mov	r0, r3
 8001704:	f001 ff1c 	bl	8003540 <HAL_RCC_ClockConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800170e:	f000 f8cf 	bl	80018b0 <Error_Handler>
  }
}
 8001712:	bf00      	nop
 8001714:	3750      	adds	r7, #80	@ 0x50
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40007000 	.word	0x40007000

08001724 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_I2C1_Init+0x50>)
 800172a:	4a13      	ldr	r2, [pc, #76]	@ (8001778 <MX_I2C1_Init+0x54>)
 800172c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_I2C1_Init+0x50>)
 8001730:	4a12      	ldr	r2, [pc, #72]	@ (800177c <MX_I2C1_Init+0x58>)
 8001732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_I2C1_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_I2C1_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_I2C1_Init+0x50>)
 8001742:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001746:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <MX_I2C1_Init+0x50>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_I2C1_Init+0x50>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <MX_I2C1_Init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_I2C1_Init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <MX_I2C1_Init+0x50>)
 8001762:	f000 fd9b 	bl	800229c <HAL_I2C_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800176c:	f000 f8a0 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000009c 	.word	0x2000009c
 8001778:	40005400 	.word	0x40005400
 800177c:	000186a0 	.word	0x000186a0

08001780 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <MX_USART2_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_USART2_UART_Init+0x4c>)
 80017b8:	f002 fcaa 	bl	8004110 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f000 f875 	bl	80018b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	200000f0 	.word	0x200000f0
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b08a      	sub	sp, #40	@ 0x28
 80017d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b2d      	ldr	r3, [pc, #180]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a2c      	ldr	r2, [pc, #176]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b2a      	ldr	r3, [pc, #168]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a25      	ldr	r2, [pc, #148]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b23      	ldr	r3, [pc, #140]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a1e      	ldr	r2, [pc, #120]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b1c      	ldr	r3, [pc, #112]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b18      	ldr	r3, [pc, #96]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a17      	ldr	r2, [pc, #92]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <MX_GPIO_Init+0xd0>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	2120      	movs	r1, #32
 800185e:	4812      	ldr	r0, [pc, #72]	@ (80018a8 <MX_GPIO_Init+0xd4>)
 8001860:	f000 fd02 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001864:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800186a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800186e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	4619      	mov	r1, r3
 800187a:	480c      	ldr	r0, [pc, #48]	@ (80018ac <MX_GPIO_Init+0xd8>)
 800187c:	f000 fb60 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001880:	2320      	movs	r3, #32
 8001882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	2301      	movs	r3, #1
 8001886:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <MX_GPIO_Init+0xd4>)
 8001898:	f000 fb52 	bl	8001f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	@ 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020000 	.word	0x40020000
 80018ac:	40020800 	.word	0x40020800

080018b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b8:	bf00      	nop
 80018ba:	e7fd      	b.n	80018b8 <Error_Handler+0x8>

080018bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_MspInit+0x4c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <HAL_MspInit+0x4c>)
 80018cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <HAL_MspInit+0x4c>)
 80018d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <HAL_MspInit+0x4c>)
 80018e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e6:	4a08      	ldr	r2, [pc, #32]	@ (8001908 <HAL_MspInit+0x4c>)
 80018e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <HAL_MspInit+0x4c>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018fa:	2007      	movs	r0, #7
 80018fc:	f000 faec 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800

0800190c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	@ 0x28
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a19      	ldr	r2, [pc, #100]	@ (8001990 <HAL_I2C_MspInit+0x84>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d12b      	bne.n	8001986 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b18      	ldr	r3, [pc, #96]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001936:	4a17      	ldr	r2, [pc, #92]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6313      	str	r3, [r2, #48]	@ 0x30
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = scl_Pin|sda_Pin;
 800194a:	23c0      	movs	r3, #192	@ 0xc0
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194e:	2312      	movs	r3, #18
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800195a:	2304      	movs	r3, #4
 800195c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	480c      	ldr	r0, [pc, #48]	@ (8001998 <HAL_I2C_MspInit+0x8c>)
 8001966:	f000 faeb 	bl	8001f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001972:	4a08      	ldr	r2, [pc, #32]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 8001974:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001978:	6413      	str	r3, [r2, #64]	@ 0x40
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <HAL_I2C_MspInit+0x88>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	@ 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40005400 	.word	0x40005400
 8001994:	40023800 	.word	0x40023800
 8001998:	40020400 	.word	0x40020400

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	@ 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <HAL_UART_MspInit+0x84>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d12b      	bne.n	8001a16 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
 80019c2:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <HAL_UART_MspInit+0x88>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a17      	ldr	r2, [pc, #92]	@ (8001a24 <HAL_UART_MspInit+0x88>)
 80019c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <HAL_UART_MspInit+0x88>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <HAL_UART_MspInit+0x88>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	4a10      	ldr	r2, [pc, #64]	@ (8001a24 <HAL_UART_MspInit+0x88>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <HAL_UART_MspInit+0x88>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	60fb      	str	r3, [r7, #12]
 80019f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019f6:	230c      	movs	r3, #12
 80019f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fa:	2302      	movs	r3, #2
 80019fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a06:	2307      	movs	r3, #7
 8001a08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4805      	ldr	r0, [pc, #20]	@ (8001a28 <HAL_UART_MspInit+0x8c>)
 8001a12:	f000 fa95 	bl	8001f40 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001a16:	bf00      	nop
 8001a18:	3728      	adds	r7, #40	@ 0x28
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40004400 	.word	0x40004400
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020000 	.word	0x40020000

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <NMI_Handler+0x4>

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <MemManage_Handler+0x4>

08001a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 f933 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	60f8      	str	r0, [r7, #12]
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	e00a      	b.n	8001ab2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	1c5a      	adds	r2, r3, #1
 8001aa6:	60ba      	str	r2, [r7, #8]
 8001aa8:	b2ca      	uxtb	r2, r1
 8001aaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	dbf0      	blt.n	8001a9c <_read+0x12>
  }

  return len;
 8001aba:	687b      	ldr	r3, [r7, #4]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
 8001ad4:	e009      	b.n	8001aea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbf1      	blt.n	8001ad6 <_write+0x12>
  }
  return len;
 8001af2:	687b      	ldr	r3, [r7, #4]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_close>:

int _close(int file)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b24:	605a      	str	r2, [r3, #4]
  return 0;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_isatty>:

int _isatty(int file)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b3c:	2301      	movs	r3, #1
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b085      	sub	sp, #20
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b56:	2300      	movs	r3, #0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <_sbrk+0x5c>)
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <_sbrk+0x60>)
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b78:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <_sbrk+0x64>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d102      	bne.n	8001b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <_sbrk+0x64>)
 8001b82:	4a12      	ldr	r2, [pc, #72]	@ (8001bcc <_sbrk+0x68>)
 8001b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d207      	bcs.n	8001ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b94:	f002 fedc 	bl	8004950 <__errno>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	e009      	b.n	8001bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <_sbrk+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001baa:	4b07      	ldr	r3, [pc, #28]	@ (8001bc8 <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	4a05      	ldr	r2, [pc, #20]	@ (8001bc8 <_sbrk+0x64>)
 8001bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20020000 	.word	0x20020000
 8001bc4:	00000400 	.word	0x00000400
 8001bc8:	200001a8 	.word	0x200001a8
 8001bcc:	20000300 	.word	0x20000300

08001bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bf8:	f7ff ffea 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bfc:	480c      	ldr	r0, [pc, #48]	@ (8001c30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bfe:	490d      	ldr	r1, [pc, #52]	@ (8001c34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c00:	4a0d      	ldr	r2, [pc, #52]	@ (8001c38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c14:	4c0a      	ldr	r4, [pc, #40]	@ (8001c40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f002 fe9b 	bl	800495c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c26:	f7ff f96b 	bl	8000f00 <main>
  bx  lr    
 8001c2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c38:	08005ee0 	.word	0x08005ee0
  ldr r2, =_sbss
 8001c3c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c40:	200002fc 	.word	0x200002fc

08001c44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC_IRQHandler>
	...

08001c48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a0d      	ldr	r2, [pc, #52]	@ (8001c88 <HAL_Init+0x40>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c58:	4b0b      	ldr	r3, [pc, #44]	@ (8001c88 <HAL_Init+0x40>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_Init+0x40>)
 8001c5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_Init+0x40>)
 8001c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 f931 	bl	8001ed8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f808 	bl	8001c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7c:	f7ff fe1e 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40023c00 	.word	0x40023c00

08001c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_InitTick+0x54>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_InitTick+0x58>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 f93b 	bl	8001f26 <HAL_SYSTICK_Config>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00e      	b.n	8001cd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2b0f      	cmp	r3, #15
 8001cbe:	d80a      	bhi.n	8001cd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f000 f911 	bl	8001eee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ccc:	4a06      	ldr	r2, [pc, #24]	@ (8001ce8 <HAL_InitTick+0x5c>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000010 	.word	0x20000010
 8001ce8:	2000000c 	.word	0x2000000c

08001cec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_IncTick+0x20>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_IncTick+0x24>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	4a04      	ldr	r2, [pc, #16]	@ (8001d10 <HAL_IncTick+0x24>)
 8001cfe:	6013      	str	r3, [r2, #0]
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	20000010 	.word	0x20000010
 8001d10:	200001ac 	.word	0x200001ac

08001d14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return uwTick;
 8001d18:	4b03      	ldr	r3, [pc, #12]	@ (8001d28 <HAL_GetTick+0x14>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	200001ac 	.word	0x200001ac

08001d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d34:	f7ff ffee 	bl	8001d14 <HAL_GetTick>
 8001d38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d44:	d005      	beq.n	8001d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <HAL_Delay+0x44>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d52:	bf00      	nop
 8001d54:	f7ff ffde 	bl	8001d14 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8f7      	bhi.n	8001d54 <HAL_Delay+0x28>
  {
  }
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000010 	.word	0x20000010

08001d74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d90:	4013      	ands	r3, r2
 8001d92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001da0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001da4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001da6:	4a04      	ldr	r2, [pc, #16]	@ (8001db8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	60d3      	str	r3, [r2, #12]
}
 8001dac:	bf00      	nop
 8001dae:	3714      	adds	r7, #20
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc0:	4b04      	ldr	r3, [pc, #16]	@ (8001dd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	f003 0307 	and.w	r3, r3, #7
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	db0a      	blt.n	8001e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	490c      	ldr	r1, [pc, #48]	@ (8001e24 <__NVIC_SetPriority+0x4c>)
 8001df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df6:	0112      	lsls	r2, r2, #4
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e00:	e00a      	b.n	8001e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4908      	ldr	r1, [pc, #32]	@ (8001e28 <__NVIC_SetPriority+0x50>)
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	3b04      	subs	r3, #4
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	440b      	add	r3, r1
 8001e16:	761a      	strb	r2, [r3, #24]
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000e100 	.word	0xe000e100
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	@ 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f1c3 0307 	rsb	r3, r3, #7
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	bf28      	it	cs
 8001e4a:	2304      	movcs	r3, #4
 8001e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3304      	adds	r3, #4
 8001e52:	2b06      	cmp	r3, #6
 8001e54:	d902      	bls.n	8001e5c <NVIC_EncodePriority+0x30>
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3b03      	subs	r3, #3
 8001e5a:	e000      	b.n	8001e5e <NVIC_EncodePriority+0x32>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	f04f 32ff 	mov.w	r2, #4294967295
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43da      	mvns	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	401a      	ands	r2, r3
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	43d9      	mvns	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	4313      	orrs	r3, r2
         );
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3724      	adds	r7, #36	@ 0x24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ea4:	d301      	bcc.n	8001eaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e00f      	b.n	8001eca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed4 <SysTick_Config+0x40>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001eb8:	f7ff ff8e 	bl	8001dd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec2:	4b04      	ldr	r3, [pc, #16]	@ (8001ed4 <SysTick_Config+0x40>)
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff ff47 	bl	8001d74 <__NVIC_SetPriorityGrouping>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b086      	sub	sp, #24
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	60b9      	str	r1, [r7, #8]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001efc:	2300      	movs	r3, #0
 8001efe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f00:	f7ff ff5c 	bl	8001dbc <__NVIC_GetPriorityGrouping>
 8001f04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	6978      	ldr	r0, [r7, #20]
 8001f0c:	f7ff ff8e 	bl	8001e2c <NVIC_EncodePriority>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f16:	4611      	mov	r1, r2
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff ff5d 	bl	8001dd8 <__NVIC_SetPriority>
}
 8001f1e:	bf00      	nop
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7ff ffb0 	bl	8001e94 <SysTick_Config>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
 8001f5a:	e165      	b.n	8002228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	f040 8154 	bne.w	8002222 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d005      	beq.n	8001f92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d130      	bne.n	8001ff4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	2203      	movs	r2, #3
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fc8:	2201      	movs	r2, #1
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	091b      	lsrs	r3, r3, #4
 8001fde:	f003 0201 	and.w	r2, r3, #1
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d017      	beq.n	8002030 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d123      	bne.n	8002084 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	08da      	lsrs	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	3208      	adds	r2, #8
 8002044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	220f      	movs	r2, #15
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4013      	ands	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	08da      	lsrs	r2, r3, #3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3208      	adds	r2, #8
 800207e:	69b9      	ldr	r1, [r7, #24]
 8002080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	2203      	movs	r2, #3
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0203 	and.w	r2, r3, #3
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 80ae 	beq.w	8002222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60fb      	str	r3, [r7, #12]
 80020ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002240 <HAL_GPIO_Init+0x300>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002240 <HAL_GPIO_Init+0x300>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002240 <HAL_GPIO_Init+0x300>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020e2:	4a58      	ldr	r2, [pc, #352]	@ (8002244 <HAL_GPIO_Init+0x304>)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	3302      	adds	r3, #2
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	220f      	movs	r2, #15
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4f      	ldr	r2, [pc, #316]	@ (8002248 <HAL_GPIO_Init+0x308>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d025      	beq.n	800215a <HAL_GPIO_Init+0x21a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4e      	ldr	r2, [pc, #312]	@ (800224c <HAL_GPIO_Init+0x30c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01f      	beq.n	8002156 <HAL_GPIO_Init+0x216>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4d      	ldr	r2, [pc, #308]	@ (8002250 <HAL_GPIO_Init+0x310>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d019      	beq.n	8002152 <HAL_GPIO_Init+0x212>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4c      	ldr	r2, [pc, #304]	@ (8002254 <HAL_GPIO_Init+0x314>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_GPIO_Init+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4b      	ldr	r2, [pc, #300]	@ (8002258 <HAL_GPIO_Init+0x318>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d00d      	beq.n	800214a <HAL_GPIO_Init+0x20a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a4a      	ldr	r2, [pc, #296]	@ (800225c <HAL_GPIO_Init+0x31c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d007      	beq.n	8002146 <HAL_GPIO_Init+0x206>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a49      	ldr	r2, [pc, #292]	@ (8002260 <HAL_GPIO_Init+0x320>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d101      	bne.n	8002142 <HAL_GPIO_Init+0x202>
 800213e:	2306      	movs	r3, #6
 8002140:	e00c      	b.n	800215c <HAL_GPIO_Init+0x21c>
 8002142:	2307      	movs	r3, #7
 8002144:	e00a      	b.n	800215c <HAL_GPIO_Init+0x21c>
 8002146:	2305      	movs	r3, #5
 8002148:	e008      	b.n	800215c <HAL_GPIO_Init+0x21c>
 800214a:	2304      	movs	r3, #4
 800214c:	e006      	b.n	800215c <HAL_GPIO_Init+0x21c>
 800214e:	2303      	movs	r3, #3
 8002150:	e004      	b.n	800215c <HAL_GPIO_Init+0x21c>
 8002152:	2302      	movs	r3, #2
 8002154:	e002      	b.n	800215c <HAL_GPIO_Init+0x21c>
 8002156:	2301      	movs	r3, #1
 8002158:	e000      	b.n	800215c <HAL_GPIO_Init+0x21c>
 800215a:	2300      	movs	r3, #0
 800215c:	69fa      	ldr	r2, [r7, #28]
 800215e:	f002 0203 	and.w	r2, r2, #3
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	4093      	lsls	r3, r2
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4313      	orrs	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800216c:	4935      	ldr	r1, [pc, #212]	@ (8002244 <HAL_GPIO_Init+0x304>)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800217a:	4b3a      	ldr	r3, [pc, #232]	@ (8002264 <HAL_GPIO_Init+0x324>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	43db      	mvns	r3, r3
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	4013      	ands	r3, r2
 8002188:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800219e:	4a31      	ldr	r2, [pc, #196]	@ (8002264 <HAL_GPIO_Init+0x324>)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a4:	4b2f      	ldr	r3, [pc, #188]	@ (8002264 <HAL_GPIO_Init+0x324>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4013      	ands	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4313      	orrs	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021c8:	4a26      	ldr	r2, [pc, #152]	@ (8002264 <HAL_GPIO_Init+0x324>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021ce:	4b25      	ldr	r3, [pc, #148]	@ (8002264 <HAL_GPIO_Init+0x324>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4013      	ands	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <HAL_GPIO_Init+0x324>)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_GPIO_Init+0x324>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800221c:	4a11      	ldr	r2, [pc, #68]	@ (8002264 <HAL_GPIO_Init+0x324>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3301      	adds	r3, #1
 8002226:	61fb      	str	r3, [r7, #28]
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	f67f ae96 	bls.w	8001f5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	3724      	adds	r7, #36	@ 0x24
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	40023800 	.word	0x40023800
 8002244:	40013800 	.word	0x40013800
 8002248:	40020000 	.word	0x40020000
 800224c:	40020400 	.word	0x40020400
 8002250:	40020800 	.word	0x40020800
 8002254:	40020c00 	.word	0x40020c00
 8002258:	40021000 	.word	0x40021000
 800225c:	40021400 	.word	0x40021400
 8002260:	40021800 	.word	0x40021800
 8002264:	40013c00 	.word	0x40013c00

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002284:	e003      	b.n	800228e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	619a      	str	r2, [r3, #24]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
	...

0800229c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e12b      	b.n	8002506 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fb22 	bl	800190c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	@ 0x24
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002300:	f001 fa10 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8002304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4a81      	ldr	r2, [pc, #516]	@ (8002510 <HAL_I2C_Init+0x274>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d807      	bhi.n	8002320 <HAL_I2C_Init+0x84>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a80      	ldr	r2, [pc, #512]	@ (8002514 <HAL_I2C_Init+0x278>)
 8002314:	4293      	cmp	r3, r2
 8002316:	bf94      	ite	ls
 8002318:	2301      	movls	r3, #1
 800231a:	2300      	movhi	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e006      	b.n	800232e <HAL_I2C_Init+0x92>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4a7d      	ldr	r2, [pc, #500]	@ (8002518 <HAL_I2C_Init+0x27c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	bf94      	ite	ls
 8002328:	2301      	movls	r3, #1
 800232a:	2300      	movhi	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0e7      	b.n	8002506 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	4a78      	ldr	r2, [pc, #480]	@ (800251c <HAL_I2C_Init+0x280>)
 800233a:	fba2 2303 	umull	r2, r3, r2, r3
 800233e:	0c9b      	lsrs	r3, r3, #18
 8002340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	430a      	orrs	r2, r1
 8002354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a6a      	ldr	r2, [pc, #424]	@ (8002510 <HAL_I2C_Init+0x274>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d802      	bhi.n	8002370 <HAL_I2C_Init+0xd4>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	3301      	adds	r3, #1
 800236e:	e009      	b.n	8002384 <HAL_I2C_Init+0xe8>
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	4a69      	ldr	r2, [pc, #420]	@ (8002520 <HAL_I2C_Init+0x284>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	099b      	lsrs	r3, r3, #6
 8002382:	3301      	adds	r3, #1
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	430b      	orrs	r3, r1
 800238a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002396:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	495c      	ldr	r1, [pc, #368]	@ (8002510 <HAL_I2C_Init+0x274>)
 80023a0:	428b      	cmp	r3, r1
 80023a2:	d819      	bhi.n	80023d8 <HAL_I2C_Init+0x13c>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1e59      	subs	r1, r3, #1
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b2:	1c59      	adds	r1, r3, #1
 80023b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023b8:	400b      	ands	r3, r1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00a      	beq.n	80023d4 <HAL_I2C_Init+0x138>
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1e59      	subs	r1, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d2:	e051      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 80023d4:	2304      	movs	r3, #4
 80023d6:	e04f      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d111      	bne.n	8002404 <HAL_I2C_Init+0x168>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	1e58      	subs	r0, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6859      	ldr	r1, [r3, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	440b      	add	r3, r1
 80023ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f2:	3301      	adds	r3, #1
 80023f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	e012      	b.n	800242a <HAL_I2C_Init+0x18e>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e58      	subs	r0, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6859      	ldr	r1, [r3, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	0099      	lsls	r1, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	fbb0 f3f3 	udiv	r3, r0, r3
 800241a:	3301      	adds	r3, #1
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	2b00      	cmp	r3, #0
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Init+0x196>
 800242e:	2301      	movs	r3, #1
 8002430:	e022      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10e      	bne.n	8002458 <HAL_I2C_Init+0x1bc>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1e58      	subs	r0, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	460b      	mov	r3, r1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	440b      	add	r3, r1
 8002448:	fbb0 f3f3 	udiv	r3, r0, r3
 800244c:	3301      	adds	r3, #1
 800244e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002456:	e00f      	b.n	8002478 <HAL_I2C_Init+0x1dc>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1e58      	subs	r0, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6859      	ldr	r1, [r3, #4]
 8002460:	460b      	mov	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	0099      	lsls	r1, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	fbb0 f3f3 	udiv	r3, r0, r3
 800246e:	3301      	adds	r3, #1
 8002470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002474:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	6809      	ldr	r1, [r1, #0]
 800247c:	4313      	orrs	r3, r2
 800247e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69da      	ldr	r2, [r3, #28]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	431a      	orrs	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6911      	ldr	r1, [r2, #16]
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	68d2      	ldr	r2, [r2, #12]
 80024b2:	4311      	orrs	r1, r2
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695a      	ldr	r2, [r3, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	699b      	ldr	r3, [r3, #24]
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	000186a0 	.word	0x000186a0
 8002514:	001e847f 	.word	0x001e847f
 8002518:	003d08ff 	.word	0x003d08ff
 800251c:	431bde83 	.word	0x431bde83
 8002520:	10624dd3 	.word	0x10624dd3

08002524 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b088      	sub	sp, #32
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	4608      	mov	r0, r1
 800252e:	4611      	mov	r1, r2
 8002530:	461a      	mov	r2, r3
 8002532:	4603      	mov	r3, r0
 8002534:	817b      	strh	r3, [r7, #10]
 8002536:	460b      	mov	r3, r1
 8002538:	813b      	strh	r3, [r7, #8]
 800253a:	4613      	mov	r3, r2
 800253c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800253e:	f7ff fbe9 	bl	8001d14 <HAL_GetTick>
 8002542:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b20      	cmp	r3, #32
 800254e:	f040 80d9 	bne.w	8002704 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	2319      	movs	r3, #25
 8002558:	2201      	movs	r2, #1
 800255a:	496d      	ldr	r1, [pc, #436]	@ (8002710 <HAL_I2C_Mem_Write+0x1ec>)
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f000 fdb9 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
 800256a:	e0cc      	b.n	8002706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_I2C_Mem_Write+0x56>
 8002576:	2302      	movs	r3, #2
 8002578:	e0c5      	b.n	8002706 <HAL_I2C_Mem_Write+0x1e2>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b01      	cmp	r3, #1
 800258e:	d007      	beq.n	80025a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80025ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2221      	movs	r2, #33	@ 0x21
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2240      	movs	r2, #64	@ 0x40
 80025bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a3a      	ldr	r2, [r7, #32]
 80025ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80025d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4a4d      	ldr	r2, [pc, #308]	@ (8002714 <HAL_I2C_Mem_Write+0x1f0>)
 80025e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80025e2:	88f8      	ldrh	r0, [r7, #6]
 80025e4:	893a      	ldrh	r2, [r7, #8]
 80025e6:	8979      	ldrh	r1, [r7, #10]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	4603      	mov	r3, r0
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fbf0 	bl	8002dd8 <I2C_RequestMemoryWrite>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d052      	beq.n	80026a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e081      	b.n	8002706 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 fe7e 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d00d      	beq.n	800262e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	2b04      	cmp	r3, #4
 8002618:	d107      	bne.n	800262a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002628:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e06b      	b.n	8002706 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002648:	3b01      	subs	r3, #1
 800264a:	b29a      	uxth	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b04      	cmp	r3, #4
 800266a:	d11b      	bne.n	80026a4 <HAL_I2C_Mem_Write+0x180>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d017      	beq.n	80026a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002678:	781a      	ldrb	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269a:	b29b      	uxth	r3, r3
 800269c:	3b01      	subs	r3, #1
 800269e:	b29a      	uxth	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1aa      	bne.n	8002602 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fe71 	bl	8003398 <I2C_WaitOnBTFFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00d      	beq.n	80026d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d107      	bne.n	80026d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e016      	b.n	8002706 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2220      	movs	r2, #32
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002704:	2302      	movs	r3, #2
  }
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	00100002 	.word	0x00100002
 8002714:	ffff0000 	.word	0xffff0000

08002718 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b08c      	sub	sp, #48	@ 0x30
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	4608      	mov	r0, r1
 8002722:	4611      	mov	r1, r2
 8002724:	461a      	mov	r2, r3
 8002726:	4603      	mov	r3, r0
 8002728:	817b      	strh	r3, [r7, #10]
 800272a:	460b      	mov	r3, r1
 800272c:	813b      	strh	r3, [r7, #8]
 800272e:	4613      	mov	r3, r2
 8002730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002732:	f7ff faef 	bl	8001d14 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b20      	cmp	r3, #32
 8002742:	f040 8214 	bne.w	8002b6e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2319      	movs	r3, #25
 800274c:	2201      	movs	r2, #1
 800274e:	497b      	ldr	r1, [pc, #492]	@ (800293c <HAL_I2C_Mem_Read+0x224>)
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 fcbf 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800275c:	2302      	movs	r3, #2
 800275e:	e207      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_I2C_Mem_Read+0x56>
 800276a:	2302      	movs	r3, #2
 800276c:	e200      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0301 	and.w	r3, r3, #1
 8002780:	2b01      	cmp	r3, #1
 8002782:	d007      	beq.n	8002794 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0201 	orr.w	r2, r2, #1
 8002792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2222      	movs	r2, #34	@ 0x22
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2240      	movs	r2, #64	@ 0x40
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80027c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002940 <HAL_I2C_Mem_Read+0x228>)
 80027d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027d6:	88f8      	ldrh	r0, [r7, #6]
 80027d8:	893a      	ldrh	r2, [r7, #8]
 80027da:	8979      	ldrh	r1, [r7, #10]
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	4603      	mov	r3, r0
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 fb8c 	bl	8002f04 <I2C_RequestMemoryRead>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e1bc      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d113      	bne.n	8002826 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fe:	2300      	movs	r3, #0
 8002800:	623b      	str	r3, [r7, #32]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	623b      	str	r3, [r7, #32]
 8002812:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e190      	b.n	8002b48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800282a:	2b01      	cmp	r3, #1
 800282c:	d11b      	bne.n	8002866 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800283c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800283e:	2300      	movs	r3, #0
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e170      	b.n	8002b48 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286a:	2b02      	cmp	r3, #2
 800286c:	d11b      	bne.n	80028a6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800287c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800288c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	695b      	ldr	r3, [r3, #20]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	61bb      	str	r3, [r7, #24]
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	e150      	b.n	8002b48 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	617b      	str	r3, [r7, #20]
 80028ba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028bc:	e144      	b.n	8002b48 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	f200 80f1 	bhi.w	8002aaa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d123      	bne.n	8002918 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 fda7 	bl	8003428 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e145      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800290c:	b29b      	uxth	r3, r3
 800290e:	3b01      	subs	r3, #1
 8002910:	b29a      	uxth	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002916:	e117      	b.n	8002b48 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800291c:	2b02      	cmp	r3, #2
 800291e:	d14e      	bne.n	80029be <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002926:	2200      	movs	r2, #0
 8002928:	4906      	ldr	r1, [pc, #24]	@ (8002944 <HAL_I2C_Mem_Read+0x22c>)
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 fbd2 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e11a      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
 800293a:	bf00      	nop
 800293c:	00100002 	.word	0x00100002
 8002940:	ffff0000 	.word	0xffff0000
 8002944:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002956:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	691a      	ldr	r2, [r3, #16]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	1c5a      	adds	r2, r3, #1
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	691a      	ldr	r2, [r3, #16]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029bc:	e0c4      	b.n	8002b48 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c4:	2200      	movs	r2, #0
 80029c6:	496c      	ldr	r1, [pc, #432]	@ (8002b78 <HAL_I2C_Mem_Read+0x460>)
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fb83 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0cb      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a20:	2200      	movs	r2, #0
 8002a22:	4955      	ldr	r1, [pc, #340]	@ (8002b78 <HAL_I2C_Mem_Read+0x460>)
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fb55 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e09d      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aa8:	e04e      	b.n	8002b48 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aac:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 fcba 	bl	8003428 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e058      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d124      	bne.n	8002b48 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	d107      	bne.n	8002b16 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b14:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b28:	1c5a      	adds	r2, r3, #1
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3e:	b29b      	uxth	r3, r3
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f47f aeb6 	bne.w	80028be <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e000      	b.n	8002b70 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b6e:	2302      	movs	r3, #2
  }
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3728      	adds	r7, #40	@ 0x28
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	00010004 	.word	0x00010004

08002b7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	@ 0x28
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	603b      	str	r3, [r7, #0]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b8c:	f7ff f8c2 	bl	8001d14 <HAL_GetTick>
 8002b90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	f040 8111 	bne.w	8002dc6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2319      	movs	r3, #25
 8002baa:	2201      	movs	r2, #1
 8002bac:	4988      	ldr	r1, [pc, #544]	@ (8002dd0 <HAL_I2C_IsDeviceReady+0x254>)
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fa90 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e104      	b.n	8002dc8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2C_IsDeviceReady+0x50>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0fd      	b.n	8002dc8 <HAL_I2C_IsDeviceReady+0x24c>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d007      	beq.n	8002bf2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2224      	movs	r2, #36	@ 0x24
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4a70      	ldr	r2, [pc, #448]	@ (8002dd4 <HAL_I2C_IsDeviceReady+0x258>)
 8002c14:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fa4e 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00d      	beq.n	8002c5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c4c:	d103      	bne.n	8002c56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c54:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0b6      	b.n	8002dc8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c5a:	897b      	ldrh	r3, [r7, #10]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	461a      	mov	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff f853 	bl	8001d14 <HAL_GetTick>
 8002c6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	bf0c      	ite	eq
 8002c7e:	2301      	moveq	r3, #1
 8002c80:	2300      	movne	r3, #0
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c9e:	e025      	b.n	8002cec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ca0:	f7ff f838 	bl	8001d14 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d302      	bcc.n	8002cb6 <HAL_I2C_IsDeviceReady+0x13a>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d103      	bne.n	8002cbe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	22a0      	movs	r2, #160	@ 0xa0
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ce2:	bf0c      	ite	eq
 8002ce4:	2301      	moveq	r3, #1
 8002ce6:	2300      	movne	r3, #0
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cf6:	d005      	beq.n	8002d04 <HAL_I2C_IsDeviceReady+0x188>
 8002cf8:	7dfb      	ldrb	r3, [r7, #23]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d102      	bne.n	8002d04 <HAL_I2C_IsDeviceReady+0x188>
 8002cfe:	7dbb      	ldrb	r3, [r7, #22]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0cd      	beq.n	8002ca0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d129      	bne.n	8002d6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695b      	ldr	r3, [r3, #20]
 8002d34:	613b      	str	r3, [r7, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	2319      	movs	r3, #25
 8002d46:	2201      	movs	r2, #1
 8002d48:	4921      	ldr	r1, [pc, #132]	@ (8002dd0 <HAL_I2C_IsDeviceReady+0x254>)
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f000 f9c2 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e036      	b.n	8002dc8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e02c      	b.n	8002dc8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	2319      	movs	r3, #25
 8002d8e:	2201      	movs	r2, #1
 8002d90:	490f      	ldr	r1, [pc, #60]	@ (8002dd0 <HAL_I2C_IsDeviceReady+0x254>)
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f99e 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e012      	b.n	8002dc8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	3301      	adds	r3, #1
 8002da6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	f4ff af32 	bcc.w	8002c16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e000      	b.n	8002dc8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002dc6:	2302      	movs	r3, #2
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	00100002 	.word	0x00100002
 8002dd4:	ffff0000 	.word	0xffff0000

08002dd8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b088      	sub	sp, #32
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	4608      	mov	r0, r1
 8002de2:	4611      	mov	r1, r2
 8002de4:	461a      	mov	r2, r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	817b      	strh	r3, [r7, #10]
 8002dea:	460b      	mov	r3, r1
 8002dec:	813b      	strh	r3, [r7, #8]
 8002dee:	4613      	mov	r3, r2
 8002df0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	6a3b      	ldr	r3, [r7, #32]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f960 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e28:	d103      	bne.n	8002e32 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e05f      	b.n	8002ef6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e36:	897b      	ldrh	r3, [r7, #10]
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e48:	6a3a      	ldr	r2, [r7, #32]
 8002e4a:	492d      	ldr	r1, [pc, #180]	@ (8002f00 <I2C_RequestMemoryWrite+0x128>)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 f9bb 	bl	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e04c      	b.n	8002ef6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e74:	6a39      	ldr	r1, [r7, #32]
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fa46 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00d      	beq.n	8002e9e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d107      	bne.n	8002e9a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e02b      	b.n	8002ef6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ea4:	893b      	ldrh	r3, [r7, #8]
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	611a      	str	r2, [r3, #16]
 8002eae:	e021      	b.n	8002ef4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002eb0:	893b      	ldrh	r3, [r7, #8]
 8002eb2:	0a1b      	lsrs	r3, r3, #8
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ec0:	6a39      	ldr	r1, [r7, #32]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 fa20 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00d      	beq.n	8002eea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	d107      	bne.n	8002ee6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ee4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e005      	b.n	8002ef6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eea:	893b      	ldrh	r3, [r7, #8]
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	00010002 	.word	0x00010002

08002f04 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	4608      	mov	r0, r1
 8002f0e:	4611      	mov	r1, r2
 8002f10:	461a      	mov	r2, r3
 8002f12:	4603      	mov	r3, r0
 8002f14:	817b      	strh	r3, [r7, #10]
 8002f16:	460b      	mov	r3, r1
 8002f18:	813b      	strh	r3, [r7, #8]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f2c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f8c2 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00d      	beq.n	8002f72 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f64:	d103      	bne.n	8002f6e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0aa      	b.n	80030c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f72:	897b      	ldrh	r3, [r7, #10]
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	461a      	mov	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	6a3a      	ldr	r2, [r7, #32]
 8002f86:	4952      	ldr	r1, [pc, #328]	@ (80030d0 <I2C_RequestMemoryRead+0x1cc>)
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f91d 	bl	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d001      	beq.n	8002f98 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e097      	b.n	80030c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb0:	6a39      	ldr	r1, [r7, #32]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f000 f9a8 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00d      	beq.n	8002fda <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	2b04      	cmp	r3, #4
 8002fc4:	d107      	bne.n	8002fd6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e076      	b.n	80030c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fe0:	893b      	ldrh	r3, [r7, #8]
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	e021      	b.n	8003030 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	6a39      	ldr	r1, [r7, #32]
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 f982 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00d      	beq.n	8003026 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	2b04      	cmp	r3, #4
 8003010:	d107      	bne.n	8003022 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003020:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e050      	b.n	80030c8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003026:	893b      	ldrh	r3, [r7, #8]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f967 	bl	8003308 <I2C_WaitOnTXEFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00d      	beq.n	800305c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	2b04      	cmp	r3, #4
 8003046:	d107      	bne.n	8003058 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003056:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e035      	b.n	80030c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800306a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800306c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	2200      	movs	r2, #0
 8003074:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 f82b 	bl	80030d4 <I2C_WaitOnFlagUntilTimeout>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00d      	beq.n	80030a0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800308e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003092:	d103      	bne.n	800309c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e013      	b.n	80030c8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	6a3a      	ldr	r2, [r7, #32]
 80030b4:	4906      	ldr	r1, [pc, #24]	@ (80030d0 <I2C_RequestMemoryRead+0x1cc>)
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 f886 	bl	80031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	00010002 	.word	0x00010002

080030d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	603b      	str	r3, [r7, #0]
 80030e0:	4613      	mov	r3, r2
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e4:	e048      	b.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d044      	beq.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ee:	f7fe fe11 	bl	8001d14 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d302      	bcc.n	8003104 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d139      	bne.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10d      	bne.n	800312a <I2C_WaitOnFlagUntilTimeout+0x56>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	43da      	mvns	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4013      	ands	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	e00c      	b.n	8003144 <I2C_WaitOnFlagUntilTimeout+0x70>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699b      	ldr	r3, [r3, #24]
 8003130:	43da      	mvns	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4013      	ands	r3, r2
 8003136:	b29b      	uxth	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	79fb      	ldrb	r3, [r7, #7]
 8003146:	429a      	cmp	r2, r3
 8003148:	d116      	bne.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2200      	movs	r2, #0
 800314e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003164:	f043 0220 	orr.w	r2, r3, #32
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e023      	b.n	80031c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	0c1b      	lsrs	r3, r3, #16
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d10d      	bne.n	800319e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	43da      	mvns	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	4013      	ands	r3, r2
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf0c      	ite	eq
 8003194:	2301      	moveq	r3, #1
 8003196:	2300      	movne	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	e00c      	b.n	80031b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	699b      	ldr	r3, [r3, #24]
 80031a4:	43da      	mvns	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	4013      	ands	r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	79fb      	ldrb	r3, [r7, #7]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d093      	beq.n	80030e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031d6:	e071      	b.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e6:	d123      	bne.n	8003230 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003200:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800321c:	f043 0204 	orr.w	r2, r3, #4
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e067      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003236:	d041      	beq.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003238:	f7fe fd6c 	bl	8001d14 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d302      	bcc.n	800324e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d136      	bne.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	0c1b      	lsrs	r3, r3, #16
 8003252:	b2db      	uxtb	r3, r3
 8003254:	2b01      	cmp	r3, #1
 8003256:	d10c      	bne.n	8003272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	4013      	ands	r3, r2
 8003264:	b29b      	uxth	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	bf14      	ite	ne
 800326a:	2301      	movne	r3, #1
 800326c:	2300      	moveq	r3, #0
 800326e:	b2db      	uxtb	r3, r3
 8003270:	e00b      	b.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	43da      	mvns	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	4013      	ands	r3, r2
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d016      	beq.n	80032bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e021      	b.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10c      	bne.n	80032e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	43da      	mvns	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4013      	ands	r3, r2
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf14      	ite	ne
 80032d8:	2301      	movne	r3, #1
 80032da:	2300      	moveq	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	e00b      	b.n	80032f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	43da      	mvns	r2, r3
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	4013      	ands	r3, r2
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f47f af6d 	bne.w	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003314:	e034      	b.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f8e3 	bl	80034e2 <I2C_IsAcknowledgeFailed>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e034      	b.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332c:	d028      	beq.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332e:	f7fe fcf1 	bl	8001d14 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d302      	bcc.n	8003344 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11d      	bne.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334e:	2b80      	cmp	r3, #128	@ 0x80
 8003350:	d016      	beq.n	8003380 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2220      	movs	r2, #32
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	f043 0220 	orr.w	r2, r3, #32
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e007      	b.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800338a:	2b80      	cmp	r3, #128	@ 0x80
 800338c:	d1c3      	bne.n	8003316 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a4:	e034      	b.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f89b 	bl	80034e2 <I2C_IsAcknowledgeFailed>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e034      	b.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d028      	beq.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033be:	f7fe fca9 	bl	8001d14 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d302      	bcc.n	80033d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d11d      	bne.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0304 	and.w	r3, r3, #4
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d016      	beq.n	8003410 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	f043 0220 	orr.w	r2, r3, #32
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e007      	b.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695b      	ldr	r3, [r3, #20]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b04      	cmp	r3, #4
 800341c:	d1c3      	bne.n	80033a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003434:	e049      	b.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b10      	cmp	r3, #16
 8003442:	d119      	bne.n	8003478 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0210 	mvn.w	r2, #16
 800344c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e030      	b.n	80034da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003478:	f7fe fc4c 	bl	8001d14 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	68ba      	ldr	r2, [r7, #8]
 8003484:	429a      	cmp	r2, r3
 8003486:	d302      	bcc.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11d      	bne.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003498:	2b40      	cmp	r3, #64	@ 0x40
 800349a:	d016      	beq.n	80034ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	f043 0220 	orr.w	r2, r3, #32
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e007      	b.n	80034da <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d4:	2b40      	cmp	r3, #64	@ 0x40
 80034d6:	d1ae      	bne.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3710      	adds	r7, #16
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034f8:	d11b      	bne.n	8003532 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003502:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	f043 0204 	orr.w	r2, r3, #4
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e000      	b.n	8003534 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe fb70 	bl	8001d14 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe fb6c 	bl	8001d14 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	@ (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f855 	bl	8003774 <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	@ (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	@ (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fad0 	bl	8001c8c <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	08005e88 	.word	0x08005e88
 8003704:	20000008 	.word	0x20000008
 8003708:	2000000c 	.word	0x2000000c

0800370c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b03      	ldr	r3, [pc, #12]	@ (8003720 <HAL_RCC_GetHCLKFreq+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000008 	.word	0x20000008

08003724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003728:	f7ff fff0 	bl	800370c <HAL_RCC_GetHCLKFreq>
 800372c:	4602      	mov	r2, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	@ (8003744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4903      	ldr	r1, [pc, #12]	@ (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373a:	5ccb      	ldrb	r3, [r1, r3]
 800373c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	08005e98 	.word	0x08005e98

0800374c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003750:	f7ff ffdc 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003754:	4602      	mov	r2, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	@ (800376c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4903      	ldr	r1, [pc, #12]	@ (8003770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003762:	5ccb      	ldrb	r3, [r1, r3]
 8003764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	08005e98 	.word	0x08005e98

08003774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003778:	b0ae      	sub	sp, #184	@ 0xb8
 800377a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003794:	2300      	movs	r3, #0
 8003796:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800379a:	4bcb      	ldr	r3, [pc, #812]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b0c      	cmp	r3, #12
 80037a4:	f200 8206 	bhi.w	8003bb4 <HAL_RCC_GetSysClockFreq+0x440>
 80037a8:	a201      	add	r2, pc, #4	@ (adr r2, 80037b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80037aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ae:	bf00      	nop
 80037b0:	080037e5 	.word	0x080037e5
 80037b4:	08003bb5 	.word	0x08003bb5
 80037b8:	08003bb5 	.word	0x08003bb5
 80037bc:	08003bb5 	.word	0x08003bb5
 80037c0:	080037ed 	.word	0x080037ed
 80037c4:	08003bb5 	.word	0x08003bb5
 80037c8:	08003bb5 	.word	0x08003bb5
 80037cc:	08003bb5 	.word	0x08003bb5
 80037d0:	080037f5 	.word	0x080037f5
 80037d4:	08003bb5 	.word	0x08003bb5
 80037d8:	08003bb5 	.word	0x08003bb5
 80037dc:	08003bb5 	.word	0x08003bb5
 80037e0:	080039e5 	.word	0x080039e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037e4:	4bb9      	ldr	r3, [pc, #740]	@ (8003acc <HAL_RCC_GetSysClockFreq+0x358>)
 80037e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037ea:	e1e7      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037ec:	4bb8      	ldr	r3, [pc, #736]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80037ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80037f2:	e1e3      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037f4:	4bb4      	ldr	r3, [pc, #720]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003800:	4bb1      	ldr	r3, [pc, #708]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d071      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800380c:	4bae      	ldr	r3, [pc, #696]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003818:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800381c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003824:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800382e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	f04f 0000 	mov.w	r0, #0
 800383a:	f04f 0100 	mov.w	r1, #0
 800383e:	0159      	lsls	r1, r3, #5
 8003840:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003844:	0150      	lsls	r0, r2, #5
 8003846:	4602      	mov	r2, r0
 8003848:	460b      	mov	r3, r1
 800384a:	4621      	mov	r1, r4
 800384c:	1a51      	subs	r1, r2, r1
 800384e:	6439      	str	r1, [r7, #64]	@ 0x40
 8003850:	4629      	mov	r1, r5
 8003852:	eb63 0301 	sbc.w	r3, r3, r1
 8003856:	647b      	str	r3, [r7, #68]	@ 0x44
 8003858:	f04f 0200 	mov.w	r2, #0
 800385c:	f04f 0300 	mov.w	r3, #0
 8003860:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003864:	4649      	mov	r1, r9
 8003866:	018b      	lsls	r3, r1, #6
 8003868:	4641      	mov	r1, r8
 800386a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800386e:	4641      	mov	r1, r8
 8003870:	018a      	lsls	r2, r1, #6
 8003872:	4641      	mov	r1, r8
 8003874:	1a51      	subs	r1, r2, r1
 8003876:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003878:	4649      	mov	r1, r9
 800387a:	eb63 0301 	sbc.w	r3, r3, r1
 800387e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800388c:	4649      	mov	r1, r9
 800388e:	00cb      	lsls	r3, r1, #3
 8003890:	4641      	mov	r1, r8
 8003892:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003896:	4641      	mov	r1, r8
 8003898:	00ca      	lsls	r2, r1, #3
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	4622      	mov	r2, r4
 80038a2:	189b      	adds	r3, r3, r2
 80038a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038a6:	462b      	mov	r3, r5
 80038a8:	460a      	mov	r2, r1
 80038aa:	eb42 0303 	adc.w	r3, r2, r3
 80038ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038bc:	4629      	mov	r1, r5
 80038be:	024b      	lsls	r3, r1, #9
 80038c0:	4621      	mov	r1, r4
 80038c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038c6:	4621      	mov	r1, r4
 80038c8:	024a      	lsls	r2, r1, #9
 80038ca:	4610      	mov	r0, r2
 80038cc:	4619      	mov	r1, r3
 80038ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80038d2:	2200      	movs	r2, #0
 80038d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80038d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80038dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80038e0:	f7fd f996 	bl	8000c10 <__aeabi_uldivmod>
 80038e4:	4602      	mov	r2, r0
 80038e6:	460b      	mov	r3, r1
 80038e8:	4613      	mov	r3, r2
 80038ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038ee:	e067      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038f0:	4b75      	ldr	r3, [pc, #468]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	099b      	lsrs	r3, r3, #6
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80038fc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003900:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800390a:	2300      	movs	r3, #0
 800390c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800390e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003912:	4622      	mov	r2, r4
 8003914:	462b      	mov	r3, r5
 8003916:	f04f 0000 	mov.w	r0, #0
 800391a:	f04f 0100 	mov.w	r1, #0
 800391e:	0159      	lsls	r1, r3, #5
 8003920:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003924:	0150      	lsls	r0, r2, #5
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4621      	mov	r1, r4
 800392c:	1a51      	subs	r1, r2, r1
 800392e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003930:	4629      	mov	r1, r5
 8003932:	eb63 0301 	sbc.w	r3, r3, r1
 8003936:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003938:	f04f 0200 	mov.w	r2, #0
 800393c:	f04f 0300 	mov.w	r3, #0
 8003940:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003944:	4649      	mov	r1, r9
 8003946:	018b      	lsls	r3, r1, #6
 8003948:	4641      	mov	r1, r8
 800394a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800394e:	4641      	mov	r1, r8
 8003950:	018a      	lsls	r2, r1, #6
 8003952:	4641      	mov	r1, r8
 8003954:	ebb2 0a01 	subs.w	sl, r2, r1
 8003958:	4649      	mov	r1, r9
 800395a:	eb63 0b01 	sbc.w	fp, r3, r1
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	f04f 0300 	mov.w	r3, #0
 8003966:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800396a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800396e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003972:	4692      	mov	sl, r2
 8003974:	469b      	mov	fp, r3
 8003976:	4623      	mov	r3, r4
 8003978:	eb1a 0303 	adds.w	r3, sl, r3
 800397c:	623b      	str	r3, [r7, #32]
 800397e:	462b      	mov	r3, r5
 8003980:	eb4b 0303 	adc.w	r3, fp, r3
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
 8003986:	f04f 0200 	mov.w	r2, #0
 800398a:	f04f 0300 	mov.w	r3, #0
 800398e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003992:	4629      	mov	r1, r5
 8003994:	028b      	lsls	r3, r1, #10
 8003996:	4621      	mov	r1, r4
 8003998:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800399c:	4621      	mov	r1, r4
 800399e:	028a      	lsls	r2, r1, #10
 80039a0:	4610      	mov	r0, r2
 80039a2:	4619      	mov	r1, r3
 80039a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80039a8:	2200      	movs	r2, #0
 80039aa:	673b      	str	r3, [r7, #112]	@ 0x70
 80039ac:	677a      	str	r2, [r7, #116]	@ 0x74
 80039ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80039b2:	f7fd f92d 	bl	8000c10 <__aeabi_uldivmod>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4613      	mov	r3, r2
 80039bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039c0:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	3301      	adds	r3, #1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80039d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80039da:	fbb2 f3f3 	udiv	r3, r2, r3
 80039de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80039e2:	e0eb      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039e4:	4b38      	ldr	r3, [pc, #224]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039f0:	4b35      	ldr	r3, [pc, #212]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d06b      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039fc:	4b32      	ldr	r3, [pc, #200]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x354>)
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	099b      	lsrs	r3, r3, #6
 8003a02:	2200      	movs	r2, #0
 8003a04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a10:	2300      	movs	r3, #0
 8003a12:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a14:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003a18:	4622      	mov	r2, r4
 8003a1a:	462b      	mov	r3, r5
 8003a1c:	f04f 0000 	mov.w	r0, #0
 8003a20:	f04f 0100 	mov.w	r1, #0
 8003a24:	0159      	lsls	r1, r3, #5
 8003a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a2a:	0150      	lsls	r0, r2, #5
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4621      	mov	r1, r4
 8003a32:	1a51      	subs	r1, r2, r1
 8003a34:	61b9      	str	r1, [r7, #24]
 8003a36:	4629      	mov	r1, r5
 8003a38:	eb63 0301 	sbc.w	r3, r3, r1
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	f04f 0200 	mov.w	r2, #0
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003a4a:	4659      	mov	r1, fp
 8003a4c:	018b      	lsls	r3, r1, #6
 8003a4e:	4651      	mov	r1, sl
 8003a50:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a54:	4651      	mov	r1, sl
 8003a56:	018a      	lsls	r2, r1, #6
 8003a58:	4651      	mov	r1, sl
 8003a5a:	ebb2 0801 	subs.w	r8, r2, r1
 8003a5e:	4659      	mov	r1, fp
 8003a60:	eb63 0901 	sbc.w	r9, r3, r1
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a70:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a74:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a78:	4690      	mov	r8, r2
 8003a7a:	4699      	mov	r9, r3
 8003a7c:	4623      	mov	r3, r4
 8003a7e:	eb18 0303 	adds.w	r3, r8, r3
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	462b      	mov	r3, r5
 8003a86:	eb49 0303 	adc.w	r3, r9, r3
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003a98:	4629      	mov	r1, r5
 8003a9a:	024b      	lsls	r3, r1, #9
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	024a      	lsls	r2, r1, #9
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003aae:	2200      	movs	r2, #0
 8003ab0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ab2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ab4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ab8:	f7fd f8aa 	bl	8000c10 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ac6:	e065      	b.n	8003b94 <HAL_RCC_GetSysClockFreq+0x420>
 8003ac8:	40023800 	.word	0x40023800
 8003acc:	00f42400 	.word	0x00f42400
 8003ad0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad4:	4b3d      	ldr	r3, [pc, #244]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x458>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	099b      	lsrs	r3, r3, #6
 8003ada:	2200      	movs	r2, #0
 8003adc:	4618      	mov	r0, r3
 8003ade:	4611      	mov	r1, r2
 8003ae0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ae4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	657b      	str	r3, [r7, #84]	@ 0x54
 8003aea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003aee:	4642      	mov	r2, r8
 8003af0:	464b      	mov	r3, r9
 8003af2:	f04f 0000 	mov.w	r0, #0
 8003af6:	f04f 0100 	mov.w	r1, #0
 8003afa:	0159      	lsls	r1, r3, #5
 8003afc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b00:	0150      	lsls	r0, r2, #5
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4641      	mov	r1, r8
 8003b08:	1a51      	subs	r1, r2, r1
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003b20:	4659      	mov	r1, fp
 8003b22:	018b      	lsls	r3, r1, #6
 8003b24:	4651      	mov	r1, sl
 8003b26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b2a:	4651      	mov	r1, sl
 8003b2c:	018a      	lsls	r2, r1, #6
 8003b2e:	4651      	mov	r1, sl
 8003b30:	1a54      	subs	r4, r2, r1
 8003b32:	4659      	mov	r1, fp
 8003b34:	eb63 0501 	sbc.w	r5, r3, r1
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	00eb      	lsls	r3, r5, #3
 8003b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b46:	00e2      	lsls	r2, r4, #3
 8003b48:	4614      	mov	r4, r2
 8003b4a:	461d      	mov	r5, r3
 8003b4c:	4643      	mov	r3, r8
 8003b4e:	18e3      	adds	r3, r4, r3
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	464b      	mov	r3, r9
 8003b54:	eb45 0303 	adc.w	r3, r5, r3
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	f04f 0200 	mov.w	r2, #0
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b66:	4629      	mov	r1, r5
 8003b68:	028b      	lsls	r3, r1, #10
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b70:	4621      	mov	r1, r4
 8003b72:	028a      	lsls	r2, r1, #10
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b80:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003b82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b86:	f7fd f843 	bl	8000c10 <__aeabi_uldivmod>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4613      	mov	r3, r2
 8003b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b94:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x458>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	0f1b      	lsrs	r3, r3, #28
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003ba6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bb2:	e003      	b.n	8003bbc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb4:	4b06      	ldr	r3, [pc, #24]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003bb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003bba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bbc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	37b8      	adds	r7, #184	@ 0xb8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400

08003bd4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e28d      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 8083 	beq.w	8003cfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003bf4:	4b94      	ldr	r3, [pc, #592]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d019      	beq.n	8003c34 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c00:	4b91      	ldr	r3, [pc, #580]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
        || \
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d106      	bne.n	8003c1a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c0c:	4b8e      	ldr	r3, [pc, #568]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c14:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c18:	d00c      	beq.n	8003c34 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c1a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c22:	2b0c      	cmp	r3, #12
 8003c24:	d112      	bne.n	8003c4c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c26:	4b88      	ldr	r3, [pc, #544]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c32:	d10b      	bne.n	8003c4c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c34:	4b84      	ldr	r3, [pc, #528]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d05b      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x124>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d157      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e25a      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c54:	d106      	bne.n	8003c64 <HAL_RCC_OscConfig+0x90>
 8003c56:	4b7c      	ldr	r3, [pc, #496]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a7b      	ldr	r2, [pc, #492]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	e01d      	b.n	8003ca0 <HAL_RCC_OscConfig+0xcc>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c6c:	d10c      	bne.n	8003c88 <HAL_RCC_OscConfig+0xb4>
 8003c6e:	4b76      	ldr	r3, [pc, #472]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a75      	ldr	r2, [pc, #468]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	4b73      	ldr	r3, [pc, #460]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a72      	ldr	r2, [pc, #456]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	e00b      	b.n	8003ca0 <HAL_RCC_OscConfig+0xcc>
 8003c88:	4b6f      	ldr	r3, [pc, #444]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6e      	ldr	r2, [pc, #440]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4b6c      	ldr	r3, [pc, #432]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a6b      	ldr	r2, [pc, #428]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d013      	beq.n	8003cd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fe f834 	bl	8001d14 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe f830 	bl	8001d14 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	@ 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e21f      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cc2:	4b61      	ldr	r3, [pc, #388]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0xdc>
 8003cce:	e014      	b.n	8003cfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd0:	f7fe f820 	bl	8001d14 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fe f81c 	bl	8001d14 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	@ 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e20b      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cea:	4b57      	ldr	r3, [pc, #348]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x104>
 8003cf6:	e000      	b.n	8003cfa <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d06f      	beq.n	8003de6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d06:	4b50      	ldr	r3, [pc, #320]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d017      	beq.n	8003d42 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d12:	4b4d      	ldr	r3, [pc, #308]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
        || \
 8003d1a:	2b08      	cmp	r3, #8
 8003d1c:	d105      	bne.n	8003d2a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d1e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00b      	beq.n	8003d42 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d2a:	4b47      	ldr	r3, [pc, #284]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d11c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d36:	4b44      	ldr	r3, [pc, #272]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d116      	bne.n	8003d70 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d42:	4b41      	ldr	r3, [pc, #260]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d005      	beq.n	8003d5a <HAL_RCC_OscConfig+0x186>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d001      	beq.n	8003d5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e1d3      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	4937      	ldr	r1, [pc, #220]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d6e:	e03a      	b.n	8003de6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d020      	beq.n	8003dba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d78:	4b34      	ldr	r3, [pc, #208]	@ (8003e4c <HAL_RCC_OscConfig+0x278>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d7e:	f7fd ffc9 	bl	8001d14 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d86:	f7fd ffc5 	bl	8001d14 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e1b4      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	4b2b      	ldr	r3, [pc, #172]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da4:	4b28      	ldr	r3, [pc, #160]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	00db      	lsls	r3, r3, #3
 8003db2:	4925      	ldr	r1, [pc, #148]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
 8003db8:	e015      	b.n	8003de6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dba:	4b24      	ldr	r3, [pc, #144]	@ (8003e4c <HAL_RCC_OscConfig+0x278>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd ffa8 	bl	8001d14 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dc8:	f7fd ffa4 	bl	8001d14 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e193      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dda:	4b1b      	ldr	r3, [pc, #108]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0308 	and.w	r3, r3, #8
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d036      	beq.n	8003e60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d016      	beq.n	8003e28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dfa:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <HAL_RCC_OscConfig+0x27c>)
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e00:	f7fd ff88 	bl	8001d14 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e08:	f7fd ff84 	bl	8001d14 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e173      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0x234>
 8003e26:	e01b      	b.n	8003e60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e28:	4b09      	ldr	r3, [pc, #36]	@ (8003e50 <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e2e:	f7fd ff71 	bl	8001d14 <HAL_GetTick>
 8003e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e34:	e00e      	b.n	8003e54 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e36:	f7fd ff6d 	bl	8001d14 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d907      	bls.n	8003e54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e15c      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	42470000 	.word	0x42470000
 8003e50:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e54:	4b8a      	ldr	r3, [pc, #552]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003e56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ea      	bne.n	8003e36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 8097 	beq.w	8003f9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e72:	4b83      	ldr	r3, [pc, #524]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	4b7f      	ldr	r3, [pc, #508]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e86:	4a7e      	ldr	r2, [pc, #504]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003e88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e96:	60bb      	str	r3, [r7, #8]
 8003e98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9e:	4b79      	ldr	r3, [pc, #484]	@ (8004084 <HAL_RCC_OscConfig+0x4b0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d118      	bne.n	8003edc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eaa:	4b76      	ldr	r3, [pc, #472]	@ (8004084 <HAL_RCC_OscConfig+0x4b0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a75      	ldr	r2, [pc, #468]	@ (8004084 <HAL_RCC_OscConfig+0x4b0>)
 8003eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eb6:	f7fd ff2d 	bl	8001d14 <HAL_GetTick>
 8003eba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebc:	e008      	b.n	8003ed0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ebe:	f7fd ff29 	bl	8001d14 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d901      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e118      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ed0:	4b6c      	ldr	r3, [pc, #432]	@ (8004084 <HAL_RCC_OscConfig+0x4b0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d0f0      	beq.n	8003ebe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d106      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x31e>
 8003ee4:	4b66      	ldr	r3, [pc, #408]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ee8:	4a65      	ldr	r2, [pc, #404]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ef0:	e01c      	b.n	8003f2c <HAL_RCC_OscConfig+0x358>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	2b05      	cmp	r3, #5
 8003ef8:	d10c      	bne.n	8003f14 <HAL_RCC_OscConfig+0x340>
 8003efa:	4b61      	ldr	r3, [pc, #388]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003efc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003efe:	4a60      	ldr	r2, [pc, #384]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f00:	f043 0304 	orr.w	r3, r3, #4
 8003f04:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f06:	4b5e      	ldr	r3, [pc, #376]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0a:	4a5d      	ldr	r2, [pc, #372]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f0c:	f043 0301 	orr.w	r3, r3, #1
 8003f10:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f12:	e00b      	b.n	8003f2c <HAL_RCC_OscConfig+0x358>
 8003f14:	4b5a      	ldr	r3, [pc, #360]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f18:	4a59      	ldr	r2, [pc, #356]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f1a:	f023 0301 	bic.w	r3, r3, #1
 8003f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f20:	4b57      	ldr	r3, [pc, #348]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f24:	4a56      	ldr	r2, [pc, #344]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f26:	f023 0304 	bic.w	r3, r3, #4
 8003f2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d015      	beq.n	8003f60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fd feee 	bl	8001d14 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fd feea 	bl	8001d14 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e0d7      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f52:	4b4b      	ldr	r3, [pc, #300]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0ee      	beq.n	8003f3c <HAL_RCC_OscConfig+0x368>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f60:	f7fd fed8 	bl	8001d14 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f66:	e00a      	b.n	8003f7e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f68:	f7fd fed4 	bl	8001d14 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e0c1      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f7e:	4b40      	ldr	r3, [pc, #256]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ee      	bne.n	8003f68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f90:	4b3b      	ldr	r3, [pc, #236]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f94:	4a3a      	ldr	r2, [pc, #232]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003f96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80ad 	beq.w	8004100 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fa6:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 030c 	and.w	r3, r3, #12
 8003fae:	2b08      	cmp	r3, #8
 8003fb0:	d060      	beq.n	8004074 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d145      	bne.n	8004046 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fba:	4b33      	ldr	r3, [pc, #204]	@ (8004088 <HAL_RCC_OscConfig+0x4b4>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fd fea8 	bl	8001d14 <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fd fea4 	bl	8001d14 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e093      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	4b29      	ldr	r3, [pc, #164]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	69da      	ldr	r2, [r3, #28]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff4:	019b      	lsls	r3, r3, #6
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	085b      	lsrs	r3, r3, #1
 8003ffe:	3b01      	subs	r3, #1
 8004000:	041b      	lsls	r3, r3, #16
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004008:	061b      	lsls	r3, r3, #24
 800400a:	431a      	orrs	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	071b      	lsls	r3, r3, #28
 8004012:	491b      	ldr	r1, [pc, #108]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8004014:	4313      	orrs	r3, r2
 8004016:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004018:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCC_OscConfig+0x4b4>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401e:	f7fd fe79 	bl	8001d14 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004026:	f7fd fe75 	bl	8001d14 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e064      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004038:	4b11      	ldr	r3, [pc, #68]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x452>
 8004044:	e05c      	b.n	8004100 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004046:	4b10      	ldr	r3, [pc, #64]	@ (8004088 <HAL_RCC_OscConfig+0x4b4>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800404c:	f7fd fe62 	bl	8001d14 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004054:	f7fd fe5e 	bl	8001d14 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e04d      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	4b06      	ldr	r3, [pc, #24]	@ (8004080 <HAL_RCC_OscConfig+0x4ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0x480>
 8004072:	e045      	b.n	8004100 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d107      	bne.n	800408c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e040      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
 8004080:	40023800 	.word	0x40023800
 8004084:	40007000 	.word	0x40007000
 8004088:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800408c:	4b1f      	ldr	r3, [pc, #124]	@ (800410c <HAL_RCC_OscConfig+0x538>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d030      	beq.n	80040fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d129      	bne.n	80040fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d122      	bne.n	80040fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80040bc:	4013      	ands	r3, r2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80040c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d119      	bne.n	80040fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	3b01      	subs	r3, #1
 80040d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040d8:	429a      	cmp	r2, r3
 80040da:	d10f      	bne.n	80040fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800

08004110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e042      	b.n	80041a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd fc30 	bl	800199c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2224      	movs	r2, #36	@ 0x24
 8004140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f82b 	bl	80041b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041b4:	b0c0      	sub	sp, #256	@ 0x100
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	68d9      	ldr	r1, [r3, #12]
 80041ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	ea40 0301 	orr.w	r3, r0, r1
 80041d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	431a      	orrs	r2, r3
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	695b      	ldr	r3, [r3, #20]
 80041ee:	431a      	orrs	r2, r3
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004208:	f021 010c 	bic.w	r1, r1, #12
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004216:	430b      	orrs	r3, r1
 8004218:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800421a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422a:	6999      	ldr	r1, [r3, #24]
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	ea40 0301 	orr.w	r3, r0, r1
 8004236:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4b8f      	ldr	r3, [pc, #572]	@ (800447c <UART_SetConfig+0x2cc>)
 8004240:	429a      	cmp	r2, r3
 8004242:	d005      	beq.n	8004250 <UART_SetConfig+0xa0>
 8004244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	4b8d      	ldr	r3, [pc, #564]	@ (8004480 <UART_SetConfig+0x2d0>)
 800424c:	429a      	cmp	r2, r3
 800424e:	d104      	bne.n	800425a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004250:	f7ff fa7c 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8004254:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004258:	e003      	b.n	8004262 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800425a:	f7ff fa63 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 800425e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800426c:	f040 810c 	bne.w	8004488 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004270:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004274:	2200      	movs	r2, #0
 8004276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800427a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800427e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004282:	4622      	mov	r2, r4
 8004284:	462b      	mov	r3, r5
 8004286:	1891      	adds	r1, r2, r2
 8004288:	65b9      	str	r1, [r7, #88]	@ 0x58
 800428a:	415b      	adcs	r3, r3
 800428c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800428e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004292:	4621      	mov	r1, r4
 8004294:	eb12 0801 	adds.w	r8, r2, r1
 8004298:	4629      	mov	r1, r5
 800429a:	eb43 0901 	adc.w	r9, r3, r1
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042b2:	4690      	mov	r8, r2
 80042b4:	4699      	mov	r9, r3
 80042b6:	4623      	mov	r3, r4
 80042b8:	eb18 0303 	adds.w	r3, r8, r3
 80042bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042c0:	462b      	mov	r3, r5
 80042c2:	eb49 0303 	adc.w	r3, r9, r3
 80042c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042de:	460b      	mov	r3, r1
 80042e0:	18db      	adds	r3, r3, r3
 80042e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80042e4:	4613      	mov	r3, r2
 80042e6:	eb42 0303 	adc.w	r3, r2, r3
 80042ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80042ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042f4:	f7fc fc8c 	bl	8000c10 <__aeabi_uldivmod>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4b61      	ldr	r3, [pc, #388]	@ (8004484 <UART_SetConfig+0x2d4>)
 80042fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	011c      	lsls	r4, r3, #4
 8004306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800430a:	2200      	movs	r2, #0
 800430c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004310:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004314:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004318:	4642      	mov	r2, r8
 800431a:	464b      	mov	r3, r9
 800431c:	1891      	adds	r1, r2, r2
 800431e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004320:	415b      	adcs	r3, r3
 8004322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004324:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004328:	4641      	mov	r1, r8
 800432a:	eb12 0a01 	adds.w	sl, r2, r1
 800432e:	4649      	mov	r1, r9
 8004330:	eb43 0b01 	adc.w	fp, r3, r1
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	f04f 0300 	mov.w	r3, #0
 800433c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004340:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004348:	4692      	mov	sl, r2
 800434a:	469b      	mov	fp, r3
 800434c:	4643      	mov	r3, r8
 800434e:	eb1a 0303 	adds.w	r3, sl, r3
 8004352:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004356:	464b      	mov	r3, r9
 8004358:	eb4b 0303 	adc.w	r3, fp, r3
 800435c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004360:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800436c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004374:	460b      	mov	r3, r1
 8004376:	18db      	adds	r3, r3, r3
 8004378:	643b      	str	r3, [r7, #64]	@ 0x40
 800437a:	4613      	mov	r3, r2
 800437c:	eb42 0303 	adc.w	r3, r2, r3
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
 8004382:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800438a:	f7fc fc41 	bl	8000c10 <__aeabi_uldivmod>
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4611      	mov	r1, r2
 8004394:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <UART_SetConfig+0x2d4>)
 8004396:	fba3 2301 	umull	r2, r3, r3, r1
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	2264      	movs	r2, #100	@ 0x64
 800439e:	fb02 f303 	mul.w	r3, r2, r3
 80043a2:	1acb      	subs	r3, r1, r3
 80043a4:	00db      	lsls	r3, r3, #3
 80043a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043aa:	4b36      	ldr	r3, [pc, #216]	@ (8004484 <UART_SetConfig+0x2d4>)
 80043ac:	fba3 2302 	umull	r2, r3, r3, r2
 80043b0:	095b      	lsrs	r3, r3, #5
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043b8:	441c      	add	r4, r3
 80043ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	1891      	adds	r1, r2, r2
 80043d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043d4:	415b      	adcs	r3, r3
 80043d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043dc:	4641      	mov	r1, r8
 80043de:	1851      	adds	r1, r2, r1
 80043e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80043e2:	4649      	mov	r1, r9
 80043e4:	414b      	adcs	r3, r1
 80043e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80043e8:	f04f 0200 	mov.w	r2, #0
 80043ec:	f04f 0300 	mov.w	r3, #0
 80043f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043f4:	4659      	mov	r1, fp
 80043f6:	00cb      	lsls	r3, r1, #3
 80043f8:	4651      	mov	r1, sl
 80043fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fe:	4651      	mov	r1, sl
 8004400:	00ca      	lsls	r2, r1, #3
 8004402:	4610      	mov	r0, r2
 8004404:	4619      	mov	r1, r3
 8004406:	4603      	mov	r3, r0
 8004408:	4642      	mov	r2, r8
 800440a:	189b      	adds	r3, r3, r2
 800440c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004410:	464b      	mov	r3, r9
 8004412:	460a      	mov	r2, r1
 8004414:	eb42 0303 	adc.w	r3, r2, r3
 8004418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004428:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800442c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004430:	460b      	mov	r3, r1
 8004432:	18db      	adds	r3, r3, r3
 8004434:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004436:	4613      	mov	r3, r2
 8004438:	eb42 0303 	adc.w	r3, r2, r3
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004442:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004446:	f7fc fbe3 	bl	8000c10 <__aeabi_uldivmod>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	4b0d      	ldr	r3, [pc, #52]	@ (8004484 <UART_SetConfig+0x2d4>)
 8004450:	fba3 1302 	umull	r1, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	2164      	movs	r1, #100	@ 0x64
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	3332      	adds	r3, #50	@ 0x32
 8004462:	4a08      	ldr	r2, [pc, #32]	@ (8004484 <UART_SetConfig+0x2d4>)
 8004464:	fba2 2303 	umull	r2, r3, r2, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	f003 0207 	and.w	r2, r3, #7
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4422      	add	r2, r4
 8004476:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004478:	e106      	b.n	8004688 <UART_SetConfig+0x4d8>
 800447a:	bf00      	nop
 800447c:	40011000 	.word	0x40011000
 8004480:	40011400 	.word	0x40011400
 8004484:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800448c:	2200      	movs	r2, #0
 800448e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004492:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004496:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800449a:	4642      	mov	r2, r8
 800449c:	464b      	mov	r3, r9
 800449e:	1891      	adds	r1, r2, r2
 80044a0:	6239      	str	r1, [r7, #32]
 80044a2:	415b      	adcs	r3, r3
 80044a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80044a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044aa:	4641      	mov	r1, r8
 80044ac:	1854      	adds	r4, r2, r1
 80044ae:	4649      	mov	r1, r9
 80044b0:	eb43 0501 	adc.w	r5, r3, r1
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	00eb      	lsls	r3, r5, #3
 80044be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c2:	00e2      	lsls	r2, r4, #3
 80044c4:	4614      	mov	r4, r2
 80044c6:	461d      	mov	r5, r3
 80044c8:	4643      	mov	r3, r8
 80044ca:	18e3      	adds	r3, r4, r3
 80044cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044d0:	464b      	mov	r3, r9
 80044d2:	eb45 0303 	adc.w	r3, r5, r3
 80044d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044ea:	f04f 0200 	mov.w	r2, #0
 80044ee:	f04f 0300 	mov.w	r3, #0
 80044f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044f6:	4629      	mov	r1, r5
 80044f8:	008b      	lsls	r3, r1, #2
 80044fa:	4621      	mov	r1, r4
 80044fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004500:	4621      	mov	r1, r4
 8004502:	008a      	lsls	r2, r1, #2
 8004504:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004508:	f7fc fb82 	bl	8000c10 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4b60      	ldr	r3, [pc, #384]	@ (8004694 <UART_SetConfig+0x4e4>)
 8004512:	fba3 2302 	umull	r2, r3, r3, r2
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	011c      	lsls	r4, r3, #4
 800451a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800451e:	2200      	movs	r2, #0
 8004520:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004524:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004528:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	1891      	adds	r1, r2, r2
 8004532:	61b9      	str	r1, [r7, #24]
 8004534:	415b      	adcs	r3, r3
 8004536:	61fb      	str	r3, [r7, #28]
 8004538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800453c:	4641      	mov	r1, r8
 800453e:	1851      	adds	r1, r2, r1
 8004540:	6139      	str	r1, [r7, #16]
 8004542:	4649      	mov	r1, r9
 8004544:	414b      	adcs	r3, r1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	f04f 0200 	mov.w	r2, #0
 800454c:	f04f 0300 	mov.w	r3, #0
 8004550:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004554:	4659      	mov	r1, fp
 8004556:	00cb      	lsls	r3, r1, #3
 8004558:	4651      	mov	r1, sl
 800455a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800455e:	4651      	mov	r1, sl
 8004560:	00ca      	lsls	r2, r1, #3
 8004562:	4610      	mov	r0, r2
 8004564:	4619      	mov	r1, r3
 8004566:	4603      	mov	r3, r0
 8004568:	4642      	mov	r2, r8
 800456a:	189b      	adds	r3, r3, r2
 800456c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004570:	464b      	mov	r3, r9
 8004572:	460a      	mov	r2, r1
 8004574:	eb42 0303 	adc.w	r3, r2, r3
 8004578:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004586:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004594:	4649      	mov	r1, r9
 8004596:	008b      	lsls	r3, r1, #2
 8004598:	4641      	mov	r1, r8
 800459a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800459e:	4641      	mov	r1, r8
 80045a0:	008a      	lsls	r2, r1, #2
 80045a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045a6:	f7fc fb33 	bl	8000c10 <__aeabi_uldivmod>
 80045aa:	4602      	mov	r2, r0
 80045ac:	460b      	mov	r3, r1
 80045ae:	4611      	mov	r1, r2
 80045b0:	4b38      	ldr	r3, [pc, #224]	@ (8004694 <UART_SetConfig+0x4e4>)
 80045b2:	fba3 2301 	umull	r2, r3, r3, r1
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	2264      	movs	r2, #100	@ 0x64
 80045ba:	fb02 f303 	mul.w	r3, r2, r3
 80045be:	1acb      	subs	r3, r1, r3
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	3332      	adds	r3, #50	@ 0x32
 80045c4:	4a33      	ldr	r2, [pc, #204]	@ (8004694 <UART_SetConfig+0x4e4>)
 80045c6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ca:	095b      	lsrs	r3, r3, #5
 80045cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045d0:	441c      	add	r4, r3
 80045d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d6:	2200      	movs	r2, #0
 80045d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80045da:	677a      	str	r2, [r7, #116]	@ 0x74
 80045dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	1891      	adds	r1, r2, r2
 80045e6:	60b9      	str	r1, [r7, #8]
 80045e8:	415b      	adcs	r3, r3
 80045ea:	60fb      	str	r3, [r7, #12]
 80045ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045f0:	4641      	mov	r1, r8
 80045f2:	1851      	adds	r1, r2, r1
 80045f4:	6039      	str	r1, [r7, #0]
 80045f6:	4649      	mov	r1, r9
 80045f8:	414b      	adcs	r3, r1
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	f04f 0300 	mov.w	r3, #0
 8004604:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004608:	4659      	mov	r1, fp
 800460a:	00cb      	lsls	r3, r1, #3
 800460c:	4651      	mov	r1, sl
 800460e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004612:	4651      	mov	r1, sl
 8004614:	00ca      	lsls	r2, r1, #3
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	4603      	mov	r3, r0
 800461c:	4642      	mov	r2, r8
 800461e:	189b      	adds	r3, r3, r2
 8004620:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004622:	464b      	mov	r3, r9
 8004624:	460a      	mov	r2, r1
 8004626:	eb42 0303 	adc.w	r3, r2, r3
 800462a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800462c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	663b      	str	r3, [r7, #96]	@ 0x60
 8004636:	667a      	str	r2, [r7, #100]	@ 0x64
 8004638:	f04f 0200 	mov.w	r2, #0
 800463c:	f04f 0300 	mov.w	r3, #0
 8004640:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004644:	4649      	mov	r1, r9
 8004646:	008b      	lsls	r3, r1, #2
 8004648:	4641      	mov	r1, r8
 800464a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800464e:	4641      	mov	r1, r8
 8004650:	008a      	lsls	r2, r1, #2
 8004652:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004656:	f7fc fadb 	bl	8000c10 <__aeabi_uldivmod>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4b0d      	ldr	r3, [pc, #52]	@ (8004694 <UART_SetConfig+0x4e4>)
 8004660:	fba3 1302 	umull	r1, r3, r3, r2
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	2164      	movs	r1, #100	@ 0x64
 8004668:	fb01 f303 	mul.w	r3, r1, r3
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	011b      	lsls	r3, r3, #4
 8004670:	3332      	adds	r3, #50	@ 0x32
 8004672:	4a08      	ldr	r2, [pc, #32]	@ (8004694 <UART_SetConfig+0x4e4>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	095b      	lsrs	r3, r3, #5
 800467a:	f003 020f 	and.w	r2, r3, #15
 800467e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4422      	add	r2, r4
 8004686:	609a      	str	r2, [r3, #8]
}
 8004688:	bf00      	nop
 800468a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800468e:	46bd      	mov	sp, r7
 8004690:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004694:	51eb851f 	.word	0x51eb851f

08004698 <std>:
 8004698:	2300      	movs	r3, #0
 800469a:	b510      	push	{r4, lr}
 800469c:	4604      	mov	r4, r0
 800469e:	e9c0 3300 	strd	r3, r3, [r0]
 80046a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046a6:	6083      	str	r3, [r0, #8]
 80046a8:	8181      	strh	r1, [r0, #12]
 80046aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80046ac:	81c2      	strh	r2, [r0, #14]
 80046ae:	6183      	str	r3, [r0, #24]
 80046b0:	4619      	mov	r1, r3
 80046b2:	2208      	movs	r2, #8
 80046b4:	305c      	adds	r0, #92	@ 0x5c
 80046b6:	f000 f8fc 	bl	80048b2 <memset>
 80046ba:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <std+0x58>)
 80046bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <std+0x5c>)
 80046c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046c2:	4b0d      	ldr	r3, [pc, #52]	@ (80046f8 <std+0x60>)
 80046c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <std+0x64>)
 80046c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80046ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004700 <std+0x68>)
 80046cc:	6224      	str	r4, [r4, #32]
 80046ce:	429c      	cmp	r4, r3
 80046d0:	d006      	beq.n	80046e0 <std+0x48>
 80046d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046d6:	4294      	cmp	r4, r2
 80046d8:	d002      	beq.n	80046e0 <std+0x48>
 80046da:	33d0      	adds	r3, #208	@ 0xd0
 80046dc:	429c      	cmp	r4, r3
 80046de:	d105      	bne.n	80046ec <std+0x54>
 80046e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80046e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e8:	f000 b95c 	b.w	80049a4 <__retarget_lock_init_recursive>
 80046ec:	bd10      	pop	{r4, pc}
 80046ee:	bf00      	nop
 80046f0:	0800482d 	.word	0x0800482d
 80046f4:	0800484f 	.word	0x0800484f
 80046f8:	08004887 	.word	0x08004887
 80046fc:	080048ab 	.word	0x080048ab
 8004700:	200001b0 	.word	0x200001b0

08004704 <stdio_exit_handler>:
 8004704:	4a02      	ldr	r2, [pc, #8]	@ (8004710 <stdio_exit_handler+0xc>)
 8004706:	4903      	ldr	r1, [pc, #12]	@ (8004714 <stdio_exit_handler+0x10>)
 8004708:	4803      	ldr	r0, [pc, #12]	@ (8004718 <stdio_exit_handler+0x14>)
 800470a:	f000 b869 	b.w	80047e0 <_fwalk_sglue>
 800470e:	bf00      	nop
 8004710:	20000014 	.word	0x20000014
 8004714:	08004ca5 	.word	0x08004ca5
 8004718:	20000024 	.word	0x20000024

0800471c <cleanup_stdio>:
 800471c:	6841      	ldr	r1, [r0, #4]
 800471e:	4b0c      	ldr	r3, [pc, #48]	@ (8004750 <cleanup_stdio+0x34>)
 8004720:	4299      	cmp	r1, r3
 8004722:	b510      	push	{r4, lr}
 8004724:	4604      	mov	r4, r0
 8004726:	d001      	beq.n	800472c <cleanup_stdio+0x10>
 8004728:	f000 fabc 	bl	8004ca4 <_fflush_r>
 800472c:	68a1      	ldr	r1, [r4, #8]
 800472e:	4b09      	ldr	r3, [pc, #36]	@ (8004754 <cleanup_stdio+0x38>)
 8004730:	4299      	cmp	r1, r3
 8004732:	d002      	beq.n	800473a <cleanup_stdio+0x1e>
 8004734:	4620      	mov	r0, r4
 8004736:	f000 fab5 	bl	8004ca4 <_fflush_r>
 800473a:	68e1      	ldr	r1, [r4, #12]
 800473c:	4b06      	ldr	r3, [pc, #24]	@ (8004758 <cleanup_stdio+0x3c>)
 800473e:	4299      	cmp	r1, r3
 8004740:	d004      	beq.n	800474c <cleanup_stdio+0x30>
 8004742:	4620      	mov	r0, r4
 8004744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004748:	f000 baac 	b.w	8004ca4 <_fflush_r>
 800474c:	bd10      	pop	{r4, pc}
 800474e:	bf00      	nop
 8004750:	200001b0 	.word	0x200001b0
 8004754:	20000218 	.word	0x20000218
 8004758:	20000280 	.word	0x20000280

0800475c <global_stdio_init.part.0>:
 800475c:	b510      	push	{r4, lr}
 800475e:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <global_stdio_init.part.0+0x30>)
 8004760:	4c0b      	ldr	r4, [pc, #44]	@ (8004790 <global_stdio_init.part.0+0x34>)
 8004762:	4a0c      	ldr	r2, [pc, #48]	@ (8004794 <global_stdio_init.part.0+0x38>)
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	4620      	mov	r0, r4
 8004768:	2200      	movs	r2, #0
 800476a:	2104      	movs	r1, #4
 800476c:	f7ff ff94 	bl	8004698 <std>
 8004770:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004774:	2201      	movs	r2, #1
 8004776:	2109      	movs	r1, #9
 8004778:	f7ff ff8e 	bl	8004698 <std>
 800477c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004780:	2202      	movs	r2, #2
 8004782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004786:	2112      	movs	r1, #18
 8004788:	f7ff bf86 	b.w	8004698 <std>
 800478c:	200002e8 	.word	0x200002e8
 8004790:	200001b0 	.word	0x200001b0
 8004794:	08004705 	.word	0x08004705

08004798 <__sfp_lock_acquire>:
 8004798:	4801      	ldr	r0, [pc, #4]	@ (80047a0 <__sfp_lock_acquire+0x8>)
 800479a:	f000 b904 	b.w	80049a6 <__retarget_lock_acquire_recursive>
 800479e:	bf00      	nop
 80047a0:	200002f1 	.word	0x200002f1

080047a4 <__sfp_lock_release>:
 80047a4:	4801      	ldr	r0, [pc, #4]	@ (80047ac <__sfp_lock_release+0x8>)
 80047a6:	f000 b8ff 	b.w	80049a8 <__retarget_lock_release_recursive>
 80047aa:	bf00      	nop
 80047ac:	200002f1 	.word	0x200002f1

080047b0 <__sinit>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	4604      	mov	r4, r0
 80047b4:	f7ff fff0 	bl	8004798 <__sfp_lock_acquire>
 80047b8:	6a23      	ldr	r3, [r4, #32]
 80047ba:	b11b      	cbz	r3, 80047c4 <__sinit+0x14>
 80047bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047c0:	f7ff bff0 	b.w	80047a4 <__sfp_lock_release>
 80047c4:	4b04      	ldr	r3, [pc, #16]	@ (80047d8 <__sinit+0x28>)
 80047c6:	6223      	str	r3, [r4, #32]
 80047c8:	4b04      	ldr	r3, [pc, #16]	@ (80047dc <__sinit+0x2c>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1f5      	bne.n	80047bc <__sinit+0xc>
 80047d0:	f7ff ffc4 	bl	800475c <global_stdio_init.part.0>
 80047d4:	e7f2      	b.n	80047bc <__sinit+0xc>
 80047d6:	bf00      	nop
 80047d8:	0800471d 	.word	0x0800471d
 80047dc:	200002e8 	.word	0x200002e8

080047e0 <_fwalk_sglue>:
 80047e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047e4:	4607      	mov	r7, r0
 80047e6:	4688      	mov	r8, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	2600      	movs	r6, #0
 80047ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047f0:	f1b9 0901 	subs.w	r9, r9, #1
 80047f4:	d505      	bpl.n	8004802 <_fwalk_sglue+0x22>
 80047f6:	6824      	ldr	r4, [r4, #0]
 80047f8:	2c00      	cmp	r4, #0
 80047fa:	d1f7      	bne.n	80047ec <_fwalk_sglue+0xc>
 80047fc:	4630      	mov	r0, r6
 80047fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004802:	89ab      	ldrh	r3, [r5, #12]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d907      	bls.n	8004818 <_fwalk_sglue+0x38>
 8004808:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800480c:	3301      	adds	r3, #1
 800480e:	d003      	beq.n	8004818 <_fwalk_sglue+0x38>
 8004810:	4629      	mov	r1, r5
 8004812:	4638      	mov	r0, r7
 8004814:	47c0      	blx	r8
 8004816:	4306      	orrs	r6, r0
 8004818:	3568      	adds	r5, #104	@ 0x68
 800481a:	e7e9      	b.n	80047f0 <_fwalk_sglue+0x10>

0800481c <putchar>:
 800481c:	4b02      	ldr	r3, [pc, #8]	@ (8004828 <putchar+0xc>)
 800481e:	4601      	mov	r1, r0
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	6882      	ldr	r2, [r0, #8]
 8004824:	f000 ba66 	b.w	8004cf4 <_putc_r>
 8004828:	20000020 	.word	0x20000020

0800482c <__sread>:
 800482c:	b510      	push	{r4, lr}
 800482e:	460c      	mov	r4, r1
 8004830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004834:	f000 f868 	bl	8004908 <_read_r>
 8004838:	2800      	cmp	r0, #0
 800483a:	bfab      	itete	ge
 800483c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800483e:	89a3      	ldrhlt	r3, [r4, #12]
 8004840:	181b      	addge	r3, r3, r0
 8004842:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004846:	bfac      	ite	ge
 8004848:	6563      	strge	r3, [r4, #84]	@ 0x54
 800484a:	81a3      	strhlt	r3, [r4, #12]
 800484c:	bd10      	pop	{r4, pc}

0800484e <__swrite>:
 800484e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004852:	461f      	mov	r7, r3
 8004854:	898b      	ldrh	r3, [r1, #12]
 8004856:	05db      	lsls	r3, r3, #23
 8004858:	4605      	mov	r5, r0
 800485a:	460c      	mov	r4, r1
 800485c:	4616      	mov	r6, r2
 800485e:	d505      	bpl.n	800486c <__swrite+0x1e>
 8004860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004864:	2302      	movs	r3, #2
 8004866:	2200      	movs	r2, #0
 8004868:	f000 f83c 	bl	80048e4 <_lseek_r>
 800486c:	89a3      	ldrh	r3, [r4, #12]
 800486e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004872:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004876:	81a3      	strh	r3, [r4, #12]
 8004878:	4632      	mov	r2, r6
 800487a:	463b      	mov	r3, r7
 800487c:	4628      	mov	r0, r5
 800487e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004882:	f000 b853 	b.w	800492c <_write_r>

08004886 <__sseek>:
 8004886:	b510      	push	{r4, lr}
 8004888:	460c      	mov	r4, r1
 800488a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800488e:	f000 f829 	bl	80048e4 <_lseek_r>
 8004892:	1c43      	adds	r3, r0, #1
 8004894:	89a3      	ldrh	r3, [r4, #12]
 8004896:	bf15      	itete	ne
 8004898:	6560      	strne	r0, [r4, #84]	@ 0x54
 800489a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800489e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048a2:	81a3      	strheq	r3, [r4, #12]
 80048a4:	bf18      	it	ne
 80048a6:	81a3      	strhne	r3, [r4, #12]
 80048a8:	bd10      	pop	{r4, pc}

080048aa <__sclose>:
 80048aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048ae:	f000 b809 	b.w	80048c4 <_close_r>

080048b2 <memset>:
 80048b2:	4402      	add	r2, r0
 80048b4:	4603      	mov	r3, r0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d100      	bne.n	80048bc <memset+0xa>
 80048ba:	4770      	bx	lr
 80048bc:	f803 1b01 	strb.w	r1, [r3], #1
 80048c0:	e7f9      	b.n	80048b6 <memset+0x4>
	...

080048c4 <_close_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	4d06      	ldr	r5, [pc, #24]	@ (80048e0 <_close_r+0x1c>)
 80048c8:	2300      	movs	r3, #0
 80048ca:	4604      	mov	r4, r0
 80048cc:	4608      	mov	r0, r1
 80048ce:	602b      	str	r3, [r5, #0]
 80048d0:	f7fd f914 	bl	8001afc <_close>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d102      	bne.n	80048de <_close_r+0x1a>
 80048d8:	682b      	ldr	r3, [r5, #0]
 80048da:	b103      	cbz	r3, 80048de <_close_r+0x1a>
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	bd38      	pop	{r3, r4, r5, pc}
 80048e0:	200002ec 	.word	0x200002ec

080048e4 <_lseek_r>:
 80048e4:	b538      	push	{r3, r4, r5, lr}
 80048e6:	4d07      	ldr	r5, [pc, #28]	@ (8004904 <_lseek_r+0x20>)
 80048e8:	4604      	mov	r4, r0
 80048ea:	4608      	mov	r0, r1
 80048ec:	4611      	mov	r1, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	602a      	str	r2, [r5, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	f7fd f929 	bl	8001b4a <_lseek>
 80048f8:	1c43      	adds	r3, r0, #1
 80048fa:	d102      	bne.n	8004902 <_lseek_r+0x1e>
 80048fc:	682b      	ldr	r3, [r5, #0]
 80048fe:	b103      	cbz	r3, 8004902 <_lseek_r+0x1e>
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	bd38      	pop	{r3, r4, r5, pc}
 8004904:	200002ec 	.word	0x200002ec

08004908 <_read_r>:
 8004908:	b538      	push	{r3, r4, r5, lr}
 800490a:	4d07      	ldr	r5, [pc, #28]	@ (8004928 <_read_r+0x20>)
 800490c:	4604      	mov	r4, r0
 800490e:	4608      	mov	r0, r1
 8004910:	4611      	mov	r1, r2
 8004912:	2200      	movs	r2, #0
 8004914:	602a      	str	r2, [r5, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	f7fd f8b7 	bl	8001a8a <_read>
 800491c:	1c43      	adds	r3, r0, #1
 800491e:	d102      	bne.n	8004926 <_read_r+0x1e>
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	b103      	cbz	r3, 8004926 <_read_r+0x1e>
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	bd38      	pop	{r3, r4, r5, pc}
 8004928:	200002ec 	.word	0x200002ec

0800492c <_write_r>:
 800492c:	b538      	push	{r3, r4, r5, lr}
 800492e:	4d07      	ldr	r5, [pc, #28]	@ (800494c <_write_r+0x20>)
 8004930:	4604      	mov	r4, r0
 8004932:	4608      	mov	r0, r1
 8004934:	4611      	mov	r1, r2
 8004936:	2200      	movs	r2, #0
 8004938:	602a      	str	r2, [r5, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	f7fd f8c2 	bl	8001ac4 <_write>
 8004940:	1c43      	adds	r3, r0, #1
 8004942:	d102      	bne.n	800494a <_write_r+0x1e>
 8004944:	682b      	ldr	r3, [r5, #0]
 8004946:	b103      	cbz	r3, 800494a <_write_r+0x1e>
 8004948:	6023      	str	r3, [r4, #0]
 800494a:	bd38      	pop	{r3, r4, r5, pc}
 800494c:	200002ec 	.word	0x200002ec

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	@ (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000020 	.word	0x20000020

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4d0d      	ldr	r5, [pc, #52]	@ (8004994 <__libc_init_array+0x38>)
 8004960:	4c0d      	ldr	r4, [pc, #52]	@ (8004998 <__libc_init_array+0x3c>)
 8004962:	1b64      	subs	r4, r4, r5
 8004964:	10a4      	asrs	r4, r4, #2
 8004966:	2600      	movs	r6, #0
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	4d0b      	ldr	r5, [pc, #44]	@ (800499c <__libc_init_array+0x40>)
 800496e:	4c0c      	ldr	r4, [pc, #48]	@ (80049a0 <__libc_init_array+0x44>)
 8004970:	f001 fa7c 	bl	8005e6c <_init>
 8004974:	1b64      	subs	r4, r4, r5
 8004976:	10a4      	asrs	r4, r4, #2
 8004978:	2600      	movs	r6, #0
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08005ed8 	.word	0x08005ed8
 8004998:	08005ed8 	.word	0x08005ed8
 800499c:	08005ed8 	.word	0x08005ed8
 80049a0:	08005edc 	.word	0x08005edc

080049a4 <__retarget_lock_init_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <__retarget_lock_acquire_recursive>:
 80049a6:	4770      	bx	lr

080049a8 <__retarget_lock_release_recursive>:
 80049a8:	4770      	bx	lr
	...

080049ac <_free_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4605      	mov	r5, r0
 80049b0:	2900      	cmp	r1, #0
 80049b2:	d041      	beq.n	8004a38 <_free_r+0x8c>
 80049b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049b8:	1f0c      	subs	r4, r1, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	bfb8      	it	lt
 80049be:	18e4      	addlt	r4, r4, r3
 80049c0:	f000 f8e0 	bl	8004b84 <__malloc_lock>
 80049c4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a3c <_free_r+0x90>)
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	b933      	cbnz	r3, 80049d8 <_free_r+0x2c>
 80049ca:	6063      	str	r3, [r4, #4]
 80049cc:	6014      	str	r4, [r2, #0]
 80049ce:	4628      	mov	r0, r5
 80049d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049d4:	f000 b8dc 	b.w	8004b90 <__malloc_unlock>
 80049d8:	42a3      	cmp	r3, r4
 80049da:	d908      	bls.n	80049ee <_free_r+0x42>
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	1821      	adds	r1, r4, r0
 80049e0:	428b      	cmp	r3, r1
 80049e2:	bf01      	itttt	eq
 80049e4:	6819      	ldreq	r1, [r3, #0]
 80049e6:	685b      	ldreq	r3, [r3, #4]
 80049e8:	1809      	addeq	r1, r1, r0
 80049ea:	6021      	streq	r1, [r4, #0]
 80049ec:	e7ed      	b.n	80049ca <_free_r+0x1e>
 80049ee:	461a      	mov	r2, r3
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	b10b      	cbz	r3, 80049f8 <_free_r+0x4c>
 80049f4:	42a3      	cmp	r3, r4
 80049f6:	d9fa      	bls.n	80049ee <_free_r+0x42>
 80049f8:	6811      	ldr	r1, [r2, #0]
 80049fa:	1850      	adds	r0, r2, r1
 80049fc:	42a0      	cmp	r0, r4
 80049fe:	d10b      	bne.n	8004a18 <_free_r+0x6c>
 8004a00:	6820      	ldr	r0, [r4, #0]
 8004a02:	4401      	add	r1, r0
 8004a04:	1850      	adds	r0, r2, r1
 8004a06:	4283      	cmp	r3, r0
 8004a08:	6011      	str	r1, [r2, #0]
 8004a0a:	d1e0      	bne.n	80049ce <_free_r+0x22>
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	6053      	str	r3, [r2, #4]
 8004a12:	4408      	add	r0, r1
 8004a14:	6010      	str	r0, [r2, #0]
 8004a16:	e7da      	b.n	80049ce <_free_r+0x22>
 8004a18:	d902      	bls.n	8004a20 <_free_r+0x74>
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	602b      	str	r3, [r5, #0]
 8004a1e:	e7d6      	b.n	80049ce <_free_r+0x22>
 8004a20:	6820      	ldr	r0, [r4, #0]
 8004a22:	1821      	adds	r1, r4, r0
 8004a24:	428b      	cmp	r3, r1
 8004a26:	bf04      	itt	eq
 8004a28:	6819      	ldreq	r1, [r3, #0]
 8004a2a:	685b      	ldreq	r3, [r3, #4]
 8004a2c:	6063      	str	r3, [r4, #4]
 8004a2e:	bf04      	itt	eq
 8004a30:	1809      	addeq	r1, r1, r0
 8004a32:	6021      	streq	r1, [r4, #0]
 8004a34:	6054      	str	r4, [r2, #4]
 8004a36:	e7ca      	b.n	80049ce <_free_r+0x22>
 8004a38:	bd38      	pop	{r3, r4, r5, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200002f8 	.word	0x200002f8

08004a40 <sbrk_aligned>:
 8004a40:	b570      	push	{r4, r5, r6, lr}
 8004a42:	4e0f      	ldr	r6, [pc, #60]	@ (8004a80 <sbrk_aligned+0x40>)
 8004a44:	460c      	mov	r4, r1
 8004a46:	6831      	ldr	r1, [r6, #0]
 8004a48:	4605      	mov	r5, r0
 8004a4a:	b911      	cbnz	r1, 8004a52 <sbrk_aligned+0x12>
 8004a4c:	f000 fa1a 	bl	8004e84 <_sbrk_r>
 8004a50:	6030      	str	r0, [r6, #0]
 8004a52:	4621      	mov	r1, r4
 8004a54:	4628      	mov	r0, r5
 8004a56:	f000 fa15 	bl	8004e84 <_sbrk_r>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	d103      	bne.n	8004a66 <sbrk_aligned+0x26>
 8004a5e:	f04f 34ff 	mov.w	r4, #4294967295
 8004a62:	4620      	mov	r0, r4
 8004a64:	bd70      	pop	{r4, r5, r6, pc}
 8004a66:	1cc4      	adds	r4, r0, #3
 8004a68:	f024 0403 	bic.w	r4, r4, #3
 8004a6c:	42a0      	cmp	r0, r4
 8004a6e:	d0f8      	beq.n	8004a62 <sbrk_aligned+0x22>
 8004a70:	1a21      	subs	r1, r4, r0
 8004a72:	4628      	mov	r0, r5
 8004a74:	f000 fa06 	bl	8004e84 <_sbrk_r>
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d1f2      	bne.n	8004a62 <sbrk_aligned+0x22>
 8004a7c:	e7ef      	b.n	8004a5e <sbrk_aligned+0x1e>
 8004a7e:	bf00      	nop
 8004a80:	200002f4 	.word	0x200002f4

08004a84 <_malloc_r>:
 8004a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a88:	1ccd      	adds	r5, r1, #3
 8004a8a:	f025 0503 	bic.w	r5, r5, #3
 8004a8e:	3508      	adds	r5, #8
 8004a90:	2d0c      	cmp	r5, #12
 8004a92:	bf38      	it	cc
 8004a94:	250c      	movcc	r5, #12
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	4606      	mov	r6, r0
 8004a9a:	db01      	blt.n	8004aa0 <_malloc_r+0x1c>
 8004a9c:	42a9      	cmp	r1, r5
 8004a9e:	d904      	bls.n	8004aaa <_malloc_r+0x26>
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	6033      	str	r3, [r6, #0]
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004aaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b80 <_malloc_r+0xfc>
 8004aae:	f000 f869 	bl	8004b84 <__malloc_lock>
 8004ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ab6:	461c      	mov	r4, r3
 8004ab8:	bb44      	cbnz	r4, 8004b0c <_malloc_r+0x88>
 8004aba:	4629      	mov	r1, r5
 8004abc:	4630      	mov	r0, r6
 8004abe:	f7ff ffbf 	bl	8004a40 <sbrk_aligned>
 8004ac2:	1c43      	adds	r3, r0, #1
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	d158      	bne.n	8004b7a <_malloc_r+0xf6>
 8004ac8:	f8d8 4000 	ldr.w	r4, [r8]
 8004acc:	4627      	mov	r7, r4
 8004ace:	2f00      	cmp	r7, #0
 8004ad0:	d143      	bne.n	8004b5a <_malloc_r+0xd6>
 8004ad2:	2c00      	cmp	r4, #0
 8004ad4:	d04b      	beq.n	8004b6e <_malloc_r+0xea>
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	4639      	mov	r1, r7
 8004ada:	4630      	mov	r0, r6
 8004adc:	eb04 0903 	add.w	r9, r4, r3
 8004ae0:	f000 f9d0 	bl	8004e84 <_sbrk_r>
 8004ae4:	4581      	cmp	r9, r0
 8004ae6:	d142      	bne.n	8004b6e <_malloc_r+0xea>
 8004ae8:	6821      	ldr	r1, [r4, #0]
 8004aea:	1a6d      	subs	r5, r5, r1
 8004aec:	4629      	mov	r1, r5
 8004aee:	4630      	mov	r0, r6
 8004af0:	f7ff ffa6 	bl	8004a40 <sbrk_aligned>
 8004af4:	3001      	adds	r0, #1
 8004af6:	d03a      	beq.n	8004b6e <_malloc_r+0xea>
 8004af8:	6823      	ldr	r3, [r4, #0]
 8004afa:	442b      	add	r3, r5
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	f8d8 3000 	ldr.w	r3, [r8]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	bb62      	cbnz	r2, 8004b60 <_malloc_r+0xdc>
 8004b06:	f8c8 7000 	str.w	r7, [r8]
 8004b0a:	e00f      	b.n	8004b2c <_malloc_r+0xa8>
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	1b52      	subs	r2, r2, r5
 8004b10:	d420      	bmi.n	8004b54 <_malloc_r+0xd0>
 8004b12:	2a0b      	cmp	r2, #11
 8004b14:	d917      	bls.n	8004b46 <_malloc_r+0xc2>
 8004b16:	1961      	adds	r1, r4, r5
 8004b18:	42a3      	cmp	r3, r4
 8004b1a:	6025      	str	r5, [r4, #0]
 8004b1c:	bf18      	it	ne
 8004b1e:	6059      	strne	r1, [r3, #4]
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	bf08      	it	eq
 8004b24:	f8c8 1000 	streq.w	r1, [r8]
 8004b28:	5162      	str	r2, [r4, r5]
 8004b2a:	604b      	str	r3, [r1, #4]
 8004b2c:	4630      	mov	r0, r6
 8004b2e:	f000 f82f 	bl	8004b90 <__malloc_unlock>
 8004b32:	f104 000b 	add.w	r0, r4, #11
 8004b36:	1d23      	adds	r3, r4, #4
 8004b38:	f020 0007 	bic.w	r0, r0, #7
 8004b3c:	1ac2      	subs	r2, r0, r3
 8004b3e:	bf1c      	itt	ne
 8004b40:	1a1b      	subne	r3, r3, r0
 8004b42:	50a3      	strne	r3, [r4, r2]
 8004b44:	e7af      	b.n	8004aa6 <_malloc_r+0x22>
 8004b46:	6862      	ldr	r2, [r4, #4]
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	bf0c      	ite	eq
 8004b4c:	f8c8 2000 	streq.w	r2, [r8]
 8004b50:	605a      	strne	r2, [r3, #4]
 8004b52:	e7eb      	b.n	8004b2c <_malloc_r+0xa8>
 8004b54:	4623      	mov	r3, r4
 8004b56:	6864      	ldr	r4, [r4, #4]
 8004b58:	e7ae      	b.n	8004ab8 <_malloc_r+0x34>
 8004b5a:	463c      	mov	r4, r7
 8004b5c:	687f      	ldr	r7, [r7, #4]
 8004b5e:	e7b6      	b.n	8004ace <_malloc_r+0x4a>
 8004b60:	461a      	mov	r2, r3
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	d1fb      	bne.n	8004b60 <_malloc_r+0xdc>
 8004b68:	2300      	movs	r3, #0
 8004b6a:	6053      	str	r3, [r2, #4]
 8004b6c:	e7de      	b.n	8004b2c <_malloc_r+0xa8>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	6033      	str	r3, [r6, #0]
 8004b72:	4630      	mov	r0, r6
 8004b74:	f000 f80c 	bl	8004b90 <__malloc_unlock>
 8004b78:	e794      	b.n	8004aa4 <_malloc_r+0x20>
 8004b7a:	6005      	str	r5, [r0, #0]
 8004b7c:	e7d6      	b.n	8004b2c <_malloc_r+0xa8>
 8004b7e:	bf00      	nop
 8004b80:	200002f8 	.word	0x200002f8

08004b84 <__malloc_lock>:
 8004b84:	4801      	ldr	r0, [pc, #4]	@ (8004b8c <__malloc_lock+0x8>)
 8004b86:	f7ff bf0e 	b.w	80049a6 <__retarget_lock_acquire_recursive>
 8004b8a:	bf00      	nop
 8004b8c:	200002f0 	.word	0x200002f0

08004b90 <__malloc_unlock>:
 8004b90:	4801      	ldr	r0, [pc, #4]	@ (8004b98 <__malloc_unlock+0x8>)
 8004b92:	f7ff bf09 	b.w	80049a8 <__retarget_lock_release_recursive>
 8004b96:	bf00      	nop
 8004b98:	200002f0 	.word	0x200002f0

08004b9c <__sflush_r>:
 8004b9c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba4:	0716      	lsls	r6, r2, #28
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	460c      	mov	r4, r1
 8004baa:	d454      	bmi.n	8004c56 <__sflush_r+0xba>
 8004bac:	684b      	ldr	r3, [r1, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	dc02      	bgt.n	8004bb8 <__sflush_r+0x1c>
 8004bb2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	dd48      	ble.n	8004c4a <__sflush_r+0xae>
 8004bb8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004bba:	2e00      	cmp	r6, #0
 8004bbc:	d045      	beq.n	8004c4a <__sflush_r+0xae>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004bc4:	682f      	ldr	r7, [r5, #0]
 8004bc6:	6a21      	ldr	r1, [r4, #32]
 8004bc8:	602b      	str	r3, [r5, #0]
 8004bca:	d030      	beq.n	8004c2e <__sflush_r+0x92>
 8004bcc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	0759      	lsls	r1, r3, #29
 8004bd2:	d505      	bpl.n	8004be0 <__sflush_r+0x44>
 8004bd4:	6863      	ldr	r3, [r4, #4]
 8004bd6:	1ad2      	subs	r2, r2, r3
 8004bd8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004bda:	b10b      	cbz	r3, 8004be0 <__sflush_r+0x44>
 8004bdc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004bde:	1ad2      	subs	r2, r2, r3
 8004be0:	2300      	movs	r3, #0
 8004be2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004be4:	6a21      	ldr	r1, [r4, #32]
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b0      	blx	r6
 8004bea:	1c43      	adds	r3, r0, #1
 8004bec:	89a3      	ldrh	r3, [r4, #12]
 8004bee:	d106      	bne.n	8004bfe <__sflush_r+0x62>
 8004bf0:	6829      	ldr	r1, [r5, #0]
 8004bf2:	291d      	cmp	r1, #29
 8004bf4:	d82b      	bhi.n	8004c4e <__sflush_r+0xb2>
 8004bf6:	4a2a      	ldr	r2, [pc, #168]	@ (8004ca0 <__sflush_r+0x104>)
 8004bf8:	410a      	asrs	r2, r1
 8004bfa:	07d6      	lsls	r6, r2, #31
 8004bfc:	d427      	bmi.n	8004c4e <__sflush_r+0xb2>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	6062      	str	r2, [r4, #4]
 8004c02:	04d9      	lsls	r1, r3, #19
 8004c04:	6922      	ldr	r2, [r4, #16]
 8004c06:	6022      	str	r2, [r4, #0]
 8004c08:	d504      	bpl.n	8004c14 <__sflush_r+0x78>
 8004c0a:	1c42      	adds	r2, r0, #1
 8004c0c:	d101      	bne.n	8004c12 <__sflush_r+0x76>
 8004c0e:	682b      	ldr	r3, [r5, #0]
 8004c10:	b903      	cbnz	r3, 8004c14 <__sflush_r+0x78>
 8004c12:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c16:	602f      	str	r7, [r5, #0]
 8004c18:	b1b9      	cbz	r1, 8004c4a <__sflush_r+0xae>
 8004c1a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c1e:	4299      	cmp	r1, r3
 8004c20:	d002      	beq.n	8004c28 <__sflush_r+0x8c>
 8004c22:	4628      	mov	r0, r5
 8004c24:	f7ff fec2 	bl	80049ac <_free_r>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c2c:	e00d      	b.n	8004c4a <__sflush_r+0xae>
 8004c2e:	2301      	movs	r3, #1
 8004c30:	4628      	mov	r0, r5
 8004c32:	47b0      	blx	r6
 8004c34:	4602      	mov	r2, r0
 8004c36:	1c50      	adds	r0, r2, #1
 8004c38:	d1c9      	bne.n	8004bce <__sflush_r+0x32>
 8004c3a:	682b      	ldr	r3, [r5, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0c6      	beq.n	8004bce <__sflush_r+0x32>
 8004c40:	2b1d      	cmp	r3, #29
 8004c42:	d001      	beq.n	8004c48 <__sflush_r+0xac>
 8004c44:	2b16      	cmp	r3, #22
 8004c46:	d11e      	bne.n	8004c86 <__sflush_r+0xea>
 8004c48:	602f      	str	r7, [r5, #0]
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	e022      	b.n	8004c94 <__sflush_r+0xf8>
 8004c4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c52:	b21b      	sxth	r3, r3
 8004c54:	e01b      	b.n	8004c8e <__sflush_r+0xf2>
 8004c56:	690f      	ldr	r7, [r1, #16]
 8004c58:	2f00      	cmp	r7, #0
 8004c5a:	d0f6      	beq.n	8004c4a <__sflush_r+0xae>
 8004c5c:	0793      	lsls	r3, r2, #30
 8004c5e:	680e      	ldr	r6, [r1, #0]
 8004c60:	bf08      	it	eq
 8004c62:	694b      	ldreq	r3, [r1, #20]
 8004c64:	600f      	str	r7, [r1, #0]
 8004c66:	bf18      	it	ne
 8004c68:	2300      	movne	r3, #0
 8004c6a:	eba6 0807 	sub.w	r8, r6, r7
 8004c6e:	608b      	str	r3, [r1, #8]
 8004c70:	f1b8 0f00 	cmp.w	r8, #0
 8004c74:	dde9      	ble.n	8004c4a <__sflush_r+0xae>
 8004c76:	6a21      	ldr	r1, [r4, #32]
 8004c78:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004c7a:	4643      	mov	r3, r8
 8004c7c:	463a      	mov	r2, r7
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b0      	blx	r6
 8004c82:	2800      	cmp	r0, #0
 8004c84:	dc08      	bgt.n	8004c98 <__sflush_r+0xfc>
 8004c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c8e:	81a3      	strh	r3, [r4, #12]
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295
 8004c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c98:	4407      	add	r7, r0
 8004c9a:	eba8 0800 	sub.w	r8, r8, r0
 8004c9e:	e7e7      	b.n	8004c70 <__sflush_r+0xd4>
 8004ca0:	dfbffffe 	.word	0xdfbffffe

08004ca4 <_fflush_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	690b      	ldr	r3, [r1, #16]
 8004ca8:	4605      	mov	r5, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	b913      	cbnz	r3, 8004cb4 <_fflush_r+0x10>
 8004cae:	2500      	movs	r5, #0
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	b118      	cbz	r0, 8004cbe <_fflush_r+0x1a>
 8004cb6:	6a03      	ldr	r3, [r0, #32]
 8004cb8:	b90b      	cbnz	r3, 8004cbe <_fflush_r+0x1a>
 8004cba:	f7ff fd79 	bl	80047b0 <__sinit>
 8004cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f3      	beq.n	8004cae <_fflush_r+0xa>
 8004cc6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004cc8:	07d0      	lsls	r0, r2, #31
 8004cca:	d404      	bmi.n	8004cd6 <_fflush_r+0x32>
 8004ccc:	0599      	lsls	r1, r3, #22
 8004cce:	d402      	bmi.n	8004cd6 <_fflush_r+0x32>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cd2:	f7ff fe68 	bl	80049a6 <__retarget_lock_acquire_recursive>
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	4621      	mov	r1, r4
 8004cda:	f7ff ff5f 	bl	8004b9c <__sflush_r>
 8004cde:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ce0:	07da      	lsls	r2, r3, #31
 8004ce2:	4605      	mov	r5, r0
 8004ce4:	d4e4      	bmi.n	8004cb0 <_fflush_r+0xc>
 8004ce6:	89a3      	ldrh	r3, [r4, #12]
 8004ce8:	059b      	lsls	r3, r3, #22
 8004cea:	d4e1      	bmi.n	8004cb0 <_fflush_r+0xc>
 8004cec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cee:	f7ff fe5b 	bl	80049a8 <__retarget_lock_release_recursive>
 8004cf2:	e7dd      	b.n	8004cb0 <_fflush_r+0xc>

08004cf4 <_putc_r>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	4614      	mov	r4, r2
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	b118      	cbz	r0, 8004d06 <_putc_r+0x12>
 8004cfe:	6a03      	ldr	r3, [r0, #32]
 8004d00:	b90b      	cbnz	r3, 8004d06 <_putc_r+0x12>
 8004d02:	f7ff fd55 	bl	80047b0 <__sinit>
 8004d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d08:	07d8      	lsls	r0, r3, #31
 8004d0a:	d405      	bmi.n	8004d18 <_putc_r+0x24>
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	0599      	lsls	r1, r3, #22
 8004d10:	d402      	bmi.n	8004d18 <_putc_r+0x24>
 8004d12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d14:	f7ff fe47 	bl	80049a6 <__retarget_lock_acquire_recursive>
 8004d18:	68a3      	ldr	r3, [r4, #8]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	60a3      	str	r3, [r4, #8]
 8004d20:	da05      	bge.n	8004d2e <_putc_r+0x3a>
 8004d22:	69a2      	ldr	r2, [r4, #24]
 8004d24:	4293      	cmp	r3, r2
 8004d26:	db12      	blt.n	8004d4e <_putc_r+0x5a>
 8004d28:	b2eb      	uxtb	r3, r5
 8004d2a:	2b0a      	cmp	r3, #10
 8004d2c:	d00f      	beq.n	8004d4e <_putc_r+0x5a>
 8004d2e:	6823      	ldr	r3, [r4, #0]
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	6022      	str	r2, [r4, #0]
 8004d34:	701d      	strb	r5, [r3, #0]
 8004d36:	b2ed      	uxtb	r5, r5
 8004d38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d3a:	07da      	lsls	r2, r3, #31
 8004d3c:	d405      	bmi.n	8004d4a <_putc_r+0x56>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	059b      	lsls	r3, r3, #22
 8004d42:	d402      	bmi.n	8004d4a <_putc_r+0x56>
 8004d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d46:	f7ff fe2f 	bl	80049a8 <__retarget_lock_release_recursive>
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
 8004d4e:	4629      	mov	r1, r5
 8004d50:	4622      	mov	r2, r4
 8004d52:	4630      	mov	r0, r6
 8004d54:	f000 f802 	bl	8004d5c <__swbuf_r>
 8004d58:	4605      	mov	r5, r0
 8004d5a:	e7ed      	b.n	8004d38 <_putc_r+0x44>

08004d5c <__swbuf_r>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	460e      	mov	r6, r1
 8004d60:	4614      	mov	r4, r2
 8004d62:	4605      	mov	r5, r0
 8004d64:	b118      	cbz	r0, 8004d6e <__swbuf_r+0x12>
 8004d66:	6a03      	ldr	r3, [r0, #32]
 8004d68:	b90b      	cbnz	r3, 8004d6e <__swbuf_r+0x12>
 8004d6a:	f7ff fd21 	bl	80047b0 <__sinit>
 8004d6e:	69a3      	ldr	r3, [r4, #24]
 8004d70:	60a3      	str	r3, [r4, #8]
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	071a      	lsls	r2, r3, #28
 8004d76:	d501      	bpl.n	8004d7c <__swbuf_r+0x20>
 8004d78:	6923      	ldr	r3, [r4, #16]
 8004d7a:	b943      	cbnz	r3, 8004d8e <__swbuf_r+0x32>
 8004d7c:	4621      	mov	r1, r4
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 f82a 	bl	8004dd8 <__swsetup_r>
 8004d84:	b118      	cbz	r0, 8004d8e <__swbuf_r+0x32>
 8004d86:	f04f 37ff 	mov.w	r7, #4294967295
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	6922      	ldr	r2, [r4, #16]
 8004d92:	1a98      	subs	r0, r3, r2
 8004d94:	6963      	ldr	r3, [r4, #20]
 8004d96:	b2f6      	uxtb	r6, r6
 8004d98:	4283      	cmp	r3, r0
 8004d9a:	4637      	mov	r7, r6
 8004d9c:	dc05      	bgt.n	8004daa <__swbuf_r+0x4e>
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4628      	mov	r0, r5
 8004da2:	f7ff ff7f 	bl	8004ca4 <_fflush_r>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d1ed      	bne.n	8004d86 <__swbuf_r+0x2a>
 8004daa:	68a3      	ldr	r3, [r4, #8]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	60a3      	str	r3, [r4, #8]
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	6022      	str	r2, [r4, #0]
 8004db6:	701e      	strb	r6, [r3, #0]
 8004db8:	6962      	ldr	r2, [r4, #20]
 8004dba:	1c43      	adds	r3, r0, #1
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d004      	beq.n	8004dca <__swbuf_r+0x6e>
 8004dc0:	89a3      	ldrh	r3, [r4, #12]
 8004dc2:	07db      	lsls	r3, r3, #31
 8004dc4:	d5e1      	bpl.n	8004d8a <__swbuf_r+0x2e>
 8004dc6:	2e0a      	cmp	r6, #10
 8004dc8:	d1df      	bne.n	8004d8a <__swbuf_r+0x2e>
 8004dca:	4621      	mov	r1, r4
 8004dcc:	4628      	mov	r0, r5
 8004dce:	f7ff ff69 	bl	8004ca4 <_fflush_r>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d0d9      	beq.n	8004d8a <__swbuf_r+0x2e>
 8004dd6:	e7d6      	b.n	8004d86 <__swbuf_r+0x2a>

08004dd8 <__swsetup_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4b29      	ldr	r3, [pc, #164]	@ (8004e80 <__swsetup_r+0xa8>)
 8004ddc:	4605      	mov	r5, r0
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	460c      	mov	r4, r1
 8004de2:	b118      	cbz	r0, 8004dec <__swsetup_r+0x14>
 8004de4:	6a03      	ldr	r3, [r0, #32]
 8004de6:	b90b      	cbnz	r3, 8004dec <__swsetup_r+0x14>
 8004de8:	f7ff fce2 	bl	80047b0 <__sinit>
 8004dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004df0:	0719      	lsls	r1, r3, #28
 8004df2:	d422      	bmi.n	8004e3a <__swsetup_r+0x62>
 8004df4:	06da      	lsls	r2, r3, #27
 8004df6:	d407      	bmi.n	8004e08 <__swsetup_r+0x30>
 8004df8:	2209      	movs	r2, #9
 8004dfa:	602a      	str	r2, [r5, #0]
 8004dfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e00:	81a3      	strh	r3, [r4, #12]
 8004e02:	f04f 30ff 	mov.w	r0, #4294967295
 8004e06:	e033      	b.n	8004e70 <__swsetup_r+0x98>
 8004e08:	0758      	lsls	r0, r3, #29
 8004e0a:	d512      	bpl.n	8004e32 <__swsetup_r+0x5a>
 8004e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e0e:	b141      	cbz	r1, 8004e22 <__swsetup_r+0x4a>
 8004e10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e14:	4299      	cmp	r1, r3
 8004e16:	d002      	beq.n	8004e1e <__swsetup_r+0x46>
 8004e18:	4628      	mov	r0, r5
 8004e1a:	f7ff fdc7 	bl	80049ac <_free_r>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e22:	89a3      	ldrh	r3, [r4, #12]
 8004e24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004e28:	81a3      	strh	r3, [r4, #12]
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	6063      	str	r3, [r4, #4]
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	6023      	str	r3, [r4, #0]
 8004e32:	89a3      	ldrh	r3, [r4, #12]
 8004e34:	f043 0308 	orr.w	r3, r3, #8
 8004e38:	81a3      	strh	r3, [r4, #12]
 8004e3a:	6923      	ldr	r3, [r4, #16]
 8004e3c:	b94b      	cbnz	r3, 8004e52 <__swsetup_r+0x7a>
 8004e3e:	89a3      	ldrh	r3, [r4, #12]
 8004e40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004e44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e48:	d003      	beq.n	8004e52 <__swsetup_r+0x7a>
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	4628      	mov	r0, r5
 8004e4e:	f000 f84f 	bl	8004ef0 <__smakebuf_r>
 8004e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e56:	f013 0201 	ands.w	r2, r3, #1
 8004e5a:	d00a      	beq.n	8004e72 <__swsetup_r+0x9a>
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	60a2      	str	r2, [r4, #8]
 8004e60:	6962      	ldr	r2, [r4, #20]
 8004e62:	4252      	negs	r2, r2
 8004e64:	61a2      	str	r2, [r4, #24]
 8004e66:	6922      	ldr	r2, [r4, #16]
 8004e68:	b942      	cbnz	r2, 8004e7c <__swsetup_r+0xa4>
 8004e6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004e6e:	d1c5      	bne.n	8004dfc <__swsetup_r+0x24>
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
 8004e72:	0799      	lsls	r1, r3, #30
 8004e74:	bf58      	it	pl
 8004e76:	6962      	ldrpl	r2, [r4, #20]
 8004e78:	60a2      	str	r2, [r4, #8]
 8004e7a:	e7f4      	b.n	8004e66 <__swsetup_r+0x8e>
 8004e7c:	2000      	movs	r0, #0
 8004e7e:	e7f7      	b.n	8004e70 <__swsetup_r+0x98>
 8004e80:	20000020 	.word	0x20000020

08004e84 <_sbrk_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d06      	ldr	r5, [pc, #24]	@ (8004ea0 <_sbrk_r+0x1c>)
 8004e88:	2300      	movs	r3, #0
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	602b      	str	r3, [r5, #0]
 8004e90:	f7fc fe68 	bl	8001b64 <_sbrk>
 8004e94:	1c43      	adds	r3, r0, #1
 8004e96:	d102      	bne.n	8004e9e <_sbrk_r+0x1a>
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	b103      	cbz	r3, 8004e9e <_sbrk_r+0x1a>
 8004e9c:	6023      	str	r3, [r4, #0]
 8004e9e:	bd38      	pop	{r3, r4, r5, pc}
 8004ea0:	200002ec 	.word	0x200002ec

08004ea4 <__swhatbuf_r>:
 8004ea4:	b570      	push	{r4, r5, r6, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eac:	2900      	cmp	r1, #0
 8004eae:	b096      	sub	sp, #88	@ 0x58
 8004eb0:	4615      	mov	r5, r2
 8004eb2:	461e      	mov	r6, r3
 8004eb4:	da0d      	bge.n	8004ed2 <__swhatbuf_r+0x2e>
 8004eb6:	89a3      	ldrh	r3, [r4, #12]
 8004eb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004ebc:	f04f 0100 	mov.w	r1, #0
 8004ec0:	bf14      	ite	ne
 8004ec2:	2340      	movne	r3, #64	@ 0x40
 8004ec4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ec8:	2000      	movs	r0, #0
 8004eca:	6031      	str	r1, [r6, #0]
 8004ecc:	602b      	str	r3, [r5, #0]
 8004ece:	b016      	add	sp, #88	@ 0x58
 8004ed0:	bd70      	pop	{r4, r5, r6, pc}
 8004ed2:	466a      	mov	r2, sp
 8004ed4:	f000 f848 	bl	8004f68 <_fstat_r>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	dbec      	blt.n	8004eb6 <__swhatbuf_r+0x12>
 8004edc:	9901      	ldr	r1, [sp, #4]
 8004ede:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004ee2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004ee6:	4259      	negs	r1, r3
 8004ee8:	4159      	adcs	r1, r3
 8004eea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004eee:	e7eb      	b.n	8004ec8 <__swhatbuf_r+0x24>

08004ef0 <__smakebuf_r>:
 8004ef0:	898b      	ldrh	r3, [r1, #12]
 8004ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ef4:	079d      	lsls	r5, r3, #30
 8004ef6:	4606      	mov	r6, r0
 8004ef8:	460c      	mov	r4, r1
 8004efa:	d507      	bpl.n	8004f0c <__smakebuf_r+0x1c>
 8004efc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	6123      	str	r3, [r4, #16]
 8004f04:	2301      	movs	r3, #1
 8004f06:	6163      	str	r3, [r4, #20]
 8004f08:	b003      	add	sp, #12
 8004f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f0c:	ab01      	add	r3, sp, #4
 8004f0e:	466a      	mov	r2, sp
 8004f10:	f7ff ffc8 	bl	8004ea4 <__swhatbuf_r>
 8004f14:	9f00      	ldr	r7, [sp, #0]
 8004f16:	4605      	mov	r5, r0
 8004f18:	4639      	mov	r1, r7
 8004f1a:	4630      	mov	r0, r6
 8004f1c:	f7ff fdb2 	bl	8004a84 <_malloc_r>
 8004f20:	b948      	cbnz	r0, 8004f36 <__smakebuf_r+0x46>
 8004f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f26:	059a      	lsls	r2, r3, #22
 8004f28:	d4ee      	bmi.n	8004f08 <__smakebuf_r+0x18>
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	f043 0302 	orr.w	r3, r3, #2
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	e7e2      	b.n	8004efc <__smakebuf_r+0xc>
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	6020      	str	r0, [r4, #0]
 8004f3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f3e:	81a3      	strh	r3, [r4, #12]
 8004f40:	9b01      	ldr	r3, [sp, #4]
 8004f42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f46:	b15b      	cbz	r3, 8004f60 <__smakebuf_r+0x70>
 8004f48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f4c:	4630      	mov	r0, r6
 8004f4e:	f000 f81d 	bl	8004f8c <_isatty_r>
 8004f52:	b128      	cbz	r0, 8004f60 <__smakebuf_r+0x70>
 8004f54:	89a3      	ldrh	r3, [r4, #12]
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	f043 0301 	orr.w	r3, r3, #1
 8004f5e:	81a3      	strh	r3, [r4, #12]
 8004f60:	89a3      	ldrh	r3, [r4, #12]
 8004f62:	431d      	orrs	r5, r3
 8004f64:	81a5      	strh	r5, [r4, #12]
 8004f66:	e7cf      	b.n	8004f08 <__smakebuf_r+0x18>

08004f68 <_fstat_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d07      	ldr	r5, [pc, #28]	@ (8004f88 <_fstat_r+0x20>)
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	4604      	mov	r4, r0
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	602b      	str	r3, [r5, #0]
 8004f76:	f7fc fdcd 	bl	8001b14 <_fstat>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	d102      	bne.n	8004f84 <_fstat_r+0x1c>
 8004f7e:	682b      	ldr	r3, [r5, #0]
 8004f80:	b103      	cbz	r3, 8004f84 <_fstat_r+0x1c>
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	bd38      	pop	{r3, r4, r5, pc}
 8004f86:	bf00      	nop
 8004f88:	200002ec 	.word	0x200002ec

08004f8c <_isatty_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d06      	ldr	r5, [pc, #24]	@ (8004fa8 <_isatty_r+0x1c>)
 8004f90:	2300      	movs	r3, #0
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	602b      	str	r3, [r5, #0]
 8004f98:	f7fc fdcc 	bl	8001b34 <_isatty>
 8004f9c:	1c43      	adds	r3, r0, #1
 8004f9e:	d102      	bne.n	8004fa6 <_isatty_r+0x1a>
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	b103      	cbz	r3, 8004fa6 <_isatty_r+0x1a>
 8004fa4:	6023      	str	r3, [r4, #0]
 8004fa6:	bd38      	pop	{r3, r4, r5, pc}
 8004fa8:	200002ec 	.word	0x200002ec

08004fac <pow>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	ed2d 8b02 	vpush	{d8}
 8004fb2:	eeb0 8a40 	vmov.f32	s16, s0
 8004fb6:	eef0 8a60 	vmov.f32	s17, s1
 8004fba:	ec55 4b11 	vmov	r4, r5, d1
 8004fbe:	f000 f873 	bl	80050a8 <__ieee754_pow>
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	462b      	mov	r3, r5
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4629      	mov	r1, r5
 8004fca:	ec57 6b10 	vmov	r6, r7, d0
 8004fce:	f7fb fd71 	bl	8000ab4 <__aeabi_dcmpun>
 8004fd2:	2800      	cmp	r0, #0
 8004fd4:	d13b      	bne.n	800504e <pow+0xa2>
 8004fd6:	ec51 0b18 	vmov	r0, r1, d8
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f7fb fd37 	bl	8000a50 <__aeabi_dcmpeq>
 8004fe2:	b1b8      	cbz	r0, 8005014 <pow+0x68>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	f7fb fd30 	bl	8000a50 <__aeabi_dcmpeq>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d146      	bne.n	8005082 <pow+0xd6>
 8004ff4:	ec45 4b10 	vmov	d0, r4, r5
 8004ff8:	f000 f848 	bl	800508c <finite>
 8004ffc:	b338      	cbz	r0, 800504e <pow+0xa2>
 8004ffe:	2200      	movs	r2, #0
 8005000:	2300      	movs	r3, #0
 8005002:	4620      	mov	r0, r4
 8005004:	4629      	mov	r1, r5
 8005006:	f7fb fd2d 	bl	8000a64 <__aeabi_dcmplt>
 800500a:	b300      	cbz	r0, 800504e <pow+0xa2>
 800500c:	f7ff fca0 	bl	8004950 <__errno>
 8005010:	2322      	movs	r3, #34	@ 0x22
 8005012:	e01b      	b.n	800504c <pow+0xa0>
 8005014:	ec47 6b10 	vmov	d0, r6, r7
 8005018:	f000 f838 	bl	800508c <finite>
 800501c:	b9e0      	cbnz	r0, 8005058 <pow+0xac>
 800501e:	eeb0 0a48 	vmov.f32	s0, s16
 8005022:	eef0 0a68 	vmov.f32	s1, s17
 8005026:	f000 f831 	bl	800508c <finite>
 800502a:	b1a8      	cbz	r0, 8005058 <pow+0xac>
 800502c:	ec45 4b10 	vmov	d0, r4, r5
 8005030:	f000 f82c 	bl	800508c <finite>
 8005034:	b180      	cbz	r0, 8005058 <pow+0xac>
 8005036:	4632      	mov	r2, r6
 8005038:	463b      	mov	r3, r7
 800503a:	4630      	mov	r0, r6
 800503c:	4639      	mov	r1, r7
 800503e:	f7fb fd39 	bl	8000ab4 <__aeabi_dcmpun>
 8005042:	2800      	cmp	r0, #0
 8005044:	d0e2      	beq.n	800500c <pow+0x60>
 8005046:	f7ff fc83 	bl	8004950 <__errno>
 800504a:	2321      	movs	r3, #33	@ 0x21
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	ecbd 8b02 	vpop	{d8}
 8005052:	ec47 6b10 	vmov	d0, r6, r7
 8005056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005058:	2200      	movs	r2, #0
 800505a:	2300      	movs	r3, #0
 800505c:	4630      	mov	r0, r6
 800505e:	4639      	mov	r1, r7
 8005060:	f7fb fcf6 	bl	8000a50 <__aeabi_dcmpeq>
 8005064:	2800      	cmp	r0, #0
 8005066:	d0f2      	beq.n	800504e <pow+0xa2>
 8005068:	eeb0 0a48 	vmov.f32	s0, s16
 800506c:	eef0 0a68 	vmov.f32	s1, s17
 8005070:	f000 f80c 	bl	800508c <finite>
 8005074:	2800      	cmp	r0, #0
 8005076:	d0ea      	beq.n	800504e <pow+0xa2>
 8005078:	ec45 4b10 	vmov	d0, r4, r5
 800507c:	f000 f806 	bl	800508c <finite>
 8005080:	e7c3      	b.n	800500a <pow+0x5e>
 8005082:	4f01      	ldr	r7, [pc, #4]	@ (8005088 <pow+0xdc>)
 8005084:	2600      	movs	r6, #0
 8005086:	e7e2      	b.n	800504e <pow+0xa2>
 8005088:	3ff00000 	.word	0x3ff00000

0800508c <finite>:
 800508c:	b082      	sub	sp, #8
 800508e:	ed8d 0b00 	vstr	d0, [sp]
 8005092:	9801      	ldr	r0, [sp, #4]
 8005094:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005098:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800509c:	0fc0      	lsrs	r0, r0, #31
 800509e:	b002      	add	sp, #8
 80050a0:	4770      	bx	lr
 80050a2:	0000      	movs	r0, r0
 80050a4:	0000      	movs	r0, r0
	...

080050a8 <__ieee754_pow>:
 80050a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ac:	b091      	sub	sp, #68	@ 0x44
 80050ae:	ed8d 1b00 	vstr	d1, [sp]
 80050b2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80050b6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80050ba:	ea5a 0001 	orrs.w	r0, sl, r1
 80050be:	ec57 6b10 	vmov	r6, r7, d0
 80050c2:	d113      	bne.n	80050ec <__ieee754_pow+0x44>
 80050c4:	19b3      	adds	r3, r6, r6
 80050c6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80050ca:	4152      	adcs	r2, r2
 80050cc:	4298      	cmp	r0, r3
 80050ce:	4b98      	ldr	r3, [pc, #608]	@ (8005330 <__ieee754_pow+0x288>)
 80050d0:	4193      	sbcs	r3, r2
 80050d2:	f080 84ea 	bcs.w	8005aaa <__ieee754_pow+0xa02>
 80050d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050da:	4630      	mov	r0, r6
 80050dc:	4639      	mov	r1, r7
 80050de:	f7fb f899 	bl	8000214 <__adddf3>
 80050e2:	ec41 0b10 	vmov	d0, r0, r1
 80050e6:	b011      	add	sp, #68	@ 0x44
 80050e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ec:	4a91      	ldr	r2, [pc, #580]	@ (8005334 <__ieee754_pow+0x28c>)
 80050ee:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80050f2:	4590      	cmp	r8, r2
 80050f4:	463d      	mov	r5, r7
 80050f6:	4633      	mov	r3, r6
 80050f8:	d806      	bhi.n	8005108 <__ieee754_pow+0x60>
 80050fa:	d101      	bne.n	8005100 <__ieee754_pow+0x58>
 80050fc:	2e00      	cmp	r6, #0
 80050fe:	d1ea      	bne.n	80050d6 <__ieee754_pow+0x2e>
 8005100:	4592      	cmp	sl, r2
 8005102:	d801      	bhi.n	8005108 <__ieee754_pow+0x60>
 8005104:	d10e      	bne.n	8005124 <__ieee754_pow+0x7c>
 8005106:	b169      	cbz	r1, 8005124 <__ieee754_pow+0x7c>
 8005108:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800510c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8005110:	431d      	orrs	r5, r3
 8005112:	d1e0      	bne.n	80050d6 <__ieee754_pow+0x2e>
 8005114:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005118:	18db      	adds	r3, r3, r3
 800511a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800511e:	4152      	adcs	r2, r2
 8005120:	429d      	cmp	r5, r3
 8005122:	e7d4      	b.n	80050ce <__ieee754_pow+0x26>
 8005124:	2d00      	cmp	r5, #0
 8005126:	46c3      	mov	fp, r8
 8005128:	da3a      	bge.n	80051a0 <__ieee754_pow+0xf8>
 800512a:	4a83      	ldr	r2, [pc, #524]	@ (8005338 <__ieee754_pow+0x290>)
 800512c:	4592      	cmp	sl, r2
 800512e:	d84d      	bhi.n	80051cc <__ieee754_pow+0x124>
 8005130:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8005134:	4592      	cmp	sl, r2
 8005136:	f240 84c7 	bls.w	8005ac8 <__ieee754_pow+0xa20>
 800513a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800513e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005142:	2a14      	cmp	r2, #20
 8005144:	dd0f      	ble.n	8005166 <__ieee754_pow+0xbe>
 8005146:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800514a:	fa21 f402 	lsr.w	r4, r1, r2
 800514e:	fa04 f202 	lsl.w	r2, r4, r2
 8005152:	428a      	cmp	r2, r1
 8005154:	f040 84b8 	bne.w	8005ac8 <__ieee754_pow+0xa20>
 8005158:	f004 0401 	and.w	r4, r4, #1
 800515c:	f1c4 0402 	rsb	r4, r4, #2
 8005160:	2900      	cmp	r1, #0
 8005162:	d158      	bne.n	8005216 <__ieee754_pow+0x16e>
 8005164:	e00e      	b.n	8005184 <__ieee754_pow+0xdc>
 8005166:	2900      	cmp	r1, #0
 8005168:	d154      	bne.n	8005214 <__ieee754_pow+0x16c>
 800516a:	f1c2 0214 	rsb	r2, r2, #20
 800516e:	fa4a f402 	asr.w	r4, sl, r2
 8005172:	fa04 f202 	lsl.w	r2, r4, r2
 8005176:	4552      	cmp	r2, sl
 8005178:	f040 84a3 	bne.w	8005ac2 <__ieee754_pow+0xa1a>
 800517c:	f004 0401 	and.w	r4, r4, #1
 8005180:	f1c4 0402 	rsb	r4, r4, #2
 8005184:	4a6d      	ldr	r2, [pc, #436]	@ (800533c <__ieee754_pow+0x294>)
 8005186:	4592      	cmp	sl, r2
 8005188:	d12e      	bne.n	80051e8 <__ieee754_pow+0x140>
 800518a:	f1b9 0f00 	cmp.w	r9, #0
 800518e:	f280 8494 	bge.w	8005aba <__ieee754_pow+0xa12>
 8005192:	496a      	ldr	r1, [pc, #424]	@ (800533c <__ieee754_pow+0x294>)
 8005194:	4632      	mov	r2, r6
 8005196:	463b      	mov	r3, r7
 8005198:	2000      	movs	r0, #0
 800519a:	f7fb fb1b 	bl	80007d4 <__aeabi_ddiv>
 800519e:	e7a0      	b.n	80050e2 <__ieee754_pow+0x3a>
 80051a0:	2400      	movs	r4, #0
 80051a2:	bbc1      	cbnz	r1, 8005216 <__ieee754_pow+0x16e>
 80051a4:	4a63      	ldr	r2, [pc, #396]	@ (8005334 <__ieee754_pow+0x28c>)
 80051a6:	4592      	cmp	sl, r2
 80051a8:	d1ec      	bne.n	8005184 <__ieee754_pow+0xdc>
 80051aa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80051ae:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80051b2:	431a      	orrs	r2, r3
 80051b4:	f000 8479 	beq.w	8005aaa <__ieee754_pow+0xa02>
 80051b8:	4b61      	ldr	r3, [pc, #388]	@ (8005340 <__ieee754_pow+0x298>)
 80051ba:	4598      	cmp	r8, r3
 80051bc:	d908      	bls.n	80051d0 <__ieee754_pow+0x128>
 80051be:	f1b9 0f00 	cmp.w	r9, #0
 80051c2:	f2c0 8476 	blt.w	8005ab2 <__ieee754_pow+0xa0a>
 80051c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ca:	e78a      	b.n	80050e2 <__ieee754_pow+0x3a>
 80051cc:	2402      	movs	r4, #2
 80051ce:	e7e8      	b.n	80051a2 <__ieee754_pow+0xfa>
 80051d0:	f1b9 0f00 	cmp.w	r9, #0
 80051d4:	f04f 0000 	mov.w	r0, #0
 80051d8:	f04f 0100 	mov.w	r1, #0
 80051dc:	da81      	bge.n	80050e2 <__ieee754_pow+0x3a>
 80051de:	e9dd 0300 	ldrd	r0, r3, [sp]
 80051e2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80051e6:	e77c      	b.n	80050e2 <__ieee754_pow+0x3a>
 80051e8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80051ec:	d106      	bne.n	80051fc <__ieee754_pow+0x154>
 80051ee:	4632      	mov	r2, r6
 80051f0:	463b      	mov	r3, r7
 80051f2:	4630      	mov	r0, r6
 80051f4:	4639      	mov	r1, r7
 80051f6:	f7fb f9c3 	bl	8000580 <__aeabi_dmul>
 80051fa:	e772      	b.n	80050e2 <__ieee754_pow+0x3a>
 80051fc:	4a51      	ldr	r2, [pc, #324]	@ (8005344 <__ieee754_pow+0x29c>)
 80051fe:	4591      	cmp	r9, r2
 8005200:	d109      	bne.n	8005216 <__ieee754_pow+0x16e>
 8005202:	2d00      	cmp	r5, #0
 8005204:	db07      	blt.n	8005216 <__ieee754_pow+0x16e>
 8005206:	ec47 6b10 	vmov	d0, r6, r7
 800520a:	b011      	add	sp, #68	@ 0x44
 800520c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005210:	f000 bd52 	b.w	8005cb8 <__ieee754_sqrt>
 8005214:	2400      	movs	r4, #0
 8005216:	ec47 6b10 	vmov	d0, r6, r7
 800521a:	9302      	str	r3, [sp, #8]
 800521c:	f000 fc88 	bl	8005b30 <fabs>
 8005220:	9b02      	ldr	r3, [sp, #8]
 8005222:	ec51 0b10 	vmov	r0, r1, d0
 8005226:	bb53      	cbnz	r3, 800527e <__ieee754_pow+0x1d6>
 8005228:	4b44      	ldr	r3, [pc, #272]	@ (800533c <__ieee754_pow+0x294>)
 800522a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800522e:	429a      	cmp	r2, r3
 8005230:	d002      	beq.n	8005238 <__ieee754_pow+0x190>
 8005232:	f1b8 0f00 	cmp.w	r8, #0
 8005236:	d122      	bne.n	800527e <__ieee754_pow+0x1d6>
 8005238:	f1b9 0f00 	cmp.w	r9, #0
 800523c:	da05      	bge.n	800524a <__ieee754_pow+0x1a2>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	2000      	movs	r0, #0
 8005244:	493d      	ldr	r1, [pc, #244]	@ (800533c <__ieee754_pow+0x294>)
 8005246:	f7fb fac5 	bl	80007d4 <__aeabi_ddiv>
 800524a:	2d00      	cmp	r5, #0
 800524c:	f6bf af49 	bge.w	80050e2 <__ieee754_pow+0x3a>
 8005250:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8005254:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8005258:	ea58 0804 	orrs.w	r8, r8, r4
 800525c:	d108      	bne.n	8005270 <__ieee754_pow+0x1c8>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4610      	mov	r0, r2
 8005264:	4619      	mov	r1, r3
 8005266:	f7fa ffd3 	bl	8000210 <__aeabi_dsub>
 800526a:	4602      	mov	r2, r0
 800526c:	460b      	mov	r3, r1
 800526e:	e794      	b.n	800519a <__ieee754_pow+0xf2>
 8005270:	2c01      	cmp	r4, #1
 8005272:	f47f af36 	bne.w	80050e2 <__ieee754_pow+0x3a>
 8005276:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800527a:	4619      	mov	r1, r3
 800527c:	e731      	b.n	80050e2 <__ieee754_pow+0x3a>
 800527e:	0feb      	lsrs	r3, r5, #31
 8005280:	3b01      	subs	r3, #1
 8005282:	ea53 0204 	orrs.w	r2, r3, r4
 8005286:	d102      	bne.n	800528e <__ieee754_pow+0x1e6>
 8005288:	4632      	mov	r2, r6
 800528a:	463b      	mov	r3, r7
 800528c:	e7e9      	b.n	8005262 <__ieee754_pow+0x1ba>
 800528e:	3c01      	subs	r4, #1
 8005290:	431c      	orrs	r4, r3
 8005292:	d016      	beq.n	80052c2 <__ieee754_pow+0x21a>
 8005294:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005320 <__ieee754_pow+0x278>
 8005298:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800529c:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052a0:	f240 8112 	bls.w	80054c8 <__ieee754_pow+0x420>
 80052a4:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <__ieee754_pow+0x2a0>)
 80052a6:	459a      	cmp	sl, r3
 80052a8:	4b25      	ldr	r3, [pc, #148]	@ (8005340 <__ieee754_pow+0x298>)
 80052aa:	d916      	bls.n	80052da <__ieee754_pow+0x232>
 80052ac:	4598      	cmp	r8, r3
 80052ae:	d80b      	bhi.n	80052c8 <__ieee754_pow+0x220>
 80052b0:	f1b9 0f00 	cmp.w	r9, #0
 80052b4:	da0b      	bge.n	80052ce <__ieee754_pow+0x226>
 80052b6:	2000      	movs	r0, #0
 80052b8:	b011      	add	sp, #68	@ 0x44
 80052ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052be:	f000 bcf3 	b.w	8005ca8 <__math_oflow>
 80052c2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8005328 <__ieee754_pow+0x280>
 80052c6:	e7e7      	b.n	8005298 <__ieee754_pow+0x1f0>
 80052c8:	f1b9 0f00 	cmp.w	r9, #0
 80052cc:	dcf3      	bgt.n	80052b6 <__ieee754_pow+0x20e>
 80052ce:	2000      	movs	r0, #0
 80052d0:	b011      	add	sp, #68	@ 0x44
 80052d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d6:	f000 bcdf 	b.w	8005c98 <__math_uflow>
 80052da:	4598      	cmp	r8, r3
 80052dc:	d20c      	bcs.n	80052f8 <__ieee754_pow+0x250>
 80052de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052e2:	2200      	movs	r2, #0
 80052e4:	2300      	movs	r3, #0
 80052e6:	f7fb fbbd 	bl	8000a64 <__aeabi_dcmplt>
 80052ea:	3800      	subs	r0, #0
 80052ec:	bf18      	it	ne
 80052ee:	2001      	movne	r0, #1
 80052f0:	f1b9 0f00 	cmp.w	r9, #0
 80052f4:	daec      	bge.n	80052d0 <__ieee754_pow+0x228>
 80052f6:	e7df      	b.n	80052b8 <__ieee754_pow+0x210>
 80052f8:	4b10      	ldr	r3, [pc, #64]	@ (800533c <__ieee754_pow+0x294>)
 80052fa:	4598      	cmp	r8, r3
 80052fc:	f04f 0200 	mov.w	r2, #0
 8005300:	d924      	bls.n	800534c <__ieee754_pow+0x2a4>
 8005302:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005306:	2300      	movs	r3, #0
 8005308:	f7fb fbac 	bl	8000a64 <__aeabi_dcmplt>
 800530c:	3800      	subs	r0, #0
 800530e:	bf18      	it	ne
 8005310:	2001      	movne	r0, #1
 8005312:	f1b9 0f00 	cmp.w	r9, #0
 8005316:	dccf      	bgt.n	80052b8 <__ieee754_pow+0x210>
 8005318:	e7da      	b.n	80052d0 <__ieee754_pow+0x228>
 800531a:	bf00      	nop
 800531c:	f3af 8000 	nop.w
 8005320:	00000000 	.word	0x00000000
 8005324:	3ff00000 	.word	0x3ff00000
 8005328:	00000000 	.word	0x00000000
 800532c:	bff00000 	.word	0xbff00000
 8005330:	fff00000 	.word	0xfff00000
 8005334:	7ff00000 	.word	0x7ff00000
 8005338:	433fffff 	.word	0x433fffff
 800533c:	3ff00000 	.word	0x3ff00000
 8005340:	3fefffff 	.word	0x3fefffff
 8005344:	3fe00000 	.word	0x3fe00000
 8005348:	43f00000 	.word	0x43f00000
 800534c:	4b5a      	ldr	r3, [pc, #360]	@ (80054b8 <__ieee754_pow+0x410>)
 800534e:	f7fa ff5f 	bl	8000210 <__aeabi_dsub>
 8005352:	a351      	add	r3, pc, #324	@ (adr r3, 8005498 <__ieee754_pow+0x3f0>)
 8005354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005358:	4604      	mov	r4, r0
 800535a:	460d      	mov	r5, r1
 800535c:	f7fb f910 	bl	8000580 <__aeabi_dmul>
 8005360:	a34f      	add	r3, pc, #316	@ (adr r3, 80054a0 <__ieee754_pow+0x3f8>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	4606      	mov	r6, r0
 8005368:	460f      	mov	r7, r1
 800536a:	4620      	mov	r0, r4
 800536c:	4629      	mov	r1, r5
 800536e:	f7fb f907 	bl	8000580 <__aeabi_dmul>
 8005372:	4b52      	ldr	r3, [pc, #328]	@ (80054bc <__ieee754_pow+0x414>)
 8005374:	4682      	mov	sl, r0
 8005376:	468b      	mov	fp, r1
 8005378:	2200      	movs	r2, #0
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	f7fb f8ff 	bl	8000580 <__aeabi_dmul>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	a148      	add	r1, pc, #288	@ (adr r1, 80054a8 <__ieee754_pow+0x400>)
 8005388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800538c:	f7fa ff40 	bl	8000210 <__aeabi_dsub>
 8005390:	4622      	mov	r2, r4
 8005392:	462b      	mov	r3, r5
 8005394:	f7fb f8f4 	bl	8000580 <__aeabi_dmul>
 8005398:	4602      	mov	r2, r0
 800539a:	460b      	mov	r3, r1
 800539c:	2000      	movs	r0, #0
 800539e:	4948      	ldr	r1, [pc, #288]	@ (80054c0 <__ieee754_pow+0x418>)
 80053a0:	f7fa ff36 	bl	8000210 <__aeabi_dsub>
 80053a4:	4622      	mov	r2, r4
 80053a6:	4680      	mov	r8, r0
 80053a8:	4689      	mov	r9, r1
 80053aa:	462b      	mov	r3, r5
 80053ac:	4620      	mov	r0, r4
 80053ae:	4629      	mov	r1, r5
 80053b0:	f7fb f8e6 	bl	8000580 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4640      	mov	r0, r8
 80053ba:	4649      	mov	r1, r9
 80053bc:	f7fb f8e0 	bl	8000580 <__aeabi_dmul>
 80053c0:	a33b      	add	r3, pc, #236	@ (adr r3, 80054b0 <__ieee754_pow+0x408>)
 80053c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c6:	f7fb f8db 	bl	8000580 <__aeabi_dmul>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4650      	mov	r0, sl
 80053d0:	4659      	mov	r1, fp
 80053d2:	f7fa ff1d 	bl	8000210 <__aeabi_dsub>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4680      	mov	r8, r0
 80053dc:	4689      	mov	r9, r1
 80053de:	4630      	mov	r0, r6
 80053e0:	4639      	mov	r1, r7
 80053e2:	f7fa ff17 	bl	8000214 <__adddf3>
 80053e6:	2400      	movs	r4, #0
 80053e8:	4632      	mov	r2, r6
 80053ea:	463b      	mov	r3, r7
 80053ec:	4620      	mov	r0, r4
 80053ee:	460d      	mov	r5, r1
 80053f0:	f7fa ff0e 	bl	8000210 <__aeabi_dsub>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	4640      	mov	r0, r8
 80053fa:	4649      	mov	r1, r9
 80053fc:	f7fa ff08 	bl	8000210 <__aeabi_dsub>
 8005400:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005404:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005408:	2300      	movs	r3, #0
 800540a:	9304      	str	r3, [sp, #16]
 800540c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8005410:	4606      	mov	r6, r0
 8005412:	460f      	mov	r7, r1
 8005414:	4652      	mov	r2, sl
 8005416:	465b      	mov	r3, fp
 8005418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800541c:	f7fa fef8 	bl	8000210 <__aeabi_dsub>
 8005420:	4622      	mov	r2, r4
 8005422:	462b      	mov	r3, r5
 8005424:	f7fb f8ac 	bl	8000580 <__aeabi_dmul>
 8005428:	e9dd 2300 	ldrd	r2, r3, [sp]
 800542c:	4680      	mov	r8, r0
 800542e:	4689      	mov	r9, r1
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	f7fb f8a4 	bl	8000580 <__aeabi_dmul>
 8005438:	4602      	mov	r2, r0
 800543a:	460b      	mov	r3, r1
 800543c:	4640      	mov	r0, r8
 800543e:	4649      	mov	r1, r9
 8005440:	f7fa fee8 	bl	8000214 <__adddf3>
 8005444:	4652      	mov	r2, sl
 8005446:	465b      	mov	r3, fp
 8005448:	4606      	mov	r6, r0
 800544a:	460f      	mov	r7, r1
 800544c:	4620      	mov	r0, r4
 800544e:	4629      	mov	r1, r5
 8005450:	f7fb f896 	bl	8000580 <__aeabi_dmul>
 8005454:	460b      	mov	r3, r1
 8005456:	4602      	mov	r2, r0
 8005458:	4680      	mov	r8, r0
 800545a:	4689      	mov	r9, r1
 800545c:	4630      	mov	r0, r6
 800545e:	4639      	mov	r1, r7
 8005460:	f7fa fed8 	bl	8000214 <__adddf3>
 8005464:	4b17      	ldr	r3, [pc, #92]	@ (80054c4 <__ieee754_pow+0x41c>)
 8005466:	4299      	cmp	r1, r3
 8005468:	4604      	mov	r4, r0
 800546a:	460d      	mov	r5, r1
 800546c:	468a      	mov	sl, r1
 800546e:	468b      	mov	fp, r1
 8005470:	f340 82ef 	ble.w	8005a52 <__ieee754_pow+0x9aa>
 8005474:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8005478:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800547c:	4303      	orrs	r3, r0
 800547e:	f000 81e8 	beq.w	8005852 <__ieee754_pow+0x7aa>
 8005482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005486:	2200      	movs	r2, #0
 8005488:	2300      	movs	r3, #0
 800548a:	f7fb faeb 	bl	8000a64 <__aeabi_dcmplt>
 800548e:	3800      	subs	r0, #0
 8005490:	bf18      	it	ne
 8005492:	2001      	movne	r0, #1
 8005494:	e710      	b.n	80052b8 <__ieee754_pow+0x210>
 8005496:	bf00      	nop
 8005498:	60000000 	.word	0x60000000
 800549c:	3ff71547 	.word	0x3ff71547
 80054a0:	f85ddf44 	.word	0xf85ddf44
 80054a4:	3e54ae0b 	.word	0x3e54ae0b
 80054a8:	55555555 	.word	0x55555555
 80054ac:	3fd55555 	.word	0x3fd55555
 80054b0:	652b82fe 	.word	0x652b82fe
 80054b4:	3ff71547 	.word	0x3ff71547
 80054b8:	3ff00000 	.word	0x3ff00000
 80054bc:	3fd00000 	.word	0x3fd00000
 80054c0:	3fe00000 	.word	0x3fe00000
 80054c4:	408fffff 	.word	0x408fffff
 80054c8:	4bd5      	ldr	r3, [pc, #852]	@ (8005820 <__ieee754_pow+0x778>)
 80054ca:	402b      	ands	r3, r5
 80054cc:	2200      	movs	r2, #0
 80054ce:	b92b      	cbnz	r3, 80054dc <__ieee754_pow+0x434>
 80054d0:	4bd4      	ldr	r3, [pc, #848]	@ (8005824 <__ieee754_pow+0x77c>)
 80054d2:	f7fb f855 	bl	8000580 <__aeabi_dmul>
 80054d6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80054da:	468b      	mov	fp, r1
 80054dc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80054e0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80054e4:	4413      	add	r3, r2
 80054e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80054e8:	4bcf      	ldr	r3, [pc, #828]	@ (8005828 <__ieee754_pow+0x780>)
 80054ea:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80054ee:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80054f2:	459b      	cmp	fp, r3
 80054f4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80054f8:	dd08      	ble.n	800550c <__ieee754_pow+0x464>
 80054fa:	4bcc      	ldr	r3, [pc, #816]	@ (800582c <__ieee754_pow+0x784>)
 80054fc:	459b      	cmp	fp, r3
 80054fe:	f340 81a5 	ble.w	800584c <__ieee754_pow+0x7a4>
 8005502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005504:	3301      	adds	r3, #1
 8005506:	930a      	str	r3, [sp, #40]	@ 0x28
 8005508:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800550c:	f04f 0a00 	mov.w	sl, #0
 8005510:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005514:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005516:	4bc6      	ldr	r3, [pc, #792]	@ (8005830 <__ieee754_pow+0x788>)
 8005518:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800551c:	ed93 7b00 	vldr	d7, [r3]
 8005520:	4629      	mov	r1, r5
 8005522:	ec53 2b17 	vmov	r2, r3, d7
 8005526:	ed8d 7b06 	vstr	d7, [sp, #24]
 800552a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800552e:	f7fa fe6f 	bl	8000210 <__aeabi_dsub>
 8005532:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005536:	4606      	mov	r6, r0
 8005538:	460f      	mov	r7, r1
 800553a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800553e:	f7fa fe69 	bl	8000214 <__adddf3>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	2000      	movs	r0, #0
 8005548:	49ba      	ldr	r1, [pc, #744]	@ (8005834 <__ieee754_pow+0x78c>)
 800554a:	f7fb f943 	bl	80007d4 <__aeabi_ddiv>
 800554e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8005552:	4602      	mov	r2, r0
 8005554:	460b      	mov	r3, r1
 8005556:	4630      	mov	r0, r6
 8005558:	4639      	mov	r1, r7
 800555a:	f7fb f811 	bl	8000580 <__aeabi_dmul>
 800555e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005562:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8005566:	106d      	asrs	r5, r5, #1
 8005568:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800556c:	f04f 0b00 	mov.w	fp, #0
 8005570:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8005574:	4661      	mov	r1, ip
 8005576:	2200      	movs	r2, #0
 8005578:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800557c:	4658      	mov	r0, fp
 800557e:	46e1      	mov	r9, ip
 8005580:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8005584:	4614      	mov	r4, r2
 8005586:	461d      	mov	r5, r3
 8005588:	f7fa fffa 	bl	8000580 <__aeabi_dmul>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4630      	mov	r0, r6
 8005592:	4639      	mov	r1, r7
 8005594:	f7fa fe3c 	bl	8000210 <__aeabi_dsub>
 8005598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800559c:	4606      	mov	r6, r0
 800559e:	460f      	mov	r7, r1
 80055a0:	4620      	mov	r0, r4
 80055a2:	4629      	mov	r1, r5
 80055a4:	f7fa fe34 	bl	8000210 <__aeabi_dsub>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055b0:	f7fa fe2e 	bl	8000210 <__aeabi_dsub>
 80055b4:	465a      	mov	r2, fp
 80055b6:	464b      	mov	r3, r9
 80055b8:	f7fa ffe2 	bl	8000580 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4630      	mov	r0, r6
 80055c2:	4639      	mov	r1, r7
 80055c4:	f7fa fe24 	bl	8000210 <__aeabi_dsub>
 80055c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80055cc:	f7fa ffd8 	bl	8000580 <__aeabi_dmul>
 80055d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055d8:	4610      	mov	r0, r2
 80055da:	4619      	mov	r1, r3
 80055dc:	f7fa ffd0 	bl	8000580 <__aeabi_dmul>
 80055e0:	a37d      	add	r3, pc, #500	@ (adr r3, 80057d8 <__ieee754_pow+0x730>)
 80055e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e6:	4604      	mov	r4, r0
 80055e8:	460d      	mov	r5, r1
 80055ea:	f7fa ffc9 	bl	8000580 <__aeabi_dmul>
 80055ee:	a37c      	add	r3, pc, #496	@ (adr r3, 80057e0 <__ieee754_pow+0x738>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f7fa fe0e 	bl	8000214 <__adddf3>
 80055f8:	4622      	mov	r2, r4
 80055fa:	462b      	mov	r3, r5
 80055fc:	f7fa ffc0 	bl	8000580 <__aeabi_dmul>
 8005600:	a379      	add	r3, pc, #484	@ (adr r3, 80057e8 <__ieee754_pow+0x740>)
 8005602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005606:	f7fa fe05 	bl	8000214 <__adddf3>
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	f7fa ffb7 	bl	8000580 <__aeabi_dmul>
 8005612:	a377      	add	r3, pc, #476	@ (adr r3, 80057f0 <__ieee754_pow+0x748>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	f7fa fdfc 	bl	8000214 <__adddf3>
 800561c:	4622      	mov	r2, r4
 800561e:	462b      	mov	r3, r5
 8005620:	f7fa ffae 	bl	8000580 <__aeabi_dmul>
 8005624:	a374      	add	r3, pc, #464	@ (adr r3, 80057f8 <__ieee754_pow+0x750>)
 8005626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800562a:	f7fa fdf3 	bl	8000214 <__adddf3>
 800562e:	4622      	mov	r2, r4
 8005630:	462b      	mov	r3, r5
 8005632:	f7fa ffa5 	bl	8000580 <__aeabi_dmul>
 8005636:	a372      	add	r3, pc, #456	@ (adr r3, 8005800 <__ieee754_pow+0x758>)
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f7fa fdea 	bl	8000214 <__adddf3>
 8005640:	4622      	mov	r2, r4
 8005642:	4606      	mov	r6, r0
 8005644:	460f      	mov	r7, r1
 8005646:	462b      	mov	r3, r5
 8005648:	4620      	mov	r0, r4
 800564a:	4629      	mov	r1, r5
 800564c:	f7fa ff98 	bl	8000580 <__aeabi_dmul>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4630      	mov	r0, r6
 8005656:	4639      	mov	r1, r7
 8005658:	f7fa ff92 	bl	8000580 <__aeabi_dmul>
 800565c:	465a      	mov	r2, fp
 800565e:	4604      	mov	r4, r0
 8005660:	460d      	mov	r5, r1
 8005662:	464b      	mov	r3, r9
 8005664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005668:	f7fa fdd4 	bl	8000214 <__adddf3>
 800566c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005670:	f7fa ff86 	bl	8000580 <__aeabi_dmul>
 8005674:	4622      	mov	r2, r4
 8005676:	462b      	mov	r3, r5
 8005678:	f7fa fdcc 	bl	8000214 <__adddf3>
 800567c:	465a      	mov	r2, fp
 800567e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005682:	464b      	mov	r3, r9
 8005684:	4658      	mov	r0, fp
 8005686:	4649      	mov	r1, r9
 8005688:	f7fa ff7a 	bl	8000580 <__aeabi_dmul>
 800568c:	4b6a      	ldr	r3, [pc, #424]	@ (8005838 <__ieee754_pow+0x790>)
 800568e:	2200      	movs	r2, #0
 8005690:	4606      	mov	r6, r0
 8005692:	460f      	mov	r7, r1
 8005694:	f7fa fdbe 	bl	8000214 <__adddf3>
 8005698:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800569c:	f7fa fdba 	bl	8000214 <__adddf3>
 80056a0:	46d8      	mov	r8, fp
 80056a2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 80056a6:	460d      	mov	r5, r1
 80056a8:	465a      	mov	r2, fp
 80056aa:	460b      	mov	r3, r1
 80056ac:	4640      	mov	r0, r8
 80056ae:	4649      	mov	r1, r9
 80056b0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80056b4:	f7fa ff64 	bl	8000580 <__aeabi_dmul>
 80056b8:	465c      	mov	r4, fp
 80056ba:	4680      	mov	r8, r0
 80056bc:	4689      	mov	r9, r1
 80056be:	4b5e      	ldr	r3, [pc, #376]	@ (8005838 <__ieee754_pow+0x790>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	4620      	mov	r0, r4
 80056c4:	4629      	mov	r1, r5
 80056c6:	f7fa fda3 	bl	8000210 <__aeabi_dsub>
 80056ca:	4632      	mov	r2, r6
 80056cc:	463b      	mov	r3, r7
 80056ce:	f7fa fd9f 	bl	8000210 <__aeabi_dsub>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80056da:	f7fa fd99 	bl	8000210 <__aeabi_dsub>
 80056de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056e2:	f7fa ff4d 	bl	8000580 <__aeabi_dmul>
 80056e6:	4622      	mov	r2, r4
 80056e8:	4606      	mov	r6, r0
 80056ea:	460f      	mov	r7, r1
 80056ec:	462b      	mov	r3, r5
 80056ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056f2:	f7fa ff45 	bl	8000580 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4630      	mov	r0, r6
 80056fc:	4639      	mov	r1, r7
 80056fe:	f7fa fd89 	bl	8000214 <__adddf3>
 8005702:	4606      	mov	r6, r0
 8005704:	460f      	mov	r7, r1
 8005706:	4602      	mov	r2, r0
 8005708:	460b      	mov	r3, r1
 800570a:	4640      	mov	r0, r8
 800570c:	4649      	mov	r1, r9
 800570e:	f7fa fd81 	bl	8000214 <__adddf3>
 8005712:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8005716:	a33c      	add	r3, pc, #240	@ (adr r3, 8005808 <__ieee754_pow+0x760>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	4658      	mov	r0, fp
 800571e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8005722:	460d      	mov	r5, r1
 8005724:	f7fa ff2c 	bl	8000580 <__aeabi_dmul>
 8005728:	465c      	mov	r4, fp
 800572a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800572e:	4642      	mov	r2, r8
 8005730:	464b      	mov	r3, r9
 8005732:	4620      	mov	r0, r4
 8005734:	4629      	mov	r1, r5
 8005736:	f7fa fd6b 	bl	8000210 <__aeabi_dsub>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4630      	mov	r0, r6
 8005740:	4639      	mov	r1, r7
 8005742:	f7fa fd65 	bl	8000210 <__aeabi_dsub>
 8005746:	a332      	add	r3, pc, #200	@ (adr r3, 8005810 <__ieee754_pow+0x768>)
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f7fa ff18 	bl	8000580 <__aeabi_dmul>
 8005750:	a331      	add	r3, pc, #196	@ (adr r3, 8005818 <__ieee754_pow+0x770>)
 8005752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005756:	4606      	mov	r6, r0
 8005758:	460f      	mov	r7, r1
 800575a:	4620      	mov	r0, r4
 800575c:	4629      	mov	r1, r5
 800575e:	f7fa ff0f 	bl	8000580 <__aeabi_dmul>
 8005762:	4602      	mov	r2, r0
 8005764:	460b      	mov	r3, r1
 8005766:	4630      	mov	r0, r6
 8005768:	4639      	mov	r1, r7
 800576a:	f7fa fd53 	bl	8000214 <__adddf3>
 800576e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005770:	4b32      	ldr	r3, [pc, #200]	@ (800583c <__ieee754_pow+0x794>)
 8005772:	4413      	add	r3, r2
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa fd4c 	bl	8000214 <__adddf3>
 800577c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005780:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005782:	f7fa fe93 	bl	80004ac <__aeabi_i2d>
 8005786:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005788:	4b2d      	ldr	r3, [pc, #180]	@ (8005840 <__ieee754_pow+0x798>)
 800578a:	4413      	add	r3, r2
 800578c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005790:	4606      	mov	r6, r0
 8005792:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005796:	460f      	mov	r7, r1
 8005798:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800579c:	f7fa fd3a 	bl	8000214 <__adddf3>
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	f7fa fd36 	bl	8000214 <__adddf3>
 80057a8:	4632      	mov	r2, r6
 80057aa:	463b      	mov	r3, r7
 80057ac:	f7fa fd32 	bl	8000214 <__adddf3>
 80057b0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	4658      	mov	r0, fp
 80057ba:	460d      	mov	r5, r1
 80057bc:	f7fa fd28 	bl	8000210 <__aeabi_dsub>
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	f7fa fd24 	bl	8000210 <__aeabi_dsub>
 80057c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057cc:	f7fa fd20 	bl	8000210 <__aeabi_dsub>
 80057d0:	465c      	mov	r4, fp
 80057d2:	4602      	mov	r2, r0
 80057d4:	e036      	b.n	8005844 <__ieee754_pow+0x79c>
 80057d6:	bf00      	nop
 80057d8:	4a454eef 	.word	0x4a454eef
 80057dc:	3fca7e28 	.word	0x3fca7e28
 80057e0:	93c9db65 	.word	0x93c9db65
 80057e4:	3fcd864a 	.word	0x3fcd864a
 80057e8:	a91d4101 	.word	0xa91d4101
 80057ec:	3fd17460 	.word	0x3fd17460
 80057f0:	518f264d 	.word	0x518f264d
 80057f4:	3fd55555 	.word	0x3fd55555
 80057f8:	db6fabff 	.word	0xdb6fabff
 80057fc:	3fdb6db6 	.word	0x3fdb6db6
 8005800:	33333303 	.word	0x33333303
 8005804:	3fe33333 	.word	0x3fe33333
 8005808:	e0000000 	.word	0xe0000000
 800580c:	3feec709 	.word	0x3feec709
 8005810:	dc3a03fd 	.word	0xdc3a03fd
 8005814:	3feec709 	.word	0x3feec709
 8005818:	145b01f5 	.word	0x145b01f5
 800581c:	be3e2fe0 	.word	0xbe3e2fe0
 8005820:	7ff00000 	.word	0x7ff00000
 8005824:	43400000 	.word	0x43400000
 8005828:	0003988e 	.word	0x0003988e
 800582c:	000bb679 	.word	0x000bb679
 8005830:	08005ec0 	.word	0x08005ec0
 8005834:	3ff00000 	.word	0x3ff00000
 8005838:	40080000 	.word	0x40080000
 800583c:	08005ea0 	.word	0x08005ea0
 8005840:	08005eb0 	.word	0x08005eb0
 8005844:	460b      	mov	r3, r1
 8005846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800584a:	e5d7      	b.n	80053fc <__ieee754_pow+0x354>
 800584c:	f04f 0a01 	mov.w	sl, #1
 8005850:	e65e      	b.n	8005510 <__ieee754_pow+0x468>
 8005852:	a3b4      	add	r3, pc, #720	@ (adr r3, 8005b24 <__ieee754_pow+0xa7c>)
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	4630      	mov	r0, r6
 800585a:	4639      	mov	r1, r7
 800585c:	f7fa fcda 	bl	8000214 <__adddf3>
 8005860:	4642      	mov	r2, r8
 8005862:	e9cd 0100 	strd	r0, r1, [sp]
 8005866:	464b      	mov	r3, r9
 8005868:	4620      	mov	r0, r4
 800586a:	4629      	mov	r1, r5
 800586c:	f7fa fcd0 	bl	8000210 <__aeabi_dsub>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005878:	f7fb f912 	bl	8000aa0 <__aeabi_dcmpgt>
 800587c:	2800      	cmp	r0, #0
 800587e:	f47f ae00 	bne.w	8005482 <__ieee754_pow+0x3da>
 8005882:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8005886:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800588a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800588e:	fa43 fa0a 	asr.w	sl, r3, sl
 8005892:	44da      	add	sl, fp
 8005894:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8005898:	489d      	ldr	r0, [pc, #628]	@ (8005b10 <__ieee754_pow+0xa68>)
 800589a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800589e:	4108      	asrs	r0, r1
 80058a0:	ea00 030a 	and.w	r3, r0, sl
 80058a4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80058a8:	f1c1 0114 	rsb	r1, r1, #20
 80058ac:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 80058b0:	fa4a fa01 	asr.w	sl, sl, r1
 80058b4:	f1bb 0f00 	cmp.w	fp, #0
 80058b8:	4640      	mov	r0, r8
 80058ba:	4649      	mov	r1, r9
 80058bc:	f04f 0200 	mov.w	r2, #0
 80058c0:	bfb8      	it	lt
 80058c2:	f1ca 0a00 	rsblt	sl, sl, #0
 80058c6:	f7fa fca3 	bl	8000210 <__aeabi_dsub>
 80058ca:	4680      	mov	r8, r0
 80058cc:	4689      	mov	r9, r1
 80058ce:	4632      	mov	r2, r6
 80058d0:	463b      	mov	r3, r7
 80058d2:	4640      	mov	r0, r8
 80058d4:	4649      	mov	r1, r9
 80058d6:	f7fa fc9d 	bl	8000214 <__adddf3>
 80058da:	2400      	movs	r4, #0
 80058dc:	a37c      	add	r3, pc, #496	@ (adr r3, 8005ad0 <__ieee754_pow+0xa28>)
 80058de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e2:	4620      	mov	r0, r4
 80058e4:	460d      	mov	r5, r1
 80058e6:	f7fa fe4b 	bl	8000580 <__aeabi_dmul>
 80058ea:	4642      	mov	r2, r8
 80058ec:	e9cd 0100 	strd	r0, r1, [sp]
 80058f0:	464b      	mov	r3, r9
 80058f2:	4620      	mov	r0, r4
 80058f4:	4629      	mov	r1, r5
 80058f6:	f7fa fc8b 	bl	8000210 <__aeabi_dsub>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4630      	mov	r0, r6
 8005900:	4639      	mov	r1, r7
 8005902:	f7fa fc85 	bl	8000210 <__aeabi_dsub>
 8005906:	a374      	add	r3, pc, #464	@ (adr r3, 8005ad8 <__ieee754_pow+0xa30>)
 8005908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590c:	f7fa fe38 	bl	8000580 <__aeabi_dmul>
 8005910:	a373      	add	r3, pc, #460	@ (adr r3, 8005ae0 <__ieee754_pow+0xa38>)
 8005912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005916:	4680      	mov	r8, r0
 8005918:	4689      	mov	r9, r1
 800591a:	4620      	mov	r0, r4
 800591c:	4629      	mov	r1, r5
 800591e:	f7fa fe2f 	bl	8000580 <__aeabi_dmul>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4640      	mov	r0, r8
 8005928:	4649      	mov	r1, r9
 800592a:	f7fa fc73 	bl	8000214 <__adddf3>
 800592e:	4604      	mov	r4, r0
 8005930:	460d      	mov	r5, r1
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	e9dd 0100 	ldrd	r0, r1, [sp]
 800593a:	f7fa fc6b 	bl	8000214 <__adddf3>
 800593e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005942:	4680      	mov	r8, r0
 8005944:	4689      	mov	r9, r1
 8005946:	f7fa fc63 	bl	8000210 <__aeabi_dsub>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4620      	mov	r0, r4
 8005950:	4629      	mov	r1, r5
 8005952:	f7fa fc5d 	bl	8000210 <__aeabi_dsub>
 8005956:	4642      	mov	r2, r8
 8005958:	4606      	mov	r6, r0
 800595a:	460f      	mov	r7, r1
 800595c:	464b      	mov	r3, r9
 800595e:	4640      	mov	r0, r8
 8005960:	4649      	mov	r1, r9
 8005962:	f7fa fe0d 	bl	8000580 <__aeabi_dmul>
 8005966:	a360      	add	r3, pc, #384	@ (adr r3, 8005ae8 <__ieee754_pow+0xa40>)
 8005968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596c:	4604      	mov	r4, r0
 800596e:	460d      	mov	r5, r1
 8005970:	f7fa fe06 	bl	8000580 <__aeabi_dmul>
 8005974:	a35e      	add	r3, pc, #376	@ (adr r3, 8005af0 <__ieee754_pow+0xa48>)
 8005976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597a:	f7fa fc49 	bl	8000210 <__aeabi_dsub>
 800597e:	4622      	mov	r2, r4
 8005980:	462b      	mov	r3, r5
 8005982:	f7fa fdfd 	bl	8000580 <__aeabi_dmul>
 8005986:	a35c      	add	r3, pc, #368	@ (adr r3, 8005af8 <__ieee754_pow+0xa50>)
 8005988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598c:	f7fa fc42 	bl	8000214 <__adddf3>
 8005990:	4622      	mov	r2, r4
 8005992:	462b      	mov	r3, r5
 8005994:	f7fa fdf4 	bl	8000580 <__aeabi_dmul>
 8005998:	a359      	add	r3, pc, #356	@ (adr r3, 8005b00 <__ieee754_pow+0xa58>)
 800599a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599e:	f7fa fc37 	bl	8000210 <__aeabi_dsub>
 80059a2:	4622      	mov	r2, r4
 80059a4:	462b      	mov	r3, r5
 80059a6:	f7fa fdeb 	bl	8000580 <__aeabi_dmul>
 80059aa:	a357      	add	r3, pc, #348	@ (adr r3, 8005b08 <__ieee754_pow+0xa60>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b0:	f7fa fc30 	bl	8000214 <__adddf3>
 80059b4:	4622      	mov	r2, r4
 80059b6:	462b      	mov	r3, r5
 80059b8:	f7fa fde2 	bl	8000580 <__aeabi_dmul>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4640      	mov	r0, r8
 80059c2:	4649      	mov	r1, r9
 80059c4:	f7fa fc24 	bl	8000210 <__aeabi_dsub>
 80059c8:	4604      	mov	r4, r0
 80059ca:	460d      	mov	r5, r1
 80059cc:	4602      	mov	r2, r0
 80059ce:	460b      	mov	r3, r1
 80059d0:	4640      	mov	r0, r8
 80059d2:	4649      	mov	r1, r9
 80059d4:	f7fa fdd4 	bl	8000580 <__aeabi_dmul>
 80059d8:	2200      	movs	r2, #0
 80059da:	e9cd 0100 	strd	r0, r1, [sp]
 80059de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80059e2:	4620      	mov	r0, r4
 80059e4:	4629      	mov	r1, r5
 80059e6:	f7fa fc13 	bl	8000210 <__aeabi_dsub>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059f2:	f7fa feef 	bl	80007d4 <__aeabi_ddiv>
 80059f6:	4632      	mov	r2, r6
 80059f8:	4604      	mov	r4, r0
 80059fa:	460d      	mov	r5, r1
 80059fc:	463b      	mov	r3, r7
 80059fe:	4640      	mov	r0, r8
 8005a00:	4649      	mov	r1, r9
 8005a02:	f7fa fdbd 	bl	8000580 <__aeabi_dmul>
 8005a06:	4632      	mov	r2, r6
 8005a08:	463b      	mov	r3, r7
 8005a0a:	f7fa fc03 	bl	8000214 <__adddf3>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fa fbfb 	bl	8000210 <__aeabi_dsub>
 8005a1a:	4642      	mov	r2, r8
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	f7fa fbf7 	bl	8000210 <__aeabi_dsub>
 8005a22:	460b      	mov	r3, r1
 8005a24:	4602      	mov	r2, r0
 8005a26:	493b      	ldr	r1, [pc, #236]	@ (8005b14 <__ieee754_pow+0xa6c>)
 8005a28:	2000      	movs	r0, #0
 8005a2a:	f7fa fbf1 	bl	8000210 <__aeabi_dsub>
 8005a2e:	ec41 0b10 	vmov	d0, r0, r1
 8005a32:	ee10 3a90 	vmov	r3, s1
 8005a36:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a3e:	da30      	bge.n	8005aa2 <__ieee754_pow+0x9fa>
 8005a40:	4650      	mov	r0, sl
 8005a42:	f000 f87d 	bl	8005b40 <scalbn>
 8005a46:	ec51 0b10 	vmov	r0, r1, d0
 8005a4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a4e:	f7ff bbd2 	b.w	80051f6 <__ieee754_pow+0x14e>
 8005a52:	4c31      	ldr	r4, [pc, #196]	@ (8005b18 <__ieee754_pow+0xa70>)
 8005a54:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005a58:	42a3      	cmp	r3, r4
 8005a5a:	d91a      	bls.n	8005a92 <__ieee754_pow+0x9ea>
 8005a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b1c <__ieee754_pow+0xa74>)
 8005a5e:	440b      	add	r3, r1
 8005a60:	4303      	orrs	r3, r0
 8005a62:	d009      	beq.n	8005a78 <__ieee754_pow+0x9d0>
 8005a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f7fa fffa 	bl	8000a64 <__aeabi_dcmplt>
 8005a70:	3800      	subs	r0, #0
 8005a72:	bf18      	it	ne
 8005a74:	2001      	movne	r0, #1
 8005a76:	e42b      	b.n	80052d0 <__ieee754_pow+0x228>
 8005a78:	4642      	mov	r2, r8
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	f7fa fbc8 	bl	8000210 <__aeabi_dsub>
 8005a80:	4632      	mov	r2, r6
 8005a82:	463b      	mov	r3, r7
 8005a84:	f7fb f802 	bl	8000a8c <__aeabi_dcmpge>
 8005a88:	2800      	cmp	r0, #0
 8005a8a:	d1eb      	bne.n	8005a64 <__ieee754_pow+0x9bc>
 8005a8c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8005b2c <__ieee754_pow+0xa84>
 8005a90:	e6f7      	b.n	8005882 <__ieee754_pow+0x7da>
 8005a92:	469a      	mov	sl, r3
 8005a94:	4b22      	ldr	r3, [pc, #136]	@ (8005b20 <__ieee754_pow+0xa78>)
 8005a96:	459a      	cmp	sl, r3
 8005a98:	f63f aef3 	bhi.w	8005882 <__ieee754_pow+0x7da>
 8005a9c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005aa0:	e715      	b.n	80058ce <__ieee754_pow+0x826>
 8005aa2:	ec51 0b10 	vmov	r0, r1, d0
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	e7cf      	b.n	8005a4a <__ieee754_pow+0x9a2>
 8005aaa:	491a      	ldr	r1, [pc, #104]	@ (8005b14 <__ieee754_pow+0xa6c>)
 8005aac:	2000      	movs	r0, #0
 8005aae:	f7ff bb18 	b.w	80050e2 <__ieee754_pow+0x3a>
 8005ab2:	2000      	movs	r0, #0
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	f7ff bb14 	b.w	80050e2 <__ieee754_pow+0x3a>
 8005aba:	4630      	mov	r0, r6
 8005abc:	4639      	mov	r1, r7
 8005abe:	f7ff bb10 	b.w	80050e2 <__ieee754_pow+0x3a>
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	f7ff bb5e 	b.w	8005184 <__ieee754_pow+0xdc>
 8005ac8:	2400      	movs	r4, #0
 8005aca:	f7ff bb49 	b.w	8005160 <__ieee754_pow+0xb8>
 8005ace:	bf00      	nop
 8005ad0:	00000000 	.word	0x00000000
 8005ad4:	3fe62e43 	.word	0x3fe62e43
 8005ad8:	fefa39ef 	.word	0xfefa39ef
 8005adc:	3fe62e42 	.word	0x3fe62e42
 8005ae0:	0ca86c39 	.word	0x0ca86c39
 8005ae4:	be205c61 	.word	0xbe205c61
 8005ae8:	72bea4d0 	.word	0x72bea4d0
 8005aec:	3e663769 	.word	0x3e663769
 8005af0:	c5d26bf1 	.word	0xc5d26bf1
 8005af4:	3ebbbd41 	.word	0x3ebbbd41
 8005af8:	af25de2c 	.word	0xaf25de2c
 8005afc:	3f11566a 	.word	0x3f11566a
 8005b00:	16bebd93 	.word	0x16bebd93
 8005b04:	3f66c16c 	.word	0x3f66c16c
 8005b08:	5555553e 	.word	0x5555553e
 8005b0c:	3fc55555 	.word	0x3fc55555
 8005b10:	fff00000 	.word	0xfff00000
 8005b14:	3ff00000 	.word	0x3ff00000
 8005b18:	4090cbff 	.word	0x4090cbff
 8005b1c:	3f6f3400 	.word	0x3f6f3400
 8005b20:	3fe00000 	.word	0x3fe00000
 8005b24:	652b82fe 	.word	0x652b82fe
 8005b28:	3c971547 	.word	0x3c971547
 8005b2c:	4090cc00 	.word	0x4090cc00

08005b30 <fabs>:
 8005b30:	ec51 0b10 	vmov	r0, r1, d0
 8005b34:	4602      	mov	r2, r0
 8005b36:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005b3a:	ec43 2b10 	vmov	d0, r2, r3
 8005b3e:	4770      	bx	lr

08005b40 <scalbn>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	ec55 4b10 	vmov	r4, r5, d0
 8005b46:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	462b      	mov	r3, r5
 8005b4e:	b991      	cbnz	r1, 8005b76 <scalbn+0x36>
 8005b50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8005b54:	4323      	orrs	r3, r4
 8005b56:	d03d      	beq.n	8005bd4 <scalbn+0x94>
 8005b58:	4b35      	ldr	r3, [pc, #212]	@ (8005c30 <scalbn+0xf0>)
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	4629      	mov	r1, r5
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f7fa fd0e 	bl	8000580 <__aeabi_dmul>
 8005b64:	4b33      	ldr	r3, [pc, #204]	@ (8005c34 <scalbn+0xf4>)
 8005b66:	429e      	cmp	r6, r3
 8005b68:	4604      	mov	r4, r0
 8005b6a:	460d      	mov	r5, r1
 8005b6c:	da0f      	bge.n	8005b8e <scalbn+0x4e>
 8005b6e:	a328      	add	r3, pc, #160	@ (adr r3, 8005c10 <scalbn+0xd0>)
 8005b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b74:	e01e      	b.n	8005bb4 <scalbn+0x74>
 8005b76:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005b7a:	4291      	cmp	r1, r2
 8005b7c:	d10b      	bne.n	8005b96 <scalbn+0x56>
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4620      	mov	r0, r4
 8005b82:	4629      	mov	r1, r5
 8005b84:	f7fa fb46 	bl	8000214 <__adddf3>
 8005b88:	4604      	mov	r4, r0
 8005b8a:	460d      	mov	r5, r1
 8005b8c:	e022      	b.n	8005bd4 <scalbn+0x94>
 8005b8e:	460b      	mov	r3, r1
 8005b90:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005b94:	3936      	subs	r1, #54	@ 0x36
 8005b96:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005b9a:	4296      	cmp	r6, r2
 8005b9c:	dd0d      	ble.n	8005bba <scalbn+0x7a>
 8005b9e:	2d00      	cmp	r5, #0
 8005ba0:	a11d      	add	r1, pc, #116	@ (adr r1, 8005c18 <scalbn+0xd8>)
 8005ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ba6:	da02      	bge.n	8005bae <scalbn+0x6e>
 8005ba8:	a11d      	add	r1, pc, #116	@ (adr r1, 8005c20 <scalbn+0xe0>)
 8005baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bae:	a31a      	add	r3, pc, #104	@ (adr r3, 8005c18 <scalbn+0xd8>)
 8005bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb4:	f7fa fce4 	bl	8000580 <__aeabi_dmul>
 8005bb8:	e7e6      	b.n	8005b88 <scalbn+0x48>
 8005bba:	1872      	adds	r2, r6, r1
 8005bbc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005bc0:	428a      	cmp	r2, r1
 8005bc2:	dcec      	bgt.n	8005b9e <scalbn+0x5e>
 8005bc4:	2a00      	cmp	r2, #0
 8005bc6:	dd08      	ble.n	8005bda <scalbn+0x9a>
 8005bc8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005bcc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005bd0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005bd4:	ec45 4b10 	vmov	d0, r4, r5
 8005bd8:	bd70      	pop	{r4, r5, r6, pc}
 8005bda:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005bde:	da08      	bge.n	8005bf2 <scalbn+0xb2>
 8005be0:	2d00      	cmp	r5, #0
 8005be2:	a10b      	add	r1, pc, #44	@ (adr r1, 8005c10 <scalbn+0xd0>)
 8005be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005be8:	dac1      	bge.n	8005b6e <scalbn+0x2e>
 8005bea:	a10f      	add	r1, pc, #60	@ (adr r1, 8005c28 <scalbn+0xe8>)
 8005bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bf0:	e7bd      	b.n	8005b6e <scalbn+0x2e>
 8005bf2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005bf6:	3236      	adds	r2, #54	@ 0x36
 8005bf8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005bfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c00:	4620      	mov	r0, r4
 8005c02:	4b0d      	ldr	r3, [pc, #52]	@ (8005c38 <scalbn+0xf8>)
 8005c04:	4629      	mov	r1, r5
 8005c06:	2200      	movs	r2, #0
 8005c08:	e7d4      	b.n	8005bb4 <scalbn+0x74>
 8005c0a:	bf00      	nop
 8005c0c:	f3af 8000 	nop.w
 8005c10:	c2f8f359 	.word	0xc2f8f359
 8005c14:	01a56e1f 	.word	0x01a56e1f
 8005c18:	8800759c 	.word	0x8800759c
 8005c1c:	7e37e43c 	.word	0x7e37e43c
 8005c20:	8800759c 	.word	0x8800759c
 8005c24:	fe37e43c 	.word	0xfe37e43c
 8005c28:	c2f8f359 	.word	0xc2f8f359
 8005c2c:	81a56e1f 	.word	0x81a56e1f
 8005c30:	43500000 	.word	0x43500000
 8005c34:	ffff3cb0 	.word	0xffff3cb0
 8005c38:	3c900000 	.word	0x3c900000

08005c3c <with_errno>:
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	ed2d 8b02 	vpush	{d8}
 8005c42:	eeb0 8a40 	vmov.f32	s16, s0
 8005c46:	eef0 8a60 	vmov.f32	s17, s1
 8005c4a:	4604      	mov	r4, r0
 8005c4c:	f7fe fe80 	bl	8004950 <__errno>
 8005c50:	eeb0 0a48 	vmov.f32	s0, s16
 8005c54:	eef0 0a68 	vmov.f32	s1, s17
 8005c58:	ecbd 8b02 	vpop	{d8}
 8005c5c:	6004      	str	r4, [r0, #0]
 8005c5e:	bd10      	pop	{r4, pc}

08005c60 <xflow>:
 8005c60:	4603      	mov	r3, r0
 8005c62:	b507      	push	{r0, r1, r2, lr}
 8005c64:	ec51 0b10 	vmov	r0, r1, d0
 8005c68:	b183      	cbz	r3, 8005c8c <xflow+0x2c>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c70:	e9cd 2300 	strd	r2, r3, [sp]
 8005c74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c78:	f7fa fc82 	bl	8000580 <__aeabi_dmul>
 8005c7c:	ec41 0b10 	vmov	d0, r0, r1
 8005c80:	2022      	movs	r0, #34	@ 0x22
 8005c82:	b003      	add	sp, #12
 8005c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c88:	f7ff bfd8 	b.w	8005c3c <with_errno>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	e7ee      	b.n	8005c70 <xflow+0x10>
 8005c92:	0000      	movs	r0, r0
 8005c94:	0000      	movs	r0, r0
	...

08005c98 <__math_uflow>:
 8005c98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005ca0 <__math_uflow+0x8>
 8005c9c:	f7ff bfe0 	b.w	8005c60 <xflow>
 8005ca0:	00000000 	.word	0x00000000
 8005ca4:	10000000 	.word	0x10000000

08005ca8 <__math_oflow>:
 8005ca8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005cb0 <__math_oflow+0x8>
 8005cac:	f7ff bfd8 	b.w	8005c60 <xflow>
 8005cb0:	00000000 	.word	0x00000000
 8005cb4:	70000000 	.word	0x70000000

08005cb8 <__ieee754_sqrt>:
 8005cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	4a68      	ldr	r2, [pc, #416]	@ (8005e60 <__ieee754_sqrt+0x1a8>)
 8005cbe:	ec55 4b10 	vmov	r4, r5, d0
 8005cc2:	43aa      	bics	r2, r5
 8005cc4:	462b      	mov	r3, r5
 8005cc6:	4621      	mov	r1, r4
 8005cc8:	d110      	bne.n	8005cec <__ieee754_sqrt+0x34>
 8005cca:	4622      	mov	r2, r4
 8005ccc:	4620      	mov	r0, r4
 8005cce:	4629      	mov	r1, r5
 8005cd0:	f7fa fc56 	bl	8000580 <__aeabi_dmul>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4620      	mov	r0, r4
 8005cda:	4629      	mov	r1, r5
 8005cdc:	f7fa fa9a 	bl	8000214 <__adddf3>
 8005ce0:	4604      	mov	r4, r0
 8005ce2:	460d      	mov	r5, r1
 8005ce4:	ec45 4b10 	vmov	d0, r4, r5
 8005ce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cec:	2d00      	cmp	r5, #0
 8005cee:	dc0e      	bgt.n	8005d0e <__ieee754_sqrt+0x56>
 8005cf0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005cf4:	4322      	orrs	r2, r4
 8005cf6:	d0f5      	beq.n	8005ce4 <__ieee754_sqrt+0x2c>
 8005cf8:	b19d      	cbz	r5, 8005d22 <__ieee754_sqrt+0x6a>
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	4629      	mov	r1, r5
 8005d00:	f7fa fa86 	bl	8000210 <__aeabi_dsub>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	f7fa fd64 	bl	80007d4 <__aeabi_ddiv>
 8005d0c:	e7e8      	b.n	8005ce0 <__ieee754_sqrt+0x28>
 8005d0e:	152a      	asrs	r2, r5, #20
 8005d10:	d115      	bne.n	8005d3e <__ieee754_sqrt+0x86>
 8005d12:	2000      	movs	r0, #0
 8005d14:	e009      	b.n	8005d2a <__ieee754_sqrt+0x72>
 8005d16:	0acb      	lsrs	r3, r1, #11
 8005d18:	3a15      	subs	r2, #21
 8005d1a:	0549      	lsls	r1, r1, #21
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d0fa      	beq.n	8005d16 <__ieee754_sqrt+0x5e>
 8005d20:	e7f7      	b.n	8005d12 <__ieee754_sqrt+0x5a>
 8005d22:	462a      	mov	r2, r5
 8005d24:	e7fa      	b.n	8005d1c <__ieee754_sqrt+0x64>
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	3001      	adds	r0, #1
 8005d2a:	02dc      	lsls	r4, r3, #11
 8005d2c:	d5fb      	bpl.n	8005d26 <__ieee754_sqrt+0x6e>
 8005d2e:	1e44      	subs	r4, r0, #1
 8005d30:	1b12      	subs	r2, r2, r4
 8005d32:	f1c0 0420 	rsb	r4, r0, #32
 8005d36:	fa21 f404 	lsr.w	r4, r1, r4
 8005d3a:	4323      	orrs	r3, r4
 8005d3c:	4081      	lsls	r1, r0
 8005d3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d42:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8005d46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d4a:	07d2      	lsls	r2, r2, #31
 8005d4c:	bf5c      	itt	pl
 8005d4e:	005b      	lslpl	r3, r3, #1
 8005d50:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005d54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d58:	bf58      	it	pl
 8005d5a:	0049      	lslpl	r1, r1, #1
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005d62:	106d      	asrs	r5, r5, #1
 8005d64:	0049      	lsls	r1, r1, #1
 8005d66:	2016      	movs	r0, #22
 8005d68:	4632      	mov	r2, r6
 8005d6a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005d6e:	1917      	adds	r7, r2, r4
 8005d70:	429f      	cmp	r7, r3
 8005d72:	bfde      	ittt	le
 8005d74:	193a      	addle	r2, r7, r4
 8005d76:	1bdb      	suble	r3, r3, r7
 8005d78:	1936      	addle	r6, r6, r4
 8005d7a:	0fcf      	lsrs	r7, r1, #31
 8005d7c:	3801      	subs	r0, #1
 8005d7e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005d82:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005d86:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005d8a:	d1f0      	bne.n	8005d6e <__ieee754_sqrt+0xb6>
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	2720      	movs	r7, #32
 8005d90:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005d94:	429a      	cmp	r2, r3
 8005d96:	eb00 0e0c 	add.w	lr, r0, ip
 8005d9a:	db02      	blt.n	8005da2 <__ieee754_sqrt+0xea>
 8005d9c:	d113      	bne.n	8005dc6 <__ieee754_sqrt+0x10e>
 8005d9e:	458e      	cmp	lr, r1
 8005da0:	d811      	bhi.n	8005dc6 <__ieee754_sqrt+0x10e>
 8005da2:	f1be 0f00 	cmp.w	lr, #0
 8005da6:	eb0e 000c 	add.w	r0, lr, ip
 8005daa:	da42      	bge.n	8005e32 <__ieee754_sqrt+0x17a>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	db40      	blt.n	8005e32 <__ieee754_sqrt+0x17a>
 8005db0:	f102 0801 	add.w	r8, r2, #1
 8005db4:	1a9b      	subs	r3, r3, r2
 8005db6:	458e      	cmp	lr, r1
 8005db8:	bf88      	it	hi
 8005dba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8005dbe:	eba1 010e 	sub.w	r1, r1, lr
 8005dc2:	4464      	add	r4, ip
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005dca:	3f01      	subs	r7, #1
 8005dcc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005dd0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005dd4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005dd8:	d1dc      	bne.n	8005d94 <__ieee754_sqrt+0xdc>
 8005dda:	4319      	orrs	r1, r3
 8005ddc:	d01b      	beq.n	8005e16 <__ieee754_sqrt+0x15e>
 8005dde:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8005e64 <__ieee754_sqrt+0x1ac>
 8005de2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8005e68 <__ieee754_sqrt+0x1b0>
 8005de6:	e9da 0100 	ldrd	r0, r1, [sl]
 8005dea:	e9db 2300 	ldrd	r2, r3, [fp]
 8005dee:	f7fa fa0f 	bl	8000210 <__aeabi_dsub>
 8005df2:	e9da 8900 	ldrd	r8, r9, [sl]
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	f7fa fe3b 	bl	8000a78 <__aeabi_dcmple>
 8005e02:	b140      	cbz	r0, 8005e16 <__ieee754_sqrt+0x15e>
 8005e04:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005e08:	e9da 0100 	ldrd	r0, r1, [sl]
 8005e0c:	e9db 2300 	ldrd	r2, r3, [fp]
 8005e10:	d111      	bne.n	8005e36 <__ieee754_sqrt+0x17e>
 8005e12:	3601      	adds	r6, #1
 8005e14:	463c      	mov	r4, r7
 8005e16:	1072      	asrs	r2, r6, #1
 8005e18:	0863      	lsrs	r3, r4, #1
 8005e1a:	07f1      	lsls	r1, r6, #31
 8005e1c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8005e20:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8005e24:	bf48      	it	mi
 8005e26:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8005e2a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8005e2e:	4618      	mov	r0, r3
 8005e30:	e756      	b.n	8005ce0 <__ieee754_sqrt+0x28>
 8005e32:	4690      	mov	r8, r2
 8005e34:	e7be      	b.n	8005db4 <__ieee754_sqrt+0xfc>
 8005e36:	f7fa f9ed 	bl	8000214 <__adddf3>
 8005e3a:	e9da 8900 	ldrd	r8, r9, [sl]
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4640      	mov	r0, r8
 8005e44:	4649      	mov	r1, r9
 8005e46:	f7fa fe0d 	bl	8000a64 <__aeabi_dcmplt>
 8005e4a:	b120      	cbz	r0, 8005e56 <__ieee754_sqrt+0x19e>
 8005e4c:	1ca0      	adds	r0, r4, #2
 8005e4e:	bf08      	it	eq
 8005e50:	3601      	addeq	r6, #1
 8005e52:	3402      	adds	r4, #2
 8005e54:	e7df      	b.n	8005e16 <__ieee754_sqrt+0x15e>
 8005e56:	1c63      	adds	r3, r4, #1
 8005e58:	f023 0401 	bic.w	r4, r3, #1
 8005e5c:	e7db      	b.n	8005e16 <__ieee754_sqrt+0x15e>
 8005e5e:	bf00      	nop
 8005e60:	7ff00000 	.word	0x7ff00000
 8005e64:	20000078 	.word	0x20000078
 8005e68:	20000070 	.word	0x20000070

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
