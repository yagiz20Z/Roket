/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */



/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_I2C1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t Temp=0;
uint8_t datatowrite = 0x2E;
uint8_t temprtr1[2]={0};
uint8_t tmprtr2[22];
uint16_t Callib_Start = 0xAA;
short AC1;
short AC2;
short AC3;
unsigned short AC4;
unsigned short AC5;
unsigned short AC6;
short B1;
short B2;
short MB;
short MC;
short MD;

long UT;

uint8_t datatowriteBP=0x34+(1<<6);
uint8_t BP1[3]={0};
long UP;
long X1,X2,B5,T;
long B6,X3,B3;
unsigned long B4,B7;
float p;
float p1;
long altitude;
float k;
char buffer[140];

long *basinc = &p;
float *yukseklik = &altitude;
long *sicaklik = &T;


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  void okuma();
  void yazma();
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, 0xEE, 1, 100);

  HAL_I2C_Mem_Read(&hi2c1,0xEF,Callib_Start,1,&tmprtr2,22,100);

      		  	AC1 = ((tmprtr2[0] << 8) | tmprtr2[1]);
      		    AC2 = ((tmprtr2[2] << 8) | tmprtr2[3]);
      		  	AC3 = ((tmprtr2[4] << 8) | tmprtr2[5]);
      		  	AC4 = ((tmprtr2[6] << 8) | tmprtr2[7]);
      		  	AC5 = ((tmprtr2[8] << 8) | tmprtr2[9]);
      		  	AC6 = ((tmprtr2[10] << 8) | tmprtr2[11]);
      		  	B1 = ((tmprtr2[12] << 8) | tmprtr2[13]);
      		  	B2 = ((tmprtr2[14] << 8) | tmprtr2[15]);
      		  	MB = ((tmprtr2[16] << 8) | tmprtr2[17]);
      		  	MC = ((tmprtr2[18] << 8) | tmprtr2[19]);
      		  	MD = ((tmprtr2[20] << 8) | tmprtr2[21]);

  //	HAL_StatusTypeDef ret1= HAL_I2C_Mem_Read(&hi2c1, 0xEF, 0xD0, 1, &Temp, 1, 1000);
  //
  //	HAL_I2C_Mem_Read(&hi2c1,0XEF, 0XF6,1,&tmprtr,2,1000);



    	//01 01 01 01 01 01 01 01



  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */


	  okuma();


	  yazma();






    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */



void okuma(){

	HAL_I2C_Mem_Write(&hi2c1, 0xEF, 0xF4, 1, &datatowrite, 1, 100);
			HAL_Delay (5);
		  	HAL_I2C_Mem_Read(&hi2c1,0XEF, 0XF6,1,&temprtr1,2,100);



			  	UT = ((temprtr1[0]<<8) + temprtr1[1]);
			  	HAL_Delay(5);

			  	HAL_I2C_Mem_Write(&hi2c1, 0xEF, 0XF4, 1, &datatowriteBP, 1, 100);
			  	HAL_Delay (5);
			  	HAL_I2C_Mem_Read(&hi2c1, 0xEF,0xF6 , 1, &BP1, 3, 100);//F6/F7/F8
			  	HAL_Delay (8);
			  	UP=((BP1[0]<<16)+(BP1[1]<<8)+BP1[2])>>(8-1);

			  	X1 = ((UT-AC6)*AC5)/pow(2,15);
			  	X2=MC*pow(2,11)/(X1+MD);
			  	B5=X1+X2;
			  	T=(B5+8)/pow(2,4)/10;

			  	HAL_Delay(5);
			  	B6 = B5-4000;
			  	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
			  	X2 = AC2*B6/(pow(2,11));
			  	X3 = X1+X2;
			  	B3 = (((AC1*4+X3)<<1)+2)/4;
			  	X1 = AC3*B6/pow(2,13);
			  	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
			  	X3 = ((X1+X2)+2)/pow(2,2);
			  	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
			  	B7 = ((unsigned long)UP-B3)*(50000>>1);
			  	if (B7<0x80000000){p = (B7*2)/B4;}
			  		else p = (B7/B4)*2;
			  	HAL_Delay(5);
			  	X1=(p/(pow(2,8))*p/(pow(2,8)));
			  	X1=X1*3038/pow(2,16);
			  	X2=(-7357*p)/pow(2,16);
			  	HAL_Delay(5);
			  	p=p+((X1+X2+3791)/pow(2,4));


			  	p1=p/101325;
			  	HAL_Delay(5);
			  	k=pow(p1,0.19029);
			  	altitude=44330*(1-k);
			  	printf("z");
			  	*sicaklik = T;
			  	*yukseklik = altitude;
			  	*basinc = p;




}


	void yazma(){



	  	snprintf(buffer,sizeof(buffer),"sicaklik : %ld, yukseklik : %.2f , basinc : %ld\r\n",T,altitude,p);

	  	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);

	  	HAL_Delay(60);

	}













/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
