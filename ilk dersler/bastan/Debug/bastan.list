
bastan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e8c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08009060  08009060  0000a060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009450  08009450  0000b1f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009450  08009450  0000a450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009458  08009458  0000b1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009458  08009458  0000a458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800945c  0800945c  0000a45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08009460  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  200001f8  08009658  0000b1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08009658  0000b500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c253  00000000  00000000  0000b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dca  00000000  00000000  0001747b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  00019248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000870  00000000  00000000  00019d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002222e  00000000  00000000  0001a588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ea83  00000000  00000000  0003c7b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ccbfc  00000000  00000000  0004b239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00117e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004194  00000000  00000000  00117e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0011c00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009044 	.word	0x08009044

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	08009044 	.word	0x08009044

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b96a 	b.w	8000fb4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f000 ff27 	bl	8001e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f8b9 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 f97d 	bl	80012c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fca:	f000 f951 	bl	8001270 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fce:	f000 f921 	bl	8001214 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  void okuma();
  void yazma();
  HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c1, 0xEE, 1, 100);
 8000fd2:	2364      	movs	r3, #100	@ 0x64
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	21ee      	movs	r1, #238	@ 0xee
 8000fd8:	4849      	ldr	r0, [pc, #292]	@ (8001100 <main+0x148>)
 8000fda:	f001 ff71 	bl	8002ec0 <HAL_I2C_IsDeviceReady>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]

  HAL_I2C_Mem_Read(&hi2c1,0xEF,Callib_Start,1,&tmprtr2,22,100);
 8000fe2:	4b48      	ldr	r3, [pc, #288]	@ (8001104 <main+0x14c>)
 8000fe4:	881a      	ldrh	r2, [r3, #0]
 8000fe6:	2364      	movs	r3, #100	@ 0x64
 8000fe8:	9302      	str	r3, [sp, #8]
 8000fea:	2316      	movs	r3, #22
 8000fec:	9301      	str	r3, [sp, #4]
 8000fee:	4b46      	ldr	r3, [pc, #280]	@ (8001108 <main+0x150>)
 8000ff0:	9300      	str	r3, [sp, #0]
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	21ef      	movs	r1, #239	@ 0xef
 8000ff6:	4842      	ldr	r0, [pc, #264]	@ (8001100 <main+0x148>)
 8000ff8:	f001 fd30 	bl	8002a5c <HAL_I2C_Mem_Read>

      		  	AC1 = ((tmprtr2[0] << 8) | tmprtr2[1]);
 8000ffc:	4b42      	ldr	r3, [pc, #264]	@ (8001108 <main+0x150>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	021b      	lsls	r3, r3, #8
 8001002:	b21a      	sxth	r2, r3
 8001004:	4b40      	ldr	r3, [pc, #256]	@ (8001108 <main+0x150>)
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21a      	sxth	r2, r3
 800100e:	4b3f      	ldr	r3, [pc, #252]	@ (800110c <main+0x154>)
 8001010:	801a      	strh	r2, [r3, #0]
      		    AC2 = ((tmprtr2[2] << 8) | tmprtr2[3]);
 8001012:	4b3d      	ldr	r3, [pc, #244]	@ (8001108 <main+0x150>)
 8001014:	789b      	ldrb	r3, [r3, #2]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	4b3b      	ldr	r3, [pc, #236]	@ (8001108 <main+0x150>)
 800101c:	78db      	ldrb	r3, [r3, #3]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21a      	sxth	r2, r3
 8001024:	4b3a      	ldr	r3, [pc, #232]	@ (8001110 <main+0x158>)
 8001026:	801a      	strh	r2, [r3, #0]
      		  	AC3 = ((tmprtr2[4] << 8) | tmprtr2[5]);
 8001028:	4b37      	ldr	r3, [pc, #220]	@ (8001108 <main+0x150>)
 800102a:	791b      	ldrb	r3, [r3, #4]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b35      	ldr	r3, [pc, #212]	@ (8001108 <main+0x150>)
 8001032:	795b      	ldrb	r3, [r3, #5]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21a      	sxth	r2, r3
 800103a:	4b36      	ldr	r3, [pc, #216]	@ (8001114 <main+0x15c>)
 800103c:	801a      	strh	r2, [r3, #0]
      		  	AC4 = ((tmprtr2[6] << 8) | tmprtr2[7]);
 800103e:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <main+0x150>)
 8001040:	799b      	ldrb	r3, [r3, #6]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	4b30      	ldr	r3, [pc, #192]	@ (8001108 <main+0x150>)
 8001048:	79db      	ldrb	r3, [r3, #7]
 800104a:	b21b      	sxth	r3, r3
 800104c:	4313      	orrs	r3, r2
 800104e:	b21b      	sxth	r3, r3
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <main+0x160>)
 8001054:	801a      	strh	r2, [r3, #0]
      		  	AC5 = ((tmprtr2[8] << 8) | tmprtr2[9]);
 8001056:	4b2c      	ldr	r3, [pc, #176]	@ (8001108 <main+0x150>)
 8001058:	7a1b      	ldrb	r3, [r3, #8]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	4b2a      	ldr	r3, [pc, #168]	@ (8001108 <main+0x150>)
 8001060:	7a5b      	ldrb	r3, [r3, #9]
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	b21b      	sxth	r3, r3
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <main+0x164>)
 800106c:	801a      	strh	r2, [r3, #0]
      		  	AC6 = ((tmprtr2[10] << 8) | tmprtr2[11]);
 800106e:	4b26      	ldr	r3, [pc, #152]	@ (8001108 <main+0x150>)
 8001070:	7a9b      	ldrb	r3, [r3, #10]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	b21a      	sxth	r2, r3
 8001076:	4b24      	ldr	r3, [pc, #144]	@ (8001108 <main+0x150>)
 8001078:	7adb      	ldrb	r3, [r3, #11]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21b      	sxth	r3, r3
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <main+0x168>)
 8001084:	801a      	strh	r2, [r3, #0]
      		  	B1 = ((tmprtr2[12] << 8) | tmprtr2[13]);
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <main+0x150>)
 8001088:	7b1b      	ldrb	r3, [r3, #12]
 800108a:	021b      	lsls	r3, r3, #8
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b1e      	ldr	r3, [pc, #120]	@ (8001108 <main+0x150>)
 8001090:	7b5b      	ldrb	r3, [r3, #13]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <main+0x16c>)
 800109a:	801a      	strh	r2, [r3, #0]
      		  	B2 = ((tmprtr2[14] << 8) | tmprtr2[15]);
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <main+0x150>)
 800109e:	7b9b      	ldrb	r3, [r3, #14]
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <main+0x150>)
 80010a6:	7bdb      	ldrb	r3, [r3, #15]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <main+0x170>)
 80010b0:	801a      	strh	r2, [r3, #0]
      		  	MB = ((tmprtr2[16] << 8) | tmprtr2[17]);
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <main+0x150>)
 80010b4:	7c1b      	ldrb	r3, [r3, #16]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <main+0x150>)
 80010bc:	7c5b      	ldrb	r3, [r3, #17]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <main+0x174>)
 80010c6:	801a      	strh	r2, [r3, #0]
      		  	MC = ((tmprtr2[18] << 8) | tmprtr2[19]);
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <main+0x150>)
 80010ca:	7c9b      	ldrb	r3, [r3, #18]
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b21a      	sxth	r2, r3
 80010d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <main+0x150>)
 80010d2:	7cdb      	ldrb	r3, [r3, #19]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <main+0x178>)
 80010dc:	801a      	strh	r2, [r3, #0]
      		  	MD = ((tmprtr2[20] << 8) | tmprtr2[21]);
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <main+0x150>)
 80010e0:	7d1b      	ldrb	r3, [r3, #20]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <main+0x150>)
 80010e8:	7d5b      	ldrb	r3, [r3, #21]
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <main+0x17c>)
 80010f2:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */


	  okuma();
 80010f4:	f000 f954 	bl	80013a0 <okuma>


	  yazma();
 80010f8:	f000 fc58 	bl	80019ac <yazma>
	  okuma();
 80010fc:	bf00      	nop
 80010fe:	e7f9      	b.n	80010f4 <main+0x13c>
 8001100:	20000214 	.word	0x20000214
 8001104:	20000002 	.word	0x20000002
 8001108:	200002b4 	.word	0x200002b4
 800110c:	200002ca 	.word	0x200002ca
 8001110:	200002cc 	.word	0x200002cc
 8001114:	200002ce 	.word	0x200002ce
 8001118:	200002d0 	.word	0x200002d0
 800111c:	200002d2 	.word	0x200002d2
 8001120:	200002d4 	.word	0x200002d4
 8001124:	200002d6 	.word	0x200002d6
 8001128:	200002d8 	.word	0x200002d8
 800112c:	200002da 	.word	0x200002da
 8001130:	200002dc 	.word	0x200002dc
 8001134:	200002de 	.word	0x200002de

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	@ 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	2234      	movs	r2, #52	@ 0x34
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f004 ff1f 	bl	8005f8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 0308 	add.w	r3, r7, #8
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b2a      	ldr	r3, [pc, #168]	@ (800120c <SystemClock_Config+0xd4>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	4a29      	ldr	r2, [pc, #164]	@ (800120c <SystemClock_Config+0xd4>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	@ 0x40
 800116c:	4b27      	ldr	r3, [pc, #156]	@ (800120c <SystemClock_Config+0xd4>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001178:	2300      	movs	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	4b24      	ldr	r3, [pc, #144]	@ (8001210 <SystemClock_Config+0xd8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001184:	4a22      	ldr	r2, [pc, #136]	@ (8001210 <SystemClock_Config+0xd8>)
 8001186:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b20      	ldr	r3, [pc, #128]	@ (8001210 <SystemClock_Config+0xd8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001198:	2302      	movs	r3, #2
 800119a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800119c:	2301      	movs	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011a0:	2310      	movs	r3, #16
 80011a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a4:	2302      	movs	r3, #2
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a8:	2300      	movs	r3, #0
 80011aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011ac:	2310      	movs	r3, #16
 80011ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011b6:	2304      	movs	r3, #4
 80011b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011be:	2302      	movs	r3, #2
 80011c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 fea6 	bl	8003f18 <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011d2:	f000 fc1b 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ec:	f107 0308 	add.w	r3, r7, #8
 80011f0:	2102      	movs	r1, #2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 fb46 	bl	8003884 <HAL_RCC_ClockConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011fe:	f000 fc05 	bl	8001a0c <Error_Handler>
  }
}
 8001202:	bf00      	nop
 8001204:	3750      	adds	r7, #80	@ 0x50
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000

08001214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f001 f9c5 	bl	80025e0 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 fbd6 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000214 	.word	0x20000214
 8001268:	40005400 	.word	0x40005400
 800126c:	000186a0 	.word	0x000186a0

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <MX_USART2_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a8:	f003 f8d4 	bl	8004454 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f000 fbab 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000268 	.word	0x20000268
 80012c0:	40004400 	.word	0x40004400

080012c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ca:	f107 0314 	add.w	r3, r7, #20
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b2d      	ldr	r3, [pc, #180]	@ (8001394 <MX_GPIO_Init+0xd0>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001394 <MX_GPIO_Init+0xd0>)
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <MX_GPIO_Init+0xd0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b26      	ldr	r3, [pc, #152]	@ (8001394 <MX_GPIO_Init+0xd0>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a25      	ldr	r2, [pc, #148]	@ (8001394 <MX_GPIO_Init+0xd0>)
 8001300:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b23      	ldr	r3, [pc, #140]	@ (8001394 <MX_GPIO_Init+0xd0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	4b1f      	ldr	r3, [pc, #124]	@ (8001394 <MX_GPIO_Init+0xd0>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a1e      	ldr	r2, [pc, #120]	@ (8001394 <MX_GPIO_Init+0xd0>)
 800131c:	f043 0301 	orr.w	r3, r3, #1
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <MX_GPIO_Init+0xd0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
 8001332:	4b18      	ldr	r3, [pc, #96]	@ (8001394 <MX_GPIO_Init+0xd0>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a17      	ldr	r2, [pc, #92]	@ (8001394 <MX_GPIO_Init+0xd0>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <MX_GPIO_Init+0xd0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2120      	movs	r1, #32
 800134e:	4812      	ldr	r0, [pc, #72]	@ (8001398 <MX_GPIO_Init+0xd4>)
 8001350:	f001 f92c 	bl	80025ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001354:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001358:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800135a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800135e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480c      	ldr	r0, [pc, #48]	@ (800139c <MX_GPIO_Init+0xd8>)
 800136c:	f000 ff8a 	bl	8002284 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001370:	2320      	movs	r3, #32
 8001372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4804      	ldr	r0, [pc, #16]	@ (8001398 <MX_GPIO_Init+0xd4>)
 8001388:	f000 ff7c 	bl	8002284 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	@ 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40023800 	.word	0x40023800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020800 	.word	0x40020800

080013a0 <okuma>:

/* USER CODE BEGIN 4 */



void okuma(){
 80013a0:	b5b0      	push	{r4, r5, r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Write(&hi2c1, 0xEF, 0xF4, 1, &datatowrite, 1, 100);
 80013a6:	2364      	movs	r3, #100	@ 0x64
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2301      	movs	r3, #1
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	4bc2      	ldr	r3, [pc, #776]	@ (80016b8 <okuma+0x318>)
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	22f4      	movs	r2, #244	@ 0xf4
 80013b6:	21ef      	movs	r1, #239	@ 0xef
 80013b8:	48c0      	ldr	r0, [pc, #768]	@ (80016bc <okuma+0x31c>)
 80013ba:	f001 fa55 	bl	8002868 <HAL_I2C_Mem_Write>
			HAL_Delay (5);
 80013be:	2005      	movs	r0, #5
 80013c0:	f000 fd98 	bl	8001ef4 <HAL_Delay>
		  	HAL_I2C_Mem_Read(&hi2c1,0XEF, 0XF6,1,&temprtr1,2,100);
 80013c4:	2364      	movs	r3, #100	@ 0x64
 80013c6:	9302      	str	r3, [sp, #8]
 80013c8:	2302      	movs	r3, #2
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	4bbc      	ldr	r3, [pc, #752]	@ (80016c0 <okuma+0x320>)
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	2301      	movs	r3, #1
 80013d2:	22f6      	movs	r2, #246	@ 0xf6
 80013d4:	21ef      	movs	r1, #239	@ 0xef
 80013d6:	48b9      	ldr	r0, [pc, #740]	@ (80016bc <okuma+0x31c>)
 80013d8:	f001 fb40 	bl	8002a5c <HAL_I2C_Mem_Read>



			  	UT = ((temprtr1[0]<<8) + temprtr1[1]);
 80013dc:	4bb8      	ldr	r3, [pc, #736]	@ (80016c0 <okuma+0x320>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	021b      	lsls	r3, r3, #8
 80013e2:	4ab7      	ldr	r2, [pc, #732]	@ (80016c0 <okuma+0x320>)
 80013e4:	7852      	ldrb	r2, [r2, #1]
 80013e6:	4413      	add	r3, r2
 80013e8:	4ab6      	ldr	r2, [pc, #728]	@ (80016c4 <okuma+0x324>)
 80013ea:	6013      	str	r3, [r2, #0]
			  	HAL_Delay(5);
 80013ec:	2005      	movs	r0, #5
 80013ee:	f000 fd81 	bl	8001ef4 <HAL_Delay>

			  	HAL_I2C_Mem_Write(&hi2c1, 0xEF, 0XF4, 1, &datatowriteBP, 1, 100);
 80013f2:	2364      	movs	r3, #100	@ 0x64
 80013f4:	9302      	str	r3, [sp, #8]
 80013f6:	2301      	movs	r3, #1
 80013f8:	9301      	str	r3, [sp, #4]
 80013fa:	4bb3      	ldr	r3, [pc, #716]	@ (80016c8 <okuma+0x328>)
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	22f4      	movs	r2, #244	@ 0xf4
 8001402:	21ef      	movs	r1, #239	@ 0xef
 8001404:	48ad      	ldr	r0, [pc, #692]	@ (80016bc <okuma+0x31c>)
 8001406:	f001 fa2f 	bl	8002868 <HAL_I2C_Mem_Write>
			  	HAL_Delay (5);
 800140a:	2005      	movs	r0, #5
 800140c:	f000 fd72 	bl	8001ef4 <HAL_Delay>
			  	HAL_I2C_Mem_Read(&hi2c1, 0xEF,0xF6 , 1, &BP1, 3, 100);//F6/F7/F8
 8001410:	2364      	movs	r3, #100	@ 0x64
 8001412:	9302      	str	r3, [sp, #8]
 8001414:	2303      	movs	r3, #3
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	4bac      	ldr	r3, [pc, #688]	@ (80016cc <okuma+0x32c>)
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	22f6      	movs	r2, #246	@ 0xf6
 8001420:	21ef      	movs	r1, #239	@ 0xef
 8001422:	48a6      	ldr	r0, [pc, #664]	@ (80016bc <okuma+0x31c>)
 8001424:	f001 fb1a 	bl	8002a5c <HAL_I2C_Mem_Read>
			  	HAL_Delay (8);
 8001428:	2008      	movs	r0, #8
 800142a:	f000 fd63 	bl	8001ef4 <HAL_Delay>
			  	UP=((BP1[0]<<16)+(BP1[1]<<8)+BP1[2])>>(8-1);
 800142e:	4ba7      	ldr	r3, [pc, #668]	@ (80016cc <okuma+0x32c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	041a      	lsls	r2, r3, #16
 8001434:	4ba5      	ldr	r3, [pc, #660]	@ (80016cc <okuma+0x32c>)
 8001436:	785b      	ldrb	r3, [r3, #1]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	4413      	add	r3, r2
 800143c:	4aa3      	ldr	r2, [pc, #652]	@ (80016cc <okuma+0x32c>)
 800143e:	7892      	ldrb	r2, [r2, #2]
 8001440:	4413      	add	r3, r2
 8001442:	11db      	asrs	r3, r3, #7
 8001444:	4aa2      	ldr	r2, [pc, #648]	@ (80016d0 <okuma+0x330>)
 8001446:	6013      	str	r3, [r2, #0]

			  	X1 = ((UT-AC6)*AC5)/pow(2,15);
 8001448:	4b9e      	ldr	r3, [pc, #632]	@ (80016c4 <okuma+0x324>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4aa1      	ldr	r2, [pc, #644]	@ (80016d4 <okuma+0x334>)
 800144e:	8812      	ldrh	r2, [r2, #0]
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	4aa1      	ldr	r2, [pc, #644]	@ (80016d8 <okuma+0x338>)
 8001454:	8812      	ldrh	r2, [r2, #0]
 8001456:	fb02 f303 	mul.w	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f882 	bl	8000564 <__aeabi_i2d>
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b9d      	ldr	r3, [pc, #628]	@ (80016dc <okuma+0x33c>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f7ff fb91 	bl	8000b98 <__aeabi_d2iz>
 8001476:	4603      	mov	r3, r0
 8001478:	4a99      	ldr	r2, [pc, #612]	@ (80016e0 <okuma+0x340>)
 800147a:	6013      	str	r3, [r2, #0]
			  	X2=MC*pow(2,11)/(X1+MD);
 800147c:	4b99      	ldr	r3, [pc, #612]	@ (80016e4 <okuma+0x344>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f86e 	bl	8000564 <__aeabi_i2d>
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	4b96      	ldr	r3, [pc, #600]	@ (80016e8 <okuma+0x348>)
 800148e:	f7ff f8d3 	bl	8000638 <__aeabi_dmul>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4614      	mov	r4, r2
 8001498:	461d      	mov	r5, r3
 800149a:	4b94      	ldr	r3, [pc, #592]	@ (80016ec <okuma+0x34c>)
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b8f      	ldr	r3, [pc, #572]	@ (80016e0 <okuma+0x340>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f85b 	bl	8000564 <__aeabi_i2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	4620      	mov	r0, r4
 80014b4:	4629      	mov	r1, r5
 80014b6:	f7ff f9e9 	bl	800088c <__aeabi_ddiv>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4610      	mov	r0, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f7ff fb69 	bl	8000b98 <__aeabi_d2iz>
 80014c6:	4603      	mov	r3, r0
 80014c8:	4a89      	ldr	r2, [pc, #548]	@ (80016f0 <okuma+0x350>)
 80014ca:	6013      	str	r3, [r2, #0]
			  	B5=X1+X2;
 80014cc:	4b84      	ldr	r3, [pc, #528]	@ (80016e0 <okuma+0x340>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b87      	ldr	r3, [pc, #540]	@ (80016f0 <okuma+0x350>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	4a87      	ldr	r2, [pc, #540]	@ (80016f4 <okuma+0x354>)
 80014d8:	6013      	str	r3, [r2, #0]
			  	T=(B5+8)/pow(2,4)/10;
 80014da:	4b86      	ldr	r3, [pc, #536]	@ (80016f4 <okuma+0x354>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3308      	adds	r3, #8
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f83f 	bl	8000564 <__aeabi_i2d>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b83      	ldr	r3, [pc, #524]	@ (80016f8 <okuma+0x358>)
 80014ec:	f7ff f9ce 	bl	800088c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f04f 0200 	mov.w	r2, #0
 80014fc:	4b7f      	ldr	r3, [pc, #508]	@ (80016fc <okuma+0x35c>)
 80014fe:	f7ff f9c5 	bl	800088c <__aeabi_ddiv>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4610      	mov	r0, r2
 8001508:	4619      	mov	r1, r3
 800150a:	f7ff fb45 	bl	8000b98 <__aeabi_d2iz>
 800150e:	4603      	mov	r3, r0
 8001510:	4a7b      	ldr	r2, [pc, #492]	@ (8001700 <okuma+0x360>)
 8001512:	6013      	str	r3, [r2, #0]

			  	HAL_Delay(5);
 8001514:	2005      	movs	r0, #5
 8001516:	f000 fced 	bl	8001ef4 <HAL_Delay>
			  	B6 = B5-4000;
 800151a:	4b76      	ldr	r3, [pc, #472]	@ (80016f4 <okuma+0x354>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f5a3 637a 	sub.w	r3, r3, #4000	@ 0xfa0
 8001522:	4a78      	ldr	r2, [pc, #480]	@ (8001704 <okuma+0x364>)
 8001524:	6013      	str	r3, [r2, #0]
			  	X1 = (B2 * (B6*B6/(pow(2,12))))/(pow(2,11));
 8001526:	4b78      	ldr	r3, [pc, #480]	@ (8001708 <okuma+0x368>)
 8001528:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f819 	bl	8000564 <__aeabi_i2d>
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	4b73      	ldr	r3, [pc, #460]	@ (8001704 <okuma+0x364>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a72      	ldr	r2, [pc, #456]	@ (8001704 <okuma+0x364>)
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff f80e 	bl	8000564 <__aeabi_i2d>
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4b6f      	ldr	r3, [pc, #444]	@ (800170c <okuma+0x36c>)
 800154e:	f7ff f99d 	bl	800088c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f7ff f86d 	bl	8000638 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b5f      	ldr	r3, [pc, #380]	@ (80016e8 <okuma+0x348>)
 800156c:	f7ff f98e 	bl	800088c <__aeabi_ddiv>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb0e 	bl	8000b98 <__aeabi_d2iz>
 800157c:	4603      	mov	r3, r0
 800157e:	4a58      	ldr	r2, [pc, #352]	@ (80016e0 <okuma+0x340>)
 8001580:	6013      	str	r3, [r2, #0]
			  	X2 = AC2*B6/(pow(2,11));
 8001582:	4b63      	ldr	r3, [pc, #396]	@ (8001710 <okuma+0x370>)
 8001584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001588:	461a      	mov	r2, r3
 800158a:	4b5e      	ldr	r3, [pc, #376]	@ (8001704 <okuma+0x364>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fb02 f303 	mul.w	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ffe6 	bl	8000564 <__aeabi_i2d>
 8001598:	f04f 0200 	mov.w	r2, #0
 800159c:	4b52      	ldr	r3, [pc, #328]	@ (80016e8 <okuma+0x348>)
 800159e:	f7ff f975 	bl	800088c <__aeabi_ddiv>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff faf5 	bl	8000b98 <__aeabi_d2iz>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a4f      	ldr	r2, [pc, #316]	@ (80016f0 <okuma+0x350>)
 80015b2:	6013      	str	r3, [r2, #0]
			  	X3 = X1+X2;
 80015b4:	4b4a      	ldr	r3, [pc, #296]	@ (80016e0 <okuma+0x340>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b4d      	ldr	r3, [pc, #308]	@ (80016f0 <okuma+0x350>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	4a55      	ldr	r2, [pc, #340]	@ (8001714 <okuma+0x374>)
 80015c0:	6013      	str	r3, [r2, #0]
			  	B3 = (((AC1*4+X3)<<1)+2)/4;
 80015c2:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <okuma+0x378>)
 80015c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c8:	009a      	lsls	r2, r3, #2
 80015ca:	4b52      	ldr	r3, [pc, #328]	@ (8001714 <okuma+0x374>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	3302      	adds	r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	da00      	bge.n	80015da <okuma+0x23a>
 80015d8:	3303      	adds	r3, #3
 80015da:	109b      	asrs	r3, r3, #2
 80015dc:	461a      	mov	r2, r3
 80015de:	4b4f      	ldr	r3, [pc, #316]	@ (800171c <okuma+0x37c>)
 80015e0:	601a      	str	r2, [r3, #0]
			  	X1 = AC3*B6/pow(2,13);
 80015e2:	4b4f      	ldr	r3, [pc, #316]	@ (8001720 <okuma+0x380>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b46      	ldr	r3, [pc, #280]	@ (8001704 <okuma+0x364>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	fb02 f303 	mul.w	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ffb6 	bl	8000564 <__aeabi_i2d>
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	4b49      	ldr	r3, [pc, #292]	@ (8001724 <okuma+0x384>)
 80015fe:	f7ff f945 	bl	800088c <__aeabi_ddiv>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff fac5 	bl	8000b98 <__aeabi_d2iz>
 800160e:	4603      	mov	r3, r0
 8001610:	4a33      	ldr	r2, [pc, #204]	@ (80016e0 <okuma+0x340>)
 8001612:	6013      	str	r3, [r2, #0]
			  	X2 = (B1 * (B6*B6/(pow(2,12))))/(pow(2,16));
 8001614:	4b44      	ldr	r3, [pc, #272]	@ (8001728 <okuma+0x388>)
 8001616:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ffa2 	bl	8000564 <__aeabi_i2d>
 8001620:	4604      	mov	r4, r0
 8001622:	460d      	mov	r5, r1
 8001624:	4b37      	ldr	r3, [pc, #220]	@ (8001704 <okuma+0x364>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a36      	ldr	r2, [pc, #216]	@ (8001704 <okuma+0x364>)
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	fb02 f303 	mul.w	r3, r2, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe ff97 	bl	8000564 <__aeabi_i2d>
 8001636:	f04f 0200 	mov.w	r2, #0
 800163a:	4b34      	ldr	r3, [pc, #208]	@ (800170c <okuma+0x36c>)
 800163c:	f7ff f926 	bl	800088c <__aeabi_ddiv>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	4620      	mov	r0, r4
 8001646:	4629      	mov	r1, r5
 8001648:	f7fe fff6 	bl	8000638 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b34      	ldr	r3, [pc, #208]	@ (800172c <okuma+0x38c>)
 800165a:	f7ff f917 	bl	800088c <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4610      	mov	r0, r2
 8001664:	4619      	mov	r1, r3
 8001666:	f7ff fa97 	bl	8000b98 <__aeabi_d2iz>
 800166a:	4603      	mov	r3, r0
 800166c:	4a20      	ldr	r2, [pc, #128]	@ (80016f0 <okuma+0x350>)
 800166e:	6013      	str	r3, [r2, #0]
			  	X3 = ((X1+X2)+2)/pow(2,2);
 8001670:	4b1b      	ldr	r3, [pc, #108]	@ (80016e0 <okuma+0x340>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <okuma+0x350>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4413      	add	r3, r2
 800167a:	3302      	adds	r3, #2
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff71 	bl	8000564 <__aeabi_i2d>
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	4b2a      	ldr	r3, [pc, #168]	@ (8001730 <okuma+0x390>)
 8001688:	f7ff f900 	bl	800088c <__aeabi_ddiv>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa80 	bl	8000b98 <__aeabi_d2iz>
 8001698:	4603      	mov	r3, r0
 800169a:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <okuma+0x374>)
 800169c:	6013      	str	r3, [r2, #0]
			  	B4 = AC4*(unsigned long)(X3+32768)/(pow(2,15));
 800169e:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <okuma+0x394>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <okuma+0x374>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff47 	bl	8000544 <__aeabi_ui2d>
 80016b6:	e03f      	b.n	8001738 <okuma+0x398>
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000214 	.word	0x20000214
 80016c0:	200002b0 	.word	0x200002b0
 80016c4:	200002e0 	.word	0x200002e0
 80016c8:	20000004 	.word	0x20000004
 80016cc:	200002e4 	.word	0x200002e4
 80016d0:	200002e8 	.word	0x200002e8
 80016d4:	200002d4 	.word	0x200002d4
 80016d8:	200002d2 	.word	0x200002d2
 80016dc:	40e00000 	.word	0x40e00000
 80016e0:	200002ec 	.word	0x200002ec
 80016e4:	200002dc 	.word	0x200002dc
 80016e8:	40a00000 	.word	0x40a00000
 80016ec:	200002de 	.word	0x200002de
 80016f0:	200002f0 	.word	0x200002f0
 80016f4:	200002f4 	.word	0x200002f4
 80016f8:	40300000 	.word	0x40300000
 80016fc:	40240000 	.word	0x40240000
 8001700:	200002f8 	.word	0x200002f8
 8001704:	200002fc 	.word	0x200002fc
 8001708:	200002d8 	.word	0x200002d8
 800170c:	40b00000 	.word	0x40b00000
 8001710:	200002cc 	.word	0x200002cc
 8001714:	20000300 	.word	0x20000300
 8001718:	200002ca 	.word	0x200002ca
 800171c:	20000304 	.word	0x20000304
 8001720:	200002ce 	.word	0x200002ce
 8001724:	40c00000 	.word	0x40c00000
 8001728:	200002d6 	.word	0x200002d6
 800172c:	40f00000 	.word	0x40f00000
 8001730:	40100000 	.word	0x40100000
 8001734:	200002d0 	.word	0x200002d0
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	4b86      	ldr	r3, [pc, #536]	@ (8001958 <okuma+0x5b8>)
 800173e:	f7ff f8a5 	bl	800088c <__aeabi_ddiv>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa4d 	bl	8000be8 <__aeabi_d2uiz>
 800174e:	4603      	mov	r3, r0
 8001750:	4a82      	ldr	r2, [pc, #520]	@ (800195c <okuma+0x5bc>)
 8001752:	6013      	str	r3, [r2, #0]
			  	B7 = ((unsigned long)UP-B3)*(50000>>1);
 8001754:	4b82      	ldr	r3, [pc, #520]	@ (8001960 <okuma+0x5c0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b82      	ldr	r3, [pc, #520]	@ (8001964 <okuma+0x5c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001764:	fb02 f303 	mul.w	r3, r2, r3
 8001768:	4a7f      	ldr	r2, [pc, #508]	@ (8001968 <okuma+0x5c8>)
 800176a:	6013      	str	r3, [r2, #0]
			  	if (B7<0x80000000){p = (B7*2)/B4;}
 800176c:	4b7e      	ldr	r3, [pc, #504]	@ (8001968 <okuma+0x5c8>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	db0e      	blt.n	8001792 <okuma+0x3f2>
 8001774:	4b7c      	ldr	r3, [pc, #496]	@ (8001968 <okuma+0x5c8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	005a      	lsls	r2, r3, #1
 800177a:	4b78      	ldr	r3, [pc, #480]	@ (800195c <okuma+0x5bc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178a:	4b78      	ldr	r3, [pc, #480]	@ (800196c <okuma+0x5cc>)
 800178c:	edc3 7a00 	vstr	s15, [r3]
 8001790:	e00d      	b.n	80017ae <okuma+0x40e>
			  		else p = (B7/B4)*2;
 8001792:	4b75      	ldr	r3, [pc, #468]	@ (8001968 <okuma+0x5c8>)
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	4b71      	ldr	r3, [pc, #452]	@ (800195c <okuma+0x5bc>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017a8:	4b70      	ldr	r3, [pc, #448]	@ (800196c <okuma+0x5cc>)
 80017aa:	edc3 7a00 	vstr	s15, [r3]
			  	HAL_Delay(5);
 80017ae:	2005      	movs	r0, #5
 80017b0:	f000 fba0 	bl	8001ef4 <HAL_Delay>
			  	X1=(p/(pow(2,8))*p/(pow(2,8)));
 80017b4:	4b6d      	ldr	r3, [pc, #436]	@ (800196c <okuma+0x5cc>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fee5 	bl	8000588 <__aeabi_f2d>
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	4b6b      	ldr	r3, [pc, #428]	@ (8001970 <okuma+0x5d0>)
 80017c4:	f7ff f862 	bl	800088c <__aeabi_ddiv>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	4614      	mov	r4, r2
 80017ce:	461d      	mov	r5, r3
 80017d0:	4b66      	ldr	r3, [pc, #408]	@ (800196c <okuma+0x5cc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fed7 	bl	8000588 <__aeabi_f2d>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4620      	mov	r0, r4
 80017e0:	4629      	mov	r1, r5
 80017e2:	f7fe ff29 	bl	8000638 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001970 <okuma+0x5d0>)
 80017f4:	f7ff f84a 	bl	800088c <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	4610      	mov	r0, r2
 80017fe:	4619      	mov	r1, r3
 8001800:	f7ff f9ca 	bl	8000b98 <__aeabi_d2iz>
 8001804:	4603      	mov	r3, r0
 8001806:	4a5b      	ldr	r2, [pc, #364]	@ (8001974 <okuma+0x5d4>)
 8001808:	6013      	str	r3, [r2, #0]
			  	X1=X1*3038/pow(2,16);
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <okuma+0x5d4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f640 32de 	movw	r2, #3038	@ 0xbde
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f7fe fea4 	bl	8000564 <__aeabi_i2d>
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	4b55      	ldr	r3, [pc, #340]	@ (8001978 <okuma+0x5d8>)
 8001822:	f7ff f833 	bl	800088c <__aeabi_ddiv>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	4610      	mov	r0, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff f9b3 	bl	8000b98 <__aeabi_d2iz>
 8001832:	4603      	mov	r3, r0
 8001834:	4a4f      	ldr	r2, [pc, #316]	@ (8001974 <okuma+0x5d4>)
 8001836:	6013      	str	r3, [r2, #0]
			  	X2=(-7357*p)/pow(2,16);
 8001838:	4b4c      	ldr	r3, [pc, #304]	@ (800196c <okuma+0x5cc>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 800197c <okuma+0x5dc>
 8001842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001846:	ee17 0a90 	vmov	r0, s15
 800184a:	f7fe fe9d 	bl	8000588 <__aeabi_f2d>
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	4b49      	ldr	r3, [pc, #292]	@ (8001978 <okuma+0x5d8>)
 8001854:	f7ff f81a 	bl	800088c <__aeabi_ddiv>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f99a 	bl	8000b98 <__aeabi_d2iz>
 8001864:	4603      	mov	r3, r0
 8001866:	4a46      	ldr	r2, [pc, #280]	@ (8001980 <okuma+0x5e0>)
 8001868:	6013      	str	r3, [r2, #0]
			  	HAL_Delay(5);
 800186a:	2005      	movs	r0, #5
 800186c:	f000 fb42 	bl	8001ef4 <HAL_Delay>
			  	p=p+((X1+X2+3791)/pow(2,4));
 8001870:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <okuma+0x5cc>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fe87 	bl	8000588 <__aeabi_f2d>
 800187a:	4604      	mov	r4, r0
 800187c:	460d      	mov	r5, r1
 800187e:	4b3d      	ldr	r3, [pc, #244]	@ (8001974 <okuma+0x5d4>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	4b3f      	ldr	r3, [pc, #252]	@ (8001980 <okuma+0x5e0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	f603 63cf 	addw	r3, r3, #3791	@ 0xecf
 800188c:	4618      	mov	r0, r3
 800188e:	f7fe fe69 	bl	8000564 <__aeabi_i2d>
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	4b3b      	ldr	r3, [pc, #236]	@ (8001984 <okuma+0x5e4>)
 8001898:	f7fe fff8 	bl	800088c <__aeabi_ddiv>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4620      	mov	r0, r4
 80018a2:	4629      	mov	r1, r5
 80018a4:	f7fe fd12 	bl	80002cc <__adddf3>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f9ba 	bl	8000c28 <__aeabi_d2f>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4a2d      	ldr	r2, [pc, #180]	@ (800196c <okuma+0x5cc>)
 80018b8:	6013      	str	r3, [r2, #0]


			  	p1=p/101325;
 80018ba:	4b2c      	ldr	r3, [pc, #176]	@ (800196c <okuma+0x5cc>)
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8001988 <okuma+0x5e8>
 80018c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c8:	4b30      	ldr	r3, [pc, #192]	@ (800198c <okuma+0x5ec>)
 80018ca:	edc3 7a00 	vstr	s15, [r3]
			  	HAL_Delay(5);
 80018ce:	2005      	movs	r0, #5
 80018d0:	f000 fb10 	bl	8001ef4 <HAL_Delay>
			  	k=pow(p1,0.19029);
 80018d4:	4b2d      	ldr	r3, [pc, #180]	@ (800198c <okuma+0x5ec>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe55 	bl	8000588 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	ed9f 1b1b 	vldr	d1, [pc, #108]	@ 8001950 <okuma+0x5b0>
 80018e6:	ec43 2b10 	vmov	d0, r2, r3
 80018ea:	f006 fc4d 	bl	8008188 <pow>
 80018ee:	ec53 2b10 	vmov	r2, r3, d0
 80018f2:	4610      	mov	r0, r2
 80018f4:	4619      	mov	r1, r3
 80018f6:	f7ff f997 	bl	8000c28 <__aeabi_d2f>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a24      	ldr	r2, [pc, #144]	@ (8001990 <okuma+0x5f0>)
 80018fe:	6013      	str	r3, [r2, #0]
			  	altitude=44330*(1-k);
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <okuma+0x5f0>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800190a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800190e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8001994 <okuma+0x5f4>
 8001912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001916:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191a:	ee17 2a90 	vmov	r2, s15
 800191e:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <okuma+0x5f8>)
 8001920:	601a      	str	r2, [r3, #0]
			  	printf("z");
 8001922:	207a      	movs	r0, #122	@ 0x7a
 8001924:	f004 fab2 	bl	8005e8c <putchar>
			  	*sicaklik = T;
 8001928:	4b1c      	ldr	r3, [pc, #112]	@ (800199c <okuma+0x5fc>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a1c      	ldr	r2, [pc, #112]	@ (80019a0 <okuma+0x600>)
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	601a      	str	r2, [r3, #0]
			  	*yukseklik = altitude;
 8001932:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <okuma+0x604>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a18      	ldr	r2, [pc, #96]	@ (8001998 <okuma+0x5f8>)
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	601a      	str	r2, [r3, #0]
			  	*basinc = p;
 800193c:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <okuma+0x608>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0a      	ldr	r2, [pc, #40]	@ (800196c <okuma+0x5cc>)
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	601a      	str	r2, [r3, #0]




}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	bdb0      	pop	{r4, r5, r7, pc}
 800194c:	f3af 8000 	nop.w
 8001950:	3760bf5d 	.word	0x3760bf5d
 8001954:	3fc85b6c 	.word	0x3fc85b6c
 8001958:	40e00000 	.word	0x40e00000
 800195c:	20000308 	.word	0x20000308
 8001960:	200002e8 	.word	0x200002e8
 8001964:	20000304 	.word	0x20000304
 8001968:	2000030c 	.word	0x2000030c
 800196c:	20000310 	.word	0x20000310
 8001970:	40700000 	.word	0x40700000
 8001974:	200002ec 	.word	0x200002ec
 8001978:	40f00000 	.word	0x40f00000
 800197c:	c5e5e800 	.word	0xc5e5e800
 8001980:	200002f0 	.word	0x200002f0
 8001984:	40300000 	.word	0x40300000
 8001988:	47c5e680 	.word	0x47c5e680
 800198c:	20000314 	.word	0x20000314
 8001990:	2000031c 	.word	0x2000031c
 8001994:	472d2a00 	.word	0x472d2a00
 8001998:	20000318 	.word	0x20000318
 800199c:	20000010 	.word	0x20000010
 80019a0:	200002f8 	.word	0x200002f8
 80019a4:	2000000c 	.word	0x2000000c
 80019a8:	20000008 	.word	0x20000008

080019ac <yazma>:


	void yazma(){
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af04      	add	r7, sp, #16



	  	snprintf(buffer,sizeof(buffer),"sicaklik : %ld, yukseklik : %ld , basinc : %.2f\r\n",T,altitude,p);
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <yazma+0x48>)
 80019b4:	681d      	ldr	r5, [r3, #0]
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <yazma+0x4c>)
 80019b8:	681c      	ldr	r4, [r3, #0]
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <yazma+0x50>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fde2 	bl	8000588 <__aeabi_f2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019cc:	9400      	str	r4, [sp, #0]
 80019ce:	462b      	mov	r3, r5
 80019d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a00 <yazma+0x54>)
 80019d2:	218c      	movs	r1, #140	@ 0x8c
 80019d4:	480b      	ldr	r0, [pc, #44]	@ (8001a04 <yazma+0x58>)
 80019d6:	f004 fa61 	bl	8005e9c <sniprintf>

	  	HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
 80019da:	2364      	movs	r3, #100	@ 0x64
 80019dc:	228c      	movs	r2, #140	@ 0x8c
 80019de:	4909      	ldr	r1, [pc, #36]	@ (8001a04 <yazma+0x58>)
 80019e0:	4809      	ldr	r0, [pc, #36]	@ (8001a08 <yazma+0x5c>)
 80019e2:	f002 fd87 	bl	80044f4 <HAL_UART_Transmit>

	  	HAL_Delay(60);
 80019e6:	203c      	movs	r0, #60	@ 0x3c
 80019e8:	f000 fa84 	bl	8001ef4 <HAL_Delay>

	}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bdb0      	pop	{r4, r5, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200002f8 	.word	0x200002f8
 80019f8:	20000318 	.word	0x20000318
 80019fc:	20000310 	.word	0x20000310
 8001a00:	08009060 	.word	0x08009060
 8001a04:	20000320 	.word	0x20000320
 8001a08:	20000268 	.word	0x20000268

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	bf00      	nop
 8001a16:	e7fd      	b.n	8001a14 <Error_Handler+0x8>

08001a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a56:	2007      	movs	r0, #7
 8001a58:	f000 fb40 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a19      	ldr	r2, [pc, #100]	@ (8001aec <HAL_I2C_MspInit+0x84>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d12b      	bne.n	8001ae2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a17      	ldr	r2, [pc, #92]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = scl_Pin|sda_Pin;
 8001aa6:	23c0      	movs	r3, #192	@ 0xc0
 8001aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aaa:	2312      	movs	r3, #18
 8001aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aba:	f107 0314 	add.w	r3, r7, #20
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	@ (8001af4 <HAL_I2C_MspInit+0x8c>)
 8001ac2:	f000 fbdf 	bl	8002284 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	60fb      	str	r3, [r7, #12]
 8001aca:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	4a08      	ldr	r2, [pc, #32]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001ad0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ad4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ad6:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <HAL_I2C_MspInit+0x88>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	@ 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40005400 	.word	0x40005400
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020400 	.word	0x40020400

08001af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1d      	ldr	r2, [pc, #116]	@ (8001b8c <HAL_UART_MspInit+0x94>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d133      	bne.n	8001b82 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <HAL_UART_MspInit+0x98>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	4a1b      	ldr	r2, [pc, #108]	@ (8001b90 <HAL_UART_MspInit+0x98>)
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <HAL_UART_MspInit+0x98>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b32:	613b      	str	r3, [r7, #16]
 8001b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b15      	ldr	r3, [pc, #84]	@ (8001b90 <HAL_UART_MspInit+0x98>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	4a14      	ldr	r2, [pc, #80]	@ (8001b90 <HAL_UART_MspInit+0x98>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b46:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_UART_MspInit+0x98>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b52:	230c      	movs	r3, #12
 8001b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b62:	2307      	movs	r3, #7
 8001b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4809      	ldr	r0, [pc, #36]	@ (8001b94 <HAL_UART_MspInit+0x9c>)
 8001b6e:	f000 fb89 	bl	8002284 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b72:	2200      	movs	r2, #0
 8001b74:	2100      	movs	r1, #0
 8001b76:	2026      	movs	r0, #38	@ 0x26
 8001b78:	f000 fabb 	bl	80020f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b7c:	2026      	movs	r0, #38	@ 0x26
 8001b7e:	f000 fad4 	bl	800212a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	@ 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004400 	.word	0x40004400
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b9c:	bf00      	nop
 8001b9e:	e7fd      	b.n	8001b9c <NMI_Handler+0x4>

08001ba0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba4:	bf00      	nop
 8001ba6:	e7fd      	b.n	8001ba4 <HardFault_Handler+0x4>

08001ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bac:	bf00      	nop
 8001bae:	e7fd      	b.n	8001bac <MemManage_Handler+0x4>

08001bb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bb4:	bf00      	nop
 8001bb6:	e7fd      	b.n	8001bb4 <BusFault_Handler+0x4>

08001bb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <UsageFault_Handler+0x4>

08001bc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bee:	f000 f961 	bl	8001eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001bfc:	4802      	ldr	r0, [pc, #8]	@ (8001c08 <USART2_IRQHandler+0x10>)
 8001bfe:	f002 fd05 	bl	800460c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000268 	.word	0x20000268

08001c0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return 1;
 8001c10:	2301      	movs	r3, #1
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <_kill>:

int _kill(int pid, int sig)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c26:	f004 fa03 	bl	8006030 <__errno>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2216      	movs	r2, #22
 8001c2e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_exit>:

void _exit (int status)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ffe7 	bl	8001c1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c4e:	bf00      	nop
 8001c50:	e7fd      	b.n	8001c4e <_exit+0x12>

08001c52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b086      	sub	sp, #24
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	60f8      	str	r0, [r7, #12]
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e00a      	b.n	8001c7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c64:	f3af 8000 	nop.w
 8001c68:	4601      	mov	r1, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60ba      	str	r2, [r7, #8]
 8001c70:	b2ca      	uxtb	r2, r1
 8001c72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	3301      	adds	r3, #1
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	dbf0      	blt.n	8001c64 <_read+0x12>
  }

  return len;
 8001c82:	687b      	ldr	r3, [r7, #4]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e009      	b.n	8001cb2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	60ba      	str	r2, [r7, #8]
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	dbf1      	blt.n	8001c9e <_write+0x12>
  }
  return len;
 8001cba:	687b      	ldr	r3, [r7, #4]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_close>:

int _close(int file)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ccc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cec:	605a      	str	r2, [r3, #4]
  return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_isatty>:

int _isatty(int file)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d04:	2301      	movs	r3, #1
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b085      	sub	sp, #20
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d34:	4a14      	ldr	r2, [pc, #80]	@ (8001d88 <_sbrk+0x5c>)
 8001d36:	4b15      	ldr	r3, [pc, #84]	@ (8001d8c <_sbrk+0x60>)
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d40:	4b13      	ldr	r3, [pc, #76]	@ (8001d90 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d102      	bne.n	8001d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d48:	4b11      	ldr	r3, [pc, #68]	@ (8001d90 <_sbrk+0x64>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <_sbrk+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d4e:	4b10      	ldr	r3, [pc, #64]	@ (8001d90 <_sbrk+0x64>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d207      	bcs.n	8001d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d5c:	f004 f968 	bl	8006030 <__errno>
 8001d60:	4603      	mov	r3, r0
 8001d62:	220c      	movs	r2, #12
 8001d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6a:	e009      	b.n	8001d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d6c:	4b08      	ldr	r3, [pc, #32]	@ (8001d90 <_sbrk+0x64>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <_sbrk+0x64>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <_sbrk+0x64>)
 8001d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20020000 	.word	0x20020000
 8001d8c:	00000400 	.word	0x00000400
 8001d90:	200003ac 	.word	0x200003ac
 8001d94:	20000500 	.word	0x20000500

08001d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d9c:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <SystemInit+0x20>)
 8001d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001da2:	4a05      	ldr	r2, [pc, #20]	@ (8001db8 <SystemInit+0x20>)
 8001da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000ed00 	.word	0xe000ed00

08001dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001df4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dc0:	f7ff ffea 	bl	8001d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dc4:	480c      	ldr	r0, [pc, #48]	@ (8001df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dc6:	490d      	ldr	r1, [pc, #52]	@ (8001dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dcc:	e002      	b.n	8001dd4 <LoopCopyDataInit>

08001dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd2:	3304      	adds	r3, #4

08001dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd8:	d3f9      	bcc.n	8001dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dda:	4a0a      	ldr	r2, [pc, #40]	@ (8001e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de0:	e001      	b.n	8001de6 <LoopFillZerobss>

08001de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de4:	3204      	adds	r2, #4

08001de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de8:	d3fb      	bcc.n	8001de2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001dea:	f004 f927 	bl	800603c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dee:	f7ff f8e3 	bl	8000fb8 <main>
  bx  lr    
 8001df2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dfc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001e00:	08009460 	.word	0x08009460
  ldr r2, =_sbss
 8001e04:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001e08:	20000500 	.word	0x20000500

08001e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e0c:	e7fe      	b.n	8001e0c <ADC_IRQHandler>
	...

08001e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e14:	4b0e      	ldr	r3, [pc, #56]	@ (8001e50 <HAL_Init+0x40>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <HAL_Init+0x40>)
 8001e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e20:	4b0b      	ldr	r3, [pc, #44]	@ (8001e50 <HAL_Init+0x40>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a0a      	ldr	r2, [pc, #40]	@ (8001e50 <HAL_Init+0x40>)
 8001e26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <HAL_Init+0x40>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <HAL_Init+0x40>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e38:	2003      	movs	r0, #3
 8001e3a:	f000 f94f 	bl	80020dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 f808 	bl	8001e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e44:	f7ff fde8 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023c00 	.word	0x40023c00

08001e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e5c:	4b12      	ldr	r3, [pc, #72]	@ (8001ea8 <HAL_InitTick+0x54>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	4b12      	ldr	r3, [pc, #72]	@ (8001eac <HAL_InitTick+0x58>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	4619      	mov	r1, r3
 8001e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f967 	bl	8002146 <HAL_SYSTICK_Config>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e00e      	b.n	8001ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0f      	cmp	r3, #15
 8001e86:	d80a      	bhi.n	8001e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	6879      	ldr	r1, [r7, #4]
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	f000 f92f 	bl	80020f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e94:	4a06      	ldr	r2, [pc, #24]	@ (8001eb0 <HAL_InitTick+0x5c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e000      	b.n	8001ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000014 	.word	0x20000014
 8001eac:	2000001c 	.word	0x2000001c
 8001eb0:	20000018 	.word	0x20000018

08001eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x20>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4a04      	ldr	r2, [pc, #16]	@ (8001ed8 <HAL_IncTick+0x24>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	2000001c 	.word	0x2000001c
 8001ed8:	200003b0 	.word	0x200003b0

08001edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee0:	4b03      	ldr	r3, [pc, #12]	@ (8001ef0 <HAL_GetTick+0x14>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	200003b0 	.word	0x200003b0

08001ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001efc:	f7ff ffee 	bl	8001edc <HAL_GetTick>
 8001f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0c:	d005      	beq.n	8001f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f38 <HAL_Delay+0x44>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4413      	add	r3, r2
 8001f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f1a:	bf00      	nop
 8001f1c:	f7ff ffde 	bl	8001edc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d8f7      	bhi.n	8001f1c <HAL_Delay+0x28>
  {
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	bf00      	nop
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	2000001c 	.word	0x2000001c

08001f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6e:	4a04      	ldr	r2, [pc, #16]	@ (8001f80 <__NVIC_SetPriorityGrouping+0x44>)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	60d3      	str	r3, [r2, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f88:	4b04      	ldr	r3, [pc, #16]	@ (8001f9c <__NVIC_GetPriorityGrouping+0x18>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	f003 0307 	and.w	r3, r3, #7
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	db0b      	blt.n	8001fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	f003 021f 	and.w	r2, r3, #31
 8001fb8:	4907      	ldr	r1, [pc, #28]	@ (8001fd8 <__NVIC_EnableIRQ+0x38>)
 8001fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2001      	movs	r0, #1
 8001fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fca:	bf00      	nop
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e000e100 	.word	0xe000e100

08001fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6039      	str	r1, [r7, #0]
 8001fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	db0a      	blt.n	8002006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	490c      	ldr	r1, [pc, #48]	@ (8002028 <__NVIC_SetPriority+0x4c>)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	440b      	add	r3, r1
 8002000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002004:	e00a      	b.n	800201c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	b2da      	uxtb	r2, r3
 800200a:	4908      	ldr	r1, [pc, #32]	@ (800202c <__NVIC_SetPriority+0x50>)
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	3b04      	subs	r3, #4
 8002014:	0112      	lsls	r2, r2, #4
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	440b      	add	r3, r1
 800201a:	761a      	strb	r2, [r3, #24]
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000e100 	.word	0xe000e100
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002030:	b480      	push	{r7}
 8002032:	b089      	sub	sp, #36	@ 0x24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	f1c3 0307 	rsb	r3, r3, #7
 800204a:	2b04      	cmp	r3, #4
 800204c:	bf28      	it	cs
 800204e:	2304      	movcs	r3, #4
 8002050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3304      	adds	r3, #4
 8002056:	2b06      	cmp	r3, #6
 8002058:	d902      	bls.n	8002060 <NVIC_EncodePriority+0x30>
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	3b03      	subs	r3, #3
 800205e:	e000      	b.n	8002062 <NVIC_EncodePriority+0x32>
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002064:	f04f 32ff 	mov.w	r2, #4294967295
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43da      	mvns	r2, r3
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	401a      	ands	r2, r3
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002078:	f04f 31ff 	mov.w	r1, #4294967295
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	fa01 f303 	lsl.w	r3, r1, r3
 8002082:	43d9      	mvns	r1, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002088:	4313      	orrs	r3, r2
         );
}
 800208a:	4618      	mov	r0, r3
 800208c:	3724      	adds	r7, #36	@ 0x24
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020a8:	d301      	bcc.n	80020ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020aa:	2301      	movs	r3, #1
 80020ac:	e00f      	b.n	80020ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <SysTick_Config+0x40>)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b6:	210f      	movs	r1, #15
 80020b8:	f04f 30ff 	mov.w	r0, #4294967295
 80020bc:	f7ff ff8e 	bl	8001fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <SysTick_Config+0x40>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <SysTick_Config+0x40>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7ff ff29 	bl	8001f3c <__NVIC_SetPriorityGrouping>
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	4603      	mov	r3, r0
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
 80020fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002104:	f7ff ff3e 	bl	8001f84 <__NVIC_GetPriorityGrouping>
 8002108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	68b9      	ldr	r1, [r7, #8]
 800210e:	6978      	ldr	r0, [r7, #20]
 8002110:	f7ff ff8e 	bl	8002030 <NVIC_EncodePriority>
 8002114:	4602      	mov	r2, r0
 8002116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800211a:	4611      	mov	r1, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff ff5d 	bl	8001fdc <__NVIC_SetPriority>
}
 8002122:	bf00      	nop
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b082      	sub	sp, #8
 800212e:	af00      	add	r7, sp, #0
 8002130:	4603      	mov	r3, r0
 8002132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff31 	bl	8001fa0 <__NVIC_EnableIRQ>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b082      	sub	sp, #8
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffa2 	bl	8002098 <SysTick_Config>
 8002154:	4603      	mov	r3, r0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b084      	sub	sp, #16
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff feb6 	bl	8001edc <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d008      	beq.n	8002190 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2280      	movs	r2, #128	@ 0x80
 8002182:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e052      	b.n	8002236 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f022 0216 	bic.w	r2, r2, #22
 800219e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d103      	bne.n	80021c0 <HAL_DMA_Abort+0x62>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f022 0201 	bic.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021e0:	e013      	b.n	800220a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021e2:	f7ff fe7b 	bl	8001edc <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b05      	cmp	r3, #5
 80021ee:	d90c      	bls.n	800220a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2220      	movs	r2, #32
 80021f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2203      	movs	r2, #3
 80021fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e015      	b.n	8002236 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1e4      	bne.n	80021e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221c:	223f      	movs	r2, #63	@ 0x3f
 800221e:	409a      	lsls	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2201      	movs	r2, #1
 8002228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d004      	beq.n	800225c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2280      	movs	r2, #128	@ 0x80
 8002256:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e00c      	b.n	8002276 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2205      	movs	r2, #5
 8002260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	370c      	adds	r7, #12
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
	...

08002284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002284:	b480      	push	{r7}
 8002286:	b089      	sub	sp, #36	@ 0x24
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
 800229e:	e165      	b.n	800256c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a0:	2201      	movs	r2, #1
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	f040 8154 	bne.w	8002566 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d005      	beq.n	80022d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d130      	bne.n	8002338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	2203      	movs	r2, #3
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800230c:	2201      	movs	r2, #1
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4013      	ands	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	091b      	lsrs	r3, r3, #4
 8002322:	f003 0201 	and.w	r2, r3, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b03      	cmp	r3, #3
 8002342:	d017      	beq.n	8002374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d123      	bne.n	80023c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	08da      	lsrs	r2, r3, #3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3208      	adds	r2, #8
 8002388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	220f      	movs	r2, #15
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	691a      	ldr	r2, [r3, #16]
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	08da      	lsrs	r2, r3, #3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	3208      	adds	r2, #8
 80023c2:	69b9      	ldr	r1, [r7, #24]
 80023c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 0203 	and.w	r2, r3, #3
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002404:	2b00      	cmp	r3, #0
 8002406:	f000 80ae 	beq.w	8002566 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	4b5d      	ldr	r3, [pc, #372]	@ (8002584 <HAL_GPIO_Init+0x300>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002412:	4a5c      	ldr	r2, [pc, #368]	@ (8002584 <HAL_GPIO_Init+0x300>)
 8002414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002418:	6453      	str	r3, [r2, #68]	@ 0x44
 800241a:	4b5a      	ldr	r3, [pc, #360]	@ (8002584 <HAL_GPIO_Init+0x300>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002426:	4a58      	ldr	r2, [pc, #352]	@ (8002588 <HAL_GPIO_Init+0x304>)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a4f      	ldr	r2, [pc, #316]	@ (800258c <HAL_GPIO_Init+0x308>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d025      	beq.n	800249e <HAL_GPIO_Init+0x21a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4e      	ldr	r2, [pc, #312]	@ (8002590 <HAL_GPIO_Init+0x30c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d01f      	beq.n	800249a <HAL_GPIO_Init+0x216>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a4d      	ldr	r2, [pc, #308]	@ (8002594 <HAL_GPIO_Init+0x310>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x212>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a4c      	ldr	r2, [pc, #304]	@ (8002598 <HAL_GPIO_Init+0x314>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x20e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4b      	ldr	r2, [pc, #300]	@ (800259c <HAL_GPIO_Init+0x318>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x20a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4a      	ldr	r2, [pc, #296]	@ (80025a0 <HAL_GPIO_Init+0x31c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x206>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a49      	ldr	r2, [pc, #292]	@ (80025a4 <HAL_GPIO_Init+0x320>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x202>
 8002482:	2306      	movs	r3, #6
 8002484:	e00c      	b.n	80024a0 <HAL_GPIO_Init+0x21c>
 8002486:	2307      	movs	r3, #7
 8002488:	e00a      	b.n	80024a0 <HAL_GPIO_Init+0x21c>
 800248a:	2305      	movs	r3, #5
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x21c>
 800248e:	2304      	movs	r3, #4
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x21c>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x21c>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x21c>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x21c>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	@ (8002588 <HAL_GPIO_Init+0x304>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b3a      	ldr	r3, [pc, #232]	@ (80025a8 <HAL_GPIO_Init+0x324>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a31      	ldr	r2, [pc, #196]	@ (80025a8 <HAL_GPIO_Init+0x324>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b2f      	ldr	r3, [pc, #188]	@ (80025a8 <HAL_GPIO_Init+0x324>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a26      	ldr	r2, [pc, #152]	@ (80025a8 <HAL_GPIO_Init+0x324>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <HAL_GPIO_Init+0x324>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1c      	ldr	r2, [pc, #112]	@ (80025a8 <HAL_GPIO_Init+0x324>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <HAL_GPIO_Init+0x324>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a11      	ldr	r2, [pc, #68]	@ (80025a8 <HAL_GPIO_Init+0x324>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f ae96 	bls.w	80022a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40021400 	.word	0x40021400
 80025a4:	40021800 	.word	0x40021800
 80025a8:	40013c00 	.word	0x40013c00

080025ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	807b      	strh	r3, [r7, #2]
 80025b8:	4613      	mov	r3, r2
 80025ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025bc:	787b      	ldrb	r3, [r7, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025c2:	887a      	ldrh	r2, [r7, #2]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c8:	e003      	b.n	80025d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025ca:	887b      	ldrh	r3, [r7, #2]
 80025cc:	041a      	lsls	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	619a      	str	r2, [r3, #24]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e12b      	b.n	800284a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff fa2e 	bl	8001a68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	@ 0x24
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002632:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002642:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002644:	f001 fa10 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 8002648:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4a81      	ldr	r2, [pc, #516]	@ (8002854 <HAL_I2C_Init+0x274>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d807      	bhi.n	8002664 <HAL_I2C_Init+0x84>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4a80      	ldr	r2, [pc, #512]	@ (8002858 <HAL_I2C_Init+0x278>)
 8002658:	4293      	cmp	r3, r2
 800265a:	bf94      	ite	ls
 800265c:	2301      	movls	r3, #1
 800265e:	2300      	movhi	r3, #0
 8002660:	b2db      	uxtb	r3, r3
 8002662:	e006      	b.n	8002672 <HAL_I2C_Init+0x92>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4a7d      	ldr	r2, [pc, #500]	@ (800285c <HAL_I2C_Init+0x27c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	bf94      	ite	ls
 800266c:	2301      	movls	r3, #1
 800266e:	2300      	movhi	r3, #0
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e0e7      	b.n	800284a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4a78      	ldr	r2, [pc, #480]	@ (8002860 <HAL_I2C_Init+0x280>)
 800267e:	fba2 2303 	umull	r2, r3, r2, r3
 8002682:	0c9b      	lsrs	r3, r3, #18
 8002684:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a6a      	ldr	r2, [pc, #424]	@ (8002854 <HAL_I2C_Init+0x274>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d802      	bhi.n	80026b4 <HAL_I2C_Init+0xd4>
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	3301      	adds	r3, #1
 80026b2:	e009      	b.n	80026c8 <HAL_I2C_Init+0xe8>
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	4a69      	ldr	r2, [pc, #420]	@ (8002864 <HAL_I2C_Init+0x284>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	3301      	adds	r3, #1
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6812      	ldr	r2, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	495c      	ldr	r1, [pc, #368]	@ (8002854 <HAL_I2C_Init+0x274>)
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d819      	bhi.n	800271c <HAL_I2C_Init+0x13c>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e59      	subs	r1, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80026f6:	1c59      	adds	r1, r3, #1
 80026f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80026fc:	400b      	ands	r3, r1
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00a      	beq.n	8002718 <HAL_I2C_Init+0x138>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1e59      	subs	r1, r3, #1
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	e051      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002718:	2304      	movs	r3, #4
 800271a:	e04f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d111      	bne.n	8002748 <HAL_I2C_Init+0x168>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e58      	subs	r0, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6859      	ldr	r1, [r3, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	440b      	add	r3, r1
 8002732:	fbb0 f3f3 	udiv	r3, r0, r3
 8002736:	3301      	adds	r3, #1
 8002738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800273c:	2b00      	cmp	r3, #0
 800273e:	bf0c      	ite	eq
 8002740:	2301      	moveq	r3, #1
 8002742:	2300      	movne	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e012      	b.n	800276e <HAL_I2C_Init+0x18e>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	1e58      	subs	r0, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6859      	ldr	r1, [r3, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	0099      	lsls	r1, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	fbb0 f3f3 	udiv	r3, r0, r3
 800275e:	3301      	adds	r3, #1
 8002760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x196>
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10e      	bne.n	800279c <HAL_I2C_Init+0x1bc>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	1e58      	subs	r0, r3, #1
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6859      	ldr	r1, [r3, #4]
 8002786:	460b      	mov	r3, r1
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	440b      	add	r3, r1
 800278c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800279a:	e00f      	b.n	80027bc <HAL_I2C_Init+0x1dc>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e58      	subs	r0, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6859      	ldr	r1, [r3, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	0099      	lsls	r1, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b2:	3301      	adds	r3, #1
 80027b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6809      	ldr	r1, [r1, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69da      	ldr	r2, [r3, #28]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6911      	ldr	r1, [r2, #16]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	4311      	orrs	r1, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	430b      	orrs	r3, r1
 80027fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2220      	movs	r2, #32
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	000186a0 	.word	0x000186a0
 8002858:	001e847f 	.word	0x001e847f
 800285c:	003d08ff 	.word	0x003d08ff
 8002860:	431bde83 	.word	0x431bde83
 8002864:	10624dd3 	.word	0x10624dd3

08002868 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af02      	add	r7, sp, #8
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	4608      	mov	r0, r1
 8002872:	4611      	mov	r1, r2
 8002874:	461a      	mov	r2, r3
 8002876:	4603      	mov	r3, r0
 8002878:	817b      	strh	r3, [r7, #10]
 800287a:	460b      	mov	r3, r1
 800287c:	813b      	strh	r3, [r7, #8]
 800287e:	4613      	mov	r3, r2
 8002880:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002882:	f7ff fb2b 	bl	8001edc <HAL_GetTick>
 8002886:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800288e:	b2db      	uxtb	r3, r3
 8002890:	2b20      	cmp	r3, #32
 8002892:	f040 80d9 	bne.w	8002a48 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	2319      	movs	r3, #25
 800289c:	2201      	movs	r2, #1
 800289e:	496d      	ldr	r1, [pc, #436]	@ (8002a54 <HAL_I2C_Mem_Write+0x1ec>)
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 fdb9 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
 80028ae:	e0cc      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d101      	bne.n	80028be <HAL_I2C_Mem_Write+0x56>
 80028ba:	2302      	movs	r3, #2
 80028bc:	e0c5      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d007      	beq.n	80028e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2221      	movs	r2, #33	@ 0x21
 80028f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2240      	movs	r2, #64	@ 0x40
 8002900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a3a      	ldr	r2, [r7, #32]
 800290e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002914:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800291a:	b29a      	uxth	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a4d      	ldr	r2, [pc, #308]	@ (8002a58 <HAL_I2C_Mem_Write+0x1f0>)
 8002924:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002926:	88f8      	ldrh	r0, [r7, #6]
 8002928:	893a      	ldrh	r2, [r7, #8]
 800292a:	8979      	ldrh	r1, [r7, #10]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	4603      	mov	r3, r0
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 fbf0 	bl	800311c <I2C_RequestMemoryWrite>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d052      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e081      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f000 fe7e 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00d      	beq.n	8002972 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	2b04      	cmp	r3, #4
 800295c:	d107      	bne.n	800296e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800296c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e06b      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002976:	781a      	ldrb	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	d11b      	bne.n	80029e8 <HAL_I2C_Mem_Write+0x180>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d017      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029bc:	781a      	ldrb	r2, [r3, #0]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b01      	subs	r3, #1
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1aa      	bne.n	8002946 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 fe71 	bl	80036dc <I2C_WaitOnBTFFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00d      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	2b04      	cmp	r3, #4
 8002a06:	d107      	bne.n	8002a18 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a16:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e016      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a44:	2300      	movs	r3, #0
 8002a46:	e000      	b.n	8002a4a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a48:	2302      	movs	r3, #2
  }
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	00100002 	.word	0x00100002
 8002a58:	ffff0000 	.word	0xffff0000

08002a5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	@ 0x30
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	4608      	mov	r0, r1
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	817b      	strh	r3, [r7, #10]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	813b      	strh	r3, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a76:	f7ff fa31 	bl	8001edc <HAL_GetTick>
 8002a7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b20      	cmp	r3, #32
 8002a86:	f040 8214 	bne.w	8002eb2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2319      	movs	r3, #25
 8002a90:	2201      	movs	r2, #1
 8002a92:	497b      	ldr	r1, [pc, #492]	@ (8002c80 <HAL_I2C_Mem_Read+0x224>)
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 fcbf 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e207      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_I2C_Mem_Read+0x56>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e200      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d007      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f042 0201 	orr.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ae6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2222      	movs	r2, #34	@ 0x22
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2240      	movs	r2, #64	@ 0x40
 8002af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4a5b      	ldr	r2, [pc, #364]	@ (8002c84 <HAL_I2C_Mem_Read+0x228>)
 8002b18:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1a:	88f8      	ldrh	r0, [r7, #6]
 8002b1c:	893a      	ldrh	r2, [r7, #8]
 8002b1e:	8979      	ldrh	r1, [r7, #10]
 8002b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b22:	9301      	str	r3, [sp, #4]
 8002b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4603      	mov	r3, r0
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 fb8c 	bl	8003248 <I2C_RequestMemoryRead>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e1bc      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d113      	bne.n	8002b6a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b42:	2300      	movs	r3, #0
 8002b44:	623b      	str	r3, [r7, #32]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	623b      	str	r3, [r7, #32]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	623b      	str	r3, [r7, #32]
 8002b56:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	e190      	b.n	8002e8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d11b      	bne.n	8002baa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	61fb      	str	r3, [r7, #28]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	61fb      	str	r3, [r7, #28]
 8002b96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e170      	b.n	8002e8c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d11b      	bne.n	8002bea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	61bb      	str	r3, [r7, #24]
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	e150      	b.n	8002e8c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	617b      	str	r3, [r7, #20]
 8002bfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c00:	e144      	b.n	8002e8c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	f200 80f1 	bhi.w	8002dee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d123      	bne.n	8002c5c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c16:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 fda7 	bl	800376c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e145      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691a      	ldr	r2, [r3, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3a:	1c5a      	adds	r2, r3, #1
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	3b01      	subs	r3, #1
 8002c54:	b29a      	uxth	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c5a:	e117      	b.n	8002e8c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d14e      	bne.n	8002d02 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	4906      	ldr	r1, [pc, #24]	@ (8002c88 <HAL_I2C_Mem_Read+0x22c>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fbd2 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e11a      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
 8002c7e:	bf00      	nop
 8002c80:	00100002 	.word	0x00100002
 8002c84:	ffff0000 	.word	0xffff0000
 8002c88:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	1c5a      	adds	r2, r3, #1
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691a      	ldr	r2, [r3, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	1c5a      	adds	r2, r3, #1
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	b29a      	uxth	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d00:	e0c4      	b.n	8002e8c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d08:	2200      	movs	r2, #0
 8002d0a:	496c      	ldr	r1, [pc, #432]	@ (8002ebc <HAL_I2C_Mem_Read+0x460>)
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f000 fb83 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8002d12:	4603      	mov	r3, r0
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d001      	beq.n	8002d1c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e0cb      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d64:	2200      	movs	r2, #0
 8002d66:	4955      	ldr	r1, [pc, #340]	@ (8002ebc <HAL_I2C_Mem_Read+0x460>)
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fb55 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e09d      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3b01      	subs	r3, #1
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dec:	e04e      	b.n	8002e8c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 fcba 	bl	800376c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e058      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	691a      	ldr	r2, [r3, #16]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	1c5a      	adds	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d124      	bne.n	8002e8c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e46:	2b03      	cmp	r3, #3
 8002e48:	d107      	bne.n	8002e5a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e58:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f aeb6 	bne.w	8002c02 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	e000      	b.n	8002eb4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002eb2:	2302      	movs	r3, #2
  }
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3728      	adds	r7, #40	@ 0x28
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	00010004 	.word	0x00010004

08002ec0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	@ 0x28
 8002ec4:	af02      	add	r7, sp, #8
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ed0:	f7ff f804 	bl	8001edc <HAL_GetTick>
 8002ed4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	f040 8111 	bne.w	800310a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2319      	movs	r3, #25
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4988      	ldr	r1, [pc, #544]	@ (8003114 <HAL_I2C_IsDeviceReady+0x254>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fa90 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002efe:	2302      	movs	r3, #2
 8002f00:	e104      	b.n	800310c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_I2C_IsDeviceReady+0x50>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e0fd      	b.n	800310c <HAL_I2C_IsDeviceReady+0x24c>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d007      	beq.n	8002f36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2224      	movs	r2, #36	@ 0x24
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	4a70      	ldr	r2, [pc, #448]	@ (8003118 <HAL_I2C_IsDeviceReady+0x258>)
 8002f58:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fa4e 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00d      	beq.n	8002f9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f90:	d103      	bne.n	8002f9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f98:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e0b6      	b.n	800310c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f9e:	897b      	ldrh	r3, [r7, #10]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002fac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fae:	f7fe ff95 	bl	8001edc <HAL_GetTick>
 8002fb2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd8:	bf0c      	ite	eq
 8002fda:	2301      	moveq	r3, #1
 8002fdc:	2300      	movne	r3, #0
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002fe2:	e025      	b.n	8003030 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe4:	f7fe ff7a 	bl	8001edc <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d302      	bcc.n	8002ffa <HAL_I2C_IsDeviceReady+0x13a>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d103      	bne.n	8003002 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	22a0      	movs	r2, #160	@ 0xa0
 8002ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695b      	ldr	r3, [r3, #20]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b02      	cmp	r3, #2
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003022:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003026:	bf0c      	ite	eq
 8003028:	2301      	moveq	r3, #1
 800302a:	2300      	movne	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2ba0      	cmp	r3, #160	@ 0xa0
 800303a:	d005      	beq.n	8003048 <HAL_I2C_IsDeviceReady+0x188>
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_I2C_IsDeviceReady+0x188>
 8003042:	7dbb      	ldrb	r3, [r7, #22]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0cd      	beq.n	8002fe4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b02      	cmp	r3, #2
 800305c:	d129      	bne.n	80030b2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800306c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306e:	2300      	movs	r3, #0
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	2319      	movs	r3, #25
 800308a:	2201      	movs	r2, #1
 800308c:	4921      	ldr	r1, [pc, #132]	@ (8003114 <HAL_I2C_IsDeviceReady+0x254>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f9c2 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e036      	b.n	800310c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e02c      	b.n	800310c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030ca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	2319      	movs	r3, #25
 80030d2:	2201      	movs	r2, #1
 80030d4:	490f      	ldr	r1, [pc, #60]	@ (8003114 <HAL_I2C_IsDeviceReady+0x254>)
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f99e 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e012      	b.n	800310c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	3301      	adds	r3, #1
 80030ea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	f4ff af32 	bcc.w	8002f5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2220      	movs	r2, #32
 80030fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
  }
}
 800310c:	4618      	mov	r0, r3
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	00100002 	.word	0x00100002
 8003118:	ffff0000 	.word	0xffff0000

0800311c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b088      	sub	sp, #32
 8003120:	af02      	add	r7, sp, #8
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	4608      	mov	r0, r1
 8003126:	4611      	mov	r1, r2
 8003128:	461a      	mov	r2, r3
 800312a:	4603      	mov	r3, r0
 800312c:	817b      	strh	r3, [r7, #10]
 800312e:	460b      	mov	r3, r1
 8003130:	813b      	strh	r3, [r7, #8]
 8003132:	4613      	mov	r3, r2
 8003134:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003144:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2200      	movs	r2, #0
 800314e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f960 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800316c:	d103      	bne.n	8003176 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e05f      	b.n	800323a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003188:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	492d      	ldr	r1, [pc, #180]	@ (8003244 <I2C_RequestMemoryWrite+0x128>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f9bb 	bl	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e04c      	b.n	800323a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fa46 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d107      	bne.n	80031de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e02b      	b.n	800323a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	e021      	b.n	8003238 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 fa20 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003228:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e005      	b.n	800323a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3718      	adds	r7, #24
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	00010002 	.word	0x00010002

08003248 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af02      	add	r7, sp, #8
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	4608      	mov	r0, r1
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	4603      	mov	r3, r0
 8003258:	817b      	strh	r3, [r7, #10]
 800325a:	460b      	mov	r3, r1
 800325c:	813b      	strh	r3, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003270:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003280:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2200      	movs	r2, #0
 800328a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f8c2 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00d      	beq.n	80032b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032a8:	d103      	bne.n	80032b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e0aa      	b.n	800340c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032b6:	897b      	ldrh	r3, [r7, #10]
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c8:	6a3a      	ldr	r2, [r7, #32]
 80032ca:	4952      	ldr	r1, [pc, #328]	@ (8003414 <I2C_RequestMemoryRead+0x1cc>)
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 f91d 	bl	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e097      	b.n	800340c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032dc:	2300      	movs	r3, #0
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f4:	6a39      	ldr	r1, [r7, #32]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9a8 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00d      	beq.n	800331e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	2b04      	cmp	r3, #4
 8003308:	d107      	bne.n	800331a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003318:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e076      	b.n	800340c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d105      	bne.n	8003330 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003324:	893b      	ldrh	r3, [r7, #8]
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	611a      	str	r2, [r3, #16]
 800332e:	e021      	b.n	8003374 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003330:	893b      	ldrh	r3, [r7, #8]
 8003332:	0a1b      	lsrs	r3, r3, #8
 8003334:	b29b      	uxth	r3, r3
 8003336:	b2da      	uxtb	r2, r3
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f982 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00d      	beq.n	800336a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003352:	2b04      	cmp	r3, #4
 8003354:	d107      	bne.n	8003366 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003364:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e050      	b.n	800340c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800336a:	893b      	ldrh	r3, [r7, #8]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003376:	6a39      	ldr	r1, [r7, #32]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f967 	bl	800364c <I2C_WaitOnTXEFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00d      	beq.n	80033a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	2b04      	cmp	r3, #4
 800338a:	d107      	bne.n	800339c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800339a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e035      	b.n	800340c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f82b 	bl	8003418 <I2C_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d6:	d103      	bne.n	80033e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e013      	b.n	800340c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033e4:	897b      	ldrh	r3, [r7, #10]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f6:	6a3a      	ldr	r2, [r7, #32]
 80033f8:	4906      	ldr	r1, [pc, #24]	@ (8003414 <I2C_RequestMemoryRead+0x1cc>)
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f000 f886 	bl	800350c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e000      	b.n	800340c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800340a:	2300      	movs	r3, #0
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	00010002 	.word	0x00010002

08003418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003428:	e048      	b.n	80034bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d044      	beq.n	80034bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7fe fd53 	bl	8001edc <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d139      	bne.n	80034bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	b2db      	uxtb	r3, r3
 800344e:	2b01      	cmp	r3, #1
 8003450:	d10d      	bne.n	800346e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	695b      	ldr	r3, [r3, #20]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	e00c      	b.n	8003488 <I2C_WaitOnFlagUntilTimeout+0x70>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	429a      	cmp	r2, r3
 800348c:	d116      	bne.n	80034bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a8:	f043 0220 	orr.w	r2, r3, #32
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e023      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d10d      	bne.n	80034e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	43da      	mvns	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4013      	ands	r3, r2
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	e00c      	b.n	80034fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	43da      	mvns	r2, r3
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	4013      	ands	r3, r2
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	bf0c      	ite	eq
 80034f4:	2301      	moveq	r3, #1
 80034f6:	2300      	movne	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	461a      	mov	r2, r3
 80034fc:	79fb      	ldrb	r3, [r7, #7]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d093      	beq.n	800342a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
 8003518:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800351a:	e071      	b.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800352a:	d123      	bne.n	8003574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800353a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003544:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003560:	f043 0204 	orr.w	r2, r3, #4
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e067      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357a:	d041      	beq.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357c:	f7fe fcae 	bl	8001edc <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	429a      	cmp	r2, r3
 800358a:	d302      	bcc.n	8003592 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d136      	bne.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	d10c      	bne.n	80035b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	43da      	mvns	r2, r3
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4013      	ands	r3, r2
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e00b      	b.n	80035ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	43da      	mvns	r2, r3
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	4013      	ands	r3, r2
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d016      	beq.n	8003600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e021      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	0c1b      	lsrs	r3, r3, #16
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b01      	cmp	r3, #1
 8003608:	d10c      	bne.n	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	695b      	ldr	r3, [r3, #20]
 8003610:	43da      	mvns	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	4013      	ands	r3, r2
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	e00b      	b.n	800363c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	43da      	mvns	r2, r3
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4013      	ands	r3, r2
 8003630:	b29b      	uxth	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	bf14      	ite	ne
 8003636:	2301      	movne	r3, #1
 8003638:	2300      	moveq	r3, #0
 800363a:	b2db      	uxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	f47f af6d 	bne.w	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003658:	e034      	b.n	80036c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 f8e3 	bl	8003826 <I2C_IsAcknowledgeFailed>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e034      	b.n	80036d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003670:	d028      	beq.n	80036c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003672:	f7fe fc33 	bl	8001edc <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	429a      	cmp	r2, r3
 8003680:	d302      	bcc.n	8003688 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d11d      	bne.n	80036c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003692:	2b80      	cmp	r3, #128	@ 0x80
 8003694:	d016      	beq.n	80036c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e007      	b.n	80036d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ce:	2b80      	cmp	r3, #128	@ 0x80
 80036d0:	d1c3      	bne.n	800365a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036e8:	e034      	b.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f000 f89b 	bl	8003826 <I2C_IsAcknowledgeFailed>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e034      	b.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d028      	beq.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fe fbeb 	bl	8001edc <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	68ba      	ldr	r2, [r7, #8]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d11d      	bne.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b04      	cmp	r3, #4
 8003724:	d016      	beq.n	8003754 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003740:	f043 0220 	orr.w	r2, r3, #32
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e007      	b.n	8003764 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d1c3      	bne.n	80036ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003778:	e049      	b.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0310 	and.w	r3, r3, #16
 8003784:	2b10      	cmp	r3, #16
 8003786:	d119      	bne.n	80037bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0210 	mvn.w	r2, #16
 8003790:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e030      	b.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037bc:	f7fe fb8e 	bl	8001edc <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d302      	bcc.n	80037d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d11d      	bne.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037dc:	2b40      	cmp	r3, #64	@ 0x40
 80037de:	d016      	beq.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2220      	movs	r2, #32
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e007      	b.n	800381e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003818:	2b40      	cmp	r3, #64	@ 0x40
 800381a:	d1ae      	bne.n	800377a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800383c:	d11b      	bne.n	8003876 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003846:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e000      	b.n	8003878 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d101      	bne.n	8003898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0cc      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003898:	4b68      	ldr	r3, [pc, #416]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 030f 	and.w	r3, r3, #15
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d90c      	bls.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a6:	4b65      	ldr	r3, [pc, #404]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ae:	4b63      	ldr	r3, [pc, #396]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	683a      	ldr	r2, [r7, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e0b8      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d020      	beq.n	800390e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0304 	and.w	r3, r3, #4
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d8:	4b59      	ldr	r3, [pc, #356]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a58      	ldr	r2, [pc, #352]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0308 	and.w	r3, r3, #8
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f0:	4b53      	ldr	r3, [pc, #332]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a52      	ldr	r2, [pc, #328]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fc:	4b50      	ldr	r3, [pc, #320]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	494d      	ldr	r1, [pc, #308]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d044      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b01      	cmp	r3, #1
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003922:	4b47      	ldr	r3, [pc, #284]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d119      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e07f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d003      	beq.n	8003942 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393e:	2b03      	cmp	r3, #3
 8003940:	d107      	bne.n	8003952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003942:	4b3f      	ldr	r3, [pc, #252]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e06f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003952:	4b3b      	ldr	r3, [pc, #236]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d101      	bne.n	8003962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e067      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003962:	4b37      	ldr	r3, [pc, #220]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 0203 	bic.w	r2, r3, #3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	4934      	ldr	r1, [pc, #208]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003974:	f7fe fab2 	bl	8001edc <HAL_GetTick>
 8003978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	e00a      	b.n	8003992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800397c:	f7fe faae 	bl	8001edc <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800398a:	4293      	cmp	r3, r2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e04f      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	4b2b      	ldr	r3, [pc, #172]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 020c 	and.w	r2, r3, #12
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d1eb      	bne.n	800397c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039a4:	4b25      	ldr	r3, [pc, #148]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d20c      	bcs.n	80039cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039b2:	4b22      	ldr	r3, [pc, #136]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ba:	4b20      	ldr	r3, [pc, #128]	@ (8003a3c <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e032      	b.n	8003a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	4916      	ldr	r1, [pc, #88]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f6:	4b12      	ldr	r3, [pc, #72]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	490e      	ldr	r1, [pc, #56]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a0a:	f000 f855 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	4b0b      	ldr	r3, [pc, #44]	@ (8003a40 <HAL_RCC_ClockConfig+0x1bc>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	f003 030f 	and.w	r3, r3, #15
 8003a1a:	490a      	ldr	r1, [pc, #40]	@ (8003a44 <HAL_RCC_ClockConfig+0x1c0>)
 8003a1c:	5ccb      	ldrb	r3, [r1, r3]
 8003a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a22:	4a09      	ldr	r2, [pc, #36]	@ (8003a48 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a26:	4b09      	ldr	r3, [pc, #36]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f7fe fa12 	bl	8001e54 <HAL_InitTick>

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023c00 	.word	0x40023c00
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08009094 	.word	0x08009094
 8003a48:	20000014 	.word	0x20000014
 8003a4c:	20000018 	.word	0x20000018

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b03      	ldr	r3, [pc, #12]	@ (8003a64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000014 	.word	0x20000014

08003a68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a6c:	f7ff fff0 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a70:	4602      	mov	r2, r0
 8003a72:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	0a9b      	lsrs	r3, r3, #10
 8003a78:	f003 0307 	and.w	r3, r3, #7
 8003a7c:	4903      	ldr	r1, [pc, #12]	@ (8003a8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7e:	5ccb      	ldrb	r3, [r1, r3]
 8003a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	080090a4 	.word	0x080090a4

08003a90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a94:	f7ff ffdc 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0b5b      	lsrs	r3, r3, #13
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	@ (8003ab4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	080090a4 	.word	0x080090a4

08003ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003abc:	b0ae      	sub	sp, #184	@ 0xb8
 8003abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ade:	4bcb      	ldr	r3, [pc, #812]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	f200 8206 	bhi.w	8003ef8 <HAL_RCC_GetSysClockFreq+0x440>
 8003aec:	a201      	add	r2, pc, #4	@ (adr r2, 8003af4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003ef9 	.word	0x08003ef9
 8003afc:	08003ef9 	.word	0x08003ef9
 8003b00:	08003ef9 	.word	0x08003ef9
 8003b04:	08003b31 	.word	0x08003b31
 8003b08:	08003ef9 	.word	0x08003ef9
 8003b0c:	08003ef9 	.word	0x08003ef9
 8003b10:	08003ef9 	.word	0x08003ef9
 8003b14:	08003b39 	.word	0x08003b39
 8003b18:	08003ef9 	.word	0x08003ef9
 8003b1c:	08003ef9 	.word	0x08003ef9
 8003b20:	08003ef9 	.word	0x08003ef9
 8003b24:	08003d29 	.word	0x08003d29
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4bb9      	ldr	r3, [pc, #740]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b2e:	e1e7      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b30:	4bb8      	ldr	r3, [pc, #736]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003b32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003b36:	e1e3      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b38:	4bb4      	ldr	r3, [pc, #720]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b44:	4bb1      	ldr	r3, [pc, #708]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d071      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b50:	4bae      	ldr	r3, [pc, #696]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	099b      	lsrs	r3, r3, #6
 8003b56:	2200      	movs	r2, #0
 8003b58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003b5c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003b76:	4622      	mov	r2, r4
 8003b78:	462b      	mov	r3, r5
 8003b7a:	f04f 0000 	mov.w	r0, #0
 8003b7e:	f04f 0100 	mov.w	r1, #0
 8003b82:	0159      	lsls	r1, r3, #5
 8003b84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b88:	0150      	lsls	r0, r2, #5
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4621      	mov	r1, r4
 8003b90:	1a51      	subs	r1, r2, r1
 8003b92:	6439      	str	r1, [r7, #64]	@ 0x40
 8003b94:	4629      	mov	r1, r5
 8003b96:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003ba8:	4649      	mov	r1, r9
 8003baa:	018b      	lsls	r3, r1, #6
 8003bac:	4641      	mov	r1, r8
 8003bae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003bb2:	4641      	mov	r1, r8
 8003bb4:	018a      	lsls	r2, r1, #6
 8003bb6:	4641      	mov	r1, r8
 8003bb8:	1a51      	subs	r1, r2, r1
 8003bba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003bd0:	4649      	mov	r1, r9
 8003bd2:	00cb      	lsls	r3, r1, #3
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bda:	4641      	mov	r1, r8
 8003bdc:	00ca      	lsls	r2, r1, #3
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	4622      	mov	r2, r4
 8003be6:	189b      	adds	r3, r3, r2
 8003be8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bea:	462b      	mov	r3, r5
 8003bec:	460a      	mov	r2, r1
 8003bee:	eb42 0303 	adc.w	r3, r2, r3
 8003bf2:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf4:	f04f 0200 	mov.w	r2, #0
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c00:	4629      	mov	r1, r5
 8003c02:	024b      	lsls	r3, r1, #9
 8003c04:	4621      	mov	r1, r4
 8003c06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	024a      	lsls	r2, r1, #9
 8003c0e:	4610      	mov	r0, r2
 8003c10:	4619      	mov	r1, r3
 8003c12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c20:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003c24:	f7fd f850 	bl	8000cc8 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c32:	e067      	b.n	8003d04 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c34:	4b75      	ldr	r3, [pc, #468]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	099b      	lsrs	r3, r3, #6
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003c40:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003c48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c4e:	2300      	movs	r3, #0
 8003c50:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c52:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003c56:	4622      	mov	r2, r4
 8003c58:	462b      	mov	r3, r5
 8003c5a:	f04f 0000 	mov.w	r0, #0
 8003c5e:	f04f 0100 	mov.w	r1, #0
 8003c62:	0159      	lsls	r1, r3, #5
 8003c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c68:	0150      	lsls	r0, r2, #5
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4621      	mov	r1, r4
 8003c70:	1a51      	subs	r1, r2, r1
 8003c72:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003c74:	4629      	mov	r1, r5
 8003c76:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	f04f 0300 	mov.w	r3, #0
 8003c84:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003c88:	4649      	mov	r1, r9
 8003c8a:	018b      	lsls	r3, r1, #6
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c92:	4641      	mov	r1, r8
 8003c94:	018a      	lsls	r2, r1, #6
 8003c96:	4641      	mov	r1, r8
 8003c98:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c9c:	4649      	mov	r1, r9
 8003c9e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	f04f 0300 	mov.w	r3, #0
 8003caa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003cae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cb6:	4692      	mov	sl, r2
 8003cb8:	469b      	mov	fp, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	eb1a 0303 	adds.w	r3, sl, r3
 8003cc0:	623b      	str	r3, [r7, #32]
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	eb4b 0303 	adc.w	r3, fp, r3
 8003cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	028b      	lsls	r3, r1, #10
 8003cda:	4621      	mov	r1, r4
 8003cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	028a      	lsls	r2, r1, #10
 8003ce4:	4610      	mov	r0, r2
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003cec:	2200      	movs	r2, #0
 8003cee:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cf0:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cf2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003cf6:	f7fc ffe7 	bl	8000cc8 <__aeabi_uldivmod>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4613      	mov	r3, r2
 8003d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d04:	4b41      	ldr	r3, [pc, #260]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	0c1b      	lsrs	r3, r3, #16
 8003d0a:	f003 0303 	and.w	r3, r3, #3
 8003d0e:	3301      	adds	r3, #1
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003d16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d26:	e0eb      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d28:	4b38      	ldr	r3, [pc, #224]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d30:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d34:	4b35      	ldr	r3, [pc, #212]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d06b      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d40:	4b32      	ldr	r3, [pc, #200]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	2200      	movs	r2, #0
 8003d48:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003d4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d52:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d54:	2300      	movs	r3, #0
 8003d56:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d58:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	462b      	mov	r3, r5
 8003d60:	f04f 0000 	mov.w	r0, #0
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	0159      	lsls	r1, r3, #5
 8003d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6e:	0150      	lsls	r0, r2, #5
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4621      	mov	r1, r4
 8003d76:	1a51      	subs	r1, r2, r1
 8003d78:	61b9      	str	r1, [r7, #24]
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003d8e:	4659      	mov	r1, fp
 8003d90:	018b      	lsls	r3, r1, #6
 8003d92:	4651      	mov	r1, sl
 8003d94:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d98:	4651      	mov	r1, sl
 8003d9a:	018a      	lsls	r2, r1, #6
 8003d9c:	4651      	mov	r1, sl
 8003d9e:	ebb2 0801 	subs.w	r8, r2, r1
 8003da2:	4659      	mov	r1, fp
 8003da4:	eb63 0901 	sbc.w	r9, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003db4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003db8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dbc:	4690      	mov	r8, r2
 8003dbe:	4699      	mov	r9, r3
 8003dc0:	4623      	mov	r3, r4
 8003dc2:	eb18 0303 	adds.w	r3, r8, r3
 8003dc6:	613b      	str	r3, [r7, #16]
 8003dc8:	462b      	mov	r3, r5
 8003dca:	eb49 0303 	adc.w	r3, r9, r3
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ddc:	4629      	mov	r1, r5
 8003dde:	024b      	lsls	r3, r1, #9
 8003de0:	4621      	mov	r1, r4
 8003de2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003de6:	4621      	mov	r1, r4
 8003de8:	024a      	lsls	r2, r1, #9
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003df2:	2200      	movs	r2, #0
 8003df4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003df6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003df8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003dfc:	f7fc ff64 	bl	8000cc8 <__aeabi_uldivmod>
 8003e00:	4602      	mov	r2, r0
 8003e02:	460b      	mov	r3, r1
 8003e04:	4613      	mov	r3, r2
 8003e06:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e0a:	e065      	b.n	8003ed8 <HAL_RCC_GetSysClockFreq+0x420>
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e18:	4b3d      	ldr	r3, [pc, #244]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	2200      	movs	r2, #0
 8003e20:	4618      	mov	r0, r3
 8003e22:	4611      	mov	r1, r2
 8003e24:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e28:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e2e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003e32:	4642      	mov	r2, r8
 8003e34:	464b      	mov	r3, r9
 8003e36:	f04f 0000 	mov.w	r0, #0
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	0159      	lsls	r1, r3, #5
 8003e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e44:	0150      	lsls	r0, r2, #5
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4641      	mov	r1, r8
 8003e4c:	1a51      	subs	r1, r2, r1
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	4649      	mov	r1, r9
 8003e52:	eb63 0301 	sbc.w	r3, r3, r1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003e64:	4659      	mov	r1, fp
 8003e66:	018b      	lsls	r3, r1, #6
 8003e68:	4651      	mov	r1, sl
 8003e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e6e:	4651      	mov	r1, sl
 8003e70:	018a      	lsls	r2, r1, #6
 8003e72:	4651      	mov	r1, sl
 8003e74:	1a54      	subs	r4, r2, r1
 8003e76:	4659      	mov	r1, fp
 8003e78:	eb63 0501 	sbc.w	r5, r3, r1
 8003e7c:	f04f 0200 	mov.w	r2, #0
 8003e80:	f04f 0300 	mov.w	r3, #0
 8003e84:	00eb      	lsls	r3, r5, #3
 8003e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e8a:	00e2      	lsls	r2, r4, #3
 8003e8c:	4614      	mov	r4, r2
 8003e8e:	461d      	mov	r5, r3
 8003e90:	4643      	mov	r3, r8
 8003e92:	18e3      	adds	r3, r4, r3
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	464b      	mov	r3, r9
 8003e98:	eb45 0303 	adc.w	r3, r5, r3
 8003e9c:	607b      	str	r3, [r7, #4]
 8003e9e:	f04f 0200 	mov.w	r2, #0
 8003ea2:	f04f 0300 	mov.w	r3, #0
 8003ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003eaa:	4629      	mov	r1, r5
 8003eac:	028b      	lsls	r3, r1, #10
 8003eae:	4621      	mov	r1, r4
 8003eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003eb4:	4621      	mov	r1, r4
 8003eb6:	028a      	lsls	r2, r1, #10
 8003eb8:	4610      	mov	r0, r2
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ec4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003ec6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003eca:	f7fc fefd 	bl	8000cc8 <__aeabi_uldivmod>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8003f10 <HAL_RCC_GetSysClockFreq+0x458>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	0f1b      	lsrs	r3, r3, #28
 8003ede:	f003 0307 	and.w	r3, r3, #7
 8003ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003eea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003ef6:	e003      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ef8:	4b06      	ldr	r3, [pc, #24]	@ (8003f14 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003efa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003efe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	37b8      	adds	r7, #184	@ 0xb8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023800 	.word	0x40023800
 8003f14:	00f42400 	.word	0x00f42400

08003f18 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e28d      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8083 	beq.w	800403e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f38:	4b94      	ldr	r3, [pc, #592]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d019      	beq.n	8003f78 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f44:	4b91      	ldr	r3, [pc, #580]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d106      	bne.n	8003f5e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f50:	4b8e      	ldr	r3, [pc, #568]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f5c:	d00c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4b8b      	ldr	r3, [pc, #556]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d112      	bne.n	8003f90 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b88      	ldr	r3, [pc, #544]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	4b84      	ldr	r3, [pc, #528]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05b      	beq.n	800403c <HAL_RCC_OscConfig+0x124>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d157      	bne.n	800403c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e25a      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x90>
 8003f9a:	4b7c      	ldr	r3, [pc, #496]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a7b      	ldr	r2, [pc, #492]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e01d      	b.n	8003fe4 <HAL_RCC_OscConfig+0xcc>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0xb4>
 8003fb2:	4b76      	ldr	r3, [pc, #472]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a75      	ldr	r2, [pc, #468]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b73      	ldr	r3, [pc, #460]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a72      	ldr	r2, [pc, #456]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0xcc>
 8003fcc:	4b6f      	ldr	r3, [pc, #444]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a6e      	ldr	r2, [pc, #440]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b6c      	ldr	r3, [pc, #432]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a6b      	ldr	r2, [pc, #428]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fec:	f7fd ff76 	bl	8001edc <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fd ff72 	bl	8001edc <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	@ 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e21f      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b61      	ldr	r3, [pc, #388]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xdc>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004014:	f7fd ff62 	bl	8001edc <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fd ff5e 	bl	8001edc <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	@ 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e20b      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	4b57      	ldr	r3, [pc, #348]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x104>
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d06f      	beq.n	800412a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800404a:	4b50      	ldr	r3, [pc, #320]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b00      	cmp	r3, #0
 8004054:	d017      	beq.n	8004086 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004056:	4b4d      	ldr	r3, [pc, #308]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
        || \
 800405e:	2b08      	cmp	r3, #8
 8004060:	d105      	bne.n	800406e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004062:	4b4a      	ldr	r3, [pc, #296]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406e:	4b47      	ldr	r3, [pc, #284]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004076:	2b0c      	cmp	r3, #12
 8004078:	d11c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800407a:	4b44      	ldr	r3, [pc, #272]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d116      	bne.n	80040b4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004086:	4b41      	ldr	r3, [pc, #260]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d005      	beq.n	800409e <HAL_RCC_OscConfig+0x186>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d001      	beq.n	800409e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e1d3      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409e:	4b3b      	ldr	r3, [pc, #236]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	00db      	lsls	r3, r3, #3
 80040ac:	4937      	ldr	r1, [pc, #220]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040b2:	e03a      	b.n	800412a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d020      	beq.n	80040fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040bc:	4b34      	ldr	r3, [pc, #208]	@ (8004190 <HAL_RCC_OscConfig+0x278>)
 80040be:	2201      	movs	r2, #1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd ff0b 	bl	8001edc <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fd ff07 	bl	8001edc <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e1b4      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	4b2b      	ldr	r3, [pc, #172]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0302 	and.w	r3, r3, #2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d0f0      	beq.n	80040ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e8:	4b28      	ldr	r3, [pc, #160]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4925      	ldr	r1, [pc, #148]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	600b      	str	r3, [r1, #0]
 80040fc:	e015      	b.n	800412a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fe:	4b24      	ldr	r3, [pc, #144]	@ (8004190 <HAL_RCC_OscConfig+0x278>)
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004104:	f7fd feea 	bl	8001edc <HAL_GetTick>
 8004108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800410c:	f7fd fee6 	bl	8001edc <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e193      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411e:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f0      	bne.n	800410c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0308 	and.w	r3, r3, #8
 8004132:	2b00      	cmp	r3, #0
 8004134:	d036      	beq.n	80041a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d016      	beq.n	800416c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413e:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <HAL_RCC_OscConfig+0x27c>)
 8004140:	2201      	movs	r2, #1
 8004142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd feca 	bl	8001edc <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414c:	f7fd fec6 	bl	8001edc <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e173      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415e:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <HAL_RCC_OscConfig+0x274>)
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x234>
 800416a:	e01b      	b.n	80041a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b09      	ldr	r3, [pc, #36]	@ (8004194 <HAL_RCC_OscConfig+0x27c>)
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004172:	f7fd feb3 	bl	8001edc <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	e00e      	b.n	8004198 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417a:	f7fd feaf 	bl	8001edc <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d907      	bls.n	8004198 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e15c      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
 800418c:	40023800 	.word	0x40023800
 8004190:	42470000 	.word	0x42470000
 8004194:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	4b8a      	ldr	r3, [pc, #552]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800419a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1ea      	bne.n	800417a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8097 	beq.w	80042e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b2:	2300      	movs	r3, #0
 80041b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b6:	4b83      	ldr	r3, [pc, #524]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10f      	bne.n	80041e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c2:	2300      	movs	r3, #0
 80041c4:	60bb      	str	r3, [r7, #8]
 80041c6:	4b7f      	ldr	r3, [pc, #508]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	4a7e      	ldr	r2, [pc, #504]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80041cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d2:	4b7c      	ldr	r3, [pc, #496]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041da:	60bb      	str	r3, [r7, #8]
 80041dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041de:	2301      	movs	r3, #1
 80041e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e2:	4b79      	ldr	r3, [pc, #484]	@ (80043c8 <HAL_RCC_OscConfig+0x4b0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d118      	bne.n	8004220 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ee:	4b76      	ldr	r3, [pc, #472]	@ (80043c8 <HAL_RCC_OscConfig+0x4b0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a75      	ldr	r2, [pc, #468]	@ (80043c8 <HAL_RCC_OscConfig+0x4b0>)
 80041f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041fa:	f7fd fe6f 	bl	8001edc <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004202:	f7fd fe6b 	bl	8001edc <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e118      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	4b6c      	ldr	r3, [pc, #432]	@ (80043c8 <HAL_RCC_OscConfig+0x4b0>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d106      	bne.n	8004236 <HAL_RCC_OscConfig+0x31e>
 8004228:	4b66      	ldr	r3, [pc, #408]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800422a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422c:	4a65      	ldr	r2, [pc, #404]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	6713      	str	r3, [r2, #112]	@ 0x70
 8004234:	e01c      	b.n	8004270 <HAL_RCC_OscConfig+0x358>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b05      	cmp	r3, #5
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x340>
 800423e:	4b61      	ldr	r3, [pc, #388]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004240:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004242:	4a60      	ldr	r2, [pc, #384]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	f043 0304 	orr.w	r3, r3, #4
 8004248:	6713      	str	r3, [r2, #112]	@ 0x70
 800424a:	4b5e      	ldr	r3, [pc, #376]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800424c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800424e:	4a5d      	ldr	r2, [pc, #372]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	6713      	str	r3, [r2, #112]	@ 0x70
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0x358>
 8004258:	4b5a      	ldr	r3, [pc, #360]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800425a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800425c:	4a59      	ldr	r2, [pc, #356]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800425e:	f023 0301 	bic.w	r3, r3, #1
 8004262:	6713      	str	r3, [r2, #112]	@ 0x70
 8004264:	4b57      	ldr	r3, [pc, #348]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004268:	4a56      	ldr	r2, [pc, #344]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800426a:	f023 0304 	bic.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fd fe30 	bl	8001edc <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	e00a      	b.n	8004296 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004280:	f7fd fe2c 	bl	8001edc <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428e:	4293      	cmp	r3, r2
 8004290:	d901      	bls.n	8004296 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e0d7      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004296:	4b4b      	ldr	r3, [pc, #300]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d0ee      	beq.n	8004280 <HAL_RCC_OscConfig+0x368>
 80042a2:	e014      	b.n	80042ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a4:	f7fd fe1a 	bl	8001edc <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ac:	f7fd fe16 	bl	8001edc <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e0c1      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042c2:	4b40      	ldr	r3, [pc, #256]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ee      	bne.n	80042ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042ce:	7dfb      	ldrb	r3, [r7, #23]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	4a3a      	ldr	r2, [pc, #232]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80ad 	beq.w	8004444 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ea:	4b36      	ldr	r3, [pc, #216]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 030c 	and.w	r3, r3, #12
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d060      	beq.n	80043b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d145      	bne.n	800438a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fe:	4b33      	ldr	r3, [pc, #204]	@ (80043cc <HAL_RCC_OscConfig+0x4b4>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004304:	f7fd fdea 	bl	8001edc <HAL_GetTick>
 8004308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800430a:	e008      	b.n	800431e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800430c:	f7fd fde6 	bl	8001edc <HAL_GetTick>
 8004310:	4602      	mov	r2, r0
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	1ad3      	subs	r3, r2, r3
 8004316:	2b02      	cmp	r3, #2
 8004318:	d901      	bls.n	800431e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e093      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431e:	4b29      	ldr	r3, [pc, #164]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1f0      	bne.n	800430c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69da      	ldr	r2, [r3, #28]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	431a      	orrs	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	019b      	lsls	r3, r3, #6
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004340:	085b      	lsrs	r3, r3, #1
 8004342:	3b01      	subs	r3, #1
 8004344:	041b      	lsls	r3, r3, #16
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	071b      	lsls	r3, r3, #28
 8004356:	491b      	ldr	r1, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <HAL_RCC_OscConfig+0x4b4>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fd fdbb 	bl	8001edc <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436a:	f7fd fdb7 	bl	8001edc <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e064      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	4b11      	ldr	r3, [pc, #68]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x452>
 8004388:	e05c      	b.n	8004444 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b10      	ldr	r3, [pc, #64]	@ (80043cc <HAL_RCC_OscConfig+0x4b4>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004390:	f7fd fda4 	bl	8001edc <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fd fda0 	bl	8001edc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e04d      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_RCC_OscConfig+0x4ac>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x480>
 80043b6:	e045      	b.n	8004444 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e040      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
 80043cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d0:	4b1f      	ldr	r3, [pc, #124]	@ (8004450 <HAL_RCC_OscConfig+0x538>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d030      	beq.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d129      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d122      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004408:	4293      	cmp	r3, r2
 800440a:	d119      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	3b01      	subs	r3, #1
 800441a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d10f      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800443a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e000      	b.n	8004446 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	40023800 	.word	0x40023800

08004454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e042      	b.n	80044ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fd fb3c 	bl	8001af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	@ 0x24
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68da      	ldr	r2, [r3, #12]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fd69 	bl	8004f70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	691a      	ldr	r2, [r3, #16]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	695a      	ldr	r2, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08a      	sub	sp, #40	@ 0x28
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	4613      	mov	r3, r2
 8004502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b20      	cmp	r3, #32
 8004512:	d175      	bne.n	8004600 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <HAL_UART_Transmit+0x2c>
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e06e      	b.n	8004602 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2221      	movs	r2, #33	@ 0x21
 800452e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004532:	f7fd fcd3 	bl	8001edc <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	88fa      	ldrh	r2, [r7, #6]
 8004542:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800454c:	d108      	bne.n	8004560 <HAL_UART_Transmit+0x6c>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	e003      	b.n	8004568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004564:	2300      	movs	r3, #0
 8004566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004568:	e02e      	b.n	80045c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	2180      	movs	r1, #128	@ 0x80
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fb05 	bl	8004b84 <UART_WaitOnFlagUntilTimeout>
 800457a:	4603      	mov	r3, r0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e03a      	b.n	8004602 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10b      	bne.n	80045aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	3302      	adds	r3, #2
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	e007      	b.n	80045ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	781a      	ldrb	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	3301      	adds	r3, #1
 80045b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045be:	b29b      	uxth	r3, r3
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b29a      	uxth	r2, r3
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1cb      	bne.n	800456a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2200      	movs	r2, #0
 80045da:	2140      	movs	r1, #64	@ 0x40
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 fad1 	bl	8004b84 <UART_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e006      	b.n	8004602 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	e000      	b.n	8004602 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
  }
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
	...

0800460c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b0ba      	sub	sp, #232	@ 0xe8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	695b      	ldr	r3, [r3, #20]
 800462e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004632:	2300      	movs	r3, #0
 8004634:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004638:	2300      	movs	r3, #0
 800463a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800463e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004642:	f003 030f 	and.w	r3, r3, #15
 8004646:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800464a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10f      	bne.n	8004672 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_UART_IRQHandler+0x66>
 800465e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004662:	f003 0320 	and.w	r3, r3, #32
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fbc2 	bl	8004df4 <UART_Receive_IT>
      return;
 8004670:	e25b      	b.n	8004b2a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 80de 	beq.w	8004838 <HAL_UART_IRQHandler+0x22c>
 800467c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004690:	2b00      	cmp	r3, #0
 8004692:	f000 80d1 	beq.w	8004838 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00b      	beq.n	80046ba <HAL_UART_IRQHandler+0xae>
 80046a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d005      	beq.n	80046ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b2:	f043 0201 	orr.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00b      	beq.n	80046de <HAL_UART_IRQHandler+0xd2>
 80046c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d005      	beq.n	80046de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d6:	f043 0202 	orr.w	r2, r3, #2
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046e2:	f003 0302 	and.w	r3, r3, #2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00b      	beq.n	8004702 <HAL_UART_IRQHandler+0xf6>
 80046ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046fa:	f043 0204 	orr.w	r2, r3, #4
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d011      	beq.n	8004732 <HAL_UART_IRQHandler+0x126>
 800470e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d105      	bne.n	8004726 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800471a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d005      	beq.n	8004732 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800472a:	f043 0208 	orr.w	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 81f2 	beq.w	8004b20 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800473c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <HAL_UART_IRQHandler+0x14e>
 8004748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b00      	cmp	r3, #0
 8004752:	d002      	beq.n	800475a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fb4d 	bl	8004df4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004764:	2b40      	cmp	r3, #64	@ 0x40
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <HAL_UART_IRQHandler+0x17a>
 800477e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d04f      	beq.n	8004826 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 fa55 	bl	8004c36 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004796:	2b40      	cmp	r3, #64	@ 0x40
 8004798:	d141      	bne.n	800481e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3314      	adds	r3, #20
 80047a0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	3314      	adds	r3, #20
 80047c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047c6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047d6:	e841 2300 	strex	r3, r2, [r1]
 80047da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1d9      	bne.n	800479a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d013      	beq.n	8004816 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f2:	4a7e      	ldr	r2, [pc, #504]	@ (80049ec <HAL_UART_IRQHandler+0x3e0>)
 80047f4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fd1f 	bl	800223e <HAL_DMA_Abort_IT>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800480a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004810:	4610      	mov	r0, r2
 8004812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	e00e      	b.n	8004834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f99e 	bl	8004b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	e00a      	b.n	8004834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f99a 	bl	8004b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	e006      	b.n	8004834 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f996 	bl	8004b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004832:	e175      	b.n	8004b20 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	bf00      	nop
    return;
 8004836:	e173      	b.n	8004b20 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483c:	2b01      	cmp	r3, #1
 800483e:	f040 814f 	bne.w	8004ae0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 8148 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8141 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800487e:	2b40      	cmp	r3, #64	@ 0x40
 8004880:	f040 80b6 	bne.w	80049f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004890:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8145 	beq.w	8004b24 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800489e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048a2:	429a      	cmp	r2, r3
 80048a4:	f080 813e 	bcs.w	8004b24 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048ba:	f000 8088 	beq.w	80049ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	330c      	adds	r3, #12
 80048c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048cc:	e853 3f00 	ldrex	r3, [r3]
 80048d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	330c      	adds	r3, #12
 80048e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004902:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1d9      	bne.n	80048be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	3314      	adds	r3, #20
 8004910:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004912:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004914:	e853 3f00 	ldrex	r3, [r3]
 8004918:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800491a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800491c:	f023 0301 	bic.w	r3, r3, #1
 8004920:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3314      	adds	r3, #20
 800492a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800492e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004932:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004936:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800493a:	e841 2300 	strex	r3, r2, [r1]
 800493e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004940:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1e1      	bne.n	800490a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3314      	adds	r3, #20
 800494c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004950:	e853 3f00 	ldrex	r3, [r3]
 8004954:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004958:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800495c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3314      	adds	r3, #20
 8004966:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800496a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800496c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004970:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e3      	bne.n	8004946 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800499c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800499e:	f023 0310 	bic.w	r3, r3, #16
 80049a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e3      	bne.n	800498c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7fd fbc8 	bl	800215e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049dc:	b29b      	uxth	r3, r3
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f8c1 	bl	8004b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049ea:	e09b      	b.n	8004b24 <HAL_UART_IRQHandler+0x518>
 80049ec:	08004cfd 	.word	0x08004cfd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 808e 	beq.w	8004b28 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 8089 	beq.w	8004b28 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e3      	bne.n	8004a16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	3314      	adds	r3, #20
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8004a5e:	6a3b      	ldr	r3, [r7, #32]
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	3314      	adds	r3, #20
 8004a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e3      	bne.n	8004a4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	330c      	adds	r3, #12
 8004a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0310 	bic.w	r3, r3, #16
 8004aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	330c      	adds	r3, #12
 8004ab4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ab8:	61fa      	str	r2, [r7, #28]
 8004aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	69b9      	ldr	r1, [r7, #24]
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e3      	bne.n	8004a94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f847 	bl	8004b6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ade:	e023      	b.n	8004b28 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ae4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <HAL_UART_IRQHandler+0x4f4>
 8004aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f913 	bl	8004d24 <UART_Transmit_IT>
    return;
 8004afe:	e014      	b.n	8004b2a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00e      	beq.n	8004b2a <HAL_UART_IRQHandler+0x51e>
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d008      	beq.n	8004b2a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f953 	bl	8004dc4 <UART_EndTransmit_IT>
    return;
 8004b1e:	e004      	b.n	8004b2a <HAL_UART_IRQHandler+0x51e>
    return;
 8004b20:	bf00      	nop
 8004b22:	e002      	b.n	8004b2a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b24:	bf00      	nop
 8004b26:	e000      	b.n	8004b2a <HAL_UART_IRQHandler+0x51e>
      return;
 8004b28:	bf00      	nop
  }
}
 8004b2a:	37e8      	adds	r7, #232	@ 0xe8
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	460b      	mov	r3, r1
 8004b76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	603b      	str	r3, [r7, #0]
 8004b90:	4613      	mov	r3, r2
 8004b92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b94:	e03b      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9c:	d037      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b9e:	f7fd f99d 	bl	8001edc <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d302      	bcc.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e03a      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d023      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b80      	cmp	r3, #128	@ 0x80
 8004bca:	d020      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2b40      	cmp	r3, #64	@ 0x40
 8004bd0:	d01d      	beq.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d116      	bne.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	617b      	str	r3, [r7, #20]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	617b      	str	r3, [r7, #20]
 8004bf4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f81d 	bl	8004c36 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2208      	movs	r2, #8
 8004c00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e00f      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4013      	ands	r3, r2
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d0b4      	beq.n	8004b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b095      	sub	sp, #84	@ 0x54
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c66:	e841 2300 	strex	r3, r2, [r1]
 8004c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1e5      	bne.n	8004c3e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	3314      	adds	r3, #20
 8004c78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	e853 3f00 	ldrex	r3, [r3]
 8004c80:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3314      	adds	r3, #20
 8004c90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e5      	bne.n	8004c72 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d119      	bne.n	8004ce2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	330c      	adds	r3, #12
 8004cb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	e853 3f00 	ldrex	r3, [r3]
 8004cbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f023 0310 	bic.w	r3, r3, #16
 8004cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	330c      	adds	r3, #12
 8004ccc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cce:	61ba      	str	r2, [r7, #24]
 8004cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	6979      	ldr	r1, [r7, #20]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	e841 2300 	strex	r3, r2, [r1]
 8004cda:	613b      	str	r3, [r7, #16]
   return(result);
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1e5      	bne.n	8004cae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2220      	movs	r2, #32
 8004ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cf0:	bf00      	nop
 8004cf2:	3754      	adds	r7, #84	@ 0x54
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f7ff ff1e 	bl	8004b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d1c:	bf00      	nop
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b21      	cmp	r3, #33	@ 0x21
 8004d36:	d13e      	bne.n	8004db6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d40:	d114      	bne.n	8004d6c <UART_Transmit_IT+0x48>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d110      	bne.n	8004d6c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	881b      	ldrh	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d5e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6a1b      	ldr	r3, [r3, #32]
 8004d64:	1c9a      	adds	r2, r3, #2
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]
 8004d6a:	e008      	b.n	8004d7e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	1c59      	adds	r1, r3, #1
 8004d72:	687a      	ldr	r2, [r7, #4]
 8004d74:	6211      	str	r1, [r2, #32]
 8004d76:	781a      	ldrb	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d10f      	bne.n	8004db2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004da0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004db0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3714      	adds	r7, #20
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68da      	ldr	r2, [r3, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dda:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2220      	movs	r2, #32
 8004de0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7ff fea3 	bl	8004b30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3708      	adds	r7, #8
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08c      	sub	sp, #48	@ 0x30
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	2b22      	cmp	r3, #34	@ 0x22
 8004e06:	f040 80ae 	bne.w	8004f66 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e12:	d117      	bne.n	8004e44 <UART_Receive_IT+0x50>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d113      	bne.n	8004e44 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e24:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	1c9a      	adds	r2, r3, #2
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e42:	e026      	b.n	8004e92 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e56:	d007      	beq.n	8004e68 <UART_Receive_IT+0x74>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <UART_Receive_IT+0x82>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d106      	bne.n	8004e76 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	e008      	b.n	8004e88 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e86:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d15d      	bne.n	8004f62 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f022 0220 	bic.w	r2, r2, #32
 8004eb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695a      	ldr	r2, [r3, #20]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f022 0201 	bic.w	r2, r2, #1
 8004ed4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d135      	bne.n	8004f58 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	e853 3f00 	ldrex	r3, [r3]
 8004f00:	613b      	str	r3, [r7, #16]
   return(result);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f023 0310 	bic.w	r3, r3, #16
 8004f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	330c      	adds	r3, #12
 8004f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f12:	623a      	str	r2, [r7, #32]
 8004f14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	69f9      	ldr	r1, [r7, #28]
 8004f18:	6a3a      	ldr	r2, [r7, #32]
 8004f1a:	e841 2300 	strex	r3, r2, [r1]
 8004f1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1e5      	bne.n	8004ef2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b10      	cmp	r3, #16
 8004f32:	d10a      	bne.n	8004f4a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f4e:	4619      	mov	r1, r3
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff fe0b 	bl	8004b6c <HAL_UARTEx_RxEventCallback>
 8004f56:	e002      	b.n	8004f5e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f7ff fdf3 	bl	8004b44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e002      	b.n	8004f68 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e000      	b.n	8004f68 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f66:	2302      	movs	r3, #2
  }
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3730      	adds	r7, #48	@ 0x30
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f74:	b0c0      	sub	sp, #256	@ 0x100
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	691b      	ldr	r3, [r3, #16]
 8004f84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	68d9      	ldr	r1, [r3, #12]
 8004f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	ea40 0301 	orr.w	r3, r0, r1
 8004f98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9e:	689a      	ldr	r2, [r3, #8]
 8004fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fc8:	f021 010c 	bic.w	r1, r1, #12
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fd6:	430b      	orrs	r3, r1
 8004fd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fea:	6999      	ldr	r1, [r3, #24]
 8004fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	ea40 0301 	orr.w	r3, r0, r1
 8004ff6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	4b8f      	ldr	r3, [pc, #572]	@ (800523c <UART_SetConfig+0x2cc>)
 8005000:	429a      	cmp	r2, r3
 8005002:	d005      	beq.n	8005010 <UART_SetConfig+0xa0>
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	4b8d      	ldr	r3, [pc, #564]	@ (8005240 <UART_SetConfig+0x2d0>)
 800500c:	429a      	cmp	r2, r3
 800500e:	d104      	bne.n	800501a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005010:	f7fe fd3e 	bl	8003a90 <HAL_RCC_GetPCLK2Freq>
 8005014:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005018:	e003      	b.n	8005022 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800501a:	f7fe fd25 	bl	8003a68 <HAL_RCC_GetPCLK1Freq>
 800501e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800502c:	f040 810c 	bne.w	8005248 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005034:	2200      	movs	r2, #0
 8005036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800503a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800503e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	1891      	adds	r1, r2, r2
 8005048:	65b9      	str	r1, [r7, #88]	@ 0x58
 800504a:	415b      	adcs	r3, r3
 800504c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800504e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005052:	4621      	mov	r1, r4
 8005054:	eb12 0801 	adds.w	r8, r2, r1
 8005058:	4629      	mov	r1, r5
 800505a:	eb43 0901 	adc.w	r9, r3, r1
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800506a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800506e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005072:	4690      	mov	r8, r2
 8005074:	4699      	mov	r9, r3
 8005076:	4623      	mov	r3, r4
 8005078:	eb18 0303 	adds.w	r3, r8, r3
 800507c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005080:	462b      	mov	r3, r5
 8005082:	eb49 0303 	adc.w	r3, r9, r3
 8005086:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005096:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800509a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800509e:	460b      	mov	r3, r1
 80050a0:	18db      	adds	r3, r3, r3
 80050a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050a4:	4613      	mov	r3, r2
 80050a6:	eb42 0303 	adc.w	r3, r2, r3
 80050aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80050ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050b4:	f7fb fe08 	bl	8000cc8 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4b61      	ldr	r3, [pc, #388]	@ (8005244 <UART_SetConfig+0x2d4>)
 80050be:	fba3 2302 	umull	r2, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	011c      	lsls	r4, r3, #4
 80050c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050d8:	4642      	mov	r2, r8
 80050da:	464b      	mov	r3, r9
 80050dc:	1891      	adds	r1, r2, r2
 80050de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050e0:	415b      	adcs	r3, r3
 80050e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050e8:	4641      	mov	r1, r8
 80050ea:	eb12 0a01 	adds.w	sl, r2, r1
 80050ee:	4649      	mov	r1, r9
 80050f0:	eb43 0b01 	adc.w	fp, r3, r1
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005100:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005104:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005108:	4692      	mov	sl, r2
 800510a:	469b      	mov	fp, r3
 800510c:	4643      	mov	r3, r8
 800510e:	eb1a 0303 	adds.w	r3, sl, r3
 8005112:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005116:	464b      	mov	r3, r9
 8005118:	eb4b 0303 	adc.w	r3, fp, r3
 800511c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800512c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005130:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005134:	460b      	mov	r3, r1
 8005136:	18db      	adds	r3, r3, r3
 8005138:	643b      	str	r3, [r7, #64]	@ 0x40
 800513a:	4613      	mov	r3, r2
 800513c:	eb42 0303 	adc.w	r3, r2, r3
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
 8005142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005146:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800514a:	f7fb fdbd 	bl	8000cc8 <__aeabi_uldivmod>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	4611      	mov	r1, r2
 8005154:	4b3b      	ldr	r3, [pc, #236]	@ (8005244 <UART_SetConfig+0x2d4>)
 8005156:	fba3 2301 	umull	r2, r3, r3, r1
 800515a:	095b      	lsrs	r3, r3, #5
 800515c:	2264      	movs	r2, #100	@ 0x64
 800515e:	fb02 f303 	mul.w	r3, r2, r3
 8005162:	1acb      	subs	r3, r1, r3
 8005164:	00db      	lsls	r3, r3, #3
 8005166:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800516a:	4b36      	ldr	r3, [pc, #216]	@ (8005244 <UART_SetConfig+0x2d4>)
 800516c:	fba3 2302 	umull	r2, r3, r3, r2
 8005170:	095b      	lsrs	r3, r3, #5
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005178:	441c      	add	r4, r3
 800517a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517e:	2200      	movs	r2, #0
 8005180:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005184:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005188:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800518c:	4642      	mov	r2, r8
 800518e:	464b      	mov	r3, r9
 8005190:	1891      	adds	r1, r2, r2
 8005192:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005194:	415b      	adcs	r3, r3
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005198:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800519c:	4641      	mov	r1, r8
 800519e:	1851      	adds	r1, r2, r1
 80051a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80051a2:	4649      	mov	r1, r9
 80051a4:	414b      	adcs	r3, r1
 80051a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051b4:	4659      	mov	r1, fp
 80051b6:	00cb      	lsls	r3, r1, #3
 80051b8:	4651      	mov	r1, sl
 80051ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051be:	4651      	mov	r1, sl
 80051c0:	00ca      	lsls	r2, r1, #3
 80051c2:	4610      	mov	r0, r2
 80051c4:	4619      	mov	r1, r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	4642      	mov	r2, r8
 80051ca:	189b      	adds	r3, r3, r2
 80051cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051d0:	464b      	mov	r3, r9
 80051d2:	460a      	mov	r2, r1
 80051d4:	eb42 0303 	adc.w	r3, r2, r3
 80051d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051f0:	460b      	mov	r3, r1
 80051f2:	18db      	adds	r3, r3, r3
 80051f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051f6:	4613      	mov	r3, r2
 80051f8:	eb42 0303 	adc.w	r3, r2, r3
 80051fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005202:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005206:	f7fb fd5f 	bl	8000cc8 <__aeabi_uldivmod>
 800520a:	4602      	mov	r2, r0
 800520c:	460b      	mov	r3, r1
 800520e:	4b0d      	ldr	r3, [pc, #52]	@ (8005244 <UART_SetConfig+0x2d4>)
 8005210:	fba3 1302 	umull	r1, r3, r3, r2
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	2164      	movs	r1, #100	@ 0x64
 8005218:	fb01 f303 	mul.w	r3, r1, r3
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	3332      	adds	r3, #50	@ 0x32
 8005222:	4a08      	ldr	r2, [pc, #32]	@ (8005244 <UART_SetConfig+0x2d4>)
 8005224:	fba2 2303 	umull	r2, r3, r2, r3
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	f003 0207 	and.w	r2, r3, #7
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4422      	add	r2, r4
 8005236:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005238:	e106      	b.n	8005448 <UART_SetConfig+0x4d8>
 800523a:	bf00      	nop
 800523c:	40011000 	.word	0x40011000
 8005240:	40011400 	.word	0x40011400
 8005244:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005252:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005256:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800525a:	4642      	mov	r2, r8
 800525c:	464b      	mov	r3, r9
 800525e:	1891      	adds	r1, r2, r2
 8005260:	6239      	str	r1, [r7, #32]
 8005262:	415b      	adcs	r3, r3
 8005264:	627b      	str	r3, [r7, #36]	@ 0x24
 8005266:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800526a:	4641      	mov	r1, r8
 800526c:	1854      	adds	r4, r2, r1
 800526e:	4649      	mov	r1, r9
 8005270:	eb43 0501 	adc.w	r5, r3, r1
 8005274:	f04f 0200 	mov.w	r2, #0
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	00eb      	lsls	r3, r5, #3
 800527e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005282:	00e2      	lsls	r2, r4, #3
 8005284:	4614      	mov	r4, r2
 8005286:	461d      	mov	r5, r3
 8005288:	4643      	mov	r3, r8
 800528a:	18e3      	adds	r3, r4, r3
 800528c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005290:	464b      	mov	r3, r9
 8005292:	eb45 0303 	adc.w	r3, r5, r3
 8005296:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052aa:	f04f 0200 	mov.w	r2, #0
 80052ae:	f04f 0300 	mov.w	r3, #0
 80052b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052b6:	4629      	mov	r1, r5
 80052b8:	008b      	lsls	r3, r1, #2
 80052ba:	4621      	mov	r1, r4
 80052bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c0:	4621      	mov	r1, r4
 80052c2:	008a      	lsls	r2, r1, #2
 80052c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052c8:	f7fb fcfe 	bl	8000cc8 <__aeabi_uldivmod>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4b60      	ldr	r3, [pc, #384]	@ (8005454 <UART_SetConfig+0x4e4>)
 80052d2:	fba3 2302 	umull	r2, r3, r3, r2
 80052d6:	095b      	lsrs	r3, r3, #5
 80052d8:	011c      	lsls	r4, r3, #4
 80052da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052ec:	4642      	mov	r2, r8
 80052ee:	464b      	mov	r3, r9
 80052f0:	1891      	adds	r1, r2, r2
 80052f2:	61b9      	str	r1, [r7, #24]
 80052f4:	415b      	adcs	r3, r3
 80052f6:	61fb      	str	r3, [r7, #28]
 80052f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052fc:	4641      	mov	r1, r8
 80052fe:	1851      	adds	r1, r2, r1
 8005300:	6139      	str	r1, [r7, #16]
 8005302:	4649      	mov	r1, r9
 8005304:	414b      	adcs	r3, r1
 8005306:	617b      	str	r3, [r7, #20]
 8005308:	f04f 0200 	mov.w	r2, #0
 800530c:	f04f 0300 	mov.w	r3, #0
 8005310:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005314:	4659      	mov	r1, fp
 8005316:	00cb      	lsls	r3, r1, #3
 8005318:	4651      	mov	r1, sl
 800531a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800531e:	4651      	mov	r1, sl
 8005320:	00ca      	lsls	r2, r1, #3
 8005322:	4610      	mov	r0, r2
 8005324:	4619      	mov	r1, r3
 8005326:	4603      	mov	r3, r0
 8005328:	4642      	mov	r2, r8
 800532a:	189b      	adds	r3, r3, r2
 800532c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005330:	464b      	mov	r3, r9
 8005332:	460a      	mov	r2, r1
 8005334:	eb42 0303 	adc.w	r3, r2, r3
 8005338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800533c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005346:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	f04f 0300 	mov.w	r3, #0
 8005350:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005354:	4649      	mov	r1, r9
 8005356:	008b      	lsls	r3, r1, #2
 8005358:	4641      	mov	r1, r8
 800535a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800535e:	4641      	mov	r1, r8
 8005360:	008a      	lsls	r2, r1, #2
 8005362:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005366:	f7fb fcaf 	bl	8000cc8 <__aeabi_uldivmod>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4611      	mov	r1, r2
 8005370:	4b38      	ldr	r3, [pc, #224]	@ (8005454 <UART_SetConfig+0x4e4>)
 8005372:	fba3 2301 	umull	r2, r3, r3, r1
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	2264      	movs	r2, #100	@ 0x64
 800537a:	fb02 f303 	mul.w	r3, r2, r3
 800537e:	1acb      	subs	r3, r1, r3
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	3332      	adds	r3, #50	@ 0x32
 8005384:	4a33      	ldr	r2, [pc, #204]	@ (8005454 <UART_SetConfig+0x4e4>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005390:	441c      	add	r4, r3
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005396:	2200      	movs	r2, #0
 8005398:	673b      	str	r3, [r7, #112]	@ 0x70
 800539a:	677a      	str	r2, [r7, #116]	@ 0x74
 800539c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053a0:	4642      	mov	r2, r8
 80053a2:	464b      	mov	r3, r9
 80053a4:	1891      	adds	r1, r2, r2
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	415b      	adcs	r3, r3
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053b0:	4641      	mov	r1, r8
 80053b2:	1851      	adds	r1, r2, r1
 80053b4:	6039      	str	r1, [r7, #0]
 80053b6:	4649      	mov	r1, r9
 80053b8:	414b      	adcs	r3, r1
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	f04f 0200 	mov.w	r2, #0
 80053c0:	f04f 0300 	mov.w	r3, #0
 80053c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053c8:	4659      	mov	r1, fp
 80053ca:	00cb      	lsls	r3, r1, #3
 80053cc:	4651      	mov	r1, sl
 80053ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d2:	4651      	mov	r1, sl
 80053d4:	00ca      	lsls	r2, r1, #3
 80053d6:	4610      	mov	r0, r2
 80053d8:	4619      	mov	r1, r3
 80053da:	4603      	mov	r3, r0
 80053dc:	4642      	mov	r2, r8
 80053de:	189b      	adds	r3, r3, r2
 80053e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053e2:	464b      	mov	r3, r9
 80053e4:	460a      	mov	r2, r1
 80053e6:	eb42 0303 	adc.w	r3, r2, r3
 80053ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80053f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005404:	4649      	mov	r1, r9
 8005406:	008b      	lsls	r3, r1, #2
 8005408:	4641      	mov	r1, r8
 800540a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800540e:	4641      	mov	r1, r8
 8005410:	008a      	lsls	r2, r1, #2
 8005412:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005416:	f7fb fc57 	bl	8000cc8 <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4b0d      	ldr	r3, [pc, #52]	@ (8005454 <UART_SetConfig+0x4e4>)
 8005420:	fba3 1302 	umull	r1, r3, r3, r2
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	2164      	movs	r1, #100	@ 0x64
 8005428:	fb01 f303 	mul.w	r3, r1, r3
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	3332      	adds	r3, #50	@ 0x32
 8005432:	4a08      	ldr	r2, [pc, #32]	@ (8005454 <UART_SetConfig+0x4e4>)
 8005434:	fba2 2303 	umull	r2, r3, r2, r3
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	f003 020f 	and.w	r2, r3, #15
 800543e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4422      	add	r2, r4
 8005446:	609a      	str	r2, [r3, #8]
}
 8005448:	bf00      	nop
 800544a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800544e:	46bd      	mov	sp, r7
 8005450:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005454:	51eb851f 	.word	0x51eb851f

08005458 <__cvt>:
 8005458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800545c:	ec57 6b10 	vmov	r6, r7, d0
 8005460:	2f00      	cmp	r7, #0
 8005462:	460c      	mov	r4, r1
 8005464:	4619      	mov	r1, r3
 8005466:	463b      	mov	r3, r7
 8005468:	bfbb      	ittet	lt
 800546a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800546e:	461f      	movlt	r7, r3
 8005470:	2300      	movge	r3, #0
 8005472:	232d      	movlt	r3, #45	@ 0x2d
 8005474:	700b      	strb	r3, [r1, #0]
 8005476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005478:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800547c:	4691      	mov	r9, r2
 800547e:	f023 0820 	bic.w	r8, r3, #32
 8005482:	bfbc      	itt	lt
 8005484:	4632      	movlt	r2, r6
 8005486:	4616      	movlt	r6, r2
 8005488:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800548c:	d005      	beq.n	800549a <__cvt+0x42>
 800548e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005492:	d100      	bne.n	8005496 <__cvt+0x3e>
 8005494:	3401      	adds	r4, #1
 8005496:	2102      	movs	r1, #2
 8005498:	e000      	b.n	800549c <__cvt+0x44>
 800549a:	2103      	movs	r1, #3
 800549c:	ab03      	add	r3, sp, #12
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	ab02      	add	r3, sp, #8
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	ec47 6b10 	vmov	d0, r6, r7
 80054a8:	4653      	mov	r3, sl
 80054aa:	4622      	mov	r2, r4
 80054ac:	f000 fe78 	bl	80061a0 <_dtoa_r>
 80054b0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80054b4:	4605      	mov	r5, r0
 80054b6:	d119      	bne.n	80054ec <__cvt+0x94>
 80054b8:	f019 0f01 	tst.w	r9, #1
 80054bc:	d00e      	beq.n	80054dc <__cvt+0x84>
 80054be:	eb00 0904 	add.w	r9, r0, r4
 80054c2:	2200      	movs	r2, #0
 80054c4:	2300      	movs	r3, #0
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fb fb1d 	bl	8000b08 <__aeabi_dcmpeq>
 80054ce:	b108      	cbz	r0, 80054d4 <__cvt+0x7c>
 80054d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80054d4:	2230      	movs	r2, #48	@ 0x30
 80054d6:	9b03      	ldr	r3, [sp, #12]
 80054d8:	454b      	cmp	r3, r9
 80054da:	d31e      	bcc.n	800551a <__cvt+0xc2>
 80054dc:	9b03      	ldr	r3, [sp, #12]
 80054de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054e0:	1b5b      	subs	r3, r3, r5
 80054e2:	4628      	mov	r0, r5
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	b004      	add	sp, #16
 80054e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054f0:	eb00 0904 	add.w	r9, r0, r4
 80054f4:	d1e5      	bne.n	80054c2 <__cvt+0x6a>
 80054f6:	7803      	ldrb	r3, [r0, #0]
 80054f8:	2b30      	cmp	r3, #48	@ 0x30
 80054fa:	d10a      	bne.n	8005512 <__cvt+0xba>
 80054fc:	2200      	movs	r2, #0
 80054fe:	2300      	movs	r3, #0
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fb fb00 	bl	8000b08 <__aeabi_dcmpeq>
 8005508:	b918      	cbnz	r0, 8005512 <__cvt+0xba>
 800550a:	f1c4 0401 	rsb	r4, r4, #1
 800550e:	f8ca 4000 	str.w	r4, [sl]
 8005512:	f8da 3000 	ldr.w	r3, [sl]
 8005516:	4499      	add	r9, r3
 8005518:	e7d3      	b.n	80054c2 <__cvt+0x6a>
 800551a:	1c59      	adds	r1, r3, #1
 800551c:	9103      	str	r1, [sp, #12]
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e7d9      	b.n	80054d6 <__cvt+0x7e>

08005522 <__exponent>:
 8005522:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005524:	2900      	cmp	r1, #0
 8005526:	bfba      	itte	lt
 8005528:	4249      	neglt	r1, r1
 800552a:	232d      	movlt	r3, #45	@ 0x2d
 800552c:	232b      	movge	r3, #43	@ 0x2b
 800552e:	2909      	cmp	r1, #9
 8005530:	7002      	strb	r2, [r0, #0]
 8005532:	7043      	strb	r3, [r0, #1]
 8005534:	dd29      	ble.n	800558a <__exponent+0x68>
 8005536:	f10d 0307 	add.w	r3, sp, #7
 800553a:	461d      	mov	r5, r3
 800553c:	270a      	movs	r7, #10
 800553e:	461a      	mov	r2, r3
 8005540:	fbb1 f6f7 	udiv	r6, r1, r7
 8005544:	fb07 1416 	mls	r4, r7, r6, r1
 8005548:	3430      	adds	r4, #48	@ 0x30
 800554a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800554e:	460c      	mov	r4, r1
 8005550:	2c63      	cmp	r4, #99	@ 0x63
 8005552:	f103 33ff 	add.w	r3, r3, #4294967295
 8005556:	4631      	mov	r1, r6
 8005558:	dcf1      	bgt.n	800553e <__exponent+0x1c>
 800555a:	3130      	adds	r1, #48	@ 0x30
 800555c:	1e94      	subs	r4, r2, #2
 800555e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005562:	1c41      	adds	r1, r0, #1
 8005564:	4623      	mov	r3, r4
 8005566:	42ab      	cmp	r3, r5
 8005568:	d30a      	bcc.n	8005580 <__exponent+0x5e>
 800556a:	f10d 0309 	add.w	r3, sp, #9
 800556e:	1a9b      	subs	r3, r3, r2
 8005570:	42ac      	cmp	r4, r5
 8005572:	bf88      	it	hi
 8005574:	2300      	movhi	r3, #0
 8005576:	3302      	adds	r3, #2
 8005578:	4403      	add	r3, r0
 800557a:	1a18      	subs	r0, r3, r0
 800557c:	b003      	add	sp, #12
 800557e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005580:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005584:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005588:	e7ed      	b.n	8005566 <__exponent+0x44>
 800558a:	2330      	movs	r3, #48	@ 0x30
 800558c:	3130      	adds	r1, #48	@ 0x30
 800558e:	7083      	strb	r3, [r0, #2]
 8005590:	70c1      	strb	r1, [r0, #3]
 8005592:	1d03      	adds	r3, r0, #4
 8005594:	e7f1      	b.n	800557a <__exponent+0x58>
	...

08005598 <_printf_float>:
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	b08d      	sub	sp, #52	@ 0x34
 800559e:	460c      	mov	r4, r1
 80055a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80055a4:	4616      	mov	r6, r2
 80055a6:	461f      	mov	r7, r3
 80055a8:	4605      	mov	r5, r0
 80055aa:	f000 fcf7 	bl	8005f9c <_localeconv_r>
 80055ae:	6803      	ldr	r3, [r0, #0]
 80055b0:	9304      	str	r3, [sp, #16]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fa fe7c 	bl	80002b0 <strlen>
 80055b8:	2300      	movs	r3, #0
 80055ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80055bc:	f8d8 3000 	ldr.w	r3, [r8]
 80055c0:	9005      	str	r0, [sp, #20]
 80055c2:	3307      	adds	r3, #7
 80055c4:	f023 0307 	bic.w	r3, r3, #7
 80055c8:	f103 0208 	add.w	r2, r3, #8
 80055cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80055d0:	f8d4 b000 	ldr.w	fp, [r4]
 80055d4:	f8c8 2000 	str.w	r2, [r8]
 80055d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80055e0:	9307      	str	r3, [sp, #28]
 80055e2:	f8cd 8018 	str.w	r8, [sp, #24]
 80055e6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80055ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055ee:	4b9c      	ldr	r3, [pc, #624]	@ (8005860 <_printf_float+0x2c8>)
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	f7fb faba 	bl	8000b6c <__aeabi_dcmpun>
 80055f8:	bb70      	cbnz	r0, 8005658 <_printf_float+0xc0>
 80055fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055fe:	4b98      	ldr	r3, [pc, #608]	@ (8005860 <_printf_float+0x2c8>)
 8005600:	f04f 32ff 	mov.w	r2, #4294967295
 8005604:	f7fb fa94 	bl	8000b30 <__aeabi_dcmple>
 8005608:	bb30      	cbnz	r0, 8005658 <_printf_float+0xc0>
 800560a:	2200      	movs	r2, #0
 800560c:	2300      	movs	r3, #0
 800560e:	4640      	mov	r0, r8
 8005610:	4649      	mov	r1, r9
 8005612:	f7fb fa83 	bl	8000b1c <__aeabi_dcmplt>
 8005616:	b110      	cbz	r0, 800561e <_printf_float+0x86>
 8005618:	232d      	movs	r3, #45	@ 0x2d
 800561a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800561e:	4a91      	ldr	r2, [pc, #580]	@ (8005864 <_printf_float+0x2cc>)
 8005620:	4b91      	ldr	r3, [pc, #580]	@ (8005868 <_printf_float+0x2d0>)
 8005622:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005626:	bf94      	ite	ls
 8005628:	4690      	movls	r8, r2
 800562a:	4698      	movhi	r8, r3
 800562c:	2303      	movs	r3, #3
 800562e:	6123      	str	r3, [r4, #16]
 8005630:	f02b 0304 	bic.w	r3, fp, #4
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	f04f 0900 	mov.w	r9, #0
 800563a:	9700      	str	r7, [sp, #0]
 800563c:	4633      	mov	r3, r6
 800563e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005640:	4621      	mov	r1, r4
 8005642:	4628      	mov	r0, r5
 8005644:	f000 f9d2 	bl	80059ec <_printf_common>
 8005648:	3001      	adds	r0, #1
 800564a:	f040 808d 	bne.w	8005768 <_printf_float+0x1d0>
 800564e:	f04f 30ff 	mov.w	r0, #4294967295
 8005652:	b00d      	add	sp, #52	@ 0x34
 8005654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	4640      	mov	r0, r8
 800565e:	4649      	mov	r1, r9
 8005660:	f7fb fa84 	bl	8000b6c <__aeabi_dcmpun>
 8005664:	b140      	cbz	r0, 8005678 <_printf_float+0xe0>
 8005666:	464b      	mov	r3, r9
 8005668:	2b00      	cmp	r3, #0
 800566a:	bfbc      	itt	lt
 800566c:	232d      	movlt	r3, #45	@ 0x2d
 800566e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005672:	4a7e      	ldr	r2, [pc, #504]	@ (800586c <_printf_float+0x2d4>)
 8005674:	4b7e      	ldr	r3, [pc, #504]	@ (8005870 <_printf_float+0x2d8>)
 8005676:	e7d4      	b.n	8005622 <_printf_float+0x8a>
 8005678:	6863      	ldr	r3, [r4, #4]
 800567a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800567e:	9206      	str	r2, [sp, #24]
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	d13b      	bne.n	80056fc <_printf_float+0x164>
 8005684:	2306      	movs	r3, #6
 8005686:	6063      	str	r3, [r4, #4]
 8005688:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800568c:	2300      	movs	r3, #0
 800568e:	6022      	str	r2, [r4, #0]
 8005690:	9303      	str	r3, [sp, #12]
 8005692:	ab0a      	add	r3, sp, #40	@ 0x28
 8005694:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005698:	ab09      	add	r3, sp, #36	@ 0x24
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	6861      	ldr	r1, [r4, #4]
 800569e:	ec49 8b10 	vmov	d0, r8, r9
 80056a2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80056a6:	4628      	mov	r0, r5
 80056a8:	f7ff fed6 	bl	8005458 <__cvt>
 80056ac:	9b06      	ldr	r3, [sp, #24]
 80056ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056b0:	2b47      	cmp	r3, #71	@ 0x47
 80056b2:	4680      	mov	r8, r0
 80056b4:	d129      	bne.n	800570a <_printf_float+0x172>
 80056b6:	1cc8      	adds	r0, r1, #3
 80056b8:	db02      	blt.n	80056c0 <_printf_float+0x128>
 80056ba:	6863      	ldr	r3, [r4, #4]
 80056bc:	4299      	cmp	r1, r3
 80056be:	dd41      	ble.n	8005744 <_printf_float+0x1ac>
 80056c0:	f1aa 0a02 	sub.w	sl, sl, #2
 80056c4:	fa5f fa8a 	uxtb.w	sl, sl
 80056c8:	3901      	subs	r1, #1
 80056ca:	4652      	mov	r2, sl
 80056cc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80056d0:	9109      	str	r1, [sp, #36]	@ 0x24
 80056d2:	f7ff ff26 	bl	8005522 <__exponent>
 80056d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056d8:	1813      	adds	r3, r2, r0
 80056da:	2a01      	cmp	r2, #1
 80056dc:	4681      	mov	r9, r0
 80056de:	6123      	str	r3, [r4, #16]
 80056e0:	dc02      	bgt.n	80056e8 <_printf_float+0x150>
 80056e2:	6822      	ldr	r2, [r4, #0]
 80056e4:	07d2      	lsls	r2, r2, #31
 80056e6:	d501      	bpl.n	80056ec <_printf_float+0x154>
 80056e8:	3301      	adds	r3, #1
 80056ea:	6123      	str	r3, [r4, #16]
 80056ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d0a2      	beq.n	800563a <_printf_float+0xa2>
 80056f4:	232d      	movs	r3, #45	@ 0x2d
 80056f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056fa:	e79e      	b.n	800563a <_printf_float+0xa2>
 80056fc:	9a06      	ldr	r2, [sp, #24]
 80056fe:	2a47      	cmp	r2, #71	@ 0x47
 8005700:	d1c2      	bne.n	8005688 <_printf_float+0xf0>
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1c0      	bne.n	8005688 <_printf_float+0xf0>
 8005706:	2301      	movs	r3, #1
 8005708:	e7bd      	b.n	8005686 <_printf_float+0xee>
 800570a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800570e:	d9db      	bls.n	80056c8 <_printf_float+0x130>
 8005710:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005714:	d118      	bne.n	8005748 <_printf_float+0x1b0>
 8005716:	2900      	cmp	r1, #0
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	dd0b      	ble.n	8005734 <_printf_float+0x19c>
 800571c:	6121      	str	r1, [r4, #16]
 800571e:	b913      	cbnz	r3, 8005726 <_printf_float+0x18e>
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	07d0      	lsls	r0, r2, #31
 8005724:	d502      	bpl.n	800572c <_printf_float+0x194>
 8005726:	3301      	adds	r3, #1
 8005728:	440b      	add	r3, r1
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800572e:	f04f 0900 	mov.w	r9, #0
 8005732:	e7db      	b.n	80056ec <_printf_float+0x154>
 8005734:	b913      	cbnz	r3, 800573c <_printf_float+0x1a4>
 8005736:	6822      	ldr	r2, [r4, #0]
 8005738:	07d2      	lsls	r2, r2, #31
 800573a:	d501      	bpl.n	8005740 <_printf_float+0x1a8>
 800573c:	3302      	adds	r3, #2
 800573e:	e7f4      	b.n	800572a <_printf_float+0x192>
 8005740:	2301      	movs	r3, #1
 8005742:	e7f2      	b.n	800572a <_printf_float+0x192>
 8005744:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005748:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800574a:	4299      	cmp	r1, r3
 800574c:	db05      	blt.n	800575a <_printf_float+0x1c2>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	6121      	str	r1, [r4, #16]
 8005752:	07d8      	lsls	r0, r3, #31
 8005754:	d5ea      	bpl.n	800572c <_printf_float+0x194>
 8005756:	1c4b      	adds	r3, r1, #1
 8005758:	e7e7      	b.n	800572a <_printf_float+0x192>
 800575a:	2900      	cmp	r1, #0
 800575c:	bfd4      	ite	le
 800575e:	f1c1 0202 	rsble	r2, r1, #2
 8005762:	2201      	movgt	r2, #1
 8005764:	4413      	add	r3, r2
 8005766:	e7e0      	b.n	800572a <_printf_float+0x192>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	055a      	lsls	r2, r3, #21
 800576c:	d407      	bmi.n	800577e <_printf_float+0x1e6>
 800576e:	6923      	ldr	r3, [r4, #16]
 8005770:	4642      	mov	r2, r8
 8005772:	4631      	mov	r1, r6
 8005774:	4628      	mov	r0, r5
 8005776:	47b8      	blx	r7
 8005778:	3001      	adds	r0, #1
 800577a:	d12b      	bne.n	80057d4 <_printf_float+0x23c>
 800577c:	e767      	b.n	800564e <_printf_float+0xb6>
 800577e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005782:	f240 80dd 	bls.w	8005940 <_printf_float+0x3a8>
 8005786:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800578a:	2200      	movs	r2, #0
 800578c:	2300      	movs	r3, #0
 800578e:	f7fb f9bb 	bl	8000b08 <__aeabi_dcmpeq>
 8005792:	2800      	cmp	r0, #0
 8005794:	d033      	beq.n	80057fe <_printf_float+0x266>
 8005796:	4a37      	ldr	r2, [pc, #220]	@ (8005874 <_printf_float+0x2dc>)
 8005798:	2301      	movs	r3, #1
 800579a:	4631      	mov	r1, r6
 800579c:	4628      	mov	r0, r5
 800579e:	47b8      	blx	r7
 80057a0:	3001      	adds	r0, #1
 80057a2:	f43f af54 	beq.w	800564e <_printf_float+0xb6>
 80057a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80057aa:	4543      	cmp	r3, r8
 80057ac:	db02      	blt.n	80057b4 <_printf_float+0x21c>
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	07d8      	lsls	r0, r3, #31
 80057b2:	d50f      	bpl.n	80057d4 <_printf_float+0x23c>
 80057b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	f43f af45 	beq.w	800564e <_printf_float+0xb6>
 80057c4:	f04f 0900 	mov.w	r9, #0
 80057c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80057cc:	f104 0a1a 	add.w	sl, r4, #26
 80057d0:	45c8      	cmp	r8, r9
 80057d2:	dc09      	bgt.n	80057e8 <_printf_float+0x250>
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	079b      	lsls	r3, r3, #30
 80057d8:	f100 8103 	bmi.w	80059e2 <_printf_float+0x44a>
 80057dc:	68e0      	ldr	r0, [r4, #12]
 80057de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057e0:	4298      	cmp	r0, r3
 80057e2:	bfb8      	it	lt
 80057e4:	4618      	movlt	r0, r3
 80057e6:	e734      	b.n	8005652 <_printf_float+0xba>
 80057e8:	2301      	movs	r3, #1
 80057ea:	4652      	mov	r2, sl
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	f43f af2b 	beq.w	800564e <_printf_float+0xb6>
 80057f8:	f109 0901 	add.w	r9, r9, #1
 80057fc:	e7e8      	b.n	80057d0 <_printf_float+0x238>
 80057fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005800:	2b00      	cmp	r3, #0
 8005802:	dc39      	bgt.n	8005878 <_printf_float+0x2e0>
 8005804:	4a1b      	ldr	r2, [pc, #108]	@ (8005874 <_printf_float+0x2dc>)
 8005806:	2301      	movs	r3, #1
 8005808:	4631      	mov	r1, r6
 800580a:	4628      	mov	r0, r5
 800580c:	47b8      	blx	r7
 800580e:	3001      	adds	r0, #1
 8005810:	f43f af1d 	beq.w	800564e <_printf_float+0xb6>
 8005814:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005818:	ea59 0303 	orrs.w	r3, r9, r3
 800581c:	d102      	bne.n	8005824 <_printf_float+0x28c>
 800581e:	6823      	ldr	r3, [r4, #0]
 8005820:	07d9      	lsls	r1, r3, #31
 8005822:	d5d7      	bpl.n	80057d4 <_printf_float+0x23c>
 8005824:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005828:	4631      	mov	r1, r6
 800582a:	4628      	mov	r0, r5
 800582c:	47b8      	blx	r7
 800582e:	3001      	adds	r0, #1
 8005830:	f43f af0d 	beq.w	800564e <_printf_float+0xb6>
 8005834:	f04f 0a00 	mov.w	sl, #0
 8005838:	f104 0b1a 	add.w	fp, r4, #26
 800583c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583e:	425b      	negs	r3, r3
 8005840:	4553      	cmp	r3, sl
 8005842:	dc01      	bgt.n	8005848 <_printf_float+0x2b0>
 8005844:	464b      	mov	r3, r9
 8005846:	e793      	b.n	8005770 <_printf_float+0x1d8>
 8005848:	2301      	movs	r3, #1
 800584a:	465a      	mov	r2, fp
 800584c:	4631      	mov	r1, r6
 800584e:	4628      	mov	r0, r5
 8005850:	47b8      	blx	r7
 8005852:	3001      	adds	r0, #1
 8005854:	f43f aefb 	beq.w	800564e <_printf_float+0xb6>
 8005858:	f10a 0a01 	add.w	sl, sl, #1
 800585c:	e7ee      	b.n	800583c <_printf_float+0x2a4>
 800585e:	bf00      	nop
 8005860:	7fefffff 	.word	0x7fefffff
 8005864:	080090ac 	.word	0x080090ac
 8005868:	080090b0 	.word	0x080090b0
 800586c:	080090b4 	.word	0x080090b4
 8005870:	080090b8 	.word	0x080090b8
 8005874:	080090bc 	.word	0x080090bc
 8005878:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800587a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800587e:	4553      	cmp	r3, sl
 8005880:	bfa8      	it	ge
 8005882:	4653      	movge	r3, sl
 8005884:	2b00      	cmp	r3, #0
 8005886:	4699      	mov	r9, r3
 8005888:	dc36      	bgt.n	80058f8 <_printf_float+0x360>
 800588a:	f04f 0b00 	mov.w	fp, #0
 800588e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005892:	f104 021a 	add.w	r2, r4, #26
 8005896:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005898:	9306      	str	r3, [sp, #24]
 800589a:	eba3 0309 	sub.w	r3, r3, r9
 800589e:	455b      	cmp	r3, fp
 80058a0:	dc31      	bgt.n	8005906 <_printf_float+0x36e>
 80058a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058a4:	459a      	cmp	sl, r3
 80058a6:	dc3a      	bgt.n	800591e <_printf_float+0x386>
 80058a8:	6823      	ldr	r3, [r4, #0]
 80058aa:	07da      	lsls	r2, r3, #31
 80058ac:	d437      	bmi.n	800591e <_printf_float+0x386>
 80058ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058b0:	ebaa 0903 	sub.w	r9, sl, r3
 80058b4:	9b06      	ldr	r3, [sp, #24]
 80058b6:	ebaa 0303 	sub.w	r3, sl, r3
 80058ba:	4599      	cmp	r9, r3
 80058bc:	bfa8      	it	ge
 80058be:	4699      	movge	r9, r3
 80058c0:	f1b9 0f00 	cmp.w	r9, #0
 80058c4:	dc33      	bgt.n	800592e <_printf_float+0x396>
 80058c6:	f04f 0800 	mov.w	r8, #0
 80058ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058ce:	f104 0b1a 	add.w	fp, r4, #26
 80058d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d4:	ebaa 0303 	sub.w	r3, sl, r3
 80058d8:	eba3 0309 	sub.w	r3, r3, r9
 80058dc:	4543      	cmp	r3, r8
 80058de:	f77f af79 	ble.w	80057d4 <_printf_float+0x23c>
 80058e2:	2301      	movs	r3, #1
 80058e4:	465a      	mov	r2, fp
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f aeae 	beq.w	800564e <_printf_float+0xb6>
 80058f2:	f108 0801 	add.w	r8, r8, #1
 80058f6:	e7ec      	b.n	80058d2 <_printf_float+0x33a>
 80058f8:	4642      	mov	r2, r8
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	d1c2      	bne.n	800588a <_printf_float+0x2f2>
 8005904:	e6a3      	b.n	800564e <_printf_float+0xb6>
 8005906:	2301      	movs	r3, #1
 8005908:	4631      	mov	r1, r6
 800590a:	4628      	mov	r0, r5
 800590c:	9206      	str	r2, [sp, #24]
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f ae9c 	beq.w	800564e <_printf_float+0xb6>
 8005916:	9a06      	ldr	r2, [sp, #24]
 8005918:	f10b 0b01 	add.w	fp, fp, #1
 800591c:	e7bb      	b.n	8005896 <_printf_float+0x2fe>
 800591e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005922:	4631      	mov	r1, r6
 8005924:	4628      	mov	r0, r5
 8005926:	47b8      	blx	r7
 8005928:	3001      	adds	r0, #1
 800592a:	d1c0      	bne.n	80058ae <_printf_float+0x316>
 800592c:	e68f      	b.n	800564e <_printf_float+0xb6>
 800592e:	9a06      	ldr	r2, [sp, #24]
 8005930:	464b      	mov	r3, r9
 8005932:	4442      	add	r2, r8
 8005934:	4631      	mov	r1, r6
 8005936:	4628      	mov	r0, r5
 8005938:	47b8      	blx	r7
 800593a:	3001      	adds	r0, #1
 800593c:	d1c3      	bne.n	80058c6 <_printf_float+0x32e>
 800593e:	e686      	b.n	800564e <_printf_float+0xb6>
 8005940:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005944:	f1ba 0f01 	cmp.w	sl, #1
 8005948:	dc01      	bgt.n	800594e <_printf_float+0x3b6>
 800594a:	07db      	lsls	r3, r3, #31
 800594c:	d536      	bpl.n	80059bc <_printf_float+0x424>
 800594e:	2301      	movs	r3, #1
 8005950:	4642      	mov	r2, r8
 8005952:	4631      	mov	r1, r6
 8005954:	4628      	mov	r0, r5
 8005956:	47b8      	blx	r7
 8005958:	3001      	adds	r0, #1
 800595a:	f43f ae78 	beq.w	800564e <_printf_float+0xb6>
 800595e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f ae70 	beq.w	800564e <_printf_float+0xb6>
 800596e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005972:	2200      	movs	r2, #0
 8005974:	2300      	movs	r3, #0
 8005976:	f10a 3aff 	add.w	sl, sl, #4294967295
 800597a:	f7fb f8c5 	bl	8000b08 <__aeabi_dcmpeq>
 800597e:	b9c0      	cbnz	r0, 80059b2 <_printf_float+0x41a>
 8005980:	4653      	mov	r3, sl
 8005982:	f108 0201 	add.w	r2, r8, #1
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	d10c      	bne.n	80059aa <_printf_float+0x412>
 8005990:	e65d      	b.n	800564e <_printf_float+0xb6>
 8005992:	2301      	movs	r3, #1
 8005994:	465a      	mov	r2, fp
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	f43f ae56 	beq.w	800564e <_printf_float+0xb6>
 80059a2:	f108 0801 	add.w	r8, r8, #1
 80059a6:	45d0      	cmp	r8, sl
 80059a8:	dbf3      	blt.n	8005992 <_printf_float+0x3fa>
 80059aa:	464b      	mov	r3, r9
 80059ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80059b0:	e6df      	b.n	8005772 <_printf_float+0x1da>
 80059b2:	f04f 0800 	mov.w	r8, #0
 80059b6:	f104 0b1a 	add.w	fp, r4, #26
 80059ba:	e7f4      	b.n	80059a6 <_printf_float+0x40e>
 80059bc:	2301      	movs	r3, #1
 80059be:	4642      	mov	r2, r8
 80059c0:	e7e1      	b.n	8005986 <_printf_float+0x3ee>
 80059c2:	2301      	movs	r3, #1
 80059c4:	464a      	mov	r2, r9
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f ae3e 	beq.w	800564e <_printf_float+0xb6>
 80059d2:	f108 0801 	add.w	r8, r8, #1
 80059d6:	68e3      	ldr	r3, [r4, #12]
 80059d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80059da:	1a5b      	subs	r3, r3, r1
 80059dc:	4543      	cmp	r3, r8
 80059de:	dcf0      	bgt.n	80059c2 <_printf_float+0x42a>
 80059e0:	e6fc      	b.n	80057dc <_printf_float+0x244>
 80059e2:	f04f 0800 	mov.w	r8, #0
 80059e6:	f104 0919 	add.w	r9, r4, #25
 80059ea:	e7f4      	b.n	80059d6 <_printf_float+0x43e>

080059ec <_printf_common>:
 80059ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f0:	4616      	mov	r6, r2
 80059f2:	4698      	mov	r8, r3
 80059f4:	688a      	ldr	r2, [r1, #8]
 80059f6:	690b      	ldr	r3, [r1, #16]
 80059f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059fc:	4293      	cmp	r3, r2
 80059fe:	bfb8      	it	lt
 8005a00:	4613      	movlt	r3, r2
 8005a02:	6033      	str	r3, [r6, #0]
 8005a04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a08:	4607      	mov	r7, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	b10a      	cbz	r2, 8005a12 <_printf_common+0x26>
 8005a0e:	3301      	adds	r3, #1
 8005a10:	6033      	str	r3, [r6, #0]
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	0699      	lsls	r1, r3, #26
 8005a16:	bf42      	ittt	mi
 8005a18:	6833      	ldrmi	r3, [r6, #0]
 8005a1a:	3302      	addmi	r3, #2
 8005a1c:	6033      	strmi	r3, [r6, #0]
 8005a1e:	6825      	ldr	r5, [r4, #0]
 8005a20:	f015 0506 	ands.w	r5, r5, #6
 8005a24:	d106      	bne.n	8005a34 <_printf_common+0x48>
 8005a26:	f104 0a19 	add.w	sl, r4, #25
 8005a2a:	68e3      	ldr	r3, [r4, #12]
 8005a2c:	6832      	ldr	r2, [r6, #0]
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	42ab      	cmp	r3, r5
 8005a32:	dc26      	bgt.n	8005a82 <_printf_common+0x96>
 8005a34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a38:	6822      	ldr	r2, [r4, #0]
 8005a3a:	3b00      	subs	r3, #0
 8005a3c:	bf18      	it	ne
 8005a3e:	2301      	movne	r3, #1
 8005a40:	0692      	lsls	r2, r2, #26
 8005a42:	d42b      	bmi.n	8005a9c <_printf_common+0xb0>
 8005a44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a48:	4641      	mov	r1, r8
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	47c8      	blx	r9
 8005a4e:	3001      	adds	r0, #1
 8005a50:	d01e      	beq.n	8005a90 <_printf_common+0xa4>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	6922      	ldr	r2, [r4, #16]
 8005a56:	f003 0306 	and.w	r3, r3, #6
 8005a5a:	2b04      	cmp	r3, #4
 8005a5c:	bf02      	ittt	eq
 8005a5e:	68e5      	ldreq	r5, [r4, #12]
 8005a60:	6833      	ldreq	r3, [r6, #0]
 8005a62:	1aed      	subeq	r5, r5, r3
 8005a64:	68a3      	ldr	r3, [r4, #8]
 8005a66:	bf0c      	ite	eq
 8005a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a6c:	2500      	movne	r5, #0
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	bfc4      	itt	gt
 8005a72:	1a9b      	subgt	r3, r3, r2
 8005a74:	18ed      	addgt	r5, r5, r3
 8005a76:	2600      	movs	r6, #0
 8005a78:	341a      	adds	r4, #26
 8005a7a:	42b5      	cmp	r5, r6
 8005a7c:	d11a      	bne.n	8005ab4 <_printf_common+0xc8>
 8005a7e:	2000      	movs	r0, #0
 8005a80:	e008      	b.n	8005a94 <_printf_common+0xa8>
 8005a82:	2301      	movs	r3, #1
 8005a84:	4652      	mov	r2, sl
 8005a86:	4641      	mov	r1, r8
 8005a88:	4638      	mov	r0, r7
 8005a8a:	47c8      	blx	r9
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d103      	bne.n	8005a98 <_printf_common+0xac>
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295
 8005a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a98:	3501      	adds	r5, #1
 8005a9a:	e7c6      	b.n	8005a2a <_printf_common+0x3e>
 8005a9c:	18e1      	adds	r1, r4, r3
 8005a9e:	1c5a      	adds	r2, r3, #1
 8005aa0:	2030      	movs	r0, #48	@ 0x30
 8005aa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005aa6:	4422      	add	r2, r4
 8005aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005aac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ab0:	3302      	adds	r3, #2
 8005ab2:	e7c7      	b.n	8005a44 <_printf_common+0x58>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	4641      	mov	r1, r8
 8005aba:	4638      	mov	r0, r7
 8005abc:	47c8      	blx	r9
 8005abe:	3001      	adds	r0, #1
 8005ac0:	d0e6      	beq.n	8005a90 <_printf_common+0xa4>
 8005ac2:	3601      	adds	r6, #1
 8005ac4:	e7d9      	b.n	8005a7a <_printf_common+0x8e>
	...

08005ac8 <_printf_i>:
 8005ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	7e0f      	ldrb	r7, [r1, #24]
 8005ace:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ad0:	2f78      	cmp	r7, #120	@ 0x78
 8005ad2:	4691      	mov	r9, r2
 8005ad4:	4680      	mov	r8, r0
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	469a      	mov	sl, r3
 8005ada:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ade:	d807      	bhi.n	8005af0 <_printf_i+0x28>
 8005ae0:	2f62      	cmp	r7, #98	@ 0x62
 8005ae2:	d80a      	bhi.n	8005afa <_printf_i+0x32>
 8005ae4:	2f00      	cmp	r7, #0
 8005ae6:	f000 80d2 	beq.w	8005c8e <_printf_i+0x1c6>
 8005aea:	2f58      	cmp	r7, #88	@ 0x58
 8005aec:	f000 80b9 	beq.w	8005c62 <_printf_i+0x19a>
 8005af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005af4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005af8:	e03a      	b.n	8005b70 <_printf_i+0xa8>
 8005afa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005afe:	2b15      	cmp	r3, #21
 8005b00:	d8f6      	bhi.n	8005af0 <_printf_i+0x28>
 8005b02:	a101      	add	r1, pc, #4	@ (adr r1, 8005b08 <_printf_i+0x40>)
 8005b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b08:	08005b61 	.word	0x08005b61
 8005b0c:	08005b75 	.word	0x08005b75
 8005b10:	08005af1 	.word	0x08005af1
 8005b14:	08005af1 	.word	0x08005af1
 8005b18:	08005af1 	.word	0x08005af1
 8005b1c:	08005af1 	.word	0x08005af1
 8005b20:	08005b75 	.word	0x08005b75
 8005b24:	08005af1 	.word	0x08005af1
 8005b28:	08005af1 	.word	0x08005af1
 8005b2c:	08005af1 	.word	0x08005af1
 8005b30:	08005af1 	.word	0x08005af1
 8005b34:	08005c75 	.word	0x08005c75
 8005b38:	08005b9f 	.word	0x08005b9f
 8005b3c:	08005c2f 	.word	0x08005c2f
 8005b40:	08005af1 	.word	0x08005af1
 8005b44:	08005af1 	.word	0x08005af1
 8005b48:	08005c97 	.word	0x08005c97
 8005b4c:	08005af1 	.word	0x08005af1
 8005b50:	08005b9f 	.word	0x08005b9f
 8005b54:	08005af1 	.word	0x08005af1
 8005b58:	08005af1 	.word	0x08005af1
 8005b5c:	08005c37 	.word	0x08005c37
 8005b60:	6833      	ldr	r3, [r6, #0]
 8005b62:	1d1a      	adds	r2, r3, #4
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6032      	str	r2, [r6, #0]
 8005b68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b70:	2301      	movs	r3, #1
 8005b72:	e09d      	b.n	8005cb0 <_printf_i+0x1e8>
 8005b74:	6833      	ldr	r3, [r6, #0]
 8005b76:	6820      	ldr	r0, [r4, #0]
 8005b78:	1d19      	adds	r1, r3, #4
 8005b7a:	6031      	str	r1, [r6, #0]
 8005b7c:	0606      	lsls	r6, r0, #24
 8005b7e:	d501      	bpl.n	8005b84 <_printf_i+0xbc>
 8005b80:	681d      	ldr	r5, [r3, #0]
 8005b82:	e003      	b.n	8005b8c <_printf_i+0xc4>
 8005b84:	0645      	lsls	r5, r0, #25
 8005b86:	d5fb      	bpl.n	8005b80 <_printf_i+0xb8>
 8005b88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b8c:	2d00      	cmp	r5, #0
 8005b8e:	da03      	bge.n	8005b98 <_printf_i+0xd0>
 8005b90:	232d      	movs	r3, #45	@ 0x2d
 8005b92:	426d      	negs	r5, r5
 8005b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b98:	4859      	ldr	r0, [pc, #356]	@ (8005d00 <_printf_i+0x238>)
 8005b9a:	230a      	movs	r3, #10
 8005b9c:	e011      	b.n	8005bc2 <_printf_i+0xfa>
 8005b9e:	6821      	ldr	r1, [r4, #0]
 8005ba0:	6833      	ldr	r3, [r6, #0]
 8005ba2:	0608      	lsls	r0, r1, #24
 8005ba4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ba8:	d402      	bmi.n	8005bb0 <_printf_i+0xe8>
 8005baa:	0649      	lsls	r1, r1, #25
 8005bac:	bf48      	it	mi
 8005bae:	b2ad      	uxthmi	r5, r5
 8005bb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bb2:	4853      	ldr	r0, [pc, #332]	@ (8005d00 <_printf_i+0x238>)
 8005bb4:	6033      	str	r3, [r6, #0]
 8005bb6:	bf14      	ite	ne
 8005bb8:	230a      	movne	r3, #10
 8005bba:	2308      	moveq	r3, #8
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bc2:	6866      	ldr	r6, [r4, #4]
 8005bc4:	60a6      	str	r6, [r4, #8]
 8005bc6:	2e00      	cmp	r6, #0
 8005bc8:	bfa2      	ittt	ge
 8005bca:	6821      	ldrge	r1, [r4, #0]
 8005bcc:	f021 0104 	bicge.w	r1, r1, #4
 8005bd0:	6021      	strge	r1, [r4, #0]
 8005bd2:	b90d      	cbnz	r5, 8005bd8 <_printf_i+0x110>
 8005bd4:	2e00      	cmp	r6, #0
 8005bd6:	d04b      	beq.n	8005c70 <_printf_i+0x1a8>
 8005bd8:	4616      	mov	r6, r2
 8005bda:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bde:	fb03 5711 	mls	r7, r3, r1, r5
 8005be2:	5dc7      	ldrb	r7, [r0, r7]
 8005be4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005be8:	462f      	mov	r7, r5
 8005bea:	42bb      	cmp	r3, r7
 8005bec:	460d      	mov	r5, r1
 8005bee:	d9f4      	bls.n	8005bda <_printf_i+0x112>
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d10b      	bne.n	8005c0c <_printf_i+0x144>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	07df      	lsls	r7, r3, #31
 8005bf8:	d508      	bpl.n	8005c0c <_printf_i+0x144>
 8005bfa:	6923      	ldr	r3, [r4, #16]
 8005bfc:	6861      	ldr	r1, [r4, #4]
 8005bfe:	4299      	cmp	r1, r3
 8005c00:	bfde      	ittt	le
 8005c02:	2330      	movle	r3, #48	@ 0x30
 8005c04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c0c:	1b92      	subs	r2, r2, r6
 8005c0e:	6122      	str	r2, [r4, #16]
 8005c10:	f8cd a000 	str.w	sl, [sp]
 8005c14:	464b      	mov	r3, r9
 8005c16:	aa03      	add	r2, sp, #12
 8005c18:	4621      	mov	r1, r4
 8005c1a:	4640      	mov	r0, r8
 8005c1c:	f7ff fee6 	bl	80059ec <_printf_common>
 8005c20:	3001      	adds	r0, #1
 8005c22:	d14a      	bne.n	8005cba <_printf_i+0x1f2>
 8005c24:	f04f 30ff 	mov.w	r0, #4294967295
 8005c28:	b004      	add	sp, #16
 8005c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	f043 0320 	orr.w	r3, r3, #32
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	4833      	ldr	r0, [pc, #204]	@ (8005d04 <_printf_i+0x23c>)
 8005c38:	2778      	movs	r7, #120	@ 0x78
 8005c3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	6831      	ldr	r1, [r6, #0]
 8005c42:	061f      	lsls	r7, r3, #24
 8005c44:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c48:	d402      	bmi.n	8005c50 <_printf_i+0x188>
 8005c4a:	065f      	lsls	r7, r3, #25
 8005c4c:	bf48      	it	mi
 8005c4e:	b2ad      	uxthmi	r5, r5
 8005c50:	6031      	str	r1, [r6, #0]
 8005c52:	07d9      	lsls	r1, r3, #31
 8005c54:	bf44      	itt	mi
 8005c56:	f043 0320 	orrmi.w	r3, r3, #32
 8005c5a:	6023      	strmi	r3, [r4, #0]
 8005c5c:	b11d      	cbz	r5, 8005c66 <_printf_i+0x19e>
 8005c5e:	2310      	movs	r3, #16
 8005c60:	e7ac      	b.n	8005bbc <_printf_i+0xf4>
 8005c62:	4827      	ldr	r0, [pc, #156]	@ (8005d00 <_printf_i+0x238>)
 8005c64:	e7e9      	b.n	8005c3a <_printf_i+0x172>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	f023 0320 	bic.w	r3, r3, #32
 8005c6c:	6023      	str	r3, [r4, #0]
 8005c6e:	e7f6      	b.n	8005c5e <_printf_i+0x196>
 8005c70:	4616      	mov	r6, r2
 8005c72:	e7bd      	b.n	8005bf0 <_printf_i+0x128>
 8005c74:	6833      	ldr	r3, [r6, #0]
 8005c76:	6825      	ldr	r5, [r4, #0]
 8005c78:	6961      	ldr	r1, [r4, #20]
 8005c7a:	1d18      	adds	r0, r3, #4
 8005c7c:	6030      	str	r0, [r6, #0]
 8005c7e:	062e      	lsls	r6, r5, #24
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	d501      	bpl.n	8005c88 <_printf_i+0x1c0>
 8005c84:	6019      	str	r1, [r3, #0]
 8005c86:	e002      	b.n	8005c8e <_printf_i+0x1c6>
 8005c88:	0668      	lsls	r0, r5, #25
 8005c8a:	d5fb      	bpl.n	8005c84 <_printf_i+0x1bc>
 8005c8c:	8019      	strh	r1, [r3, #0]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6123      	str	r3, [r4, #16]
 8005c92:	4616      	mov	r6, r2
 8005c94:	e7bc      	b.n	8005c10 <_printf_i+0x148>
 8005c96:	6833      	ldr	r3, [r6, #0]
 8005c98:	1d1a      	adds	r2, r3, #4
 8005c9a:	6032      	str	r2, [r6, #0]
 8005c9c:	681e      	ldr	r6, [r3, #0]
 8005c9e:	6862      	ldr	r2, [r4, #4]
 8005ca0:	2100      	movs	r1, #0
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7fa fab4 	bl	8000210 <memchr>
 8005ca8:	b108      	cbz	r0, 8005cae <_printf_i+0x1e6>
 8005caa:	1b80      	subs	r0, r0, r6
 8005cac:	6060      	str	r0, [r4, #4]
 8005cae:	6863      	ldr	r3, [r4, #4]
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cb8:	e7aa      	b.n	8005c10 <_printf_i+0x148>
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	4649      	mov	r1, r9
 8005cc0:	4640      	mov	r0, r8
 8005cc2:	47d0      	blx	sl
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d0ad      	beq.n	8005c24 <_printf_i+0x15c>
 8005cc8:	6823      	ldr	r3, [r4, #0]
 8005cca:	079b      	lsls	r3, r3, #30
 8005ccc:	d413      	bmi.n	8005cf6 <_printf_i+0x22e>
 8005cce:	68e0      	ldr	r0, [r4, #12]
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	4298      	cmp	r0, r3
 8005cd4:	bfb8      	it	lt
 8005cd6:	4618      	movlt	r0, r3
 8005cd8:	e7a6      	b.n	8005c28 <_printf_i+0x160>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4632      	mov	r2, r6
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	47d0      	blx	sl
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d09d      	beq.n	8005c24 <_printf_i+0x15c>
 8005ce8:	3501      	adds	r5, #1
 8005cea:	68e3      	ldr	r3, [r4, #12]
 8005cec:	9903      	ldr	r1, [sp, #12]
 8005cee:	1a5b      	subs	r3, r3, r1
 8005cf0:	42ab      	cmp	r3, r5
 8005cf2:	dcf2      	bgt.n	8005cda <_printf_i+0x212>
 8005cf4:	e7eb      	b.n	8005cce <_printf_i+0x206>
 8005cf6:	2500      	movs	r5, #0
 8005cf8:	f104 0619 	add.w	r6, r4, #25
 8005cfc:	e7f5      	b.n	8005cea <_printf_i+0x222>
 8005cfe:	bf00      	nop
 8005d00:	080090be 	.word	0x080090be
 8005d04:	080090cf 	.word	0x080090cf

08005d08 <std>:
 8005d08:	2300      	movs	r3, #0
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d16:	6083      	str	r3, [r0, #8]
 8005d18:	8181      	strh	r1, [r0, #12]
 8005d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d1c:	81c2      	strh	r2, [r0, #14]
 8005d1e:	6183      	str	r3, [r0, #24]
 8005d20:	4619      	mov	r1, r3
 8005d22:	2208      	movs	r2, #8
 8005d24:	305c      	adds	r0, #92	@ 0x5c
 8005d26:	f000 f930 	bl	8005f8a <memset>
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <std+0x58>)
 8005d2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <std+0x5c>)
 8005d30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <std+0x60>)
 8005d34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <std+0x64>)
 8005d38:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <std+0x68>)
 8005d3c:	6224      	str	r4, [r4, #32]
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	d006      	beq.n	8005d50 <std+0x48>
 8005d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d46:	4294      	cmp	r4, r2
 8005d48:	d002      	beq.n	8005d50 <std+0x48>
 8005d4a:	33d0      	adds	r3, #208	@ 0xd0
 8005d4c:	429c      	cmp	r4, r3
 8005d4e:	d105      	bne.n	8005d5c <std+0x54>
 8005d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d58:	f000 b994 	b.w	8006084 <__retarget_lock_init_recursive>
 8005d5c:	bd10      	pop	{r4, pc}
 8005d5e:	bf00      	nop
 8005d60:	08005f05 	.word	0x08005f05
 8005d64:	08005f27 	.word	0x08005f27
 8005d68:	08005f5f 	.word	0x08005f5f
 8005d6c:	08005f83 	.word	0x08005f83
 8005d70:	200003b4 	.word	0x200003b4

08005d74 <stdio_exit_handler>:
 8005d74:	4a02      	ldr	r2, [pc, #8]	@ (8005d80 <stdio_exit_handler+0xc>)
 8005d76:	4903      	ldr	r1, [pc, #12]	@ (8005d84 <stdio_exit_handler+0x10>)
 8005d78:	4803      	ldr	r0, [pc, #12]	@ (8005d88 <stdio_exit_handler+0x14>)
 8005d7a:	f000 b869 	b.w	8005e50 <_fwalk_sglue>
 8005d7e:	bf00      	nop
 8005d80:	20000020 	.word	0x20000020
 8005d84:	080079e5 	.word	0x080079e5
 8005d88:	20000030 	.word	0x20000030

08005d8c <cleanup_stdio>:
 8005d8c:	6841      	ldr	r1, [r0, #4]
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <cleanup_stdio+0x34>)
 8005d90:	4299      	cmp	r1, r3
 8005d92:	b510      	push	{r4, lr}
 8005d94:	4604      	mov	r4, r0
 8005d96:	d001      	beq.n	8005d9c <cleanup_stdio+0x10>
 8005d98:	f001 fe24 	bl	80079e4 <_fflush_r>
 8005d9c:	68a1      	ldr	r1, [r4, #8]
 8005d9e:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <cleanup_stdio+0x38>)
 8005da0:	4299      	cmp	r1, r3
 8005da2:	d002      	beq.n	8005daa <cleanup_stdio+0x1e>
 8005da4:	4620      	mov	r0, r4
 8005da6:	f001 fe1d 	bl	80079e4 <_fflush_r>
 8005daa:	68e1      	ldr	r1, [r4, #12]
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <cleanup_stdio+0x3c>)
 8005dae:	4299      	cmp	r1, r3
 8005db0:	d004      	beq.n	8005dbc <cleanup_stdio+0x30>
 8005db2:	4620      	mov	r0, r4
 8005db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db8:	f001 be14 	b.w	80079e4 <_fflush_r>
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	bf00      	nop
 8005dc0:	200003b4 	.word	0x200003b4
 8005dc4:	2000041c 	.word	0x2000041c
 8005dc8:	20000484 	.word	0x20000484

08005dcc <global_stdio_init.part.0>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <global_stdio_init.part.0+0x30>)
 8005dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8005e00 <global_stdio_init.part.0+0x34>)
 8005dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e04 <global_stdio_init.part.0+0x38>)
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2104      	movs	r1, #4
 8005ddc:	f7ff ff94 	bl	8005d08 <std>
 8005de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005de4:	2201      	movs	r2, #1
 8005de6:	2109      	movs	r1, #9
 8005de8:	f7ff ff8e 	bl	8005d08 <std>
 8005dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005df0:	2202      	movs	r2, #2
 8005df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df6:	2112      	movs	r1, #18
 8005df8:	f7ff bf86 	b.w	8005d08 <std>
 8005dfc:	200004ec 	.word	0x200004ec
 8005e00:	200003b4 	.word	0x200003b4
 8005e04:	08005d75 	.word	0x08005d75

08005e08 <__sfp_lock_acquire>:
 8005e08:	4801      	ldr	r0, [pc, #4]	@ (8005e10 <__sfp_lock_acquire+0x8>)
 8005e0a:	f000 b93c 	b.w	8006086 <__retarget_lock_acquire_recursive>
 8005e0e:	bf00      	nop
 8005e10:	200004f5 	.word	0x200004f5

08005e14 <__sfp_lock_release>:
 8005e14:	4801      	ldr	r0, [pc, #4]	@ (8005e1c <__sfp_lock_release+0x8>)
 8005e16:	f000 b937 	b.w	8006088 <__retarget_lock_release_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	200004f5 	.word	0x200004f5

08005e20 <__sinit>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	4604      	mov	r4, r0
 8005e24:	f7ff fff0 	bl	8005e08 <__sfp_lock_acquire>
 8005e28:	6a23      	ldr	r3, [r4, #32]
 8005e2a:	b11b      	cbz	r3, 8005e34 <__sinit+0x14>
 8005e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e30:	f7ff bff0 	b.w	8005e14 <__sfp_lock_release>
 8005e34:	4b04      	ldr	r3, [pc, #16]	@ (8005e48 <__sinit+0x28>)
 8005e36:	6223      	str	r3, [r4, #32]
 8005e38:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <__sinit+0x2c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f5      	bne.n	8005e2c <__sinit+0xc>
 8005e40:	f7ff ffc4 	bl	8005dcc <global_stdio_init.part.0>
 8005e44:	e7f2      	b.n	8005e2c <__sinit+0xc>
 8005e46:	bf00      	nop
 8005e48:	08005d8d 	.word	0x08005d8d
 8005e4c:	200004ec 	.word	0x200004ec

08005e50 <_fwalk_sglue>:
 8005e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e54:	4607      	mov	r7, r0
 8005e56:	4688      	mov	r8, r1
 8005e58:	4614      	mov	r4, r2
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e60:	f1b9 0901 	subs.w	r9, r9, #1
 8005e64:	d505      	bpl.n	8005e72 <_fwalk_sglue+0x22>
 8005e66:	6824      	ldr	r4, [r4, #0]
 8005e68:	2c00      	cmp	r4, #0
 8005e6a:	d1f7      	bne.n	8005e5c <_fwalk_sglue+0xc>
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d907      	bls.n	8005e88 <_fwalk_sglue+0x38>
 8005e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	d003      	beq.n	8005e88 <_fwalk_sglue+0x38>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4638      	mov	r0, r7
 8005e84:	47c0      	blx	r8
 8005e86:	4306      	orrs	r6, r0
 8005e88:	3568      	adds	r5, #104	@ 0x68
 8005e8a:	e7e9      	b.n	8005e60 <_fwalk_sglue+0x10>

08005e8c <putchar>:
 8005e8c:	4b02      	ldr	r3, [pc, #8]	@ (8005e98 <putchar+0xc>)
 8005e8e:	4601      	mov	r1, r0
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	6882      	ldr	r2, [r0, #8]
 8005e94:	f001 bdce 	b.w	8007a34 <_putc_r>
 8005e98:	2000002c 	.word	0x2000002c

08005e9c <sniprintf>:
 8005e9c:	b40c      	push	{r2, r3}
 8005e9e:	b530      	push	{r4, r5, lr}
 8005ea0:	4b17      	ldr	r3, [pc, #92]	@ (8005f00 <sniprintf+0x64>)
 8005ea2:	1e0c      	subs	r4, r1, #0
 8005ea4:	681d      	ldr	r5, [r3, #0]
 8005ea6:	b09d      	sub	sp, #116	@ 0x74
 8005ea8:	da08      	bge.n	8005ebc <sniprintf+0x20>
 8005eaa:	238b      	movs	r3, #139	@ 0x8b
 8005eac:	602b      	str	r3, [r5, #0]
 8005eae:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb2:	b01d      	add	sp, #116	@ 0x74
 8005eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eb8:	b002      	add	sp, #8
 8005eba:	4770      	bx	lr
 8005ebc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ec4:	bf14      	ite	ne
 8005ec6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005eca:	4623      	moveq	r3, r4
 8005ecc:	9304      	str	r3, [sp, #16]
 8005ece:	9307      	str	r3, [sp, #28]
 8005ed0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ed4:	9002      	str	r0, [sp, #8]
 8005ed6:	9006      	str	r0, [sp, #24]
 8005ed8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005edc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ede:	ab21      	add	r3, sp, #132	@ 0x84
 8005ee0:	a902      	add	r1, sp, #8
 8005ee2:	4628      	mov	r0, r5
 8005ee4:	9301      	str	r3, [sp, #4]
 8005ee6:	f001 fbfd 	bl	80076e4 <_svfiprintf_r>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	bfbc      	itt	lt
 8005eee:	238b      	movlt	r3, #139	@ 0x8b
 8005ef0:	602b      	strlt	r3, [r5, #0]
 8005ef2:	2c00      	cmp	r4, #0
 8005ef4:	d0dd      	beq.n	8005eb2 <sniprintf+0x16>
 8005ef6:	9b02      	ldr	r3, [sp, #8]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	e7d9      	b.n	8005eb2 <sniprintf+0x16>
 8005efe:	bf00      	nop
 8005f00:	2000002c 	.word	0x2000002c

08005f04 <__sread>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	460c      	mov	r4, r1
 8005f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0c:	f000 f86c 	bl	8005fe8 <_read_r>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	bfab      	itete	ge
 8005f14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f16:	89a3      	ldrhlt	r3, [r4, #12]
 8005f18:	181b      	addge	r3, r3, r0
 8005f1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f1e:	bfac      	ite	ge
 8005f20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f22:	81a3      	strhlt	r3, [r4, #12]
 8005f24:	bd10      	pop	{r4, pc}

08005f26 <__swrite>:
 8005f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2a:	461f      	mov	r7, r3
 8005f2c:	898b      	ldrh	r3, [r1, #12]
 8005f2e:	05db      	lsls	r3, r3, #23
 8005f30:	4605      	mov	r5, r0
 8005f32:	460c      	mov	r4, r1
 8005f34:	4616      	mov	r6, r2
 8005f36:	d505      	bpl.n	8005f44 <__swrite+0x1e>
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f000 f840 	bl	8005fc4 <_lseek_r>
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f4a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f4e:	81a3      	strh	r3, [r4, #12]
 8005f50:	4632      	mov	r2, r6
 8005f52:	463b      	mov	r3, r7
 8005f54:	4628      	mov	r0, r5
 8005f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5a:	f000 b857 	b.w	800600c <_write_r>

08005f5e <__sseek>:
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	460c      	mov	r4, r1
 8005f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f66:	f000 f82d 	bl	8005fc4 <_lseek_r>
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	bf15      	itete	ne
 8005f70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f7a:	81a3      	strheq	r3, [r4, #12]
 8005f7c:	bf18      	it	ne
 8005f7e:	81a3      	strhne	r3, [r4, #12]
 8005f80:	bd10      	pop	{r4, pc}

08005f82 <__sclose>:
 8005f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f86:	f000 b80d 	b.w	8005fa4 <_close_r>

08005f8a <memset>:
 8005f8a:	4402      	add	r2, r0
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d100      	bne.n	8005f94 <memset+0xa>
 8005f92:	4770      	bx	lr
 8005f94:	f803 1b01 	strb.w	r1, [r3], #1
 8005f98:	e7f9      	b.n	8005f8e <memset+0x4>
	...

08005f9c <_localeconv_r>:
 8005f9c:	4800      	ldr	r0, [pc, #0]	@ (8005fa0 <_localeconv_r+0x4>)
 8005f9e:	4770      	bx	lr
 8005fa0:	2000016c 	.word	0x2000016c

08005fa4 <_close_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d06      	ldr	r5, [pc, #24]	@ (8005fc0 <_close_r+0x1c>)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	4604      	mov	r4, r0
 8005fac:	4608      	mov	r0, r1
 8005fae:	602b      	str	r3, [r5, #0]
 8005fb0:	f7fb fe88 	bl	8001cc4 <_close>
 8005fb4:	1c43      	adds	r3, r0, #1
 8005fb6:	d102      	bne.n	8005fbe <_close_r+0x1a>
 8005fb8:	682b      	ldr	r3, [r5, #0]
 8005fba:	b103      	cbz	r3, 8005fbe <_close_r+0x1a>
 8005fbc:	6023      	str	r3, [r4, #0]
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	200004f0 	.word	0x200004f0

08005fc4 <_lseek_r>:
 8005fc4:	b538      	push	{r3, r4, r5, lr}
 8005fc6:	4d07      	ldr	r5, [pc, #28]	@ (8005fe4 <_lseek_r+0x20>)
 8005fc8:	4604      	mov	r4, r0
 8005fca:	4608      	mov	r0, r1
 8005fcc:	4611      	mov	r1, r2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	602a      	str	r2, [r5, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f7fb fe9d 	bl	8001d12 <_lseek>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	d102      	bne.n	8005fe2 <_lseek_r+0x1e>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	b103      	cbz	r3, 8005fe2 <_lseek_r+0x1e>
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	bd38      	pop	{r3, r4, r5, pc}
 8005fe4:	200004f0 	.word	0x200004f0

08005fe8 <_read_r>:
 8005fe8:	b538      	push	{r3, r4, r5, lr}
 8005fea:	4d07      	ldr	r5, [pc, #28]	@ (8006008 <_read_r+0x20>)
 8005fec:	4604      	mov	r4, r0
 8005fee:	4608      	mov	r0, r1
 8005ff0:	4611      	mov	r1, r2
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	602a      	str	r2, [r5, #0]
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	f7fb fe2b 	bl	8001c52 <_read>
 8005ffc:	1c43      	adds	r3, r0, #1
 8005ffe:	d102      	bne.n	8006006 <_read_r+0x1e>
 8006000:	682b      	ldr	r3, [r5, #0]
 8006002:	b103      	cbz	r3, 8006006 <_read_r+0x1e>
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	bd38      	pop	{r3, r4, r5, pc}
 8006008:	200004f0 	.word	0x200004f0

0800600c <_write_r>:
 800600c:	b538      	push	{r3, r4, r5, lr}
 800600e:	4d07      	ldr	r5, [pc, #28]	@ (800602c <_write_r+0x20>)
 8006010:	4604      	mov	r4, r0
 8006012:	4608      	mov	r0, r1
 8006014:	4611      	mov	r1, r2
 8006016:	2200      	movs	r2, #0
 8006018:	602a      	str	r2, [r5, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	f7fb fe36 	bl	8001c8c <_write>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	d102      	bne.n	800602a <_write_r+0x1e>
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	b103      	cbz	r3, 800602a <_write_r+0x1e>
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	bd38      	pop	{r3, r4, r5, pc}
 800602c:	200004f0 	.word	0x200004f0

08006030 <__errno>:
 8006030:	4b01      	ldr	r3, [pc, #4]	@ (8006038 <__errno+0x8>)
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	2000002c 	.word	0x2000002c

0800603c <__libc_init_array>:
 800603c:	b570      	push	{r4, r5, r6, lr}
 800603e:	4d0d      	ldr	r5, [pc, #52]	@ (8006074 <__libc_init_array+0x38>)
 8006040:	4c0d      	ldr	r4, [pc, #52]	@ (8006078 <__libc_init_array+0x3c>)
 8006042:	1b64      	subs	r4, r4, r5
 8006044:	10a4      	asrs	r4, r4, #2
 8006046:	2600      	movs	r6, #0
 8006048:	42a6      	cmp	r6, r4
 800604a:	d109      	bne.n	8006060 <__libc_init_array+0x24>
 800604c:	4d0b      	ldr	r5, [pc, #44]	@ (800607c <__libc_init_array+0x40>)
 800604e:	4c0c      	ldr	r4, [pc, #48]	@ (8006080 <__libc_init_array+0x44>)
 8006050:	f002 fff8 	bl	8009044 <_init>
 8006054:	1b64      	subs	r4, r4, r5
 8006056:	10a4      	asrs	r4, r4, #2
 8006058:	2600      	movs	r6, #0
 800605a:	42a6      	cmp	r6, r4
 800605c:	d105      	bne.n	800606a <__libc_init_array+0x2e>
 800605e:	bd70      	pop	{r4, r5, r6, pc}
 8006060:	f855 3b04 	ldr.w	r3, [r5], #4
 8006064:	4798      	blx	r3
 8006066:	3601      	adds	r6, #1
 8006068:	e7ee      	b.n	8006048 <__libc_init_array+0xc>
 800606a:	f855 3b04 	ldr.w	r3, [r5], #4
 800606e:	4798      	blx	r3
 8006070:	3601      	adds	r6, #1
 8006072:	e7f2      	b.n	800605a <__libc_init_array+0x1e>
 8006074:	08009458 	.word	0x08009458
 8006078:	08009458 	.word	0x08009458
 800607c:	08009458 	.word	0x08009458
 8006080:	0800945c 	.word	0x0800945c

08006084 <__retarget_lock_init_recursive>:
 8006084:	4770      	bx	lr

08006086 <__retarget_lock_acquire_recursive>:
 8006086:	4770      	bx	lr

08006088 <__retarget_lock_release_recursive>:
 8006088:	4770      	bx	lr

0800608a <quorem>:
 800608a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800608e:	6903      	ldr	r3, [r0, #16]
 8006090:	690c      	ldr	r4, [r1, #16]
 8006092:	42a3      	cmp	r3, r4
 8006094:	4607      	mov	r7, r0
 8006096:	db7e      	blt.n	8006196 <quorem+0x10c>
 8006098:	3c01      	subs	r4, #1
 800609a:	f101 0814 	add.w	r8, r1, #20
 800609e:	00a3      	lsls	r3, r4, #2
 80060a0:	f100 0514 	add.w	r5, r0, #20
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060aa:	9301      	str	r3, [sp, #4]
 80060ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060b4:	3301      	adds	r3, #1
 80060b6:	429a      	cmp	r2, r3
 80060b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80060c0:	d32e      	bcc.n	8006120 <quorem+0x96>
 80060c2:	f04f 0a00 	mov.w	sl, #0
 80060c6:	46c4      	mov	ip, r8
 80060c8:	46ae      	mov	lr, r5
 80060ca:	46d3      	mov	fp, sl
 80060cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060d0:	b298      	uxth	r0, r3
 80060d2:	fb06 a000 	mla	r0, r6, r0, sl
 80060d6:	0c02      	lsrs	r2, r0, #16
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	fb06 2303 	mla	r3, r6, r3, r2
 80060de:	f8de 2000 	ldr.w	r2, [lr]
 80060e2:	b280      	uxth	r0, r0
 80060e4:	b292      	uxth	r2, r2
 80060e6:	1a12      	subs	r2, r2, r0
 80060e8:	445a      	add	r2, fp
 80060ea:	f8de 0000 	ldr.w	r0, [lr]
 80060ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80060f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80060fc:	b292      	uxth	r2, r2
 80060fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006102:	45e1      	cmp	r9, ip
 8006104:	f84e 2b04 	str.w	r2, [lr], #4
 8006108:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800610c:	d2de      	bcs.n	80060cc <quorem+0x42>
 800610e:	9b00      	ldr	r3, [sp, #0]
 8006110:	58eb      	ldr	r3, [r5, r3]
 8006112:	b92b      	cbnz	r3, 8006120 <quorem+0x96>
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	3b04      	subs	r3, #4
 8006118:	429d      	cmp	r5, r3
 800611a:	461a      	mov	r2, r3
 800611c:	d32f      	bcc.n	800617e <quorem+0xf4>
 800611e:	613c      	str	r4, [r7, #16]
 8006120:	4638      	mov	r0, r7
 8006122:	f001 f97b 	bl	800741c <__mcmp>
 8006126:	2800      	cmp	r0, #0
 8006128:	db25      	blt.n	8006176 <quorem+0xec>
 800612a:	4629      	mov	r1, r5
 800612c:	2000      	movs	r0, #0
 800612e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006132:	f8d1 c000 	ldr.w	ip, [r1]
 8006136:	fa1f fe82 	uxth.w	lr, r2
 800613a:	fa1f f38c 	uxth.w	r3, ip
 800613e:	eba3 030e 	sub.w	r3, r3, lr
 8006142:	4403      	add	r3, r0
 8006144:	0c12      	lsrs	r2, r2, #16
 8006146:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800614a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800614e:	b29b      	uxth	r3, r3
 8006150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006154:	45c1      	cmp	r9, r8
 8006156:	f841 3b04 	str.w	r3, [r1], #4
 800615a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800615e:	d2e6      	bcs.n	800612e <quorem+0xa4>
 8006160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006168:	b922      	cbnz	r2, 8006174 <quorem+0xea>
 800616a:	3b04      	subs	r3, #4
 800616c:	429d      	cmp	r5, r3
 800616e:	461a      	mov	r2, r3
 8006170:	d30b      	bcc.n	800618a <quorem+0x100>
 8006172:	613c      	str	r4, [r7, #16]
 8006174:	3601      	adds	r6, #1
 8006176:	4630      	mov	r0, r6
 8006178:	b003      	add	sp, #12
 800617a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	3b04      	subs	r3, #4
 8006182:	2a00      	cmp	r2, #0
 8006184:	d1cb      	bne.n	800611e <quorem+0x94>
 8006186:	3c01      	subs	r4, #1
 8006188:	e7c6      	b.n	8006118 <quorem+0x8e>
 800618a:	6812      	ldr	r2, [r2, #0]
 800618c:	3b04      	subs	r3, #4
 800618e:	2a00      	cmp	r2, #0
 8006190:	d1ef      	bne.n	8006172 <quorem+0xe8>
 8006192:	3c01      	subs	r4, #1
 8006194:	e7ea      	b.n	800616c <quorem+0xe2>
 8006196:	2000      	movs	r0, #0
 8006198:	e7ee      	b.n	8006178 <quorem+0xee>
 800619a:	0000      	movs	r0, r0
 800619c:	0000      	movs	r0, r0
	...

080061a0 <_dtoa_r>:
 80061a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061a4:	69c7      	ldr	r7, [r0, #28]
 80061a6:	b099      	sub	sp, #100	@ 0x64
 80061a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80061ac:	ec55 4b10 	vmov	r4, r5, d0
 80061b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80061b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80061b4:	4683      	mov	fp, r0
 80061b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80061b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061ba:	b97f      	cbnz	r7, 80061dc <_dtoa_r+0x3c>
 80061bc:	2010      	movs	r0, #16
 80061be:	f000 fdfd 	bl	8006dbc <malloc>
 80061c2:	4602      	mov	r2, r0
 80061c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80061c8:	b920      	cbnz	r0, 80061d4 <_dtoa_r+0x34>
 80061ca:	4ba7      	ldr	r3, [pc, #668]	@ (8006468 <_dtoa_r+0x2c8>)
 80061cc:	21ef      	movs	r1, #239	@ 0xef
 80061ce:	48a7      	ldr	r0, [pc, #668]	@ (800646c <_dtoa_r+0x2cc>)
 80061d0:	f001 fd30 	bl	8007c34 <__assert_func>
 80061d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061d8:	6007      	str	r7, [r0, #0]
 80061da:	60c7      	str	r7, [r0, #12]
 80061dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	b159      	cbz	r1, 80061fc <_dtoa_r+0x5c>
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	604a      	str	r2, [r1, #4]
 80061e8:	2301      	movs	r3, #1
 80061ea:	4093      	lsls	r3, r2
 80061ec:	608b      	str	r3, [r1, #8]
 80061ee:	4658      	mov	r0, fp
 80061f0:	f000 feda 	bl	8006fa8 <_Bfree>
 80061f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	1e2b      	subs	r3, r5, #0
 80061fe:	bfb9      	ittee	lt
 8006200:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006204:	9303      	strlt	r3, [sp, #12]
 8006206:	2300      	movge	r3, #0
 8006208:	6033      	strge	r3, [r6, #0]
 800620a:	9f03      	ldr	r7, [sp, #12]
 800620c:	4b98      	ldr	r3, [pc, #608]	@ (8006470 <_dtoa_r+0x2d0>)
 800620e:	bfbc      	itt	lt
 8006210:	2201      	movlt	r2, #1
 8006212:	6032      	strlt	r2, [r6, #0]
 8006214:	43bb      	bics	r3, r7
 8006216:	d112      	bne.n	800623e <_dtoa_r+0x9e>
 8006218:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800621a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800621e:	6013      	str	r3, [r2, #0]
 8006220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006224:	4323      	orrs	r3, r4
 8006226:	f000 854d 	beq.w	8006cc4 <_dtoa_r+0xb24>
 800622a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800622c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006484 <_dtoa_r+0x2e4>
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 854f 	beq.w	8006cd4 <_dtoa_r+0xb34>
 8006236:	f10a 0303 	add.w	r3, sl, #3
 800623a:	f000 bd49 	b.w	8006cd0 <_dtoa_r+0xb30>
 800623e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	ec51 0b17 	vmov	r0, r1, d7
 8006248:	2300      	movs	r3, #0
 800624a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800624e:	f7fa fc5b 	bl	8000b08 <__aeabi_dcmpeq>
 8006252:	4680      	mov	r8, r0
 8006254:	b158      	cbz	r0, 800626e <_dtoa_r+0xce>
 8006256:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006258:	2301      	movs	r3, #1
 800625a:	6013      	str	r3, [r2, #0]
 800625c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800625e:	b113      	cbz	r3, 8006266 <_dtoa_r+0xc6>
 8006260:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006262:	4b84      	ldr	r3, [pc, #528]	@ (8006474 <_dtoa_r+0x2d4>)
 8006264:	6013      	str	r3, [r2, #0]
 8006266:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006488 <_dtoa_r+0x2e8>
 800626a:	f000 bd33 	b.w	8006cd4 <_dtoa_r+0xb34>
 800626e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006272:	aa16      	add	r2, sp, #88	@ 0x58
 8006274:	a917      	add	r1, sp, #92	@ 0x5c
 8006276:	4658      	mov	r0, fp
 8006278:	f001 f980 	bl	800757c <__d2b>
 800627c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006280:	4681      	mov	r9, r0
 8006282:	2e00      	cmp	r6, #0
 8006284:	d077      	beq.n	8006376 <_dtoa_r+0x1d6>
 8006286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006288:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800628c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006294:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006298:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800629c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062a0:	4619      	mov	r1, r3
 80062a2:	2200      	movs	r2, #0
 80062a4:	4b74      	ldr	r3, [pc, #464]	@ (8006478 <_dtoa_r+0x2d8>)
 80062a6:	f7fa f80f 	bl	80002c8 <__aeabi_dsub>
 80062aa:	a369      	add	r3, pc, #420	@ (adr r3, 8006450 <_dtoa_r+0x2b0>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	f7fa f9c2 	bl	8000638 <__aeabi_dmul>
 80062b4:	a368      	add	r3, pc, #416	@ (adr r3, 8006458 <_dtoa_r+0x2b8>)
 80062b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ba:	f7fa f807 	bl	80002cc <__adddf3>
 80062be:	4604      	mov	r4, r0
 80062c0:	4630      	mov	r0, r6
 80062c2:	460d      	mov	r5, r1
 80062c4:	f7fa f94e 	bl	8000564 <__aeabi_i2d>
 80062c8:	a365      	add	r3, pc, #404	@ (adr r3, 8006460 <_dtoa_r+0x2c0>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f7fa f9b3 	bl	8000638 <__aeabi_dmul>
 80062d2:	4602      	mov	r2, r0
 80062d4:	460b      	mov	r3, r1
 80062d6:	4620      	mov	r0, r4
 80062d8:	4629      	mov	r1, r5
 80062da:	f7f9 fff7 	bl	80002cc <__adddf3>
 80062de:	4604      	mov	r4, r0
 80062e0:	460d      	mov	r5, r1
 80062e2:	f7fa fc59 	bl	8000b98 <__aeabi_d2iz>
 80062e6:	2200      	movs	r2, #0
 80062e8:	4607      	mov	r7, r0
 80062ea:	2300      	movs	r3, #0
 80062ec:	4620      	mov	r0, r4
 80062ee:	4629      	mov	r1, r5
 80062f0:	f7fa fc14 	bl	8000b1c <__aeabi_dcmplt>
 80062f4:	b140      	cbz	r0, 8006308 <_dtoa_r+0x168>
 80062f6:	4638      	mov	r0, r7
 80062f8:	f7fa f934 	bl	8000564 <__aeabi_i2d>
 80062fc:	4622      	mov	r2, r4
 80062fe:	462b      	mov	r3, r5
 8006300:	f7fa fc02 	bl	8000b08 <__aeabi_dcmpeq>
 8006304:	b900      	cbnz	r0, 8006308 <_dtoa_r+0x168>
 8006306:	3f01      	subs	r7, #1
 8006308:	2f16      	cmp	r7, #22
 800630a:	d851      	bhi.n	80063b0 <_dtoa_r+0x210>
 800630c:	4b5b      	ldr	r3, [pc, #364]	@ (800647c <_dtoa_r+0x2dc>)
 800630e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800631a:	f7fa fbff 	bl	8000b1c <__aeabi_dcmplt>
 800631e:	2800      	cmp	r0, #0
 8006320:	d048      	beq.n	80063b4 <_dtoa_r+0x214>
 8006322:	3f01      	subs	r7, #1
 8006324:	2300      	movs	r3, #0
 8006326:	9312      	str	r3, [sp, #72]	@ 0x48
 8006328:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800632a:	1b9b      	subs	r3, r3, r6
 800632c:	1e5a      	subs	r2, r3, #1
 800632e:	bf44      	itt	mi
 8006330:	f1c3 0801 	rsbmi	r8, r3, #1
 8006334:	2300      	movmi	r3, #0
 8006336:	9208      	str	r2, [sp, #32]
 8006338:	bf54      	ite	pl
 800633a:	f04f 0800 	movpl.w	r8, #0
 800633e:	9308      	strmi	r3, [sp, #32]
 8006340:	2f00      	cmp	r7, #0
 8006342:	db39      	blt.n	80063b8 <_dtoa_r+0x218>
 8006344:	9b08      	ldr	r3, [sp, #32]
 8006346:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006348:	443b      	add	r3, r7
 800634a:	9308      	str	r3, [sp, #32]
 800634c:	2300      	movs	r3, #0
 800634e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006352:	2b09      	cmp	r3, #9
 8006354:	d864      	bhi.n	8006420 <_dtoa_r+0x280>
 8006356:	2b05      	cmp	r3, #5
 8006358:	bfc4      	itt	gt
 800635a:	3b04      	subgt	r3, #4
 800635c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800635e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006360:	f1a3 0302 	sub.w	r3, r3, #2
 8006364:	bfcc      	ite	gt
 8006366:	2400      	movgt	r4, #0
 8006368:	2401      	movle	r4, #1
 800636a:	2b03      	cmp	r3, #3
 800636c:	d863      	bhi.n	8006436 <_dtoa_r+0x296>
 800636e:	e8df f003 	tbb	[pc, r3]
 8006372:	372a      	.short	0x372a
 8006374:	5535      	.short	0x5535
 8006376:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800637a:	441e      	add	r6, r3
 800637c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006380:	2b20      	cmp	r3, #32
 8006382:	bfc1      	itttt	gt
 8006384:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006388:	409f      	lslgt	r7, r3
 800638a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800638e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006392:	bfd6      	itet	le
 8006394:	f1c3 0320 	rsble	r3, r3, #32
 8006398:	ea47 0003 	orrgt.w	r0, r7, r3
 800639c:	fa04 f003 	lslle.w	r0, r4, r3
 80063a0:	f7fa f8d0 	bl	8000544 <__aeabi_ui2d>
 80063a4:	2201      	movs	r2, #1
 80063a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063aa:	3e01      	subs	r6, #1
 80063ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80063ae:	e777      	b.n	80062a0 <_dtoa_r+0x100>
 80063b0:	2301      	movs	r3, #1
 80063b2:	e7b8      	b.n	8006326 <_dtoa_r+0x186>
 80063b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80063b6:	e7b7      	b.n	8006328 <_dtoa_r+0x188>
 80063b8:	427b      	negs	r3, r7
 80063ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80063bc:	2300      	movs	r3, #0
 80063be:	eba8 0807 	sub.w	r8, r8, r7
 80063c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80063c4:	e7c4      	b.n	8006350 <_dtoa_r+0x1b0>
 80063c6:	2300      	movs	r3, #0
 80063c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	dc35      	bgt.n	800643c <_dtoa_r+0x29c>
 80063d0:	2301      	movs	r3, #1
 80063d2:	9300      	str	r3, [sp, #0]
 80063d4:	9307      	str	r3, [sp, #28]
 80063d6:	461a      	mov	r2, r3
 80063d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80063da:	e00b      	b.n	80063f4 <_dtoa_r+0x254>
 80063dc:	2301      	movs	r3, #1
 80063de:	e7f3      	b.n	80063c8 <_dtoa_r+0x228>
 80063e0:	2300      	movs	r3, #0
 80063e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063e6:	18fb      	adds	r3, r7, r3
 80063e8:	9300      	str	r3, [sp, #0]
 80063ea:	3301      	adds	r3, #1
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	9307      	str	r3, [sp, #28]
 80063f0:	bfb8      	it	lt
 80063f2:	2301      	movlt	r3, #1
 80063f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80063f8:	2100      	movs	r1, #0
 80063fa:	2204      	movs	r2, #4
 80063fc:	f102 0514 	add.w	r5, r2, #20
 8006400:	429d      	cmp	r5, r3
 8006402:	d91f      	bls.n	8006444 <_dtoa_r+0x2a4>
 8006404:	6041      	str	r1, [r0, #4]
 8006406:	4658      	mov	r0, fp
 8006408:	f000 fd8e 	bl	8006f28 <_Balloc>
 800640c:	4682      	mov	sl, r0
 800640e:	2800      	cmp	r0, #0
 8006410:	d13c      	bne.n	800648c <_dtoa_r+0x2ec>
 8006412:	4b1b      	ldr	r3, [pc, #108]	@ (8006480 <_dtoa_r+0x2e0>)
 8006414:	4602      	mov	r2, r0
 8006416:	f240 11af 	movw	r1, #431	@ 0x1af
 800641a:	e6d8      	b.n	80061ce <_dtoa_r+0x2e>
 800641c:	2301      	movs	r3, #1
 800641e:	e7e0      	b.n	80063e2 <_dtoa_r+0x242>
 8006420:	2401      	movs	r4, #1
 8006422:	2300      	movs	r3, #0
 8006424:	9309      	str	r3, [sp, #36]	@ 0x24
 8006426:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006428:	f04f 33ff 	mov.w	r3, #4294967295
 800642c:	9300      	str	r3, [sp, #0]
 800642e:	9307      	str	r3, [sp, #28]
 8006430:	2200      	movs	r2, #0
 8006432:	2312      	movs	r3, #18
 8006434:	e7d0      	b.n	80063d8 <_dtoa_r+0x238>
 8006436:	2301      	movs	r3, #1
 8006438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800643a:	e7f5      	b.n	8006428 <_dtoa_r+0x288>
 800643c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800643e:	9300      	str	r3, [sp, #0]
 8006440:	9307      	str	r3, [sp, #28]
 8006442:	e7d7      	b.n	80063f4 <_dtoa_r+0x254>
 8006444:	3101      	adds	r1, #1
 8006446:	0052      	lsls	r2, r2, #1
 8006448:	e7d8      	b.n	80063fc <_dtoa_r+0x25c>
 800644a:	bf00      	nop
 800644c:	f3af 8000 	nop.w
 8006450:	636f4361 	.word	0x636f4361
 8006454:	3fd287a7 	.word	0x3fd287a7
 8006458:	8b60c8b3 	.word	0x8b60c8b3
 800645c:	3fc68a28 	.word	0x3fc68a28
 8006460:	509f79fb 	.word	0x509f79fb
 8006464:	3fd34413 	.word	0x3fd34413
 8006468:	080090ed 	.word	0x080090ed
 800646c:	08009104 	.word	0x08009104
 8006470:	7ff00000 	.word	0x7ff00000
 8006474:	080090bd 	.word	0x080090bd
 8006478:	3ff80000 	.word	0x3ff80000
 800647c:	08009200 	.word	0x08009200
 8006480:	0800915c 	.word	0x0800915c
 8006484:	080090e9 	.word	0x080090e9
 8006488:	080090bc 	.word	0x080090bc
 800648c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006490:	6018      	str	r0, [r3, #0]
 8006492:	9b07      	ldr	r3, [sp, #28]
 8006494:	2b0e      	cmp	r3, #14
 8006496:	f200 80a4 	bhi.w	80065e2 <_dtoa_r+0x442>
 800649a:	2c00      	cmp	r4, #0
 800649c:	f000 80a1 	beq.w	80065e2 <_dtoa_r+0x442>
 80064a0:	2f00      	cmp	r7, #0
 80064a2:	dd33      	ble.n	800650c <_dtoa_r+0x36c>
 80064a4:	4bad      	ldr	r3, [pc, #692]	@ (800675c <_dtoa_r+0x5bc>)
 80064a6:	f007 020f 	and.w	r2, r7, #15
 80064aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ae:	ed93 7b00 	vldr	d7, [r3]
 80064b2:	05f8      	lsls	r0, r7, #23
 80064b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80064b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064bc:	d516      	bpl.n	80064ec <_dtoa_r+0x34c>
 80064be:	4ba8      	ldr	r3, [pc, #672]	@ (8006760 <_dtoa_r+0x5c0>)
 80064c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064c8:	f7fa f9e0 	bl	800088c <__aeabi_ddiv>
 80064cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d0:	f004 040f 	and.w	r4, r4, #15
 80064d4:	2603      	movs	r6, #3
 80064d6:	4da2      	ldr	r5, [pc, #648]	@ (8006760 <_dtoa_r+0x5c0>)
 80064d8:	b954      	cbnz	r4, 80064f0 <_dtoa_r+0x350>
 80064da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064e2:	f7fa f9d3 	bl	800088c <__aeabi_ddiv>
 80064e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ea:	e028      	b.n	800653e <_dtoa_r+0x39e>
 80064ec:	2602      	movs	r6, #2
 80064ee:	e7f2      	b.n	80064d6 <_dtoa_r+0x336>
 80064f0:	07e1      	lsls	r1, r4, #31
 80064f2:	d508      	bpl.n	8006506 <_dtoa_r+0x366>
 80064f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80064fc:	f7fa f89c 	bl	8000638 <__aeabi_dmul>
 8006500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006504:	3601      	adds	r6, #1
 8006506:	1064      	asrs	r4, r4, #1
 8006508:	3508      	adds	r5, #8
 800650a:	e7e5      	b.n	80064d8 <_dtoa_r+0x338>
 800650c:	f000 80d2 	beq.w	80066b4 <_dtoa_r+0x514>
 8006510:	427c      	negs	r4, r7
 8006512:	4b92      	ldr	r3, [pc, #584]	@ (800675c <_dtoa_r+0x5bc>)
 8006514:	4d92      	ldr	r5, [pc, #584]	@ (8006760 <_dtoa_r+0x5c0>)
 8006516:	f004 020f 	and.w	r2, r4, #15
 800651a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006526:	f7fa f887 	bl	8000638 <__aeabi_dmul>
 800652a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800652e:	1124      	asrs	r4, r4, #4
 8006530:	2300      	movs	r3, #0
 8006532:	2602      	movs	r6, #2
 8006534:	2c00      	cmp	r4, #0
 8006536:	f040 80b2 	bne.w	800669e <_dtoa_r+0x4fe>
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1d3      	bne.n	80064e6 <_dtoa_r+0x346>
 800653e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006540:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80b7 	beq.w	80066b8 <_dtoa_r+0x518>
 800654a:	4b86      	ldr	r3, [pc, #536]	@ (8006764 <_dtoa_r+0x5c4>)
 800654c:	2200      	movs	r2, #0
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	f7fa fae3 	bl	8000b1c <__aeabi_dcmplt>
 8006556:	2800      	cmp	r0, #0
 8006558:	f000 80ae 	beq.w	80066b8 <_dtoa_r+0x518>
 800655c:	9b07      	ldr	r3, [sp, #28]
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80aa 	beq.w	80066b8 <_dtoa_r+0x518>
 8006564:	9b00      	ldr	r3, [sp, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	dd37      	ble.n	80065da <_dtoa_r+0x43a>
 800656a:	1e7b      	subs	r3, r7, #1
 800656c:	9304      	str	r3, [sp, #16]
 800656e:	4620      	mov	r0, r4
 8006570:	4b7d      	ldr	r3, [pc, #500]	@ (8006768 <_dtoa_r+0x5c8>)
 8006572:	2200      	movs	r2, #0
 8006574:	4629      	mov	r1, r5
 8006576:	f7fa f85f 	bl	8000638 <__aeabi_dmul>
 800657a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800657e:	9c00      	ldr	r4, [sp, #0]
 8006580:	3601      	adds	r6, #1
 8006582:	4630      	mov	r0, r6
 8006584:	f7f9 ffee 	bl	8000564 <__aeabi_i2d>
 8006588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800658c:	f7fa f854 	bl	8000638 <__aeabi_dmul>
 8006590:	4b76      	ldr	r3, [pc, #472]	@ (800676c <_dtoa_r+0x5cc>)
 8006592:	2200      	movs	r2, #0
 8006594:	f7f9 fe9a 	bl	80002cc <__adddf3>
 8006598:	4605      	mov	r5, r0
 800659a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800659e:	2c00      	cmp	r4, #0
 80065a0:	f040 808d 	bne.w	80066be <_dtoa_r+0x51e>
 80065a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065a8:	4b71      	ldr	r3, [pc, #452]	@ (8006770 <_dtoa_r+0x5d0>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	f7f9 fe8c 	bl	80002c8 <__aeabi_dsub>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065b8:	462a      	mov	r2, r5
 80065ba:	4633      	mov	r3, r6
 80065bc:	f7fa facc 	bl	8000b58 <__aeabi_dcmpgt>
 80065c0:	2800      	cmp	r0, #0
 80065c2:	f040 828b 	bne.w	8006adc <_dtoa_r+0x93c>
 80065c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ca:	462a      	mov	r2, r5
 80065cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065d0:	f7fa faa4 	bl	8000b1c <__aeabi_dcmplt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 8128 	bne.w	800682a <_dtoa_r+0x68a>
 80065da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80065de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80065e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f2c0 815a 	blt.w	800689e <_dtoa_r+0x6fe>
 80065ea:	2f0e      	cmp	r7, #14
 80065ec:	f300 8157 	bgt.w	800689e <_dtoa_r+0x6fe>
 80065f0:	4b5a      	ldr	r3, [pc, #360]	@ (800675c <_dtoa_r+0x5bc>)
 80065f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065f6:	ed93 7b00 	vldr	d7, [r3]
 80065fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	ed8d 7b00 	vstr	d7, [sp]
 8006602:	da03      	bge.n	800660c <_dtoa_r+0x46c>
 8006604:	9b07      	ldr	r3, [sp, #28]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f340 8101 	ble.w	800680e <_dtoa_r+0x66e>
 800660c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006610:	4656      	mov	r6, sl
 8006612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006616:	4620      	mov	r0, r4
 8006618:	4629      	mov	r1, r5
 800661a:	f7fa f937 	bl	800088c <__aeabi_ddiv>
 800661e:	f7fa fabb 	bl	8000b98 <__aeabi_d2iz>
 8006622:	4680      	mov	r8, r0
 8006624:	f7f9 ff9e 	bl	8000564 <__aeabi_i2d>
 8006628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800662c:	f7fa f804 	bl	8000638 <__aeabi_dmul>
 8006630:	4602      	mov	r2, r0
 8006632:	460b      	mov	r3, r1
 8006634:	4620      	mov	r0, r4
 8006636:	4629      	mov	r1, r5
 8006638:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800663c:	f7f9 fe44 	bl	80002c8 <__aeabi_dsub>
 8006640:	f806 4b01 	strb.w	r4, [r6], #1
 8006644:	9d07      	ldr	r5, [sp, #28]
 8006646:	eba6 040a 	sub.w	r4, r6, sl
 800664a:	42a5      	cmp	r5, r4
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	f040 8117 	bne.w	8006882 <_dtoa_r+0x6e2>
 8006654:	f7f9 fe3a 	bl	80002cc <__adddf3>
 8006658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800665c:	4604      	mov	r4, r0
 800665e:	460d      	mov	r5, r1
 8006660:	f7fa fa7a 	bl	8000b58 <__aeabi_dcmpgt>
 8006664:	2800      	cmp	r0, #0
 8006666:	f040 80f9 	bne.w	800685c <_dtoa_r+0x6bc>
 800666a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800666e:	4620      	mov	r0, r4
 8006670:	4629      	mov	r1, r5
 8006672:	f7fa fa49 	bl	8000b08 <__aeabi_dcmpeq>
 8006676:	b118      	cbz	r0, 8006680 <_dtoa_r+0x4e0>
 8006678:	f018 0f01 	tst.w	r8, #1
 800667c:	f040 80ee 	bne.w	800685c <_dtoa_r+0x6bc>
 8006680:	4649      	mov	r1, r9
 8006682:	4658      	mov	r0, fp
 8006684:	f000 fc90 	bl	8006fa8 <_Bfree>
 8006688:	2300      	movs	r3, #0
 800668a:	7033      	strb	r3, [r6, #0]
 800668c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800668e:	3701      	adds	r7, #1
 8006690:	601f      	str	r7, [r3, #0]
 8006692:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 831d 	beq.w	8006cd4 <_dtoa_r+0xb34>
 800669a:	601e      	str	r6, [r3, #0]
 800669c:	e31a      	b.n	8006cd4 <_dtoa_r+0xb34>
 800669e:	07e2      	lsls	r2, r4, #31
 80066a0:	d505      	bpl.n	80066ae <_dtoa_r+0x50e>
 80066a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066a6:	f7f9 ffc7 	bl	8000638 <__aeabi_dmul>
 80066aa:	3601      	adds	r6, #1
 80066ac:	2301      	movs	r3, #1
 80066ae:	1064      	asrs	r4, r4, #1
 80066b0:	3508      	adds	r5, #8
 80066b2:	e73f      	b.n	8006534 <_dtoa_r+0x394>
 80066b4:	2602      	movs	r6, #2
 80066b6:	e742      	b.n	800653e <_dtoa_r+0x39e>
 80066b8:	9c07      	ldr	r4, [sp, #28]
 80066ba:	9704      	str	r7, [sp, #16]
 80066bc:	e761      	b.n	8006582 <_dtoa_r+0x3e2>
 80066be:	4b27      	ldr	r3, [pc, #156]	@ (800675c <_dtoa_r+0x5bc>)
 80066c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80066c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80066ca:	4454      	add	r4, sl
 80066cc:	2900      	cmp	r1, #0
 80066ce:	d053      	beq.n	8006778 <_dtoa_r+0x5d8>
 80066d0:	4928      	ldr	r1, [pc, #160]	@ (8006774 <_dtoa_r+0x5d4>)
 80066d2:	2000      	movs	r0, #0
 80066d4:	f7fa f8da 	bl	800088c <__aeabi_ddiv>
 80066d8:	4633      	mov	r3, r6
 80066da:	462a      	mov	r2, r5
 80066dc:	f7f9 fdf4 	bl	80002c8 <__aeabi_dsub>
 80066e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066e4:	4656      	mov	r6, sl
 80066e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ea:	f7fa fa55 	bl	8000b98 <__aeabi_d2iz>
 80066ee:	4605      	mov	r5, r0
 80066f0:	f7f9 ff38 	bl	8000564 <__aeabi_i2d>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066fc:	f7f9 fde4 	bl	80002c8 <__aeabi_dsub>
 8006700:	3530      	adds	r5, #48	@ 0x30
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800670a:	f806 5b01 	strb.w	r5, [r6], #1
 800670e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006712:	f7fa fa03 	bl	8000b1c <__aeabi_dcmplt>
 8006716:	2800      	cmp	r0, #0
 8006718:	d171      	bne.n	80067fe <_dtoa_r+0x65e>
 800671a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800671e:	4911      	ldr	r1, [pc, #68]	@ (8006764 <_dtoa_r+0x5c4>)
 8006720:	2000      	movs	r0, #0
 8006722:	f7f9 fdd1 	bl	80002c8 <__aeabi_dsub>
 8006726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800672a:	f7fa f9f7 	bl	8000b1c <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	f040 8095 	bne.w	800685e <_dtoa_r+0x6be>
 8006734:	42a6      	cmp	r6, r4
 8006736:	f43f af50 	beq.w	80065da <_dtoa_r+0x43a>
 800673a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800673e:	4b0a      	ldr	r3, [pc, #40]	@ (8006768 <_dtoa_r+0x5c8>)
 8006740:	2200      	movs	r2, #0
 8006742:	f7f9 ff79 	bl	8000638 <__aeabi_dmul>
 8006746:	4b08      	ldr	r3, [pc, #32]	@ (8006768 <_dtoa_r+0x5c8>)
 8006748:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800674c:	2200      	movs	r2, #0
 800674e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006752:	f7f9 ff71 	bl	8000638 <__aeabi_dmul>
 8006756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800675a:	e7c4      	b.n	80066e6 <_dtoa_r+0x546>
 800675c:	08009200 	.word	0x08009200
 8006760:	080091d8 	.word	0x080091d8
 8006764:	3ff00000 	.word	0x3ff00000
 8006768:	40240000 	.word	0x40240000
 800676c:	401c0000 	.word	0x401c0000
 8006770:	40140000 	.word	0x40140000
 8006774:	3fe00000 	.word	0x3fe00000
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	f7f9 ff5c 	bl	8000638 <__aeabi_dmul>
 8006780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006784:	9415      	str	r4, [sp, #84]	@ 0x54
 8006786:	4656      	mov	r6, sl
 8006788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800678c:	f7fa fa04 	bl	8000b98 <__aeabi_d2iz>
 8006790:	4605      	mov	r5, r0
 8006792:	f7f9 fee7 	bl	8000564 <__aeabi_i2d>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800679e:	f7f9 fd93 	bl	80002c8 <__aeabi_dsub>
 80067a2:	3530      	adds	r5, #48	@ 0x30
 80067a4:	f806 5b01 	strb.w	r5, [r6], #1
 80067a8:	4602      	mov	r2, r0
 80067aa:	460b      	mov	r3, r1
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	d124      	bne.n	8006802 <_dtoa_r+0x662>
 80067b8:	4bac      	ldr	r3, [pc, #688]	@ (8006a6c <_dtoa_r+0x8cc>)
 80067ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80067be:	f7f9 fd85 	bl	80002cc <__adddf3>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067ca:	f7fa f9c5 	bl	8000b58 <__aeabi_dcmpgt>
 80067ce:	2800      	cmp	r0, #0
 80067d0:	d145      	bne.n	800685e <_dtoa_r+0x6be>
 80067d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067d6:	49a5      	ldr	r1, [pc, #660]	@ (8006a6c <_dtoa_r+0x8cc>)
 80067d8:	2000      	movs	r0, #0
 80067da:	f7f9 fd75 	bl	80002c8 <__aeabi_dsub>
 80067de:	4602      	mov	r2, r0
 80067e0:	460b      	mov	r3, r1
 80067e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067e6:	f7fa f999 	bl	8000b1c <__aeabi_dcmplt>
 80067ea:	2800      	cmp	r0, #0
 80067ec:	f43f aef5 	beq.w	80065da <_dtoa_r+0x43a>
 80067f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80067f2:	1e73      	subs	r3, r6, #1
 80067f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80067f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067fa:	2b30      	cmp	r3, #48	@ 0x30
 80067fc:	d0f8      	beq.n	80067f0 <_dtoa_r+0x650>
 80067fe:	9f04      	ldr	r7, [sp, #16]
 8006800:	e73e      	b.n	8006680 <_dtoa_r+0x4e0>
 8006802:	4b9b      	ldr	r3, [pc, #620]	@ (8006a70 <_dtoa_r+0x8d0>)
 8006804:	f7f9 ff18 	bl	8000638 <__aeabi_dmul>
 8006808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800680c:	e7bc      	b.n	8006788 <_dtoa_r+0x5e8>
 800680e:	d10c      	bne.n	800682a <_dtoa_r+0x68a>
 8006810:	4b98      	ldr	r3, [pc, #608]	@ (8006a74 <_dtoa_r+0x8d4>)
 8006812:	2200      	movs	r2, #0
 8006814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006818:	f7f9 ff0e 	bl	8000638 <__aeabi_dmul>
 800681c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006820:	f7fa f990 	bl	8000b44 <__aeabi_dcmpge>
 8006824:	2800      	cmp	r0, #0
 8006826:	f000 8157 	beq.w	8006ad8 <_dtoa_r+0x938>
 800682a:	2400      	movs	r4, #0
 800682c:	4625      	mov	r5, r4
 800682e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006830:	43db      	mvns	r3, r3
 8006832:	9304      	str	r3, [sp, #16]
 8006834:	4656      	mov	r6, sl
 8006836:	2700      	movs	r7, #0
 8006838:	4621      	mov	r1, r4
 800683a:	4658      	mov	r0, fp
 800683c:	f000 fbb4 	bl	8006fa8 <_Bfree>
 8006840:	2d00      	cmp	r5, #0
 8006842:	d0dc      	beq.n	80067fe <_dtoa_r+0x65e>
 8006844:	b12f      	cbz	r7, 8006852 <_dtoa_r+0x6b2>
 8006846:	42af      	cmp	r7, r5
 8006848:	d003      	beq.n	8006852 <_dtoa_r+0x6b2>
 800684a:	4639      	mov	r1, r7
 800684c:	4658      	mov	r0, fp
 800684e:	f000 fbab 	bl	8006fa8 <_Bfree>
 8006852:	4629      	mov	r1, r5
 8006854:	4658      	mov	r0, fp
 8006856:	f000 fba7 	bl	8006fa8 <_Bfree>
 800685a:	e7d0      	b.n	80067fe <_dtoa_r+0x65e>
 800685c:	9704      	str	r7, [sp, #16]
 800685e:	4633      	mov	r3, r6
 8006860:	461e      	mov	r6, r3
 8006862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006866:	2a39      	cmp	r2, #57	@ 0x39
 8006868:	d107      	bne.n	800687a <_dtoa_r+0x6da>
 800686a:	459a      	cmp	sl, r3
 800686c:	d1f8      	bne.n	8006860 <_dtoa_r+0x6c0>
 800686e:	9a04      	ldr	r2, [sp, #16]
 8006870:	3201      	adds	r2, #1
 8006872:	9204      	str	r2, [sp, #16]
 8006874:	2230      	movs	r2, #48	@ 0x30
 8006876:	f88a 2000 	strb.w	r2, [sl]
 800687a:	781a      	ldrb	r2, [r3, #0]
 800687c:	3201      	adds	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e7bd      	b.n	80067fe <_dtoa_r+0x65e>
 8006882:	4b7b      	ldr	r3, [pc, #492]	@ (8006a70 <_dtoa_r+0x8d0>)
 8006884:	2200      	movs	r2, #0
 8006886:	f7f9 fed7 	bl	8000638 <__aeabi_dmul>
 800688a:	2200      	movs	r2, #0
 800688c:	2300      	movs	r3, #0
 800688e:	4604      	mov	r4, r0
 8006890:	460d      	mov	r5, r1
 8006892:	f7fa f939 	bl	8000b08 <__aeabi_dcmpeq>
 8006896:	2800      	cmp	r0, #0
 8006898:	f43f aebb 	beq.w	8006612 <_dtoa_r+0x472>
 800689c:	e6f0      	b.n	8006680 <_dtoa_r+0x4e0>
 800689e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80068a0:	2a00      	cmp	r2, #0
 80068a2:	f000 80db 	beq.w	8006a5c <_dtoa_r+0x8bc>
 80068a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068a8:	2a01      	cmp	r2, #1
 80068aa:	f300 80bf 	bgt.w	8006a2c <_dtoa_r+0x88c>
 80068ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80068b0:	2a00      	cmp	r2, #0
 80068b2:	f000 80b7 	beq.w	8006a24 <_dtoa_r+0x884>
 80068b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80068bc:	4646      	mov	r6, r8
 80068be:	9a08      	ldr	r2, [sp, #32]
 80068c0:	2101      	movs	r1, #1
 80068c2:	441a      	add	r2, r3
 80068c4:	4658      	mov	r0, fp
 80068c6:	4498      	add	r8, r3
 80068c8:	9208      	str	r2, [sp, #32]
 80068ca:	f000 fc21 	bl	8007110 <__i2b>
 80068ce:	4605      	mov	r5, r0
 80068d0:	b15e      	cbz	r6, 80068ea <_dtoa_r+0x74a>
 80068d2:	9b08      	ldr	r3, [sp, #32]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dd08      	ble.n	80068ea <_dtoa_r+0x74a>
 80068d8:	42b3      	cmp	r3, r6
 80068da:	9a08      	ldr	r2, [sp, #32]
 80068dc:	bfa8      	it	ge
 80068de:	4633      	movge	r3, r6
 80068e0:	eba8 0803 	sub.w	r8, r8, r3
 80068e4:	1af6      	subs	r6, r6, r3
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	9308      	str	r3, [sp, #32]
 80068ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ec:	b1f3      	cbz	r3, 800692c <_dtoa_r+0x78c>
 80068ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80b7 	beq.w	8006a64 <_dtoa_r+0x8c4>
 80068f6:	b18c      	cbz	r4, 800691c <_dtoa_r+0x77c>
 80068f8:	4629      	mov	r1, r5
 80068fa:	4622      	mov	r2, r4
 80068fc:	4658      	mov	r0, fp
 80068fe:	f000 fcc7 	bl	8007290 <__pow5mult>
 8006902:	464a      	mov	r2, r9
 8006904:	4601      	mov	r1, r0
 8006906:	4605      	mov	r5, r0
 8006908:	4658      	mov	r0, fp
 800690a:	f000 fc17 	bl	800713c <__multiply>
 800690e:	4649      	mov	r1, r9
 8006910:	9004      	str	r0, [sp, #16]
 8006912:	4658      	mov	r0, fp
 8006914:	f000 fb48 	bl	8006fa8 <_Bfree>
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	4699      	mov	r9, r3
 800691c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800691e:	1b1a      	subs	r2, r3, r4
 8006920:	d004      	beq.n	800692c <_dtoa_r+0x78c>
 8006922:	4649      	mov	r1, r9
 8006924:	4658      	mov	r0, fp
 8006926:	f000 fcb3 	bl	8007290 <__pow5mult>
 800692a:	4681      	mov	r9, r0
 800692c:	2101      	movs	r1, #1
 800692e:	4658      	mov	r0, fp
 8006930:	f000 fbee 	bl	8007110 <__i2b>
 8006934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006936:	4604      	mov	r4, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 81cf 	beq.w	8006cdc <_dtoa_r+0xb3c>
 800693e:	461a      	mov	r2, r3
 8006940:	4601      	mov	r1, r0
 8006942:	4658      	mov	r0, fp
 8006944:	f000 fca4 	bl	8007290 <__pow5mult>
 8006948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694a:	2b01      	cmp	r3, #1
 800694c:	4604      	mov	r4, r0
 800694e:	f300 8095 	bgt.w	8006a7c <_dtoa_r+0x8dc>
 8006952:	9b02      	ldr	r3, [sp, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	f040 8087 	bne.w	8006a68 <_dtoa_r+0x8c8>
 800695a:	9b03      	ldr	r3, [sp, #12]
 800695c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006960:	2b00      	cmp	r3, #0
 8006962:	f040 8089 	bne.w	8006a78 <_dtoa_r+0x8d8>
 8006966:	9b03      	ldr	r3, [sp, #12]
 8006968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800696c:	0d1b      	lsrs	r3, r3, #20
 800696e:	051b      	lsls	r3, r3, #20
 8006970:	b12b      	cbz	r3, 800697e <_dtoa_r+0x7de>
 8006972:	9b08      	ldr	r3, [sp, #32]
 8006974:	3301      	adds	r3, #1
 8006976:	9308      	str	r3, [sp, #32]
 8006978:	f108 0801 	add.w	r8, r8, #1
 800697c:	2301      	movs	r3, #1
 800697e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006982:	2b00      	cmp	r3, #0
 8006984:	f000 81b0 	beq.w	8006ce8 <_dtoa_r+0xb48>
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800698e:	6918      	ldr	r0, [r3, #16]
 8006990:	f000 fb72 	bl	8007078 <__hi0bits>
 8006994:	f1c0 0020 	rsb	r0, r0, #32
 8006998:	9b08      	ldr	r3, [sp, #32]
 800699a:	4418      	add	r0, r3
 800699c:	f010 001f 	ands.w	r0, r0, #31
 80069a0:	d077      	beq.n	8006a92 <_dtoa_r+0x8f2>
 80069a2:	f1c0 0320 	rsb	r3, r0, #32
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	dd6b      	ble.n	8006a82 <_dtoa_r+0x8e2>
 80069aa:	9b08      	ldr	r3, [sp, #32]
 80069ac:	f1c0 001c 	rsb	r0, r0, #28
 80069b0:	4403      	add	r3, r0
 80069b2:	4480      	add	r8, r0
 80069b4:	4406      	add	r6, r0
 80069b6:	9308      	str	r3, [sp, #32]
 80069b8:	f1b8 0f00 	cmp.w	r8, #0
 80069bc:	dd05      	ble.n	80069ca <_dtoa_r+0x82a>
 80069be:	4649      	mov	r1, r9
 80069c0:	4642      	mov	r2, r8
 80069c2:	4658      	mov	r0, fp
 80069c4:	f000 fcbe 	bl	8007344 <__lshift>
 80069c8:	4681      	mov	r9, r0
 80069ca:	9b08      	ldr	r3, [sp, #32]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	dd05      	ble.n	80069dc <_dtoa_r+0x83c>
 80069d0:	4621      	mov	r1, r4
 80069d2:	461a      	mov	r2, r3
 80069d4:	4658      	mov	r0, fp
 80069d6:	f000 fcb5 	bl	8007344 <__lshift>
 80069da:	4604      	mov	r4, r0
 80069dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d059      	beq.n	8006a96 <_dtoa_r+0x8f6>
 80069e2:	4621      	mov	r1, r4
 80069e4:	4648      	mov	r0, r9
 80069e6:	f000 fd19 	bl	800741c <__mcmp>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	da53      	bge.n	8006a96 <_dtoa_r+0x8f6>
 80069ee:	1e7b      	subs	r3, r7, #1
 80069f0:	9304      	str	r3, [sp, #16]
 80069f2:	4649      	mov	r1, r9
 80069f4:	2300      	movs	r3, #0
 80069f6:	220a      	movs	r2, #10
 80069f8:	4658      	mov	r0, fp
 80069fa:	f000 faf7 	bl	8006fec <__multadd>
 80069fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a00:	4681      	mov	r9, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8172 	beq.w	8006cec <_dtoa_r+0xb4c>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	220a      	movs	r2, #10
 8006a0e:	4658      	mov	r0, fp
 8006a10:	f000 faec 	bl	8006fec <__multadd>
 8006a14:	9b00      	ldr	r3, [sp, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	4605      	mov	r5, r0
 8006a1a:	dc67      	bgt.n	8006aec <_dtoa_r+0x94c>
 8006a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	dc41      	bgt.n	8006aa6 <_dtoa_r+0x906>
 8006a22:	e063      	b.n	8006aec <_dtoa_r+0x94c>
 8006a24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006a26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a2a:	e746      	b.n	80068ba <_dtoa_r+0x71a>
 8006a2c:	9b07      	ldr	r3, [sp, #28]
 8006a2e:	1e5c      	subs	r4, r3, #1
 8006a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a32:	42a3      	cmp	r3, r4
 8006a34:	bfbf      	itttt	lt
 8006a36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006a38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006a3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006a3c:	1ae3      	sublt	r3, r4, r3
 8006a3e:	bfb4      	ite	lt
 8006a40:	18d2      	addlt	r2, r2, r3
 8006a42:	1b1c      	subge	r4, r3, r4
 8006a44:	9b07      	ldr	r3, [sp, #28]
 8006a46:	bfbc      	itt	lt
 8006a48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006a4a:	2400      	movlt	r4, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bfb5      	itete	lt
 8006a50:	eba8 0603 	sublt.w	r6, r8, r3
 8006a54:	9b07      	ldrge	r3, [sp, #28]
 8006a56:	2300      	movlt	r3, #0
 8006a58:	4646      	movge	r6, r8
 8006a5a:	e730      	b.n	80068be <_dtoa_r+0x71e>
 8006a5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006a60:	4646      	mov	r6, r8
 8006a62:	e735      	b.n	80068d0 <_dtoa_r+0x730>
 8006a64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006a66:	e75c      	b.n	8006922 <_dtoa_r+0x782>
 8006a68:	2300      	movs	r3, #0
 8006a6a:	e788      	b.n	800697e <_dtoa_r+0x7de>
 8006a6c:	3fe00000 	.word	0x3fe00000
 8006a70:	40240000 	.word	0x40240000
 8006a74:	40140000 	.word	0x40140000
 8006a78:	9b02      	ldr	r3, [sp, #8]
 8006a7a:	e780      	b.n	800697e <_dtoa_r+0x7de>
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a80:	e782      	b.n	8006988 <_dtoa_r+0x7e8>
 8006a82:	d099      	beq.n	80069b8 <_dtoa_r+0x818>
 8006a84:	9a08      	ldr	r2, [sp, #32]
 8006a86:	331c      	adds	r3, #28
 8006a88:	441a      	add	r2, r3
 8006a8a:	4498      	add	r8, r3
 8006a8c:	441e      	add	r6, r3
 8006a8e:	9208      	str	r2, [sp, #32]
 8006a90:	e792      	b.n	80069b8 <_dtoa_r+0x818>
 8006a92:	4603      	mov	r3, r0
 8006a94:	e7f6      	b.n	8006a84 <_dtoa_r+0x8e4>
 8006a96:	9b07      	ldr	r3, [sp, #28]
 8006a98:	9704      	str	r7, [sp, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	dc20      	bgt.n	8006ae0 <_dtoa_r+0x940>
 8006a9e:	9300      	str	r3, [sp, #0]
 8006aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd1e      	ble.n	8006ae4 <_dtoa_r+0x944>
 8006aa6:	9b00      	ldr	r3, [sp, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f47f aec0 	bne.w	800682e <_dtoa_r+0x68e>
 8006aae:	4621      	mov	r1, r4
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	4658      	mov	r0, fp
 8006ab4:	f000 fa9a 	bl	8006fec <__multadd>
 8006ab8:	4601      	mov	r1, r0
 8006aba:	4604      	mov	r4, r0
 8006abc:	4648      	mov	r0, r9
 8006abe:	f000 fcad 	bl	800741c <__mcmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f77f aeb3 	ble.w	800682e <_dtoa_r+0x68e>
 8006ac8:	4656      	mov	r6, sl
 8006aca:	2331      	movs	r3, #49	@ 0x31
 8006acc:	f806 3b01 	strb.w	r3, [r6], #1
 8006ad0:	9b04      	ldr	r3, [sp, #16]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	9304      	str	r3, [sp, #16]
 8006ad6:	e6ae      	b.n	8006836 <_dtoa_r+0x696>
 8006ad8:	9c07      	ldr	r4, [sp, #28]
 8006ada:	9704      	str	r7, [sp, #16]
 8006adc:	4625      	mov	r5, r4
 8006ade:	e7f3      	b.n	8006ac8 <_dtoa_r+0x928>
 8006ae0:	9b07      	ldr	r3, [sp, #28]
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 8104 	beq.w	8006cf4 <_dtoa_r+0xb54>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	dd05      	ble.n	8006afc <_dtoa_r+0x95c>
 8006af0:	4629      	mov	r1, r5
 8006af2:	4632      	mov	r2, r6
 8006af4:	4658      	mov	r0, fp
 8006af6:	f000 fc25 	bl	8007344 <__lshift>
 8006afa:	4605      	mov	r5, r0
 8006afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d05a      	beq.n	8006bb8 <_dtoa_r+0xa18>
 8006b02:	6869      	ldr	r1, [r5, #4]
 8006b04:	4658      	mov	r0, fp
 8006b06:	f000 fa0f 	bl	8006f28 <_Balloc>
 8006b0a:	4606      	mov	r6, r0
 8006b0c:	b928      	cbnz	r0, 8006b1a <_dtoa_r+0x97a>
 8006b0e:	4b84      	ldr	r3, [pc, #528]	@ (8006d20 <_dtoa_r+0xb80>)
 8006b10:	4602      	mov	r2, r0
 8006b12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b16:	f7ff bb5a 	b.w	80061ce <_dtoa_r+0x2e>
 8006b1a:	692a      	ldr	r2, [r5, #16]
 8006b1c:	3202      	adds	r2, #2
 8006b1e:	0092      	lsls	r2, r2, #2
 8006b20:	f105 010c 	add.w	r1, r5, #12
 8006b24:	300c      	adds	r0, #12
 8006b26:	f001 f877 	bl	8007c18 <memcpy>
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	4658      	mov	r0, fp
 8006b30:	f000 fc08 	bl	8007344 <__lshift>
 8006b34:	f10a 0301 	add.w	r3, sl, #1
 8006b38:	9307      	str	r3, [sp, #28]
 8006b3a:	9b00      	ldr	r3, [sp, #0]
 8006b3c:	4453      	add	r3, sl
 8006b3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b40:	9b02      	ldr	r3, [sp, #8]
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	462f      	mov	r7, r5
 8006b48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b4a:	4605      	mov	r5, r0
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	4621      	mov	r1, r4
 8006b50:	3b01      	subs	r3, #1
 8006b52:	4648      	mov	r0, r9
 8006b54:	9300      	str	r3, [sp, #0]
 8006b56:	f7ff fa98 	bl	800608a <quorem>
 8006b5a:	4639      	mov	r1, r7
 8006b5c:	9002      	str	r0, [sp, #8]
 8006b5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006b62:	4648      	mov	r0, r9
 8006b64:	f000 fc5a 	bl	800741c <__mcmp>
 8006b68:	462a      	mov	r2, r5
 8006b6a:	9008      	str	r0, [sp, #32]
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	4658      	mov	r0, fp
 8006b70:	f000 fc70 	bl	8007454 <__mdiff>
 8006b74:	68c2      	ldr	r2, [r0, #12]
 8006b76:	4606      	mov	r6, r0
 8006b78:	bb02      	cbnz	r2, 8006bbc <_dtoa_r+0xa1c>
 8006b7a:	4601      	mov	r1, r0
 8006b7c:	4648      	mov	r0, r9
 8006b7e:	f000 fc4d 	bl	800741c <__mcmp>
 8006b82:	4602      	mov	r2, r0
 8006b84:	4631      	mov	r1, r6
 8006b86:	4658      	mov	r0, fp
 8006b88:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b8a:	f000 fa0d 	bl	8006fa8 <_Bfree>
 8006b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b92:	9e07      	ldr	r6, [sp, #28]
 8006b94:	ea43 0102 	orr.w	r1, r3, r2
 8006b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b9a:	4319      	orrs	r1, r3
 8006b9c:	d110      	bne.n	8006bc0 <_dtoa_r+0xa20>
 8006b9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ba2:	d029      	beq.n	8006bf8 <_dtoa_r+0xa58>
 8006ba4:	9b08      	ldr	r3, [sp, #32]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	dd02      	ble.n	8006bb0 <_dtoa_r+0xa10>
 8006baa:	9b02      	ldr	r3, [sp, #8]
 8006bac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006bb0:	9b00      	ldr	r3, [sp, #0]
 8006bb2:	f883 8000 	strb.w	r8, [r3]
 8006bb6:	e63f      	b.n	8006838 <_dtoa_r+0x698>
 8006bb8:	4628      	mov	r0, r5
 8006bba:	e7bb      	b.n	8006b34 <_dtoa_r+0x994>
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	e7e1      	b.n	8006b84 <_dtoa_r+0x9e4>
 8006bc0:	9b08      	ldr	r3, [sp, #32]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	db04      	blt.n	8006bd0 <_dtoa_r+0xa30>
 8006bc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bcc:	430b      	orrs	r3, r1
 8006bce:	d120      	bne.n	8006c12 <_dtoa_r+0xa72>
 8006bd0:	2a00      	cmp	r2, #0
 8006bd2:	dded      	ble.n	8006bb0 <_dtoa_r+0xa10>
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	4658      	mov	r0, fp
 8006bda:	f000 fbb3 	bl	8007344 <__lshift>
 8006bde:	4621      	mov	r1, r4
 8006be0:	4681      	mov	r9, r0
 8006be2:	f000 fc1b 	bl	800741c <__mcmp>
 8006be6:	2800      	cmp	r0, #0
 8006be8:	dc03      	bgt.n	8006bf2 <_dtoa_r+0xa52>
 8006bea:	d1e1      	bne.n	8006bb0 <_dtoa_r+0xa10>
 8006bec:	f018 0f01 	tst.w	r8, #1
 8006bf0:	d0de      	beq.n	8006bb0 <_dtoa_r+0xa10>
 8006bf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006bf6:	d1d8      	bne.n	8006baa <_dtoa_r+0xa0a>
 8006bf8:	9a00      	ldr	r2, [sp, #0]
 8006bfa:	2339      	movs	r3, #57	@ 0x39
 8006bfc:	7013      	strb	r3, [r2, #0]
 8006bfe:	4633      	mov	r3, r6
 8006c00:	461e      	mov	r6, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c08:	2a39      	cmp	r2, #57	@ 0x39
 8006c0a:	d052      	beq.n	8006cb2 <_dtoa_r+0xb12>
 8006c0c:	3201      	adds	r2, #1
 8006c0e:	701a      	strb	r2, [r3, #0]
 8006c10:	e612      	b.n	8006838 <_dtoa_r+0x698>
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	dd07      	ble.n	8006c26 <_dtoa_r+0xa86>
 8006c16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c1a:	d0ed      	beq.n	8006bf8 <_dtoa_r+0xa58>
 8006c1c:	9a00      	ldr	r2, [sp, #0]
 8006c1e:	f108 0301 	add.w	r3, r8, #1
 8006c22:	7013      	strb	r3, [r2, #0]
 8006c24:	e608      	b.n	8006838 <_dtoa_r+0x698>
 8006c26:	9b07      	ldr	r3, [sp, #28]
 8006c28:	9a07      	ldr	r2, [sp, #28]
 8006c2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d028      	beq.n	8006c86 <_dtoa_r+0xae6>
 8006c34:	4649      	mov	r1, r9
 8006c36:	2300      	movs	r3, #0
 8006c38:	220a      	movs	r2, #10
 8006c3a:	4658      	mov	r0, fp
 8006c3c:	f000 f9d6 	bl	8006fec <__multadd>
 8006c40:	42af      	cmp	r7, r5
 8006c42:	4681      	mov	r9, r0
 8006c44:	f04f 0300 	mov.w	r3, #0
 8006c48:	f04f 020a 	mov.w	r2, #10
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	4658      	mov	r0, fp
 8006c50:	d107      	bne.n	8006c62 <_dtoa_r+0xac2>
 8006c52:	f000 f9cb 	bl	8006fec <__multadd>
 8006c56:	4607      	mov	r7, r0
 8006c58:	4605      	mov	r5, r0
 8006c5a:	9b07      	ldr	r3, [sp, #28]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	9307      	str	r3, [sp, #28]
 8006c60:	e774      	b.n	8006b4c <_dtoa_r+0x9ac>
 8006c62:	f000 f9c3 	bl	8006fec <__multadd>
 8006c66:	4629      	mov	r1, r5
 8006c68:	4607      	mov	r7, r0
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	220a      	movs	r2, #10
 8006c6e:	4658      	mov	r0, fp
 8006c70:	f000 f9bc 	bl	8006fec <__multadd>
 8006c74:	4605      	mov	r5, r0
 8006c76:	e7f0      	b.n	8006c5a <_dtoa_r+0xaba>
 8006c78:	9b00      	ldr	r3, [sp, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfcc      	ite	gt
 8006c7e:	461e      	movgt	r6, r3
 8006c80:	2601      	movle	r6, #1
 8006c82:	4456      	add	r6, sl
 8006c84:	2700      	movs	r7, #0
 8006c86:	4649      	mov	r1, r9
 8006c88:	2201      	movs	r2, #1
 8006c8a:	4658      	mov	r0, fp
 8006c8c:	f000 fb5a 	bl	8007344 <__lshift>
 8006c90:	4621      	mov	r1, r4
 8006c92:	4681      	mov	r9, r0
 8006c94:	f000 fbc2 	bl	800741c <__mcmp>
 8006c98:	2800      	cmp	r0, #0
 8006c9a:	dcb0      	bgt.n	8006bfe <_dtoa_r+0xa5e>
 8006c9c:	d102      	bne.n	8006ca4 <_dtoa_r+0xb04>
 8006c9e:	f018 0f01 	tst.w	r8, #1
 8006ca2:	d1ac      	bne.n	8006bfe <_dtoa_r+0xa5e>
 8006ca4:	4633      	mov	r3, r6
 8006ca6:	461e      	mov	r6, r3
 8006ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cac:	2a30      	cmp	r2, #48	@ 0x30
 8006cae:	d0fa      	beq.n	8006ca6 <_dtoa_r+0xb06>
 8006cb0:	e5c2      	b.n	8006838 <_dtoa_r+0x698>
 8006cb2:	459a      	cmp	sl, r3
 8006cb4:	d1a4      	bne.n	8006c00 <_dtoa_r+0xa60>
 8006cb6:	9b04      	ldr	r3, [sp, #16]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	2331      	movs	r3, #49	@ 0x31
 8006cbe:	f88a 3000 	strb.w	r3, [sl]
 8006cc2:	e5b9      	b.n	8006838 <_dtoa_r+0x698>
 8006cc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006d24 <_dtoa_r+0xb84>
 8006cca:	b11b      	cbz	r3, 8006cd4 <_dtoa_r+0xb34>
 8006ccc:	f10a 0308 	add.w	r3, sl, #8
 8006cd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	4650      	mov	r0, sl
 8006cd6:	b019      	add	sp, #100	@ 0x64
 8006cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	f77f ae37 	ble.w	8006952 <_dtoa_r+0x7b2>
 8006ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ce6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ce8:	2001      	movs	r0, #1
 8006cea:	e655      	b.n	8006998 <_dtoa_r+0x7f8>
 8006cec:	9b00      	ldr	r3, [sp, #0]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f77f aed6 	ble.w	8006aa0 <_dtoa_r+0x900>
 8006cf4:	4656      	mov	r6, sl
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4648      	mov	r0, r9
 8006cfa:	f7ff f9c6 	bl	800608a <quorem>
 8006cfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006d02:	f806 8b01 	strb.w	r8, [r6], #1
 8006d06:	9b00      	ldr	r3, [sp, #0]
 8006d08:	eba6 020a 	sub.w	r2, r6, sl
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	ddb3      	ble.n	8006c78 <_dtoa_r+0xad8>
 8006d10:	4649      	mov	r1, r9
 8006d12:	2300      	movs	r3, #0
 8006d14:	220a      	movs	r2, #10
 8006d16:	4658      	mov	r0, fp
 8006d18:	f000 f968 	bl	8006fec <__multadd>
 8006d1c:	4681      	mov	r9, r0
 8006d1e:	e7ea      	b.n	8006cf6 <_dtoa_r+0xb56>
 8006d20:	0800915c 	.word	0x0800915c
 8006d24:	080090e0 	.word	0x080090e0

08006d28 <_free_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d041      	beq.n	8006db4 <_free_r+0x8c>
 8006d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d34:	1f0c      	subs	r4, r1, #4
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfb8      	it	lt
 8006d3a:	18e4      	addlt	r4, r4, r3
 8006d3c:	f000 f8e8 	bl	8006f10 <__malloc_lock>
 8006d40:	4a1d      	ldr	r2, [pc, #116]	@ (8006db8 <_free_r+0x90>)
 8006d42:	6813      	ldr	r3, [r2, #0]
 8006d44:	b933      	cbnz	r3, 8006d54 <_free_r+0x2c>
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	6014      	str	r4, [r2, #0]
 8006d4a:	4628      	mov	r0, r5
 8006d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d50:	f000 b8e4 	b.w	8006f1c <__malloc_unlock>
 8006d54:	42a3      	cmp	r3, r4
 8006d56:	d908      	bls.n	8006d6a <_free_r+0x42>
 8006d58:	6820      	ldr	r0, [r4, #0]
 8006d5a:	1821      	adds	r1, r4, r0
 8006d5c:	428b      	cmp	r3, r1
 8006d5e:	bf01      	itttt	eq
 8006d60:	6819      	ldreq	r1, [r3, #0]
 8006d62:	685b      	ldreq	r3, [r3, #4]
 8006d64:	1809      	addeq	r1, r1, r0
 8006d66:	6021      	streq	r1, [r4, #0]
 8006d68:	e7ed      	b.n	8006d46 <_free_r+0x1e>
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	b10b      	cbz	r3, 8006d74 <_free_r+0x4c>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d9fa      	bls.n	8006d6a <_free_r+0x42>
 8006d74:	6811      	ldr	r1, [r2, #0]
 8006d76:	1850      	adds	r0, r2, r1
 8006d78:	42a0      	cmp	r0, r4
 8006d7a:	d10b      	bne.n	8006d94 <_free_r+0x6c>
 8006d7c:	6820      	ldr	r0, [r4, #0]
 8006d7e:	4401      	add	r1, r0
 8006d80:	1850      	adds	r0, r2, r1
 8006d82:	4283      	cmp	r3, r0
 8006d84:	6011      	str	r1, [r2, #0]
 8006d86:	d1e0      	bne.n	8006d4a <_free_r+0x22>
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	6053      	str	r3, [r2, #4]
 8006d8e:	4408      	add	r0, r1
 8006d90:	6010      	str	r0, [r2, #0]
 8006d92:	e7da      	b.n	8006d4a <_free_r+0x22>
 8006d94:	d902      	bls.n	8006d9c <_free_r+0x74>
 8006d96:	230c      	movs	r3, #12
 8006d98:	602b      	str	r3, [r5, #0]
 8006d9a:	e7d6      	b.n	8006d4a <_free_r+0x22>
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	1821      	adds	r1, r4, r0
 8006da0:	428b      	cmp	r3, r1
 8006da2:	bf04      	itt	eq
 8006da4:	6819      	ldreq	r1, [r3, #0]
 8006da6:	685b      	ldreq	r3, [r3, #4]
 8006da8:	6063      	str	r3, [r4, #4]
 8006daa:	bf04      	itt	eq
 8006dac:	1809      	addeq	r1, r1, r0
 8006dae:	6021      	streq	r1, [r4, #0]
 8006db0:	6054      	str	r4, [r2, #4]
 8006db2:	e7ca      	b.n	8006d4a <_free_r+0x22>
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	bf00      	nop
 8006db8:	200004fc 	.word	0x200004fc

08006dbc <malloc>:
 8006dbc:	4b02      	ldr	r3, [pc, #8]	@ (8006dc8 <malloc+0xc>)
 8006dbe:	4601      	mov	r1, r0
 8006dc0:	6818      	ldr	r0, [r3, #0]
 8006dc2:	f000 b825 	b.w	8006e10 <_malloc_r>
 8006dc6:	bf00      	nop
 8006dc8:	2000002c 	.word	0x2000002c

08006dcc <sbrk_aligned>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	4e0f      	ldr	r6, [pc, #60]	@ (8006e0c <sbrk_aligned+0x40>)
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	6831      	ldr	r1, [r6, #0]
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	b911      	cbnz	r1, 8006dde <sbrk_aligned+0x12>
 8006dd8:	f000 ff0e 	bl	8007bf8 <_sbrk_r>
 8006ddc:	6030      	str	r0, [r6, #0]
 8006dde:	4621      	mov	r1, r4
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 ff09 	bl	8007bf8 <_sbrk_r>
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	d103      	bne.n	8006df2 <sbrk_aligned+0x26>
 8006dea:	f04f 34ff 	mov.w	r4, #4294967295
 8006dee:	4620      	mov	r0, r4
 8006df0:	bd70      	pop	{r4, r5, r6, pc}
 8006df2:	1cc4      	adds	r4, r0, #3
 8006df4:	f024 0403 	bic.w	r4, r4, #3
 8006df8:	42a0      	cmp	r0, r4
 8006dfa:	d0f8      	beq.n	8006dee <sbrk_aligned+0x22>
 8006dfc:	1a21      	subs	r1, r4, r0
 8006dfe:	4628      	mov	r0, r5
 8006e00:	f000 fefa 	bl	8007bf8 <_sbrk_r>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d1f2      	bne.n	8006dee <sbrk_aligned+0x22>
 8006e08:	e7ef      	b.n	8006dea <sbrk_aligned+0x1e>
 8006e0a:	bf00      	nop
 8006e0c:	200004f8 	.word	0x200004f8

08006e10 <_malloc_r>:
 8006e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e14:	1ccd      	adds	r5, r1, #3
 8006e16:	f025 0503 	bic.w	r5, r5, #3
 8006e1a:	3508      	adds	r5, #8
 8006e1c:	2d0c      	cmp	r5, #12
 8006e1e:	bf38      	it	cc
 8006e20:	250c      	movcc	r5, #12
 8006e22:	2d00      	cmp	r5, #0
 8006e24:	4606      	mov	r6, r0
 8006e26:	db01      	blt.n	8006e2c <_malloc_r+0x1c>
 8006e28:	42a9      	cmp	r1, r5
 8006e2a:	d904      	bls.n	8006e36 <_malloc_r+0x26>
 8006e2c:	230c      	movs	r3, #12
 8006e2e:	6033      	str	r3, [r6, #0]
 8006e30:	2000      	movs	r0, #0
 8006e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f0c <_malloc_r+0xfc>
 8006e3a:	f000 f869 	bl	8006f10 <__malloc_lock>
 8006e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e42:	461c      	mov	r4, r3
 8006e44:	bb44      	cbnz	r4, 8006e98 <_malloc_r+0x88>
 8006e46:	4629      	mov	r1, r5
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7ff ffbf 	bl	8006dcc <sbrk_aligned>
 8006e4e:	1c43      	adds	r3, r0, #1
 8006e50:	4604      	mov	r4, r0
 8006e52:	d158      	bne.n	8006f06 <_malloc_r+0xf6>
 8006e54:	f8d8 4000 	ldr.w	r4, [r8]
 8006e58:	4627      	mov	r7, r4
 8006e5a:	2f00      	cmp	r7, #0
 8006e5c:	d143      	bne.n	8006ee6 <_malloc_r+0xd6>
 8006e5e:	2c00      	cmp	r4, #0
 8006e60:	d04b      	beq.n	8006efa <_malloc_r+0xea>
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	4639      	mov	r1, r7
 8006e66:	4630      	mov	r0, r6
 8006e68:	eb04 0903 	add.w	r9, r4, r3
 8006e6c:	f000 fec4 	bl	8007bf8 <_sbrk_r>
 8006e70:	4581      	cmp	r9, r0
 8006e72:	d142      	bne.n	8006efa <_malloc_r+0xea>
 8006e74:	6821      	ldr	r1, [r4, #0]
 8006e76:	1a6d      	subs	r5, r5, r1
 8006e78:	4629      	mov	r1, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	f7ff ffa6 	bl	8006dcc <sbrk_aligned>
 8006e80:	3001      	adds	r0, #1
 8006e82:	d03a      	beq.n	8006efa <_malloc_r+0xea>
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	442b      	add	r3, r5
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	bb62      	cbnz	r2, 8006eec <_malloc_r+0xdc>
 8006e92:	f8c8 7000 	str.w	r7, [r8]
 8006e96:	e00f      	b.n	8006eb8 <_malloc_r+0xa8>
 8006e98:	6822      	ldr	r2, [r4, #0]
 8006e9a:	1b52      	subs	r2, r2, r5
 8006e9c:	d420      	bmi.n	8006ee0 <_malloc_r+0xd0>
 8006e9e:	2a0b      	cmp	r2, #11
 8006ea0:	d917      	bls.n	8006ed2 <_malloc_r+0xc2>
 8006ea2:	1961      	adds	r1, r4, r5
 8006ea4:	42a3      	cmp	r3, r4
 8006ea6:	6025      	str	r5, [r4, #0]
 8006ea8:	bf18      	it	ne
 8006eaa:	6059      	strne	r1, [r3, #4]
 8006eac:	6863      	ldr	r3, [r4, #4]
 8006eae:	bf08      	it	eq
 8006eb0:	f8c8 1000 	streq.w	r1, [r8]
 8006eb4:	5162      	str	r2, [r4, r5]
 8006eb6:	604b      	str	r3, [r1, #4]
 8006eb8:	4630      	mov	r0, r6
 8006eba:	f000 f82f 	bl	8006f1c <__malloc_unlock>
 8006ebe:	f104 000b 	add.w	r0, r4, #11
 8006ec2:	1d23      	adds	r3, r4, #4
 8006ec4:	f020 0007 	bic.w	r0, r0, #7
 8006ec8:	1ac2      	subs	r2, r0, r3
 8006eca:	bf1c      	itt	ne
 8006ecc:	1a1b      	subne	r3, r3, r0
 8006ece:	50a3      	strne	r3, [r4, r2]
 8006ed0:	e7af      	b.n	8006e32 <_malloc_r+0x22>
 8006ed2:	6862      	ldr	r2, [r4, #4]
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	bf0c      	ite	eq
 8006ed8:	f8c8 2000 	streq.w	r2, [r8]
 8006edc:	605a      	strne	r2, [r3, #4]
 8006ede:	e7eb      	b.n	8006eb8 <_malloc_r+0xa8>
 8006ee0:	4623      	mov	r3, r4
 8006ee2:	6864      	ldr	r4, [r4, #4]
 8006ee4:	e7ae      	b.n	8006e44 <_malloc_r+0x34>
 8006ee6:	463c      	mov	r4, r7
 8006ee8:	687f      	ldr	r7, [r7, #4]
 8006eea:	e7b6      	b.n	8006e5a <_malloc_r+0x4a>
 8006eec:	461a      	mov	r2, r3
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d1fb      	bne.n	8006eec <_malloc_r+0xdc>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	6053      	str	r3, [r2, #4]
 8006ef8:	e7de      	b.n	8006eb8 <_malloc_r+0xa8>
 8006efa:	230c      	movs	r3, #12
 8006efc:	6033      	str	r3, [r6, #0]
 8006efe:	4630      	mov	r0, r6
 8006f00:	f000 f80c 	bl	8006f1c <__malloc_unlock>
 8006f04:	e794      	b.n	8006e30 <_malloc_r+0x20>
 8006f06:	6005      	str	r5, [r0, #0]
 8006f08:	e7d6      	b.n	8006eb8 <_malloc_r+0xa8>
 8006f0a:	bf00      	nop
 8006f0c:	200004fc 	.word	0x200004fc

08006f10 <__malloc_lock>:
 8006f10:	4801      	ldr	r0, [pc, #4]	@ (8006f18 <__malloc_lock+0x8>)
 8006f12:	f7ff b8b8 	b.w	8006086 <__retarget_lock_acquire_recursive>
 8006f16:	bf00      	nop
 8006f18:	200004f4 	.word	0x200004f4

08006f1c <__malloc_unlock>:
 8006f1c:	4801      	ldr	r0, [pc, #4]	@ (8006f24 <__malloc_unlock+0x8>)
 8006f1e:	f7ff b8b3 	b.w	8006088 <__retarget_lock_release_recursive>
 8006f22:	bf00      	nop
 8006f24:	200004f4 	.word	0x200004f4

08006f28 <_Balloc>:
 8006f28:	b570      	push	{r4, r5, r6, lr}
 8006f2a:	69c6      	ldr	r6, [r0, #28]
 8006f2c:	4604      	mov	r4, r0
 8006f2e:	460d      	mov	r5, r1
 8006f30:	b976      	cbnz	r6, 8006f50 <_Balloc+0x28>
 8006f32:	2010      	movs	r0, #16
 8006f34:	f7ff ff42 	bl	8006dbc <malloc>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	61e0      	str	r0, [r4, #28]
 8006f3c:	b920      	cbnz	r0, 8006f48 <_Balloc+0x20>
 8006f3e:	4b18      	ldr	r3, [pc, #96]	@ (8006fa0 <_Balloc+0x78>)
 8006f40:	4818      	ldr	r0, [pc, #96]	@ (8006fa4 <_Balloc+0x7c>)
 8006f42:	216b      	movs	r1, #107	@ 0x6b
 8006f44:	f000 fe76 	bl	8007c34 <__assert_func>
 8006f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f4c:	6006      	str	r6, [r0, #0]
 8006f4e:	60c6      	str	r6, [r0, #12]
 8006f50:	69e6      	ldr	r6, [r4, #28]
 8006f52:	68f3      	ldr	r3, [r6, #12]
 8006f54:	b183      	cbz	r3, 8006f78 <_Balloc+0x50>
 8006f56:	69e3      	ldr	r3, [r4, #28]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f5e:	b9b8      	cbnz	r0, 8006f90 <_Balloc+0x68>
 8006f60:	2101      	movs	r1, #1
 8006f62:	fa01 f605 	lsl.w	r6, r1, r5
 8006f66:	1d72      	adds	r2, r6, #5
 8006f68:	0092      	lsls	r2, r2, #2
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f000 fe80 	bl	8007c70 <_calloc_r>
 8006f70:	b160      	cbz	r0, 8006f8c <_Balloc+0x64>
 8006f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f76:	e00e      	b.n	8006f96 <_Balloc+0x6e>
 8006f78:	2221      	movs	r2, #33	@ 0x21
 8006f7a:	2104      	movs	r1, #4
 8006f7c:	4620      	mov	r0, r4
 8006f7e:	f000 fe77 	bl	8007c70 <_calloc_r>
 8006f82:	69e3      	ldr	r3, [r4, #28]
 8006f84:	60f0      	str	r0, [r6, #12]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d1e4      	bne.n	8006f56 <_Balloc+0x2e>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	bd70      	pop	{r4, r5, r6, pc}
 8006f90:	6802      	ldr	r2, [r0, #0]
 8006f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f96:	2300      	movs	r3, #0
 8006f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f9c:	e7f7      	b.n	8006f8e <_Balloc+0x66>
 8006f9e:	bf00      	nop
 8006fa0:	080090ed 	.word	0x080090ed
 8006fa4:	0800916d 	.word	0x0800916d

08006fa8 <_Bfree>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	69c6      	ldr	r6, [r0, #28]
 8006fac:	4605      	mov	r5, r0
 8006fae:	460c      	mov	r4, r1
 8006fb0:	b976      	cbnz	r6, 8006fd0 <_Bfree+0x28>
 8006fb2:	2010      	movs	r0, #16
 8006fb4:	f7ff ff02 	bl	8006dbc <malloc>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	61e8      	str	r0, [r5, #28]
 8006fbc:	b920      	cbnz	r0, 8006fc8 <_Bfree+0x20>
 8006fbe:	4b09      	ldr	r3, [pc, #36]	@ (8006fe4 <_Bfree+0x3c>)
 8006fc0:	4809      	ldr	r0, [pc, #36]	@ (8006fe8 <_Bfree+0x40>)
 8006fc2:	218f      	movs	r1, #143	@ 0x8f
 8006fc4:	f000 fe36 	bl	8007c34 <__assert_func>
 8006fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fcc:	6006      	str	r6, [r0, #0]
 8006fce:	60c6      	str	r6, [r0, #12]
 8006fd0:	b13c      	cbz	r4, 8006fe2 <_Bfree+0x3a>
 8006fd2:	69eb      	ldr	r3, [r5, #28]
 8006fd4:	6862      	ldr	r2, [r4, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fdc:	6021      	str	r1, [r4, #0]
 8006fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}
 8006fe4:	080090ed 	.word	0x080090ed
 8006fe8:	0800916d 	.word	0x0800916d

08006fec <__multadd>:
 8006fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff0:	690d      	ldr	r5, [r1, #16]
 8006ff2:	4607      	mov	r7, r0
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	461e      	mov	r6, r3
 8006ff8:	f101 0c14 	add.w	ip, r1, #20
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8007002:	b299      	uxth	r1, r3
 8007004:	fb02 6101 	mla	r1, r2, r1, r6
 8007008:	0c1e      	lsrs	r6, r3, #16
 800700a:	0c0b      	lsrs	r3, r1, #16
 800700c:	fb02 3306 	mla	r3, r2, r6, r3
 8007010:	b289      	uxth	r1, r1
 8007012:	3001      	adds	r0, #1
 8007014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007018:	4285      	cmp	r5, r0
 800701a:	f84c 1b04 	str.w	r1, [ip], #4
 800701e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007022:	dcec      	bgt.n	8006ffe <__multadd+0x12>
 8007024:	b30e      	cbz	r6, 800706a <__multadd+0x7e>
 8007026:	68a3      	ldr	r3, [r4, #8]
 8007028:	42ab      	cmp	r3, r5
 800702a:	dc19      	bgt.n	8007060 <__multadd+0x74>
 800702c:	6861      	ldr	r1, [r4, #4]
 800702e:	4638      	mov	r0, r7
 8007030:	3101      	adds	r1, #1
 8007032:	f7ff ff79 	bl	8006f28 <_Balloc>
 8007036:	4680      	mov	r8, r0
 8007038:	b928      	cbnz	r0, 8007046 <__multadd+0x5a>
 800703a:	4602      	mov	r2, r0
 800703c:	4b0c      	ldr	r3, [pc, #48]	@ (8007070 <__multadd+0x84>)
 800703e:	480d      	ldr	r0, [pc, #52]	@ (8007074 <__multadd+0x88>)
 8007040:	21ba      	movs	r1, #186	@ 0xba
 8007042:	f000 fdf7 	bl	8007c34 <__assert_func>
 8007046:	6922      	ldr	r2, [r4, #16]
 8007048:	3202      	adds	r2, #2
 800704a:	f104 010c 	add.w	r1, r4, #12
 800704e:	0092      	lsls	r2, r2, #2
 8007050:	300c      	adds	r0, #12
 8007052:	f000 fde1 	bl	8007c18 <memcpy>
 8007056:	4621      	mov	r1, r4
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ffa5 	bl	8006fa8 <_Bfree>
 800705e:	4644      	mov	r4, r8
 8007060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007064:	3501      	adds	r5, #1
 8007066:	615e      	str	r6, [r3, #20]
 8007068:	6125      	str	r5, [r4, #16]
 800706a:	4620      	mov	r0, r4
 800706c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007070:	0800915c 	.word	0x0800915c
 8007074:	0800916d 	.word	0x0800916d

08007078 <__hi0bits>:
 8007078:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800707c:	4603      	mov	r3, r0
 800707e:	bf36      	itet	cc
 8007080:	0403      	lslcc	r3, r0, #16
 8007082:	2000      	movcs	r0, #0
 8007084:	2010      	movcc	r0, #16
 8007086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800708a:	bf3c      	itt	cc
 800708c:	021b      	lslcc	r3, r3, #8
 800708e:	3008      	addcc	r0, #8
 8007090:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007094:	bf3c      	itt	cc
 8007096:	011b      	lslcc	r3, r3, #4
 8007098:	3004      	addcc	r0, #4
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800709e:	bf3c      	itt	cc
 80070a0:	009b      	lslcc	r3, r3, #2
 80070a2:	3002      	addcc	r0, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	db05      	blt.n	80070b4 <__hi0bits+0x3c>
 80070a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070ac:	f100 0001 	add.w	r0, r0, #1
 80070b0:	bf08      	it	eq
 80070b2:	2020      	moveq	r0, #32
 80070b4:	4770      	bx	lr

080070b6 <__lo0bits>:
 80070b6:	6803      	ldr	r3, [r0, #0]
 80070b8:	4602      	mov	r2, r0
 80070ba:	f013 0007 	ands.w	r0, r3, #7
 80070be:	d00b      	beq.n	80070d8 <__lo0bits+0x22>
 80070c0:	07d9      	lsls	r1, r3, #31
 80070c2:	d421      	bmi.n	8007108 <__lo0bits+0x52>
 80070c4:	0798      	lsls	r0, r3, #30
 80070c6:	bf49      	itett	mi
 80070c8:	085b      	lsrmi	r3, r3, #1
 80070ca:	089b      	lsrpl	r3, r3, #2
 80070cc:	2001      	movmi	r0, #1
 80070ce:	6013      	strmi	r3, [r2, #0]
 80070d0:	bf5c      	itt	pl
 80070d2:	6013      	strpl	r3, [r2, #0]
 80070d4:	2002      	movpl	r0, #2
 80070d6:	4770      	bx	lr
 80070d8:	b299      	uxth	r1, r3
 80070da:	b909      	cbnz	r1, 80070e0 <__lo0bits+0x2a>
 80070dc:	0c1b      	lsrs	r3, r3, #16
 80070de:	2010      	movs	r0, #16
 80070e0:	b2d9      	uxtb	r1, r3
 80070e2:	b909      	cbnz	r1, 80070e8 <__lo0bits+0x32>
 80070e4:	3008      	adds	r0, #8
 80070e6:	0a1b      	lsrs	r3, r3, #8
 80070e8:	0719      	lsls	r1, r3, #28
 80070ea:	bf04      	itt	eq
 80070ec:	091b      	lsreq	r3, r3, #4
 80070ee:	3004      	addeq	r0, #4
 80070f0:	0799      	lsls	r1, r3, #30
 80070f2:	bf04      	itt	eq
 80070f4:	089b      	lsreq	r3, r3, #2
 80070f6:	3002      	addeq	r0, #2
 80070f8:	07d9      	lsls	r1, r3, #31
 80070fa:	d403      	bmi.n	8007104 <__lo0bits+0x4e>
 80070fc:	085b      	lsrs	r3, r3, #1
 80070fe:	f100 0001 	add.w	r0, r0, #1
 8007102:	d003      	beq.n	800710c <__lo0bits+0x56>
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	4770      	bx	lr
 8007108:	2000      	movs	r0, #0
 800710a:	4770      	bx	lr
 800710c:	2020      	movs	r0, #32
 800710e:	4770      	bx	lr

08007110 <__i2b>:
 8007110:	b510      	push	{r4, lr}
 8007112:	460c      	mov	r4, r1
 8007114:	2101      	movs	r1, #1
 8007116:	f7ff ff07 	bl	8006f28 <_Balloc>
 800711a:	4602      	mov	r2, r0
 800711c:	b928      	cbnz	r0, 800712a <__i2b+0x1a>
 800711e:	4b05      	ldr	r3, [pc, #20]	@ (8007134 <__i2b+0x24>)
 8007120:	4805      	ldr	r0, [pc, #20]	@ (8007138 <__i2b+0x28>)
 8007122:	f240 1145 	movw	r1, #325	@ 0x145
 8007126:	f000 fd85 	bl	8007c34 <__assert_func>
 800712a:	2301      	movs	r3, #1
 800712c:	6144      	str	r4, [r0, #20]
 800712e:	6103      	str	r3, [r0, #16]
 8007130:	bd10      	pop	{r4, pc}
 8007132:	bf00      	nop
 8007134:	0800915c 	.word	0x0800915c
 8007138:	0800916d 	.word	0x0800916d

0800713c <__multiply>:
 800713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	4614      	mov	r4, r2
 8007142:	690a      	ldr	r2, [r1, #16]
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	429a      	cmp	r2, r3
 8007148:	bfa8      	it	ge
 800714a:	4623      	movge	r3, r4
 800714c:	460f      	mov	r7, r1
 800714e:	bfa4      	itt	ge
 8007150:	460c      	movge	r4, r1
 8007152:	461f      	movge	r7, r3
 8007154:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007158:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800715c:	68a3      	ldr	r3, [r4, #8]
 800715e:	6861      	ldr	r1, [r4, #4]
 8007160:	eb0a 0609 	add.w	r6, sl, r9
 8007164:	42b3      	cmp	r3, r6
 8007166:	b085      	sub	sp, #20
 8007168:	bfb8      	it	lt
 800716a:	3101      	addlt	r1, #1
 800716c:	f7ff fedc 	bl	8006f28 <_Balloc>
 8007170:	b930      	cbnz	r0, 8007180 <__multiply+0x44>
 8007172:	4602      	mov	r2, r0
 8007174:	4b44      	ldr	r3, [pc, #272]	@ (8007288 <__multiply+0x14c>)
 8007176:	4845      	ldr	r0, [pc, #276]	@ (800728c <__multiply+0x150>)
 8007178:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800717c:	f000 fd5a 	bl	8007c34 <__assert_func>
 8007180:	f100 0514 	add.w	r5, r0, #20
 8007184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007188:	462b      	mov	r3, r5
 800718a:	2200      	movs	r2, #0
 800718c:	4543      	cmp	r3, r8
 800718e:	d321      	bcc.n	80071d4 <__multiply+0x98>
 8007190:	f107 0114 	add.w	r1, r7, #20
 8007194:	f104 0214 	add.w	r2, r4, #20
 8007198:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800719c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071a0:	9302      	str	r3, [sp, #8]
 80071a2:	1b13      	subs	r3, r2, r4
 80071a4:	3b15      	subs	r3, #21
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	3304      	adds	r3, #4
 80071ac:	f104 0715 	add.w	r7, r4, #21
 80071b0:	42ba      	cmp	r2, r7
 80071b2:	bf38      	it	cc
 80071b4:	2304      	movcc	r3, #4
 80071b6:	9301      	str	r3, [sp, #4]
 80071b8:	9b02      	ldr	r3, [sp, #8]
 80071ba:	9103      	str	r1, [sp, #12]
 80071bc:	428b      	cmp	r3, r1
 80071be:	d80c      	bhi.n	80071da <__multiply+0x9e>
 80071c0:	2e00      	cmp	r6, #0
 80071c2:	dd03      	ble.n	80071cc <__multiply+0x90>
 80071c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d05b      	beq.n	8007284 <__multiply+0x148>
 80071cc:	6106      	str	r6, [r0, #16]
 80071ce:	b005      	add	sp, #20
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	f843 2b04 	str.w	r2, [r3], #4
 80071d8:	e7d8      	b.n	800718c <__multiply+0x50>
 80071da:	f8b1 a000 	ldrh.w	sl, [r1]
 80071de:	f1ba 0f00 	cmp.w	sl, #0
 80071e2:	d024      	beq.n	800722e <__multiply+0xf2>
 80071e4:	f104 0e14 	add.w	lr, r4, #20
 80071e8:	46a9      	mov	r9, r5
 80071ea:	f04f 0c00 	mov.w	ip, #0
 80071ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071f2:	f8d9 3000 	ldr.w	r3, [r9]
 80071f6:	fa1f fb87 	uxth.w	fp, r7
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007200:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007204:	f8d9 7000 	ldr.w	r7, [r9]
 8007208:	4463      	add	r3, ip
 800720a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800720e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007212:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007216:	b29b      	uxth	r3, r3
 8007218:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800721c:	4572      	cmp	r2, lr
 800721e:	f849 3b04 	str.w	r3, [r9], #4
 8007222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007226:	d8e2      	bhi.n	80071ee <__multiply+0xb2>
 8007228:	9b01      	ldr	r3, [sp, #4]
 800722a:	f845 c003 	str.w	ip, [r5, r3]
 800722e:	9b03      	ldr	r3, [sp, #12]
 8007230:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007234:	3104      	adds	r1, #4
 8007236:	f1b9 0f00 	cmp.w	r9, #0
 800723a:	d021      	beq.n	8007280 <__multiply+0x144>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	f104 0c14 	add.w	ip, r4, #20
 8007242:	46ae      	mov	lr, r5
 8007244:	f04f 0a00 	mov.w	sl, #0
 8007248:	f8bc b000 	ldrh.w	fp, [ip]
 800724c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007250:	fb09 770b 	mla	r7, r9, fp, r7
 8007254:	4457      	add	r7, sl
 8007256:	b29b      	uxth	r3, r3
 8007258:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800725c:	f84e 3b04 	str.w	r3, [lr], #4
 8007260:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007264:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007268:	f8be 3000 	ldrh.w	r3, [lr]
 800726c:	fb09 330a 	mla	r3, r9, sl, r3
 8007270:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007274:	4562      	cmp	r2, ip
 8007276:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800727a:	d8e5      	bhi.n	8007248 <__multiply+0x10c>
 800727c:	9f01      	ldr	r7, [sp, #4]
 800727e:	51eb      	str	r3, [r5, r7]
 8007280:	3504      	adds	r5, #4
 8007282:	e799      	b.n	80071b8 <__multiply+0x7c>
 8007284:	3e01      	subs	r6, #1
 8007286:	e79b      	b.n	80071c0 <__multiply+0x84>
 8007288:	0800915c 	.word	0x0800915c
 800728c:	0800916d 	.word	0x0800916d

08007290 <__pow5mult>:
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	4615      	mov	r5, r2
 8007296:	f012 0203 	ands.w	r2, r2, #3
 800729a:	4607      	mov	r7, r0
 800729c:	460e      	mov	r6, r1
 800729e:	d007      	beq.n	80072b0 <__pow5mult+0x20>
 80072a0:	4c25      	ldr	r4, [pc, #148]	@ (8007338 <__pow5mult+0xa8>)
 80072a2:	3a01      	subs	r2, #1
 80072a4:	2300      	movs	r3, #0
 80072a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072aa:	f7ff fe9f 	bl	8006fec <__multadd>
 80072ae:	4606      	mov	r6, r0
 80072b0:	10ad      	asrs	r5, r5, #2
 80072b2:	d03d      	beq.n	8007330 <__pow5mult+0xa0>
 80072b4:	69fc      	ldr	r4, [r7, #28]
 80072b6:	b97c      	cbnz	r4, 80072d8 <__pow5mult+0x48>
 80072b8:	2010      	movs	r0, #16
 80072ba:	f7ff fd7f 	bl	8006dbc <malloc>
 80072be:	4602      	mov	r2, r0
 80072c0:	61f8      	str	r0, [r7, #28]
 80072c2:	b928      	cbnz	r0, 80072d0 <__pow5mult+0x40>
 80072c4:	4b1d      	ldr	r3, [pc, #116]	@ (800733c <__pow5mult+0xac>)
 80072c6:	481e      	ldr	r0, [pc, #120]	@ (8007340 <__pow5mult+0xb0>)
 80072c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072cc:	f000 fcb2 	bl	8007c34 <__assert_func>
 80072d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072d4:	6004      	str	r4, [r0, #0]
 80072d6:	60c4      	str	r4, [r0, #12]
 80072d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072e0:	b94c      	cbnz	r4, 80072f6 <__pow5mult+0x66>
 80072e2:	f240 2171 	movw	r1, #625	@ 0x271
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7ff ff12 	bl	8007110 <__i2b>
 80072ec:	2300      	movs	r3, #0
 80072ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80072f2:	4604      	mov	r4, r0
 80072f4:	6003      	str	r3, [r0, #0]
 80072f6:	f04f 0900 	mov.w	r9, #0
 80072fa:	07eb      	lsls	r3, r5, #31
 80072fc:	d50a      	bpl.n	8007314 <__pow5mult+0x84>
 80072fe:	4631      	mov	r1, r6
 8007300:	4622      	mov	r2, r4
 8007302:	4638      	mov	r0, r7
 8007304:	f7ff ff1a 	bl	800713c <__multiply>
 8007308:	4631      	mov	r1, r6
 800730a:	4680      	mov	r8, r0
 800730c:	4638      	mov	r0, r7
 800730e:	f7ff fe4b 	bl	8006fa8 <_Bfree>
 8007312:	4646      	mov	r6, r8
 8007314:	106d      	asrs	r5, r5, #1
 8007316:	d00b      	beq.n	8007330 <__pow5mult+0xa0>
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	b938      	cbnz	r0, 800732c <__pow5mult+0x9c>
 800731c:	4622      	mov	r2, r4
 800731e:	4621      	mov	r1, r4
 8007320:	4638      	mov	r0, r7
 8007322:	f7ff ff0b 	bl	800713c <__multiply>
 8007326:	6020      	str	r0, [r4, #0]
 8007328:	f8c0 9000 	str.w	r9, [r0]
 800732c:	4604      	mov	r4, r0
 800732e:	e7e4      	b.n	80072fa <__pow5mult+0x6a>
 8007330:	4630      	mov	r0, r6
 8007332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007336:	bf00      	nop
 8007338:	080091c8 	.word	0x080091c8
 800733c:	080090ed 	.word	0x080090ed
 8007340:	0800916d 	.word	0x0800916d

08007344 <__lshift>:
 8007344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	460c      	mov	r4, r1
 800734a:	6849      	ldr	r1, [r1, #4]
 800734c:	6923      	ldr	r3, [r4, #16]
 800734e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	4607      	mov	r7, r0
 8007356:	4691      	mov	r9, r2
 8007358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800735c:	f108 0601 	add.w	r6, r8, #1
 8007360:	42b3      	cmp	r3, r6
 8007362:	db0b      	blt.n	800737c <__lshift+0x38>
 8007364:	4638      	mov	r0, r7
 8007366:	f7ff fddf 	bl	8006f28 <_Balloc>
 800736a:	4605      	mov	r5, r0
 800736c:	b948      	cbnz	r0, 8007382 <__lshift+0x3e>
 800736e:	4602      	mov	r2, r0
 8007370:	4b28      	ldr	r3, [pc, #160]	@ (8007414 <__lshift+0xd0>)
 8007372:	4829      	ldr	r0, [pc, #164]	@ (8007418 <__lshift+0xd4>)
 8007374:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007378:	f000 fc5c 	bl	8007c34 <__assert_func>
 800737c:	3101      	adds	r1, #1
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	e7ee      	b.n	8007360 <__lshift+0x1c>
 8007382:	2300      	movs	r3, #0
 8007384:	f100 0114 	add.w	r1, r0, #20
 8007388:	f100 0210 	add.w	r2, r0, #16
 800738c:	4618      	mov	r0, r3
 800738e:	4553      	cmp	r3, sl
 8007390:	db33      	blt.n	80073fa <__lshift+0xb6>
 8007392:	6920      	ldr	r0, [r4, #16]
 8007394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007398:	f104 0314 	add.w	r3, r4, #20
 800739c:	f019 091f 	ands.w	r9, r9, #31
 80073a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073a8:	d02b      	beq.n	8007402 <__lshift+0xbe>
 80073aa:	f1c9 0e20 	rsb	lr, r9, #32
 80073ae:	468a      	mov	sl, r1
 80073b0:	2200      	movs	r2, #0
 80073b2:	6818      	ldr	r0, [r3, #0]
 80073b4:	fa00 f009 	lsl.w	r0, r0, r9
 80073b8:	4310      	orrs	r0, r2
 80073ba:	f84a 0b04 	str.w	r0, [sl], #4
 80073be:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c2:	459c      	cmp	ip, r3
 80073c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80073c8:	d8f3      	bhi.n	80073b2 <__lshift+0x6e>
 80073ca:	ebac 0304 	sub.w	r3, ip, r4
 80073ce:	3b15      	subs	r3, #21
 80073d0:	f023 0303 	bic.w	r3, r3, #3
 80073d4:	3304      	adds	r3, #4
 80073d6:	f104 0015 	add.w	r0, r4, #21
 80073da:	4584      	cmp	ip, r0
 80073dc:	bf38      	it	cc
 80073de:	2304      	movcc	r3, #4
 80073e0:	50ca      	str	r2, [r1, r3]
 80073e2:	b10a      	cbz	r2, 80073e8 <__lshift+0xa4>
 80073e4:	f108 0602 	add.w	r6, r8, #2
 80073e8:	3e01      	subs	r6, #1
 80073ea:	4638      	mov	r0, r7
 80073ec:	612e      	str	r6, [r5, #16]
 80073ee:	4621      	mov	r1, r4
 80073f0:	f7ff fdda 	bl	8006fa8 <_Bfree>
 80073f4:	4628      	mov	r0, r5
 80073f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80073fe:	3301      	adds	r3, #1
 8007400:	e7c5      	b.n	800738e <__lshift+0x4a>
 8007402:	3904      	subs	r1, #4
 8007404:	f853 2b04 	ldr.w	r2, [r3], #4
 8007408:	f841 2f04 	str.w	r2, [r1, #4]!
 800740c:	459c      	cmp	ip, r3
 800740e:	d8f9      	bhi.n	8007404 <__lshift+0xc0>
 8007410:	e7ea      	b.n	80073e8 <__lshift+0xa4>
 8007412:	bf00      	nop
 8007414:	0800915c 	.word	0x0800915c
 8007418:	0800916d 	.word	0x0800916d

0800741c <__mcmp>:
 800741c:	690a      	ldr	r2, [r1, #16]
 800741e:	4603      	mov	r3, r0
 8007420:	6900      	ldr	r0, [r0, #16]
 8007422:	1a80      	subs	r0, r0, r2
 8007424:	b530      	push	{r4, r5, lr}
 8007426:	d10e      	bne.n	8007446 <__mcmp+0x2a>
 8007428:	3314      	adds	r3, #20
 800742a:	3114      	adds	r1, #20
 800742c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007430:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007434:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800743c:	4295      	cmp	r5, r2
 800743e:	d003      	beq.n	8007448 <__mcmp+0x2c>
 8007440:	d205      	bcs.n	800744e <__mcmp+0x32>
 8007442:	f04f 30ff 	mov.w	r0, #4294967295
 8007446:	bd30      	pop	{r4, r5, pc}
 8007448:	42a3      	cmp	r3, r4
 800744a:	d3f3      	bcc.n	8007434 <__mcmp+0x18>
 800744c:	e7fb      	b.n	8007446 <__mcmp+0x2a>
 800744e:	2001      	movs	r0, #1
 8007450:	e7f9      	b.n	8007446 <__mcmp+0x2a>
	...

08007454 <__mdiff>:
 8007454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007458:	4689      	mov	r9, r1
 800745a:	4606      	mov	r6, r0
 800745c:	4611      	mov	r1, r2
 800745e:	4648      	mov	r0, r9
 8007460:	4614      	mov	r4, r2
 8007462:	f7ff ffdb 	bl	800741c <__mcmp>
 8007466:	1e05      	subs	r5, r0, #0
 8007468:	d112      	bne.n	8007490 <__mdiff+0x3c>
 800746a:	4629      	mov	r1, r5
 800746c:	4630      	mov	r0, r6
 800746e:	f7ff fd5b 	bl	8006f28 <_Balloc>
 8007472:	4602      	mov	r2, r0
 8007474:	b928      	cbnz	r0, 8007482 <__mdiff+0x2e>
 8007476:	4b3f      	ldr	r3, [pc, #252]	@ (8007574 <__mdiff+0x120>)
 8007478:	f240 2137 	movw	r1, #567	@ 0x237
 800747c:	483e      	ldr	r0, [pc, #248]	@ (8007578 <__mdiff+0x124>)
 800747e:	f000 fbd9 	bl	8007c34 <__assert_func>
 8007482:	2301      	movs	r3, #1
 8007484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007488:	4610      	mov	r0, r2
 800748a:	b003      	add	sp, #12
 800748c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007490:	bfbc      	itt	lt
 8007492:	464b      	movlt	r3, r9
 8007494:	46a1      	movlt	r9, r4
 8007496:	4630      	mov	r0, r6
 8007498:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800749c:	bfba      	itte	lt
 800749e:	461c      	movlt	r4, r3
 80074a0:	2501      	movlt	r5, #1
 80074a2:	2500      	movge	r5, #0
 80074a4:	f7ff fd40 	bl	8006f28 <_Balloc>
 80074a8:	4602      	mov	r2, r0
 80074aa:	b918      	cbnz	r0, 80074b4 <__mdiff+0x60>
 80074ac:	4b31      	ldr	r3, [pc, #196]	@ (8007574 <__mdiff+0x120>)
 80074ae:	f240 2145 	movw	r1, #581	@ 0x245
 80074b2:	e7e3      	b.n	800747c <__mdiff+0x28>
 80074b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074b8:	6926      	ldr	r6, [r4, #16]
 80074ba:	60c5      	str	r5, [r0, #12]
 80074bc:	f109 0310 	add.w	r3, r9, #16
 80074c0:	f109 0514 	add.w	r5, r9, #20
 80074c4:	f104 0e14 	add.w	lr, r4, #20
 80074c8:	f100 0b14 	add.w	fp, r0, #20
 80074cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074d4:	9301      	str	r3, [sp, #4]
 80074d6:	46d9      	mov	r9, fp
 80074d8:	f04f 0c00 	mov.w	ip, #0
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	fa1f f38a 	uxth.w	r3, sl
 80074ec:	4619      	mov	r1, r3
 80074ee:	b283      	uxth	r3, r0
 80074f0:	1acb      	subs	r3, r1, r3
 80074f2:	0c00      	lsrs	r0, r0, #16
 80074f4:	4463      	add	r3, ip
 80074f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80074fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80074fe:	b29b      	uxth	r3, r3
 8007500:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007504:	4576      	cmp	r6, lr
 8007506:	f849 3b04 	str.w	r3, [r9], #4
 800750a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800750e:	d8e5      	bhi.n	80074dc <__mdiff+0x88>
 8007510:	1b33      	subs	r3, r6, r4
 8007512:	3b15      	subs	r3, #21
 8007514:	f023 0303 	bic.w	r3, r3, #3
 8007518:	3415      	adds	r4, #21
 800751a:	3304      	adds	r3, #4
 800751c:	42a6      	cmp	r6, r4
 800751e:	bf38      	it	cc
 8007520:	2304      	movcc	r3, #4
 8007522:	441d      	add	r5, r3
 8007524:	445b      	add	r3, fp
 8007526:	461e      	mov	r6, r3
 8007528:	462c      	mov	r4, r5
 800752a:	4544      	cmp	r4, r8
 800752c:	d30e      	bcc.n	800754c <__mdiff+0xf8>
 800752e:	f108 0103 	add.w	r1, r8, #3
 8007532:	1b49      	subs	r1, r1, r5
 8007534:	f021 0103 	bic.w	r1, r1, #3
 8007538:	3d03      	subs	r5, #3
 800753a:	45a8      	cmp	r8, r5
 800753c:	bf38      	it	cc
 800753e:	2100      	movcc	r1, #0
 8007540:	440b      	add	r3, r1
 8007542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007546:	b191      	cbz	r1, 800756e <__mdiff+0x11a>
 8007548:	6117      	str	r7, [r2, #16]
 800754a:	e79d      	b.n	8007488 <__mdiff+0x34>
 800754c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007550:	46e6      	mov	lr, ip
 8007552:	0c08      	lsrs	r0, r1, #16
 8007554:	fa1c fc81 	uxtah	ip, ip, r1
 8007558:	4471      	add	r1, lr
 800755a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800755e:	b289      	uxth	r1, r1
 8007560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007564:	f846 1b04 	str.w	r1, [r6], #4
 8007568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800756c:	e7dd      	b.n	800752a <__mdiff+0xd6>
 800756e:	3f01      	subs	r7, #1
 8007570:	e7e7      	b.n	8007542 <__mdiff+0xee>
 8007572:	bf00      	nop
 8007574:	0800915c 	.word	0x0800915c
 8007578:	0800916d 	.word	0x0800916d

0800757c <__d2b>:
 800757c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007580:	460f      	mov	r7, r1
 8007582:	2101      	movs	r1, #1
 8007584:	ec59 8b10 	vmov	r8, r9, d0
 8007588:	4616      	mov	r6, r2
 800758a:	f7ff fccd 	bl	8006f28 <_Balloc>
 800758e:	4604      	mov	r4, r0
 8007590:	b930      	cbnz	r0, 80075a0 <__d2b+0x24>
 8007592:	4602      	mov	r2, r0
 8007594:	4b23      	ldr	r3, [pc, #140]	@ (8007624 <__d2b+0xa8>)
 8007596:	4824      	ldr	r0, [pc, #144]	@ (8007628 <__d2b+0xac>)
 8007598:	f240 310f 	movw	r1, #783	@ 0x30f
 800759c:	f000 fb4a 	bl	8007c34 <__assert_func>
 80075a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80075a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075a8:	b10d      	cbz	r5, 80075ae <__d2b+0x32>
 80075aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075ae:	9301      	str	r3, [sp, #4]
 80075b0:	f1b8 0300 	subs.w	r3, r8, #0
 80075b4:	d023      	beq.n	80075fe <__d2b+0x82>
 80075b6:	4668      	mov	r0, sp
 80075b8:	9300      	str	r3, [sp, #0]
 80075ba:	f7ff fd7c 	bl	80070b6 <__lo0bits>
 80075be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80075c2:	b1d0      	cbz	r0, 80075fa <__d2b+0x7e>
 80075c4:	f1c0 0320 	rsb	r3, r0, #32
 80075c8:	fa02 f303 	lsl.w	r3, r2, r3
 80075cc:	430b      	orrs	r3, r1
 80075ce:	40c2      	lsrs	r2, r0
 80075d0:	6163      	str	r3, [r4, #20]
 80075d2:	9201      	str	r2, [sp, #4]
 80075d4:	9b01      	ldr	r3, [sp, #4]
 80075d6:	61a3      	str	r3, [r4, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	bf0c      	ite	eq
 80075dc:	2201      	moveq	r2, #1
 80075de:	2202      	movne	r2, #2
 80075e0:	6122      	str	r2, [r4, #16]
 80075e2:	b1a5      	cbz	r5, 800760e <__d2b+0x92>
 80075e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80075e8:	4405      	add	r5, r0
 80075ea:	603d      	str	r5, [r7, #0]
 80075ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80075f0:	6030      	str	r0, [r6, #0]
 80075f2:	4620      	mov	r0, r4
 80075f4:	b003      	add	sp, #12
 80075f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075fa:	6161      	str	r1, [r4, #20]
 80075fc:	e7ea      	b.n	80075d4 <__d2b+0x58>
 80075fe:	a801      	add	r0, sp, #4
 8007600:	f7ff fd59 	bl	80070b6 <__lo0bits>
 8007604:	9b01      	ldr	r3, [sp, #4]
 8007606:	6163      	str	r3, [r4, #20]
 8007608:	3020      	adds	r0, #32
 800760a:	2201      	movs	r2, #1
 800760c:	e7e8      	b.n	80075e0 <__d2b+0x64>
 800760e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007616:	6038      	str	r0, [r7, #0]
 8007618:	6918      	ldr	r0, [r3, #16]
 800761a:	f7ff fd2d 	bl	8007078 <__hi0bits>
 800761e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007622:	e7e5      	b.n	80075f0 <__d2b+0x74>
 8007624:	0800915c 	.word	0x0800915c
 8007628:	0800916d 	.word	0x0800916d

0800762c <__ssputs_r>:
 800762c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007630:	688e      	ldr	r6, [r1, #8]
 8007632:	461f      	mov	r7, r3
 8007634:	42be      	cmp	r6, r7
 8007636:	680b      	ldr	r3, [r1, #0]
 8007638:	4682      	mov	sl, r0
 800763a:	460c      	mov	r4, r1
 800763c:	4690      	mov	r8, r2
 800763e:	d82d      	bhi.n	800769c <__ssputs_r+0x70>
 8007640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007644:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007648:	d026      	beq.n	8007698 <__ssputs_r+0x6c>
 800764a:	6965      	ldr	r5, [r4, #20]
 800764c:	6909      	ldr	r1, [r1, #16]
 800764e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007652:	eba3 0901 	sub.w	r9, r3, r1
 8007656:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800765a:	1c7b      	adds	r3, r7, #1
 800765c:	444b      	add	r3, r9
 800765e:	106d      	asrs	r5, r5, #1
 8007660:	429d      	cmp	r5, r3
 8007662:	bf38      	it	cc
 8007664:	461d      	movcc	r5, r3
 8007666:	0553      	lsls	r3, r2, #21
 8007668:	d527      	bpl.n	80076ba <__ssputs_r+0x8e>
 800766a:	4629      	mov	r1, r5
 800766c:	f7ff fbd0 	bl	8006e10 <_malloc_r>
 8007670:	4606      	mov	r6, r0
 8007672:	b360      	cbz	r0, 80076ce <__ssputs_r+0xa2>
 8007674:	6921      	ldr	r1, [r4, #16]
 8007676:	464a      	mov	r2, r9
 8007678:	f000 face 	bl	8007c18 <memcpy>
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007682:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007686:	81a3      	strh	r3, [r4, #12]
 8007688:	6126      	str	r6, [r4, #16]
 800768a:	6165      	str	r5, [r4, #20]
 800768c:	444e      	add	r6, r9
 800768e:	eba5 0509 	sub.w	r5, r5, r9
 8007692:	6026      	str	r6, [r4, #0]
 8007694:	60a5      	str	r5, [r4, #8]
 8007696:	463e      	mov	r6, r7
 8007698:	42be      	cmp	r6, r7
 800769a:	d900      	bls.n	800769e <__ssputs_r+0x72>
 800769c:	463e      	mov	r6, r7
 800769e:	6820      	ldr	r0, [r4, #0]
 80076a0:	4632      	mov	r2, r6
 80076a2:	4641      	mov	r1, r8
 80076a4:	f000 fa8e 	bl	8007bc4 <memmove>
 80076a8:	68a3      	ldr	r3, [r4, #8]
 80076aa:	1b9b      	subs	r3, r3, r6
 80076ac:	60a3      	str	r3, [r4, #8]
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	4433      	add	r3, r6
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	2000      	movs	r0, #0
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	462a      	mov	r2, r5
 80076bc:	f000 fafe 	bl	8007cbc <_realloc_r>
 80076c0:	4606      	mov	r6, r0
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d1e0      	bne.n	8007688 <__ssputs_r+0x5c>
 80076c6:	6921      	ldr	r1, [r4, #16]
 80076c8:	4650      	mov	r0, sl
 80076ca:	f7ff fb2d 	bl	8006d28 <_free_r>
 80076ce:	230c      	movs	r3, #12
 80076d0:	f8ca 3000 	str.w	r3, [sl]
 80076d4:	89a3      	ldrh	r3, [r4, #12]
 80076d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076da:	81a3      	strh	r3, [r4, #12]
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	e7e9      	b.n	80076b6 <__ssputs_r+0x8a>
	...

080076e4 <_svfiprintf_r>:
 80076e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e8:	4698      	mov	r8, r3
 80076ea:	898b      	ldrh	r3, [r1, #12]
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	b09d      	sub	sp, #116	@ 0x74
 80076f0:	4607      	mov	r7, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	4614      	mov	r4, r2
 80076f6:	d510      	bpl.n	800771a <_svfiprintf_r+0x36>
 80076f8:	690b      	ldr	r3, [r1, #16]
 80076fa:	b973      	cbnz	r3, 800771a <_svfiprintf_r+0x36>
 80076fc:	2140      	movs	r1, #64	@ 0x40
 80076fe:	f7ff fb87 	bl	8006e10 <_malloc_r>
 8007702:	6028      	str	r0, [r5, #0]
 8007704:	6128      	str	r0, [r5, #16]
 8007706:	b930      	cbnz	r0, 8007716 <_svfiprintf_r+0x32>
 8007708:	230c      	movs	r3, #12
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	f04f 30ff 	mov.w	r0, #4294967295
 8007710:	b01d      	add	sp, #116	@ 0x74
 8007712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007716:	2340      	movs	r3, #64	@ 0x40
 8007718:	616b      	str	r3, [r5, #20]
 800771a:	2300      	movs	r3, #0
 800771c:	9309      	str	r3, [sp, #36]	@ 0x24
 800771e:	2320      	movs	r3, #32
 8007720:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007724:	f8cd 800c 	str.w	r8, [sp, #12]
 8007728:	2330      	movs	r3, #48	@ 0x30
 800772a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078c8 <_svfiprintf_r+0x1e4>
 800772e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007732:	f04f 0901 	mov.w	r9, #1
 8007736:	4623      	mov	r3, r4
 8007738:	469a      	mov	sl, r3
 800773a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800773e:	b10a      	cbz	r2, 8007744 <_svfiprintf_r+0x60>
 8007740:	2a25      	cmp	r2, #37	@ 0x25
 8007742:	d1f9      	bne.n	8007738 <_svfiprintf_r+0x54>
 8007744:	ebba 0b04 	subs.w	fp, sl, r4
 8007748:	d00b      	beq.n	8007762 <_svfiprintf_r+0x7e>
 800774a:	465b      	mov	r3, fp
 800774c:	4622      	mov	r2, r4
 800774e:	4629      	mov	r1, r5
 8007750:	4638      	mov	r0, r7
 8007752:	f7ff ff6b 	bl	800762c <__ssputs_r>
 8007756:	3001      	adds	r0, #1
 8007758:	f000 80a7 	beq.w	80078aa <_svfiprintf_r+0x1c6>
 800775c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800775e:	445a      	add	r2, fp
 8007760:	9209      	str	r2, [sp, #36]	@ 0x24
 8007762:	f89a 3000 	ldrb.w	r3, [sl]
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 809f 	beq.w	80078aa <_svfiprintf_r+0x1c6>
 800776c:	2300      	movs	r3, #0
 800776e:	f04f 32ff 	mov.w	r2, #4294967295
 8007772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007776:	f10a 0a01 	add.w	sl, sl, #1
 800777a:	9304      	str	r3, [sp, #16]
 800777c:	9307      	str	r3, [sp, #28]
 800777e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007782:	931a      	str	r3, [sp, #104]	@ 0x68
 8007784:	4654      	mov	r4, sl
 8007786:	2205      	movs	r2, #5
 8007788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778c:	484e      	ldr	r0, [pc, #312]	@ (80078c8 <_svfiprintf_r+0x1e4>)
 800778e:	f7f8 fd3f 	bl	8000210 <memchr>
 8007792:	9a04      	ldr	r2, [sp, #16]
 8007794:	b9d8      	cbnz	r0, 80077ce <_svfiprintf_r+0xea>
 8007796:	06d0      	lsls	r0, r2, #27
 8007798:	bf44      	itt	mi
 800779a:	2320      	movmi	r3, #32
 800779c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a0:	0711      	lsls	r1, r2, #28
 80077a2:	bf44      	itt	mi
 80077a4:	232b      	movmi	r3, #43	@ 0x2b
 80077a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077aa:	f89a 3000 	ldrb.w	r3, [sl]
 80077ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b0:	d015      	beq.n	80077de <_svfiprintf_r+0xfa>
 80077b2:	9a07      	ldr	r2, [sp, #28]
 80077b4:	4654      	mov	r4, sl
 80077b6:	2000      	movs	r0, #0
 80077b8:	f04f 0c0a 	mov.w	ip, #10
 80077bc:	4621      	mov	r1, r4
 80077be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c2:	3b30      	subs	r3, #48	@ 0x30
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	d94b      	bls.n	8007860 <_svfiprintf_r+0x17c>
 80077c8:	b1b0      	cbz	r0, 80077f8 <_svfiprintf_r+0x114>
 80077ca:	9207      	str	r2, [sp, #28]
 80077cc:	e014      	b.n	80077f8 <_svfiprintf_r+0x114>
 80077ce:	eba0 0308 	sub.w	r3, r0, r8
 80077d2:	fa09 f303 	lsl.w	r3, r9, r3
 80077d6:	4313      	orrs	r3, r2
 80077d8:	9304      	str	r3, [sp, #16]
 80077da:	46a2      	mov	sl, r4
 80077dc:	e7d2      	b.n	8007784 <_svfiprintf_r+0xa0>
 80077de:	9b03      	ldr	r3, [sp, #12]
 80077e0:	1d19      	adds	r1, r3, #4
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	9103      	str	r1, [sp, #12]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	bfbb      	ittet	lt
 80077ea:	425b      	neglt	r3, r3
 80077ec:	f042 0202 	orrlt.w	r2, r2, #2
 80077f0:	9307      	strge	r3, [sp, #28]
 80077f2:	9307      	strlt	r3, [sp, #28]
 80077f4:	bfb8      	it	lt
 80077f6:	9204      	strlt	r2, [sp, #16]
 80077f8:	7823      	ldrb	r3, [r4, #0]
 80077fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80077fc:	d10a      	bne.n	8007814 <_svfiprintf_r+0x130>
 80077fe:	7863      	ldrb	r3, [r4, #1]
 8007800:	2b2a      	cmp	r3, #42	@ 0x2a
 8007802:	d132      	bne.n	800786a <_svfiprintf_r+0x186>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	1d1a      	adds	r2, r3, #4
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	9203      	str	r2, [sp, #12]
 800780c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007810:	3402      	adds	r4, #2
 8007812:	9305      	str	r3, [sp, #20]
 8007814:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80078d8 <_svfiprintf_r+0x1f4>
 8007818:	7821      	ldrb	r1, [r4, #0]
 800781a:	2203      	movs	r2, #3
 800781c:	4650      	mov	r0, sl
 800781e:	f7f8 fcf7 	bl	8000210 <memchr>
 8007822:	b138      	cbz	r0, 8007834 <_svfiprintf_r+0x150>
 8007824:	9b04      	ldr	r3, [sp, #16]
 8007826:	eba0 000a 	sub.w	r0, r0, sl
 800782a:	2240      	movs	r2, #64	@ 0x40
 800782c:	4082      	lsls	r2, r0
 800782e:	4313      	orrs	r3, r2
 8007830:	3401      	adds	r4, #1
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007838:	4824      	ldr	r0, [pc, #144]	@ (80078cc <_svfiprintf_r+0x1e8>)
 800783a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800783e:	2206      	movs	r2, #6
 8007840:	f7f8 fce6 	bl	8000210 <memchr>
 8007844:	2800      	cmp	r0, #0
 8007846:	d036      	beq.n	80078b6 <_svfiprintf_r+0x1d2>
 8007848:	4b21      	ldr	r3, [pc, #132]	@ (80078d0 <_svfiprintf_r+0x1ec>)
 800784a:	bb1b      	cbnz	r3, 8007894 <_svfiprintf_r+0x1b0>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	3307      	adds	r3, #7
 8007850:	f023 0307 	bic.w	r3, r3, #7
 8007854:	3308      	adds	r3, #8
 8007856:	9303      	str	r3, [sp, #12]
 8007858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800785a:	4433      	add	r3, r6
 800785c:	9309      	str	r3, [sp, #36]	@ 0x24
 800785e:	e76a      	b.n	8007736 <_svfiprintf_r+0x52>
 8007860:	fb0c 3202 	mla	r2, ip, r2, r3
 8007864:	460c      	mov	r4, r1
 8007866:	2001      	movs	r0, #1
 8007868:	e7a8      	b.n	80077bc <_svfiprintf_r+0xd8>
 800786a:	2300      	movs	r3, #0
 800786c:	3401      	adds	r4, #1
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	4619      	mov	r1, r3
 8007872:	f04f 0c0a 	mov.w	ip, #10
 8007876:	4620      	mov	r0, r4
 8007878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787c:	3a30      	subs	r2, #48	@ 0x30
 800787e:	2a09      	cmp	r2, #9
 8007880:	d903      	bls.n	800788a <_svfiprintf_r+0x1a6>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0c6      	beq.n	8007814 <_svfiprintf_r+0x130>
 8007886:	9105      	str	r1, [sp, #20]
 8007888:	e7c4      	b.n	8007814 <_svfiprintf_r+0x130>
 800788a:	fb0c 2101 	mla	r1, ip, r1, r2
 800788e:	4604      	mov	r4, r0
 8007890:	2301      	movs	r3, #1
 8007892:	e7f0      	b.n	8007876 <_svfiprintf_r+0x192>
 8007894:	ab03      	add	r3, sp, #12
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	462a      	mov	r2, r5
 800789a:	4b0e      	ldr	r3, [pc, #56]	@ (80078d4 <_svfiprintf_r+0x1f0>)
 800789c:	a904      	add	r1, sp, #16
 800789e:	4638      	mov	r0, r7
 80078a0:	f7fd fe7a 	bl	8005598 <_printf_float>
 80078a4:	1c42      	adds	r2, r0, #1
 80078a6:	4606      	mov	r6, r0
 80078a8:	d1d6      	bne.n	8007858 <_svfiprintf_r+0x174>
 80078aa:	89ab      	ldrh	r3, [r5, #12]
 80078ac:	065b      	lsls	r3, r3, #25
 80078ae:	f53f af2d 	bmi.w	800770c <_svfiprintf_r+0x28>
 80078b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078b4:	e72c      	b.n	8007710 <_svfiprintf_r+0x2c>
 80078b6:	ab03      	add	r3, sp, #12
 80078b8:	9300      	str	r3, [sp, #0]
 80078ba:	462a      	mov	r2, r5
 80078bc:	4b05      	ldr	r3, [pc, #20]	@ (80078d4 <_svfiprintf_r+0x1f0>)
 80078be:	a904      	add	r1, sp, #16
 80078c0:	4638      	mov	r0, r7
 80078c2:	f7fe f901 	bl	8005ac8 <_printf_i>
 80078c6:	e7ed      	b.n	80078a4 <_svfiprintf_r+0x1c0>
 80078c8:	080092c8 	.word	0x080092c8
 80078cc:	080092d2 	.word	0x080092d2
 80078d0:	08005599 	.word	0x08005599
 80078d4:	0800762d 	.word	0x0800762d
 80078d8:	080092ce 	.word	0x080092ce

080078dc <__sflush_r>:
 80078dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80078e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078e4:	0716      	lsls	r6, r2, #28
 80078e6:	4605      	mov	r5, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	d454      	bmi.n	8007996 <__sflush_r+0xba>
 80078ec:	684b      	ldr	r3, [r1, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dc02      	bgt.n	80078f8 <__sflush_r+0x1c>
 80078f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	dd48      	ble.n	800798a <__sflush_r+0xae>
 80078f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078fa:	2e00      	cmp	r6, #0
 80078fc:	d045      	beq.n	800798a <__sflush_r+0xae>
 80078fe:	2300      	movs	r3, #0
 8007900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007904:	682f      	ldr	r7, [r5, #0]
 8007906:	6a21      	ldr	r1, [r4, #32]
 8007908:	602b      	str	r3, [r5, #0]
 800790a:	d030      	beq.n	800796e <__sflush_r+0x92>
 800790c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	0759      	lsls	r1, r3, #29
 8007912:	d505      	bpl.n	8007920 <__sflush_r+0x44>
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	1ad2      	subs	r2, r2, r3
 8007918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800791a:	b10b      	cbz	r3, 8007920 <__sflush_r+0x44>
 800791c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800791e:	1ad2      	subs	r2, r2, r3
 8007920:	2300      	movs	r3, #0
 8007922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007924:	6a21      	ldr	r1, [r4, #32]
 8007926:	4628      	mov	r0, r5
 8007928:	47b0      	blx	r6
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	d106      	bne.n	800793e <__sflush_r+0x62>
 8007930:	6829      	ldr	r1, [r5, #0]
 8007932:	291d      	cmp	r1, #29
 8007934:	d82b      	bhi.n	800798e <__sflush_r+0xb2>
 8007936:	4a2a      	ldr	r2, [pc, #168]	@ (80079e0 <__sflush_r+0x104>)
 8007938:	410a      	asrs	r2, r1
 800793a:	07d6      	lsls	r6, r2, #31
 800793c:	d427      	bmi.n	800798e <__sflush_r+0xb2>
 800793e:	2200      	movs	r2, #0
 8007940:	6062      	str	r2, [r4, #4]
 8007942:	04d9      	lsls	r1, r3, #19
 8007944:	6922      	ldr	r2, [r4, #16]
 8007946:	6022      	str	r2, [r4, #0]
 8007948:	d504      	bpl.n	8007954 <__sflush_r+0x78>
 800794a:	1c42      	adds	r2, r0, #1
 800794c:	d101      	bne.n	8007952 <__sflush_r+0x76>
 800794e:	682b      	ldr	r3, [r5, #0]
 8007950:	b903      	cbnz	r3, 8007954 <__sflush_r+0x78>
 8007952:	6560      	str	r0, [r4, #84]	@ 0x54
 8007954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007956:	602f      	str	r7, [r5, #0]
 8007958:	b1b9      	cbz	r1, 800798a <__sflush_r+0xae>
 800795a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800795e:	4299      	cmp	r1, r3
 8007960:	d002      	beq.n	8007968 <__sflush_r+0x8c>
 8007962:	4628      	mov	r0, r5
 8007964:	f7ff f9e0 	bl	8006d28 <_free_r>
 8007968:	2300      	movs	r3, #0
 800796a:	6363      	str	r3, [r4, #52]	@ 0x34
 800796c:	e00d      	b.n	800798a <__sflush_r+0xae>
 800796e:	2301      	movs	r3, #1
 8007970:	4628      	mov	r0, r5
 8007972:	47b0      	blx	r6
 8007974:	4602      	mov	r2, r0
 8007976:	1c50      	adds	r0, r2, #1
 8007978:	d1c9      	bne.n	800790e <__sflush_r+0x32>
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d0c6      	beq.n	800790e <__sflush_r+0x32>
 8007980:	2b1d      	cmp	r3, #29
 8007982:	d001      	beq.n	8007988 <__sflush_r+0xac>
 8007984:	2b16      	cmp	r3, #22
 8007986:	d11e      	bne.n	80079c6 <__sflush_r+0xea>
 8007988:	602f      	str	r7, [r5, #0]
 800798a:	2000      	movs	r0, #0
 800798c:	e022      	b.n	80079d4 <__sflush_r+0xf8>
 800798e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007992:	b21b      	sxth	r3, r3
 8007994:	e01b      	b.n	80079ce <__sflush_r+0xf2>
 8007996:	690f      	ldr	r7, [r1, #16]
 8007998:	2f00      	cmp	r7, #0
 800799a:	d0f6      	beq.n	800798a <__sflush_r+0xae>
 800799c:	0793      	lsls	r3, r2, #30
 800799e:	680e      	ldr	r6, [r1, #0]
 80079a0:	bf08      	it	eq
 80079a2:	694b      	ldreq	r3, [r1, #20]
 80079a4:	600f      	str	r7, [r1, #0]
 80079a6:	bf18      	it	ne
 80079a8:	2300      	movne	r3, #0
 80079aa:	eba6 0807 	sub.w	r8, r6, r7
 80079ae:	608b      	str	r3, [r1, #8]
 80079b0:	f1b8 0f00 	cmp.w	r8, #0
 80079b4:	dde9      	ble.n	800798a <__sflush_r+0xae>
 80079b6:	6a21      	ldr	r1, [r4, #32]
 80079b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80079ba:	4643      	mov	r3, r8
 80079bc:	463a      	mov	r2, r7
 80079be:	4628      	mov	r0, r5
 80079c0:	47b0      	blx	r6
 80079c2:	2800      	cmp	r0, #0
 80079c4:	dc08      	bgt.n	80079d8 <__sflush_r+0xfc>
 80079c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079ce:	81a3      	strh	r3, [r4, #12]
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	4407      	add	r7, r0
 80079da:	eba8 0800 	sub.w	r8, r8, r0
 80079de:	e7e7      	b.n	80079b0 <__sflush_r+0xd4>
 80079e0:	dfbffffe 	.word	0xdfbffffe

080079e4 <_fflush_r>:
 80079e4:	b538      	push	{r3, r4, r5, lr}
 80079e6:	690b      	ldr	r3, [r1, #16]
 80079e8:	4605      	mov	r5, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	b913      	cbnz	r3, 80079f4 <_fflush_r+0x10>
 80079ee:	2500      	movs	r5, #0
 80079f0:	4628      	mov	r0, r5
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	b118      	cbz	r0, 80079fe <_fflush_r+0x1a>
 80079f6:	6a03      	ldr	r3, [r0, #32]
 80079f8:	b90b      	cbnz	r3, 80079fe <_fflush_r+0x1a>
 80079fa:	f7fe fa11 	bl	8005e20 <__sinit>
 80079fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0f3      	beq.n	80079ee <_fflush_r+0xa>
 8007a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a08:	07d0      	lsls	r0, r2, #31
 8007a0a:	d404      	bmi.n	8007a16 <_fflush_r+0x32>
 8007a0c:	0599      	lsls	r1, r3, #22
 8007a0e:	d402      	bmi.n	8007a16 <_fflush_r+0x32>
 8007a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a12:	f7fe fb38 	bl	8006086 <__retarget_lock_acquire_recursive>
 8007a16:	4628      	mov	r0, r5
 8007a18:	4621      	mov	r1, r4
 8007a1a:	f7ff ff5f 	bl	80078dc <__sflush_r>
 8007a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a20:	07da      	lsls	r2, r3, #31
 8007a22:	4605      	mov	r5, r0
 8007a24:	d4e4      	bmi.n	80079f0 <_fflush_r+0xc>
 8007a26:	89a3      	ldrh	r3, [r4, #12]
 8007a28:	059b      	lsls	r3, r3, #22
 8007a2a:	d4e1      	bmi.n	80079f0 <_fflush_r+0xc>
 8007a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a2e:	f7fe fb2b 	bl	8006088 <__retarget_lock_release_recursive>
 8007a32:	e7dd      	b.n	80079f0 <_fflush_r+0xc>

08007a34 <_putc_r>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	460d      	mov	r5, r1
 8007a38:	4614      	mov	r4, r2
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	b118      	cbz	r0, 8007a46 <_putc_r+0x12>
 8007a3e:	6a03      	ldr	r3, [r0, #32]
 8007a40:	b90b      	cbnz	r3, 8007a46 <_putc_r+0x12>
 8007a42:	f7fe f9ed 	bl	8005e20 <__sinit>
 8007a46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a48:	07d8      	lsls	r0, r3, #31
 8007a4a:	d405      	bmi.n	8007a58 <_putc_r+0x24>
 8007a4c:	89a3      	ldrh	r3, [r4, #12]
 8007a4e:	0599      	lsls	r1, r3, #22
 8007a50:	d402      	bmi.n	8007a58 <_putc_r+0x24>
 8007a52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a54:	f7fe fb17 	bl	8006086 <__retarget_lock_acquire_recursive>
 8007a58:	68a3      	ldr	r3, [r4, #8]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	60a3      	str	r3, [r4, #8]
 8007a60:	da05      	bge.n	8007a6e <_putc_r+0x3a>
 8007a62:	69a2      	ldr	r2, [r4, #24]
 8007a64:	4293      	cmp	r3, r2
 8007a66:	db12      	blt.n	8007a8e <_putc_r+0x5a>
 8007a68:	b2eb      	uxtb	r3, r5
 8007a6a:	2b0a      	cmp	r3, #10
 8007a6c:	d00f      	beq.n	8007a8e <_putc_r+0x5a>
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	1c5a      	adds	r2, r3, #1
 8007a72:	6022      	str	r2, [r4, #0]
 8007a74:	701d      	strb	r5, [r3, #0]
 8007a76:	b2ed      	uxtb	r5, r5
 8007a78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a7a:	07da      	lsls	r2, r3, #31
 8007a7c:	d405      	bmi.n	8007a8a <_putc_r+0x56>
 8007a7e:	89a3      	ldrh	r3, [r4, #12]
 8007a80:	059b      	lsls	r3, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_putc_r+0x56>
 8007a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a86:	f7fe faff 	bl	8006088 <__retarget_lock_release_recursive>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	bd70      	pop	{r4, r5, r6, pc}
 8007a8e:	4629      	mov	r1, r5
 8007a90:	4622      	mov	r2, r4
 8007a92:	4630      	mov	r0, r6
 8007a94:	f000 f802 	bl	8007a9c <__swbuf_r>
 8007a98:	4605      	mov	r5, r0
 8007a9a:	e7ed      	b.n	8007a78 <_putc_r+0x44>

08007a9c <__swbuf_r>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	460e      	mov	r6, r1
 8007aa0:	4614      	mov	r4, r2
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	b118      	cbz	r0, 8007aae <__swbuf_r+0x12>
 8007aa6:	6a03      	ldr	r3, [r0, #32]
 8007aa8:	b90b      	cbnz	r3, 8007aae <__swbuf_r+0x12>
 8007aaa:	f7fe f9b9 	bl	8005e20 <__sinit>
 8007aae:	69a3      	ldr	r3, [r4, #24]
 8007ab0:	60a3      	str	r3, [r4, #8]
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	071a      	lsls	r2, r3, #28
 8007ab6:	d501      	bpl.n	8007abc <__swbuf_r+0x20>
 8007ab8:	6923      	ldr	r3, [r4, #16]
 8007aba:	b943      	cbnz	r3, 8007ace <__swbuf_r+0x32>
 8007abc:	4621      	mov	r1, r4
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 f82a 	bl	8007b18 <__swsetup_r>
 8007ac4:	b118      	cbz	r0, 8007ace <__swbuf_r+0x32>
 8007ac6:	f04f 37ff 	mov.w	r7, #4294967295
 8007aca:	4638      	mov	r0, r7
 8007acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ace:	6823      	ldr	r3, [r4, #0]
 8007ad0:	6922      	ldr	r2, [r4, #16]
 8007ad2:	1a98      	subs	r0, r3, r2
 8007ad4:	6963      	ldr	r3, [r4, #20]
 8007ad6:	b2f6      	uxtb	r6, r6
 8007ad8:	4283      	cmp	r3, r0
 8007ada:	4637      	mov	r7, r6
 8007adc:	dc05      	bgt.n	8007aea <__swbuf_r+0x4e>
 8007ade:	4621      	mov	r1, r4
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	f7ff ff7f 	bl	80079e4 <_fflush_r>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d1ed      	bne.n	8007ac6 <__swbuf_r+0x2a>
 8007aea:	68a3      	ldr	r3, [r4, #8]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	60a3      	str	r3, [r4, #8]
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	1c5a      	adds	r2, r3, #1
 8007af4:	6022      	str	r2, [r4, #0]
 8007af6:	701e      	strb	r6, [r3, #0]
 8007af8:	6962      	ldr	r2, [r4, #20]
 8007afa:	1c43      	adds	r3, r0, #1
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d004      	beq.n	8007b0a <__swbuf_r+0x6e>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	07db      	lsls	r3, r3, #31
 8007b04:	d5e1      	bpl.n	8007aca <__swbuf_r+0x2e>
 8007b06:	2e0a      	cmp	r6, #10
 8007b08:	d1df      	bne.n	8007aca <__swbuf_r+0x2e>
 8007b0a:	4621      	mov	r1, r4
 8007b0c:	4628      	mov	r0, r5
 8007b0e:	f7ff ff69 	bl	80079e4 <_fflush_r>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d0d9      	beq.n	8007aca <__swbuf_r+0x2e>
 8007b16:	e7d6      	b.n	8007ac6 <__swbuf_r+0x2a>

08007b18 <__swsetup_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4b29      	ldr	r3, [pc, #164]	@ (8007bc0 <__swsetup_r+0xa8>)
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	460c      	mov	r4, r1
 8007b22:	b118      	cbz	r0, 8007b2c <__swsetup_r+0x14>
 8007b24:	6a03      	ldr	r3, [r0, #32]
 8007b26:	b90b      	cbnz	r3, 8007b2c <__swsetup_r+0x14>
 8007b28:	f7fe f97a 	bl	8005e20 <__sinit>
 8007b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b30:	0719      	lsls	r1, r3, #28
 8007b32:	d422      	bmi.n	8007b7a <__swsetup_r+0x62>
 8007b34:	06da      	lsls	r2, r3, #27
 8007b36:	d407      	bmi.n	8007b48 <__swsetup_r+0x30>
 8007b38:	2209      	movs	r2, #9
 8007b3a:	602a      	str	r2, [r5, #0]
 8007b3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b40:	81a3      	strh	r3, [r4, #12]
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	e033      	b.n	8007bb0 <__swsetup_r+0x98>
 8007b48:	0758      	lsls	r0, r3, #29
 8007b4a:	d512      	bpl.n	8007b72 <__swsetup_r+0x5a>
 8007b4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b4e:	b141      	cbz	r1, 8007b62 <__swsetup_r+0x4a>
 8007b50:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b54:	4299      	cmp	r1, r3
 8007b56:	d002      	beq.n	8007b5e <__swsetup_r+0x46>
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f7ff f8e5 	bl	8006d28 <_free_r>
 8007b5e:	2300      	movs	r3, #0
 8007b60:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b68:	81a3      	strh	r3, [r4, #12]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6063      	str	r3, [r4, #4]
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	f043 0308 	orr.w	r3, r3, #8
 8007b78:	81a3      	strh	r3, [r4, #12]
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	b94b      	cbnz	r3, 8007b92 <__swsetup_r+0x7a>
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b88:	d003      	beq.n	8007b92 <__swsetup_r+0x7a>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f000 f909 	bl	8007da4 <__smakebuf_r>
 8007b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b96:	f013 0201 	ands.w	r2, r3, #1
 8007b9a:	d00a      	beq.n	8007bb2 <__swsetup_r+0x9a>
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	60a2      	str	r2, [r4, #8]
 8007ba0:	6962      	ldr	r2, [r4, #20]
 8007ba2:	4252      	negs	r2, r2
 8007ba4:	61a2      	str	r2, [r4, #24]
 8007ba6:	6922      	ldr	r2, [r4, #16]
 8007ba8:	b942      	cbnz	r2, 8007bbc <__swsetup_r+0xa4>
 8007baa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bae:	d1c5      	bne.n	8007b3c <__swsetup_r+0x24>
 8007bb0:	bd38      	pop	{r3, r4, r5, pc}
 8007bb2:	0799      	lsls	r1, r3, #30
 8007bb4:	bf58      	it	pl
 8007bb6:	6962      	ldrpl	r2, [r4, #20]
 8007bb8:	60a2      	str	r2, [r4, #8]
 8007bba:	e7f4      	b.n	8007ba6 <__swsetup_r+0x8e>
 8007bbc:	2000      	movs	r0, #0
 8007bbe:	e7f7      	b.n	8007bb0 <__swsetup_r+0x98>
 8007bc0:	2000002c 	.word	0x2000002c

08007bc4 <memmove>:
 8007bc4:	4288      	cmp	r0, r1
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	eb01 0402 	add.w	r4, r1, r2
 8007bcc:	d902      	bls.n	8007bd4 <memmove+0x10>
 8007bce:	4284      	cmp	r4, r0
 8007bd0:	4623      	mov	r3, r4
 8007bd2:	d807      	bhi.n	8007be4 <memmove+0x20>
 8007bd4:	1e43      	subs	r3, r0, #1
 8007bd6:	42a1      	cmp	r1, r4
 8007bd8:	d008      	beq.n	8007bec <memmove+0x28>
 8007bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007be2:	e7f8      	b.n	8007bd6 <memmove+0x12>
 8007be4:	4402      	add	r2, r0
 8007be6:	4601      	mov	r1, r0
 8007be8:	428a      	cmp	r2, r1
 8007bea:	d100      	bne.n	8007bee <memmove+0x2a>
 8007bec:	bd10      	pop	{r4, pc}
 8007bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bf6:	e7f7      	b.n	8007be8 <memmove+0x24>

08007bf8 <_sbrk_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4d06      	ldr	r5, [pc, #24]	@ (8007c14 <_sbrk_r+0x1c>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4604      	mov	r4, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	602b      	str	r3, [r5, #0]
 8007c04:	f7fa f892 	bl	8001d2c <_sbrk>
 8007c08:	1c43      	adds	r3, r0, #1
 8007c0a:	d102      	bne.n	8007c12 <_sbrk_r+0x1a>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	b103      	cbz	r3, 8007c12 <_sbrk_r+0x1a>
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	bd38      	pop	{r3, r4, r5, pc}
 8007c14:	200004f0 	.word	0x200004f0

08007c18 <memcpy>:
 8007c18:	440a      	add	r2, r1
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c20:	d100      	bne.n	8007c24 <memcpy+0xc>
 8007c22:	4770      	bx	lr
 8007c24:	b510      	push	{r4, lr}
 8007c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	d1f9      	bne.n	8007c26 <memcpy+0xe>
 8007c32:	bd10      	pop	{r4, pc}

08007c34 <__assert_func>:
 8007c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c36:	4614      	mov	r4, r2
 8007c38:	461a      	mov	r2, r3
 8007c3a:	4b09      	ldr	r3, [pc, #36]	@ (8007c60 <__assert_func+0x2c>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4605      	mov	r5, r0
 8007c40:	68d8      	ldr	r0, [r3, #12]
 8007c42:	b954      	cbnz	r4, 8007c5a <__assert_func+0x26>
 8007c44:	4b07      	ldr	r3, [pc, #28]	@ (8007c64 <__assert_func+0x30>)
 8007c46:	461c      	mov	r4, r3
 8007c48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c4c:	9100      	str	r1, [sp, #0]
 8007c4e:	462b      	mov	r3, r5
 8007c50:	4905      	ldr	r1, [pc, #20]	@ (8007c68 <__assert_func+0x34>)
 8007c52:	f000 f86f 	bl	8007d34 <fiprintf>
 8007c56:	f000 f903 	bl	8007e60 <abort>
 8007c5a:	4b04      	ldr	r3, [pc, #16]	@ (8007c6c <__assert_func+0x38>)
 8007c5c:	e7f4      	b.n	8007c48 <__assert_func+0x14>
 8007c5e:	bf00      	nop
 8007c60:	2000002c 	.word	0x2000002c
 8007c64:	0800931e 	.word	0x0800931e
 8007c68:	080092f0 	.word	0x080092f0
 8007c6c:	080092e3 	.word	0x080092e3

08007c70 <_calloc_r>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	fba1 5402 	umull	r5, r4, r1, r2
 8007c76:	b93c      	cbnz	r4, 8007c88 <_calloc_r+0x18>
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f7ff f8c9 	bl	8006e10 <_malloc_r>
 8007c7e:	4606      	mov	r6, r0
 8007c80:	b928      	cbnz	r0, 8007c8e <_calloc_r+0x1e>
 8007c82:	2600      	movs	r6, #0
 8007c84:	4630      	mov	r0, r6
 8007c86:	bd70      	pop	{r4, r5, r6, pc}
 8007c88:	220c      	movs	r2, #12
 8007c8a:	6002      	str	r2, [r0, #0]
 8007c8c:	e7f9      	b.n	8007c82 <_calloc_r+0x12>
 8007c8e:	462a      	mov	r2, r5
 8007c90:	4621      	mov	r1, r4
 8007c92:	f7fe f97a 	bl	8005f8a <memset>
 8007c96:	e7f5      	b.n	8007c84 <_calloc_r+0x14>

08007c98 <__ascii_mbtowc>:
 8007c98:	b082      	sub	sp, #8
 8007c9a:	b901      	cbnz	r1, 8007c9e <__ascii_mbtowc+0x6>
 8007c9c:	a901      	add	r1, sp, #4
 8007c9e:	b142      	cbz	r2, 8007cb2 <__ascii_mbtowc+0x1a>
 8007ca0:	b14b      	cbz	r3, 8007cb6 <__ascii_mbtowc+0x1e>
 8007ca2:	7813      	ldrb	r3, [r2, #0]
 8007ca4:	600b      	str	r3, [r1, #0]
 8007ca6:	7812      	ldrb	r2, [r2, #0]
 8007ca8:	1e10      	subs	r0, r2, #0
 8007caa:	bf18      	it	ne
 8007cac:	2001      	movne	r0, #1
 8007cae:	b002      	add	sp, #8
 8007cb0:	4770      	bx	lr
 8007cb2:	4610      	mov	r0, r2
 8007cb4:	e7fb      	b.n	8007cae <__ascii_mbtowc+0x16>
 8007cb6:	f06f 0001 	mvn.w	r0, #1
 8007cba:	e7f8      	b.n	8007cae <__ascii_mbtowc+0x16>

08007cbc <_realloc_r>:
 8007cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4615      	mov	r5, r2
 8007cc4:	460c      	mov	r4, r1
 8007cc6:	b921      	cbnz	r1, 8007cd2 <_realloc_r+0x16>
 8007cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ccc:	4611      	mov	r1, r2
 8007cce:	f7ff b89f 	b.w	8006e10 <_malloc_r>
 8007cd2:	b92a      	cbnz	r2, 8007ce0 <_realloc_r+0x24>
 8007cd4:	f7ff f828 	bl	8006d28 <_free_r>
 8007cd8:	2400      	movs	r4, #0
 8007cda:	4620      	mov	r0, r4
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce0:	f000 f8c5 	bl	8007e6e <_malloc_usable_size_r>
 8007ce4:	4285      	cmp	r5, r0
 8007ce6:	4606      	mov	r6, r0
 8007ce8:	d802      	bhi.n	8007cf0 <_realloc_r+0x34>
 8007cea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007cee:	d8f4      	bhi.n	8007cda <_realloc_r+0x1e>
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f7ff f88c 	bl	8006e10 <_malloc_r>
 8007cf8:	4607      	mov	r7, r0
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d0ec      	beq.n	8007cd8 <_realloc_r+0x1c>
 8007cfe:	42b5      	cmp	r5, r6
 8007d00:	462a      	mov	r2, r5
 8007d02:	4621      	mov	r1, r4
 8007d04:	bf28      	it	cs
 8007d06:	4632      	movcs	r2, r6
 8007d08:	f7ff ff86 	bl	8007c18 <memcpy>
 8007d0c:	4621      	mov	r1, r4
 8007d0e:	4640      	mov	r0, r8
 8007d10:	f7ff f80a 	bl	8006d28 <_free_r>
 8007d14:	463c      	mov	r4, r7
 8007d16:	e7e0      	b.n	8007cda <_realloc_r+0x1e>

08007d18 <__ascii_wctomb>:
 8007d18:	4603      	mov	r3, r0
 8007d1a:	4608      	mov	r0, r1
 8007d1c:	b141      	cbz	r1, 8007d30 <__ascii_wctomb+0x18>
 8007d1e:	2aff      	cmp	r2, #255	@ 0xff
 8007d20:	d904      	bls.n	8007d2c <__ascii_wctomb+0x14>
 8007d22:	228a      	movs	r2, #138	@ 0x8a
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2a:	4770      	bx	lr
 8007d2c:	700a      	strb	r2, [r1, #0]
 8007d2e:	2001      	movs	r0, #1
 8007d30:	4770      	bx	lr
	...

08007d34 <fiprintf>:
 8007d34:	b40e      	push	{r1, r2, r3}
 8007d36:	b503      	push	{r0, r1, lr}
 8007d38:	4601      	mov	r1, r0
 8007d3a:	ab03      	add	r3, sp, #12
 8007d3c:	4805      	ldr	r0, [pc, #20]	@ (8007d54 <fiprintf+0x20>)
 8007d3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d42:	6800      	ldr	r0, [r0, #0]
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	f000 f8c3 	bl	8007ed0 <_vfiprintf_r>
 8007d4a:	b002      	add	sp, #8
 8007d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d50:	b003      	add	sp, #12
 8007d52:	4770      	bx	lr
 8007d54:	2000002c 	.word	0x2000002c

08007d58 <__swhatbuf_r>:
 8007d58:	b570      	push	{r4, r5, r6, lr}
 8007d5a:	460c      	mov	r4, r1
 8007d5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d60:	2900      	cmp	r1, #0
 8007d62:	b096      	sub	sp, #88	@ 0x58
 8007d64:	4615      	mov	r5, r2
 8007d66:	461e      	mov	r6, r3
 8007d68:	da0d      	bge.n	8007d86 <__swhatbuf_r+0x2e>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007d70:	f04f 0100 	mov.w	r1, #0
 8007d74:	bf14      	ite	ne
 8007d76:	2340      	movne	r3, #64	@ 0x40
 8007d78:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d7c:	2000      	movs	r0, #0
 8007d7e:	6031      	str	r1, [r6, #0]
 8007d80:	602b      	str	r3, [r5, #0]
 8007d82:	b016      	add	sp, #88	@ 0x58
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
 8007d86:	466a      	mov	r2, sp
 8007d88:	f000 f848 	bl	8007e1c <_fstat_r>
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	dbec      	blt.n	8007d6a <__swhatbuf_r+0x12>
 8007d90:	9901      	ldr	r1, [sp, #4]
 8007d92:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d96:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d9a:	4259      	negs	r1, r3
 8007d9c:	4159      	adcs	r1, r3
 8007d9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007da2:	e7eb      	b.n	8007d7c <__swhatbuf_r+0x24>

08007da4 <__smakebuf_r>:
 8007da4:	898b      	ldrh	r3, [r1, #12]
 8007da6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007da8:	079d      	lsls	r5, r3, #30
 8007daa:	4606      	mov	r6, r0
 8007dac:	460c      	mov	r4, r1
 8007dae:	d507      	bpl.n	8007dc0 <__smakebuf_r+0x1c>
 8007db0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	6123      	str	r3, [r4, #16]
 8007db8:	2301      	movs	r3, #1
 8007dba:	6163      	str	r3, [r4, #20]
 8007dbc:	b003      	add	sp, #12
 8007dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dc0:	ab01      	add	r3, sp, #4
 8007dc2:	466a      	mov	r2, sp
 8007dc4:	f7ff ffc8 	bl	8007d58 <__swhatbuf_r>
 8007dc8:	9f00      	ldr	r7, [sp, #0]
 8007dca:	4605      	mov	r5, r0
 8007dcc:	4639      	mov	r1, r7
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f7ff f81e 	bl	8006e10 <_malloc_r>
 8007dd4:	b948      	cbnz	r0, 8007dea <__smakebuf_r+0x46>
 8007dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dda:	059a      	lsls	r2, r3, #22
 8007ddc:	d4ee      	bmi.n	8007dbc <__smakebuf_r+0x18>
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	f043 0302 	orr.w	r3, r3, #2
 8007de6:	81a3      	strh	r3, [r4, #12]
 8007de8:	e7e2      	b.n	8007db0 <__smakebuf_r+0xc>
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	6020      	str	r0, [r4, #0]
 8007dee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007df2:	81a3      	strh	r3, [r4, #12]
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007dfa:	b15b      	cbz	r3, 8007e14 <__smakebuf_r+0x70>
 8007dfc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e00:	4630      	mov	r0, r6
 8007e02:	f000 f81d 	bl	8007e40 <_isatty_r>
 8007e06:	b128      	cbz	r0, 8007e14 <__smakebuf_r+0x70>
 8007e08:	89a3      	ldrh	r3, [r4, #12]
 8007e0a:	f023 0303 	bic.w	r3, r3, #3
 8007e0e:	f043 0301 	orr.w	r3, r3, #1
 8007e12:	81a3      	strh	r3, [r4, #12]
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	431d      	orrs	r5, r3
 8007e18:	81a5      	strh	r5, [r4, #12]
 8007e1a:	e7cf      	b.n	8007dbc <__smakebuf_r+0x18>

08007e1c <_fstat_r>:
 8007e1c:	b538      	push	{r3, r4, r5, lr}
 8007e1e:	4d07      	ldr	r5, [pc, #28]	@ (8007e3c <_fstat_r+0x20>)
 8007e20:	2300      	movs	r3, #0
 8007e22:	4604      	mov	r4, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	4611      	mov	r1, r2
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	f7f9 ff57 	bl	8001cdc <_fstat>
 8007e2e:	1c43      	adds	r3, r0, #1
 8007e30:	d102      	bne.n	8007e38 <_fstat_r+0x1c>
 8007e32:	682b      	ldr	r3, [r5, #0]
 8007e34:	b103      	cbz	r3, 8007e38 <_fstat_r+0x1c>
 8007e36:	6023      	str	r3, [r4, #0]
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
 8007e3a:	bf00      	nop
 8007e3c:	200004f0 	.word	0x200004f0

08007e40 <_isatty_r>:
 8007e40:	b538      	push	{r3, r4, r5, lr}
 8007e42:	4d06      	ldr	r5, [pc, #24]	@ (8007e5c <_isatty_r+0x1c>)
 8007e44:	2300      	movs	r3, #0
 8007e46:	4604      	mov	r4, r0
 8007e48:	4608      	mov	r0, r1
 8007e4a:	602b      	str	r3, [r5, #0]
 8007e4c:	f7f9 ff56 	bl	8001cfc <_isatty>
 8007e50:	1c43      	adds	r3, r0, #1
 8007e52:	d102      	bne.n	8007e5a <_isatty_r+0x1a>
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	b103      	cbz	r3, 8007e5a <_isatty_r+0x1a>
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	bd38      	pop	{r3, r4, r5, pc}
 8007e5c:	200004f0 	.word	0x200004f0

08007e60 <abort>:
 8007e60:	b508      	push	{r3, lr}
 8007e62:	2006      	movs	r0, #6
 8007e64:	f000 f974 	bl	8008150 <raise>
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f7f9 fee7 	bl	8001c3c <_exit>

08007e6e <_malloc_usable_size_r>:
 8007e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e72:	1f18      	subs	r0, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	bfbc      	itt	lt
 8007e78:	580b      	ldrlt	r3, [r1, r0]
 8007e7a:	18c0      	addlt	r0, r0, r3
 8007e7c:	4770      	bx	lr

08007e7e <__sfputc_r>:
 8007e7e:	6893      	ldr	r3, [r2, #8]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	b410      	push	{r4}
 8007e86:	6093      	str	r3, [r2, #8]
 8007e88:	da08      	bge.n	8007e9c <__sfputc_r+0x1e>
 8007e8a:	6994      	ldr	r4, [r2, #24]
 8007e8c:	42a3      	cmp	r3, r4
 8007e8e:	db01      	blt.n	8007e94 <__sfputc_r+0x16>
 8007e90:	290a      	cmp	r1, #10
 8007e92:	d103      	bne.n	8007e9c <__sfputc_r+0x1e>
 8007e94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e98:	f7ff be00 	b.w	8007a9c <__swbuf_r>
 8007e9c:	6813      	ldr	r3, [r2, #0]
 8007e9e:	1c58      	adds	r0, r3, #1
 8007ea0:	6010      	str	r0, [r2, #0]
 8007ea2:	7019      	strb	r1, [r3, #0]
 8007ea4:	4608      	mov	r0, r1
 8007ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <__sfputs_r>:
 8007eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eae:	4606      	mov	r6, r0
 8007eb0:	460f      	mov	r7, r1
 8007eb2:	4614      	mov	r4, r2
 8007eb4:	18d5      	adds	r5, r2, r3
 8007eb6:	42ac      	cmp	r4, r5
 8007eb8:	d101      	bne.n	8007ebe <__sfputs_r+0x12>
 8007eba:	2000      	movs	r0, #0
 8007ebc:	e007      	b.n	8007ece <__sfputs_r+0x22>
 8007ebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec2:	463a      	mov	r2, r7
 8007ec4:	4630      	mov	r0, r6
 8007ec6:	f7ff ffda 	bl	8007e7e <__sfputc_r>
 8007eca:	1c43      	adds	r3, r0, #1
 8007ecc:	d1f3      	bne.n	8007eb6 <__sfputs_r+0xa>
 8007ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ed0 <_vfiprintf_r>:
 8007ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ed4:	460d      	mov	r5, r1
 8007ed6:	b09d      	sub	sp, #116	@ 0x74
 8007ed8:	4614      	mov	r4, r2
 8007eda:	4698      	mov	r8, r3
 8007edc:	4606      	mov	r6, r0
 8007ede:	b118      	cbz	r0, 8007ee8 <_vfiprintf_r+0x18>
 8007ee0:	6a03      	ldr	r3, [r0, #32]
 8007ee2:	b90b      	cbnz	r3, 8007ee8 <_vfiprintf_r+0x18>
 8007ee4:	f7fd ff9c 	bl	8005e20 <__sinit>
 8007ee8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007eea:	07d9      	lsls	r1, r3, #31
 8007eec:	d405      	bmi.n	8007efa <_vfiprintf_r+0x2a>
 8007eee:	89ab      	ldrh	r3, [r5, #12]
 8007ef0:	059a      	lsls	r2, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_vfiprintf_r+0x2a>
 8007ef4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ef6:	f7fe f8c6 	bl	8006086 <__retarget_lock_acquire_recursive>
 8007efa:	89ab      	ldrh	r3, [r5, #12]
 8007efc:	071b      	lsls	r3, r3, #28
 8007efe:	d501      	bpl.n	8007f04 <_vfiprintf_r+0x34>
 8007f00:	692b      	ldr	r3, [r5, #16]
 8007f02:	b99b      	cbnz	r3, 8007f2c <_vfiprintf_r+0x5c>
 8007f04:	4629      	mov	r1, r5
 8007f06:	4630      	mov	r0, r6
 8007f08:	f7ff fe06 	bl	8007b18 <__swsetup_r>
 8007f0c:	b170      	cbz	r0, 8007f2c <_vfiprintf_r+0x5c>
 8007f0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f10:	07dc      	lsls	r4, r3, #31
 8007f12:	d504      	bpl.n	8007f1e <_vfiprintf_r+0x4e>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295
 8007f18:	b01d      	add	sp, #116	@ 0x74
 8007f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f1e:	89ab      	ldrh	r3, [r5, #12]
 8007f20:	0598      	lsls	r0, r3, #22
 8007f22:	d4f7      	bmi.n	8007f14 <_vfiprintf_r+0x44>
 8007f24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f26:	f7fe f8af 	bl	8006088 <__retarget_lock_release_recursive>
 8007f2a:	e7f3      	b.n	8007f14 <_vfiprintf_r+0x44>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f30:	2320      	movs	r3, #32
 8007f32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f3a:	2330      	movs	r3, #48	@ 0x30
 8007f3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080ec <_vfiprintf_r+0x21c>
 8007f40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f44:	f04f 0901 	mov.w	r9, #1
 8007f48:	4623      	mov	r3, r4
 8007f4a:	469a      	mov	sl, r3
 8007f4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f50:	b10a      	cbz	r2, 8007f56 <_vfiprintf_r+0x86>
 8007f52:	2a25      	cmp	r2, #37	@ 0x25
 8007f54:	d1f9      	bne.n	8007f4a <_vfiprintf_r+0x7a>
 8007f56:	ebba 0b04 	subs.w	fp, sl, r4
 8007f5a:	d00b      	beq.n	8007f74 <_vfiprintf_r+0xa4>
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	4622      	mov	r2, r4
 8007f60:	4629      	mov	r1, r5
 8007f62:	4630      	mov	r0, r6
 8007f64:	f7ff ffa2 	bl	8007eac <__sfputs_r>
 8007f68:	3001      	adds	r0, #1
 8007f6a:	f000 80a7 	beq.w	80080bc <_vfiprintf_r+0x1ec>
 8007f6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f70:	445a      	add	r2, fp
 8007f72:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f74:	f89a 3000 	ldrb.w	r3, [sl]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 809f 	beq.w	80080bc <_vfiprintf_r+0x1ec>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f04f 32ff 	mov.w	r2, #4294967295
 8007f84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f88:	f10a 0a01 	add.w	sl, sl, #1
 8007f8c:	9304      	str	r3, [sp, #16]
 8007f8e:	9307      	str	r3, [sp, #28]
 8007f90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f94:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f96:	4654      	mov	r4, sl
 8007f98:	2205      	movs	r2, #5
 8007f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f9e:	4853      	ldr	r0, [pc, #332]	@ (80080ec <_vfiprintf_r+0x21c>)
 8007fa0:	f7f8 f936 	bl	8000210 <memchr>
 8007fa4:	9a04      	ldr	r2, [sp, #16]
 8007fa6:	b9d8      	cbnz	r0, 8007fe0 <_vfiprintf_r+0x110>
 8007fa8:	06d1      	lsls	r1, r2, #27
 8007faa:	bf44      	itt	mi
 8007fac:	2320      	movmi	r3, #32
 8007fae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fb2:	0713      	lsls	r3, r2, #28
 8007fb4:	bf44      	itt	mi
 8007fb6:	232b      	movmi	r3, #43	@ 0x2b
 8007fb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fbc:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fc2:	d015      	beq.n	8007ff0 <_vfiprintf_r+0x120>
 8007fc4:	9a07      	ldr	r2, [sp, #28]
 8007fc6:	4654      	mov	r4, sl
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f04f 0c0a 	mov.w	ip, #10
 8007fce:	4621      	mov	r1, r4
 8007fd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fd4:	3b30      	subs	r3, #48	@ 0x30
 8007fd6:	2b09      	cmp	r3, #9
 8007fd8:	d94b      	bls.n	8008072 <_vfiprintf_r+0x1a2>
 8007fda:	b1b0      	cbz	r0, 800800a <_vfiprintf_r+0x13a>
 8007fdc:	9207      	str	r2, [sp, #28]
 8007fde:	e014      	b.n	800800a <_vfiprintf_r+0x13a>
 8007fe0:	eba0 0308 	sub.w	r3, r0, r8
 8007fe4:	fa09 f303 	lsl.w	r3, r9, r3
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	9304      	str	r3, [sp, #16]
 8007fec:	46a2      	mov	sl, r4
 8007fee:	e7d2      	b.n	8007f96 <_vfiprintf_r+0xc6>
 8007ff0:	9b03      	ldr	r3, [sp, #12]
 8007ff2:	1d19      	adds	r1, r3, #4
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	9103      	str	r1, [sp, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	bfbb      	ittet	lt
 8007ffc:	425b      	neglt	r3, r3
 8007ffe:	f042 0202 	orrlt.w	r2, r2, #2
 8008002:	9307      	strge	r3, [sp, #28]
 8008004:	9307      	strlt	r3, [sp, #28]
 8008006:	bfb8      	it	lt
 8008008:	9204      	strlt	r2, [sp, #16]
 800800a:	7823      	ldrb	r3, [r4, #0]
 800800c:	2b2e      	cmp	r3, #46	@ 0x2e
 800800e:	d10a      	bne.n	8008026 <_vfiprintf_r+0x156>
 8008010:	7863      	ldrb	r3, [r4, #1]
 8008012:	2b2a      	cmp	r3, #42	@ 0x2a
 8008014:	d132      	bne.n	800807c <_vfiprintf_r+0x1ac>
 8008016:	9b03      	ldr	r3, [sp, #12]
 8008018:	1d1a      	adds	r2, r3, #4
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	9203      	str	r2, [sp, #12]
 800801e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008022:	3402      	adds	r4, #2
 8008024:	9305      	str	r3, [sp, #20]
 8008026:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080fc <_vfiprintf_r+0x22c>
 800802a:	7821      	ldrb	r1, [r4, #0]
 800802c:	2203      	movs	r2, #3
 800802e:	4650      	mov	r0, sl
 8008030:	f7f8 f8ee 	bl	8000210 <memchr>
 8008034:	b138      	cbz	r0, 8008046 <_vfiprintf_r+0x176>
 8008036:	9b04      	ldr	r3, [sp, #16]
 8008038:	eba0 000a 	sub.w	r0, r0, sl
 800803c:	2240      	movs	r2, #64	@ 0x40
 800803e:	4082      	lsls	r2, r0
 8008040:	4313      	orrs	r3, r2
 8008042:	3401      	adds	r4, #1
 8008044:	9304      	str	r3, [sp, #16]
 8008046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804a:	4829      	ldr	r0, [pc, #164]	@ (80080f0 <_vfiprintf_r+0x220>)
 800804c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008050:	2206      	movs	r2, #6
 8008052:	f7f8 f8dd 	bl	8000210 <memchr>
 8008056:	2800      	cmp	r0, #0
 8008058:	d03f      	beq.n	80080da <_vfiprintf_r+0x20a>
 800805a:	4b26      	ldr	r3, [pc, #152]	@ (80080f4 <_vfiprintf_r+0x224>)
 800805c:	bb1b      	cbnz	r3, 80080a6 <_vfiprintf_r+0x1d6>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	3307      	adds	r3, #7
 8008062:	f023 0307 	bic.w	r3, r3, #7
 8008066:	3308      	adds	r3, #8
 8008068:	9303      	str	r3, [sp, #12]
 800806a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800806c:	443b      	add	r3, r7
 800806e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008070:	e76a      	b.n	8007f48 <_vfiprintf_r+0x78>
 8008072:	fb0c 3202 	mla	r2, ip, r2, r3
 8008076:	460c      	mov	r4, r1
 8008078:	2001      	movs	r0, #1
 800807a:	e7a8      	b.n	8007fce <_vfiprintf_r+0xfe>
 800807c:	2300      	movs	r3, #0
 800807e:	3401      	adds	r4, #1
 8008080:	9305      	str	r3, [sp, #20]
 8008082:	4619      	mov	r1, r3
 8008084:	f04f 0c0a 	mov.w	ip, #10
 8008088:	4620      	mov	r0, r4
 800808a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800808e:	3a30      	subs	r2, #48	@ 0x30
 8008090:	2a09      	cmp	r2, #9
 8008092:	d903      	bls.n	800809c <_vfiprintf_r+0x1cc>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d0c6      	beq.n	8008026 <_vfiprintf_r+0x156>
 8008098:	9105      	str	r1, [sp, #20]
 800809a:	e7c4      	b.n	8008026 <_vfiprintf_r+0x156>
 800809c:	fb0c 2101 	mla	r1, ip, r1, r2
 80080a0:	4604      	mov	r4, r0
 80080a2:	2301      	movs	r3, #1
 80080a4:	e7f0      	b.n	8008088 <_vfiprintf_r+0x1b8>
 80080a6:	ab03      	add	r3, sp, #12
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	462a      	mov	r2, r5
 80080ac:	4b12      	ldr	r3, [pc, #72]	@ (80080f8 <_vfiprintf_r+0x228>)
 80080ae:	a904      	add	r1, sp, #16
 80080b0:	4630      	mov	r0, r6
 80080b2:	f7fd fa71 	bl	8005598 <_printf_float>
 80080b6:	4607      	mov	r7, r0
 80080b8:	1c78      	adds	r0, r7, #1
 80080ba:	d1d6      	bne.n	800806a <_vfiprintf_r+0x19a>
 80080bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080be:	07d9      	lsls	r1, r3, #31
 80080c0:	d405      	bmi.n	80080ce <_vfiprintf_r+0x1fe>
 80080c2:	89ab      	ldrh	r3, [r5, #12]
 80080c4:	059a      	lsls	r2, r3, #22
 80080c6:	d402      	bmi.n	80080ce <_vfiprintf_r+0x1fe>
 80080c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080ca:	f7fd ffdd 	bl	8006088 <__retarget_lock_release_recursive>
 80080ce:	89ab      	ldrh	r3, [r5, #12]
 80080d0:	065b      	lsls	r3, r3, #25
 80080d2:	f53f af1f 	bmi.w	8007f14 <_vfiprintf_r+0x44>
 80080d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080d8:	e71e      	b.n	8007f18 <_vfiprintf_r+0x48>
 80080da:	ab03      	add	r3, sp, #12
 80080dc:	9300      	str	r3, [sp, #0]
 80080de:	462a      	mov	r2, r5
 80080e0:	4b05      	ldr	r3, [pc, #20]	@ (80080f8 <_vfiprintf_r+0x228>)
 80080e2:	a904      	add	r1, sp, #16
 80080e4:	4630      	mov	r0, r6
 80080e6:	f7fd fcef 	bl	8005ac8 <_printf_i>
 80080ea:	e7e4      	b.n	80080b6 <_vfiprintf_r+0x1e6>
 80080ec:	080092c8 	.word	0x080092c8
 80080f0:	080092d2 	.word	0x080092d2
 80080f4:	08005599 	.word	0x08005599
 80080f8:	08007ead 	.word	0x08007ead
 80080fc:	080092ce 	.word	0x080092ce

08008100 <_raise_r>:
 8008100:	291f      	cmp	r1, #31
 8008102:	b538      	push	{r3, r4, r5, lr}
 8008104:	4605      	mov	r5, r0
 8008106:	460c      	mov	r4, r1
 8008108:	d904      	bls.n	8008114 <_raise_r+0x14>
 800810a:	2316      	movs	r3, #22
 800810c:	6003      	str	r3, [r0, #0]
 800810e:	f04f 30ff 	mov.w	r0, #4294967295
 8008112:	bd38      	pop	{r3, r4, r5, pc}
 8008114:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008116:	b112      	cbz	r2, 800811e <_raise_r+0x1e>
 8008118:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800811c:	b94b      	cbnz	r3, 8008132 <_raise_r+0x32>
 800811e:	4628      	mov	r0, r5
 8008120:	f000 f830 	bl	8008184 <_getpid_r>
 8008124:	4622      	mov	r2, r4
 8008126:	4601      	mov	r1, r0
 8008128:	4628      	mov	r0, r5
 800812a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800812e:	f000 b817 	b.w	8008160 <_kill_r>
 8008132:	2b01      	cmp	r3, #1
 8008134:	d00a      	beq.n	800814c <_raise_r+0x4c>
 8008136:	1c59      	adds	r1, r3, #1
 8008138:	d103      	bne.n	8008142 <_raise_r+0x42>
 800813a:	2316      	movs	r3, #22
 800813c:	6003      	str	r3, [r0, #0]
 800813e:	2001      	movs	r0, #1
 8008140:	e7e7      	b.n	8008112 <_raise_r+0x12>
 8008142:	2100      	movs	r1, #0
 8008144:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008148:	4620      	mov	r0, r4
 800814a:	4798      	blx	r3
 800814c:	2000      	movs	r0, #0
 800814e:	e7e0      	b.n	8008112 <_raise_r+0x12>

08008150 <raise>:
 8008150:	4b02      	ldr	r3, [pc, #8]	@ (800815c <raise+0xc>)
 8008152:	4601      	mov	r1, r0
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	f7ff bfd3 	b.w	8008100 <_raise_r>
 800815a:	bf00      	nop
 800815c:	2000002c 	.word	0x2000002c

08008160 <_kill_r>:
 8008160:	b538      	push	{r3, r4, r5, lr}
 8008162:	4d07      	ldr	r5, [pc, #28]	@ (8008180 <_kill_r+0x20>)
 8008164:	2300      	movs	r3, #0
 8008166:	4604      	mov	r4, r0
 8008168:	4608      	mov	r0, r1
 800816a:	4611      	mov	r1, r2
 800816c:	602b      	str	r3, [r5, #0]
 800816e:	f7f9 fd55 	bl	8001c1c <_kill>
 8008172:	1c43      	adds	r3, r0, #1
 8008174:	d102      	bne.n	800817c <_kill_r+0x1c>
 8008176:	682b      	ldr	r3, [r5, #0]
 8008178:	b103      	cbz	r3, 800817c <_kill_r+0x1c>
 800817a:	6023      	str	r3, [r4, #0]
 800817c:	bd38      	pop	{r3, r4, r5, pc}
 800817e:	bf00      	nop
 8008180:	200004f0 	.word	0x200004f0

08008184 <_getpid_r>:
 8008184:	f7f9 bd42 	b.w	8001c0c <_getpid>

08008188 <pow>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	ed2d 8b02 	vpush	{d8}
 800818e:	eeb0 8a40 	vmov.f32	s16, s0
 8008192:	eef0 8a60 	vmov.f32	s17, s1
 8008196:	ec55 4b11 	vmov	r4, r5, d1
 800819a:	f000 f871 	bl	8008280 <__ieee754_pow>
 800819e:	4622      	mov	r2, r4
 80081a0:	462b      	mov	r3, r5
 80081a2:	4620      	mov	r0, r4
 80081a4:	4629      	mov	r1, r5
 80081a6:	ec57 6b10 	vmov	r6, r7, d0
 80081aa:	f7f8 fcdf 	bl	8000b6c <__aeabi_dcmpun>
 80081ae:	2800      	cmp	r0, #0
 80081b0:	d13b      	bne.n	800822a <pow+0xa2>
 80081b2:	ec51 0b18 	vmov	r0, r1, d8
 80081b6:	2200      	movs	r2, #0
 80081b8:	2300      	movs	r3, #0
 80081ba:	f7f8 fca5 	bl	8000b08 <__aeabi_dcmpeq>
 80081be:	b1b8      	cbz	r0, 80081f0 <pow+0x68>
 80081c0:	2200      	movs	r2, #0
 80081c2:	2300      	movs	r3, #0
 80081c4:	4620      	mov	r0, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	f7f8 fc9e 	bl	8000b08 <__aeabi_dcmpeq>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d146      	bne.n	800825e <pow+0xd6>
 80081d0:	ec45 4b10 	vmov	d0, r4, r5
 80081d4:	f000 f848 	bl	8008268 <finite>
 80081d8:	b338      	cbz	r0, 800822a <pow+0xa2>
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	4620      	mov	r0, r4
 80081e0:	4629      	mov	r1, r5
 80081e2:	f7f8 fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80081e6:	b300      	cbz	r0, 800822a <pow+0xa2>
 80081e8:	f7fd ff22 	bl	8006030 <__errno>
 80081ec:	2322      	movs	r3, #34	@ 0x22
 80081ee:	e01b      	b.n	8008228 <pow+0xa0>
 80081f0:	ec47 6b10 	vmov	d0, r6, r7
 80081f4:	f000 f838 	bl	8008268 <finite>
 80081f8:	b9e0      	cbnz	r0, 8008234 <pow+0xac>
 80081fa:	eeb0 0a48 	vmov.f32	s0, s16
 80081fe:	eef0 0a68 	vmov.f32	s1, s17
 8008202:	f000 f831 	bl	8008268 <finite>
 8008206:	b1a8      	cbz	r0, 8008234 <pow+0xac>
 8008208:	ec45 4b10 	vmov	d0, r4, r5
 800820c:	f000 f82c 	bl	8008268 <finite>
 8008210:	b180      	cbz	r0, 8008234 <pow+0xac>
 8008212:	4632      	mov	r2, r6
 8008214:	463b      	mov	r3, r7
 8008216:	4630      	mov	r0, r6
 8008218:	4639      	mov	r1, r7
 800821a:	f7f8 fca7 	bl	8000b6c <__aeabi_dcmpun>
 800821e:	2800      	cmp	r0, #0
 8008220:	d0e2      	beq.n	80081e8 <pow+0x60>
 8008222:	f7fd ff05 	bl	8006030 <__errno>
 8008226:	2321      	movs	r3, #33	@ 0x21
 8008228:	6003      	str	r3, [r0, #0]
 800822a:	ecbd 8b02 	vpop	{d8}
 800822e:	ec47 6b10 	vmov	d0, r6, r7
 8008232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008234:	2200      	movs	r2, #0
 8008236:	2300      	movs	r3, #0
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	f7f8 fc64 	bl	8000b08 <__aeabi_dcmpeq>
 8008240:	2800      	cmp	r0, #0
 8008242:	d0f2      	beq.n	800822a <pow+0xa2>
 8008244:	eeb0 0a48 	vmov.f32	s0, s16
 8008248:	eef0 0a68 	vmov.f32	s1, s17
 800824c:	f000 f80c 	bl	8008268 <finite>
 8008250:	2800      	cmp	r0, #0
 8008252:	d0ea      	beq.n	800822a <pow+0xa2>
 8008254:	ec45 4b10 	vmov	d0, r4, r5
 8008258:	f000 f806 	bl	8008268 <finite>
 800825c:	e7c3      	b.n	80081e6 <pow+0x5e>
 800825e:	4f01      	ldr	r7, [pc, #4]	@ (8008264 <pow+0xdc>)
 8008260:	2600      	movs	r6, #0
 8008262:	e7e2      	b.n	800822a <pow+0xa2>
 8008264:	3ff00000 	.word	0x3ff00000

08008268 <finite>:
 8008268:	b082      	sub	sp, #8
 800826a:	ed8d 0b00 	vstr	d0, [sp]
 800826e:	9801      	ldr	r0, [sp, #4]
 8008270:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008274:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008278:	0fc0      	lsrs	r0, r0, #31
 800827a:	b002      	add	sp, #8
 800827c:	4770      	bx	lr
	...

08008280 <__ieee754_pow>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	b091      	sub	sp, #68	@ 0x44
 8008286:	ed8d 1b00 	vstr	d1, [sp]
 800828a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800828e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008292:	ea5a 0001 	orrs.w	r0, sl, r1
 8008296:	ec57 6b10 	vmov	r6, r7, d0
 800829a:	d113      	bne.n	80082c4 <__ieee754_pow+0x44>
 800829c:	19b3      	adds	r3, r6, r6
 800829e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80082a2:	4152      	adcs	r2, r2
 80082a4:	4298      	cmp	r0, r3
 80082a6:	4b98      	ldr	r3, [pc, #608]	@ (8008508 <__ieee754_pow+0x288>)
 80082a8:	4193      	sbcs	r3, r2
 80082aa:	f080 84ea 	bcs.w	8008c82 <__ieee754_pow+0xa02>
 80082ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082b2:	4630      	mov	r0, r6
 80082b4:	4639      	mov	r1, r7
 80082b6:	f7f8 f809 	bl	80002cc <__adddf3>
 80082ba:	ec41 0b10 	vmov	d0, r0, r1
 80082be:	b011      	add	sp, #68	@ 0x44
 80082c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4a91      	ldr	r2, [pc, #580]	@ (800850c <__ieee754_pow+0x28c>)
 80082c6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80082ca:	4590      	cmp	r8, r2
 80082cc:	463d      	mov	r5, r7
 80082ce:	4633      	mov	r3, r6
 80082d0:	d806      	bhi.n	80082e0 <__ieee754_pow+0x60>
 80082d2:	d101      	bne.n	80082d8 <__ieee754_pow+0x58>
 80082d4:	2e00      	cmp	r6, #0
 80082d6:	d1ea      	bne.n	80082ae <__ieee754_pow+0x2e>
 80082d8:	4592      	cmp	sl, r2
 80082da:	d801      	bhi.n	80082e0 <__ieee754_pow+0x60>
 80082dc:	d10e      	bne.n	80082fc <__ieee754_pow+0x7c>
 80082de:	b169      	cbz	r1, 80082fc <__ieee754_pow+0x7c>
 80082e0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80082e4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80082e8:	431d      	orrs	r5, r3
 80082ea:	d1e0      	bne.n	80082ae <__ieee754_pow+0x2e>
 80082ec:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082f0:	18db      	adds	r3, r3, r3
 80082f2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80082f6:	4152      	adcs	r2, r2
 80082f8:	429d      	cmp	r5, r3
 80082fa:	e7d4      	b.n	80082a6 <__ieee754_pow+0x26>
 80082fc:	2d00      	cmp	r5, #0
 80082fe:	46c3      	mov	fp, r8
 8008300:	da3a      	bge.n	8008378 <__ieee754_pow+0xf8>
 8008302:	4a83      	ldr	r2, [pc, #524]	@ (8008510 <__ieee754_pow+0x290>)
 8008304:	4592      	cmp	sl, r2
 8008306:	d84d      	bhi.n	80083a4 <__ieee754_pow+0x124>
 8008308:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800830c:	4592      	cmp	sl, r2
 800830e:	f240 84c7 	bls.w	8008ca0 <__ieee754_pow+0xa20>
 8008312:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008316:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800831a:	2a14      	cmp	r2, #20
 800831c:	dd0f      	ble.n	800833e <__ieee754_pow+0xbe>
 800831e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008322:	fa21 f402 	lsr.w	r4, r1, r2
 8008326:	fa04 f202 	lsl.w	r2, r4, r2
 800832a:	428a      	cmp	r2, r1
 800832c:	f040 84b8 	bne.w	8008ca0 <__ieee754_pow+0xa20>
 8008330:	f004 0401 	and.w	r4, r4, #1
 8008334:	f1c4 0402 	rsb	r4, r4, #2
 8008338:	2900      	cmp	r1, #0
 800833a:	d158      	bne.n	80083ee <__ieee754_pow+0x16e>
 800833c:	e00e      	b.n	800835c <__ieee754_pow+0xdc>
 800833e:	2900      	cmp	r1, #0
 8008340:	d154      	bne.n	80083ec <__ieee754_pow+0x16c>
 8008342:	f1c2 0214 	rsb	r2, r2, #20
 8008346:	fa4a f402 	asr.w	r4, sl, r2
 800834a:	fa04 f202 	lsl.w	r2, r4, r2
 800834e:	4552      	cmp	r2, sl
 8008350:	f040 84a3 	bne.w	8008c9a <__ieee754_pow+0xa1a>
 8008354:	f004 0401 	and.w	r4, r4, #1
 8008358:	f1c4 0402 	rsb	r4, r4, #2
 800835c:	4a6d      	ldr	r2, [pc, #436]	@ (8008514 <__ieee754_pow+0x294>)
 800835e:	4592      	cmp	sl, r2
 8008360:	d12e      	bne.n	80083c0 <__ieee754_pow+0x140>
 8008362:	f1b9 0f00 	cmp.w	r9, #0
 8008366:	f280 8494 	bge.w	8008c92 <__ieee754_pow+0xa12>
 800836a:	496a      	ldr	r1, [pc, #424]	@ (8008514 <__ieee754_pow+0x294>)
 800836c:	4632      	mov	r2, r6
 800836e:	463b      	mov	r3, r7
 8008370:	2000      	movs	r0, #0
 8008372:	f7f8 fa8b 	bl	800088c <__aeabi_ddiv>
 8008376:	e7a0      	b.n	80082ba <__ieee754_pow+0x3a>
 8008378:	2400      	movs	r4, #0
 800837a:	bbc1      	cbnz	r1, 80083ee <__ieee754_pow+0x16e>
 800837c:	4a63      	ldr	r2, [pc, #396]	@ (800850c <__ieee754_pow+0x28c>)
 800837e:	4592      	cmp	sl, r2
 8008380:	d1ec      	bne.n	800835c <__ieee754_pow+0xdc>
 8008382:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008386:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800838a:	431a      	orrs	r2, r3
 800838c:	f000 8479 	beq.w	8008c82 <__ieee754_pow+0xa02>
 8008390:	4b61      	ldr	r3, [pc, #388]	@ (8008518 <__ieee754_pow+0x298>)
 8008392:	4598      	cmp	r8, r3
 8008394:	d908      	bls.n	80083a8 <__ieee754_pow+0x128>
 8008396:	f1b9 0f00 	cmp.w	r9, #0
 800839a:	f2c0 8476 	blt.w	8008c8a <__ieee754_pow+0xa0a>
 800839e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083a2:	e78a      	b.n	80082ba <__ieee754_pow+0x3a>
 80083a4:	2402      	movs	r4, #2
 80083a6:	e7e8      	b.n	800837a <__ieee754_pow+0xfa>
 80083a8:	f1b9 0f00 	cmp.w	r9, #0
 80083ac:	f04f 0000 	mov.w	r0, #0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	da81      	bge.n	80082ba <__ieee754_pow+0x3a>
 80083b6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80083ba:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80083be:	e77c      	b.n	80082ba <__ieee754_pow+0x3a>
 80083c0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80083c4:	d106      	bne.n	80083d4 <__ieee754_pow+0x154>
 80083c6:	4632      	mov	r2, r6
 80083c8:	463b      	mov	r3, r7
 80083ca:	4630      	mov	r0, r6
 80083cc:	4639      	mov	r1, r7
 80083ce:	f7f8 f933 	bl	8000638 <__aeabi_dmul>
 80083d2:	e772      	b.n	80082ba <__ieee754_pow+0x3a>
 80083d4:	4a51      	ldr	r2, [pc, #324]	@ (800851c <__ieee754_pow+0x29c>)
 80083d6:	4591      	cmp	r9, r2
 80083d8:	d109      	bne.n	80083ee <__ieee754_pow+0x16e>
 80083da:	2d00      	cmp	r5, #0
 80083dc:	db07      	blt.n	80083ee <__ieee754_pow+0x16e>
 80083de:	ec47 6b10 	vmov	d0, r6, r7
 80083e2:	b011      	add	sp, #68	@ 0x44
 80083e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083e8:	f000 bd52 	b.w	8008e90 <__ieee754_sqrt>
 80083ec:	2400      	movs	r4, #0
 80083ee:	ec47 6b10 	vmov	d0, r6, r7
 80083f2:	9302      	str	r3, [sp, #8]
 80083f4:	f000 fc88 	bl	8008d08 <fabs>
 80083f8:	9b02      	ldr	r3, [sp, #8]
 80083fa:	ec51 0b10 	vmov	r0, r1, d0
 80083fe:	bb53      	cbnz	r3, 8008456 <__ieee754_pow+0x1d6>
 8008400:	4b44      	ldr	r3, [pc, #272]	@ (8008514 <__ieee754_pow+0x294>)
 8008402:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 8008406:	429a      	cmp	r2, r3
 8008408:	d002      	beq.n	8008410 <__ieee754_pow+0x190>
 800840a:	f1b8 0f00 	cmp.w	r8, #0
 800840e:	d122      	bne.n	8008456 <__ieee754_pow+0x1d6>
 8008410:	f1b9 0f00 	cmp.w	r9, #0
 8008414:	da05      	bge.n	8008422 <__ieee754_pow+0x1a2>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	2000      	movs	r0, #0
 800841c:	493d      	ldr	r1, [pc, #244]	@ (8008514 <__ieee754_pow+0x294>)
 800841e:	f7f8 fa35 	bl	800088c <__aeabi_ddiv>
 8008422:	2d00      	cmp	r5, #0
 8008424:	f6bf af49 	bge.w	80082ba <__ieee754_pow+0x3a>
 8008428:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800842c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008430:	ea58 0804 	orrs.w	r8, r8, r4
 8008434:	d108      	bne.n	8008448 <__ieee754_pow+0x1c8>
 8008436:	4602      	mov	r2, r0
 8008438:	460b      	mov	r3, r1
 800843a:	4610      	mov	r0, r2
 800843c:	4619      	mov	r1, r3
 800843e:	f7f7 ff43 	bl	80002c8 <__aeabi_dsub>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	e794      	b.n	8008372 <__ieee754_pow+0xf2>
 8008448:	2c01      	cmp	r4, #1
 800844a:	f47f af36 	bne.w	80082ba <__ieee754_pow+0x3a>
 800844e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008452:	4619      	mov	r1, r3
 8008454:	e731      	b.n	80082ba <__ieee754_pow+0x3a>
 8008456:	0feb      	lsrs	r3, r5, #31
 8008458:	3b01      	subs	r3, #1
 800845a:	ea53 0204 	orrs.w	r2, r3, r4
 800845e:	d102      	bne.n	8008466 <__ieee754_pow+0x1e6>
 8008460:	4632      	mov	r2, r6
 8008462:	463b      	mov	r3, r7
 8008464:	e7e9      	b.n	800843a <__ieee754_pow+0x1ba>
 8008466:	3c01      	subs	r4, #1
 8008468:	431c      	orrs	r4, r3
 800846a:	d016      	beq.n	800849a <__ieee754_pow+0x21a>
 800846c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80084f8 <__ieee754_pow+0x278>
 8008470:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008474:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008478:	f240 8112 	bls.w	80086a0 <__ieee754_pow+0x420>
 800847c:	4b28      	ldr	r3, [pc, #160]	@ (8008520 <__ieee754_pow+0x2a0>)
 800847e:	459a      	cmp	sl, r3
 8008480:	4b25      	ldr	r3, [pc, #148]	@ (8008518 <__ieee754_pow+0x298>)
 8008482:	d916      	bls.n	80084b2 <__ieee754_pow+0x232>
 8008484:	4598      	cmp	r8, r3
 8008486:	d80b      	bhi.n	80084a0 <__ieee754_pow+0x220>
 8008488:	f1b9 0f00 	cmp.w	r9, #0
 800848c:	da0b      	bge.n	80084a6 <__ieee754_pow+0x226>
 800848e:	2000      	movs	r0, #0
 8008490:	b011      	add	sp, #68	@ 0x44
 8008492:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008496:	f000 bcf3 	b.w	8008e80 <__math_oflow>
 800849a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008500 <__ieee754_pow+0x280>
 800849e:	e7e7      	b.n	8008470 <__ieee754_pow+0x1f0>
 80084a0:	f1b9 0f00 	cmp.w	r9, #0
 80084a4:	dcf3      	bgt.n	800848e <__ieee754_pow+0x20e>
 80084a6:	2000      	movs	r0, #0
 80084a8:	b011      	add	sp, #68	@ 0x44
 80084aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ae:	f000 bcdf 	b.w	8008e70 <__math_uflow>
 80084b2:	4598      	cmp	r8, r3
 80084b4:	d20c      	bcs.n	80084d0 <__ieee754_pow+0x250>
 80084b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ba:	2200      	movs	r2, #0
 80084bc:	2300      	movs	r3, #0
 80084be:	f7f8 fb2d 	bl	8000b1c <__aeabi_dcmplt>
 80084c2:	3800      	subs	r0, #0
 80084c4:	bf18      	it	ne
 80084c6:	2001      	movne	r0, #1
 80084c8:	f1b9 0f00 	cmp.w	r9, #0
 80084cc:	daec      	bge.n	80084a8 <__ieee754_pow+0x228>
 80084ce:	e7df      	b.n	8008490 <__ieee754_pow+0x210>
 80084d0:	4b10      	ldr	r3, [pc, #64]	@ (8008514 <__ieee754_pow+0x294>)
 80084d2:	4598      	cmp	r8, r3
 80084d4:	f04f 0200 	mov.w	r2, #0
 80084d8:	d924      	bls.n	8008524 <__ieee754_pow+0x2a4>
 80084da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084de:	2300      	movs	r3, #0
 80084e0:	f7f8 fb1c 	bl	8000b1c <__aeabi_dcmplt>
 80084e4:	3800      	subs	r0, #0
 80084e6:	bf18      	it	ne
 80084e8:	2001      	movne	r0, #1
 80084ea:	f1b9 0f00 	cmp.w	r9, #0
 80084ee:	dccf      	bgt.n	8008490 <__ieee754_pow+0x210>
 80084f0:	e7da      	b.n	80084a8 <__ieee754_pow+0x228>
 80084f2:	bf00      	nop
 80084f4:	f3af 8000 	nop.w
 80084f8:	00000000 	.word	0x00000000
 80084fc:	3ff00000 	.word	0x3ff00000
 8008500:	00000000 	.word	0x00000000
 8008504:	bff00000 	.word	0xbff00000
 8008508:	fff00000 	.word	0xfff00000
 800850c:	7ff00000 	.word	0x7ff00000
 8008510:	433fffff 	.word	0x433fffff
 8008514:	3ff00000 	.word	0x3ff00000
 8008518:	3fefffff 	.word	0x3fefffff
 800851c:	3fe00000 	.word	0x3fe00000
 8008520:	43f00000 	.word	0x43f00000
 8008524:	4b5a      	ldr	r3, [pc, #360]	@ (8008690 <__ieee754_pow+0x410>)
 8008526:	f7f7 fecf 	bl	80002c8 <__aeabi_dsub>
 800852a:	a351      	add	r3, pc, #324	@ (adr r3, 8008670 <__ieee754_pow+0x3f0>)
 800852c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008530:	4604      	mov	r4, r0
 8008532:	460d      	mov	r5, r1
 8008534:	f7f8 f880 	bl	8000638 <__aeabi_dmul>
 8008538:	a34f      	add	r3, pc, #316	@ (adr r3, 8008678 <__ieee754_pow+0x3f8>)
 800853a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853e:	4606      	mov	r6, r0
 8008540:	460f      	mov	r7, r1
 8008542:	4620      	mov	r0, r4
 8008544:	4629      	mov	r1, r5
 8008546:	f7f8 f877 	bl	8000638 <__aeabi_dmul>
 800854a:	4b52      	ldr	r3, [pc, #328]	@ (8008694 <__ieee754_pow+0x414>)
 800854c:	4682      	mov	sl, r0
 800854e:	468b      	mov	fp, r1
 8008550:	2200      	movs	r2, #0
 8008552:	4620      	mov	r0, r4
 8008554:	4629      	mov	r1, r5
 8008556:	f7f8 f86f 	bl	8000638 <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	a148      	add	r1, pc, #288	@ (adr r1, 8008680 <__ieee754_pow+0x400>)
 8008560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008564:	f7f7 feb0 	bl	80002c8 <__aeabi_dsub>
 8008568:	4622      	mov	r2, r4
 800856a:	462b      	mov	r3, r5
 800856c:	f7f8 f864 	bl	8000638 <__aeabi_dmul>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	2000      	movs	r0, #0
 8008576:	4948      	ldr	r1, [pc, #288]	@ (8008698 <__ieee754_pow+0x418>)
 8008578:	f7f7 fea6 	bl	80002c8 <__aeabi_dsub>
 800857c:	4622      	mov	r2, r4
 800857e:	4680      	mov	r8, r0
 8008580:	4689      	mov	r9, r1
 8008582:	462b      	mov	r3, r5
 8008584:	4620      	mov	r0, r4
 8008586:	4629      	mov	r1, r5
 8008588:	f7f8 f856 	bl	8000638 <__aeabi_dmul>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f8 f850 	bl	8000638 <__aeabi_dmul>
 8008598:	a33b      	add	r3, pc, #236	@ (adr r3, 8008688 <__ieee754_pow+0x408>)
 800859a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859e:	f7f8 f84b 	bl	8000638 <__aeabi_dmul>
 80085a2:	4602      	mov	r2, r0
 80085a4:	460b      	mov	r3, r1
 80085a6:	4650      	mov	r0, sl
 80085a8:	4659      	mov	r1, fp
 80085aa:	f7f7 fe8d 	bl	80002c8 <__aeabi_dsub>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4680      	mov	r8, r0
 80085b4:	4689      	mov	r9, r1
 80085b6:	4630      	mov	r0, r6
 80085b8:	4639      	mov	r1, r7
 80085ba:	f7f7 fe87 	bl	80002cc <__adddf3>
 80085be:	2400      	movs	r4, #0
 80085c0:	4632      	mov	r2, r6
 80085c2:	463b      	mov	r3, r7
 80085c4:	4620      	mov	r0, r4
 80085c6:	460d      	mov	r5, r1
 80085c8:	f7f7 fe7e 	bl	80002c8 <__aeabi_dsub>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4640      	mov	r0, r8
 80085d2:	4649      	mov	r1, r9
 80085d4:	f7f7 fe78 	bl	80002c8 <__aeabi_dsub>
 80085d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085e0:	2300      	movs	r3, #0
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80085e8:	4606      	mov	r6, r0
 80085ea:	460f      	mov	r7, r1
 80085ec:	4652      	mov	r2, sl
 80085ee:	465b      	mov	r3, fp
 80085f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085f4:	f7f7 fe68 	bl	80002c8 <__aeabi_dsub>
 80085f8:	4622      	mov	r2, r4
 80085fa:	462b      	mov	r3, r5
 80085fc:	f7f8 f81c 	bl	8000638 <__aeabi_dmul>
 8008600:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008604:	4680      	mov	r8, r0
 8008606:	4689      	mov	r9, r1
 8008608:	4630      	mov	r0, r6
 800860a:	4639      	mov	r1, r7
 800860c:	f7f8 f814 	bl	8000638 <__aeabi_dmul>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4640      	mov	r0, r8
 8008616:	4649      	mov	r1, r9
 8008618:	f7f7 fe58 	bl	80002cc <__adddf3>
 800861c:	4652      	mov	r2, sl
 800861e:	465b      	mov	r3, fp
 8008620:	4606      	mov	r6, r0
 8008622:	460f      	mov	r7, r1
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	f7f8 f806 	bl	8000638 <__aeabi_dmul>
 800862c:	460b      	mov	r3, r1
 800862e:	4602      	mov	r2, r0
 8008630:	4680      	mov	r8, r0
 8008632:	4689      	mov	r9, r1
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f7 fe48 	bl	80002cc <__adddf3>
 800863c:	4b17      	ldr	r3, [pc, #92]	@ (800869c <__ieee754_pow+0x41c>)
 800863e:	4299      	cmp	r1, r3
 8008640:	4604      	mov	r4, r0
 8008642:	460d      	mov	r5, r1
 8008644:	468a      	mov	sl, r1
 8008646:	468b      	mov	fp, r1
 8008648:	f340 82ef 	ble.w	8008c2a <__ieee754_pow+0x9aa>
 800864c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008650:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008654:	4303      	orrs	r3, r0
 8008656:	f000 81e8 	beq.w	8008a2a <__ieee754_pow+0x7aa>
 800865a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800865e:	2200      	movs	r2, #0
 8008660:	2300      	movs	r3, #0
 8008662:	f7f8 fa5b 	bl	8000b1c <__aeabi_dcmplt>
 8008666:	3800      	subs	r0, #0
 8008668:	bf18      	it	ne
 800866a:	2001      	movne	r0, #1
 800866c:	e710      	b.n	8008490 <__ieee754_pow+0x210>
 800866e:	bf00      	nop
 8008670:	60000000 	.word	0x60000000
 8008674:	3ff71547 	.word	0x3ff71547
 8008678:	f85ddf44 	.word	0xf85ddf44
 800867c:	3e54ae0b 	.word	0x3e54ae0b
 8008680:	55555555 	.word	0x55555555
 8008684:	3fd55555 	.word	0x3fd55555
 8008688:	652b82fe 	.word	0x652b82fe
 800868c:	3ff71547 	.word	0x3ff71547
 8008690:	3ff00000 	.word	0x3ff00000
 8008694:	3fd00000 	.word	0x3fd00000
 8008698:	3fe00000 	.word	0x3fe00000
 800869c:	408fffff 	.word	0x408fffff
 80086a0:	4bd5      	ldr	r3, [pc, #852]	@ (80089f8 <__ieee754_pow+0x778>)
 80086a2:	402b      	ands	r3, r5
 80086a4:	2200      	movs	r2, #0
 80086a6:	b92b      	cbnz	r3, 80086b4 <__ieee754_pow+0x434>
 80086a8:	4bd4      	ldr	r3, [pc, #848]	@ (80089fc <__ieee754_pow+0x77c>)
 80086aa:	f7f7 ffc5 	bl	8000638 <__aeabi_dmul>
 80086ae:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80086b2:	468b      	mov	fp, r1
 80086b4:	ea4f 532b 	mov.w	r3, fp, asr #20
 80086b8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80086bc:	4413      	add	r3, r2
 80086be:	930a      	str	r3, [sp, #40]	@ 0x28
 80086c0:	4bcf      	ldr	r3, [pc, #828]	@ (8008a00 <__ieee754_pow+0x780>)
 80086c2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80086c6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80086ca:	459b      	cmp	fp, r3
 80086cc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80086d0:	dd08      	ble.n	80086e4 <__ieee754_pow+0x464>
 80086d2:	4bcc      	ldr	r3, [pc, #816]	@ (8008a04 <__ieee754_pow+0x784>)
 80086d4:	459b      	cmp	fp, r3
 80086d6:	f340 81a5 	ble.w	8008a24 <__ieee754_pow+0x7a4>
 80086da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086dc:	3301      	adds	r3, #1
 80086de:	930a      	str	r3, [sp, #40]	@ 0x28
 80086e0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80086e4:	f04f 0a00 	mov.w	sl, #0
 80086e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80086ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ee:	4bc6      	ldr	r3, [pc, #792]	@ (8008a08 <__ieee754_pow+0x788>)
 80086f0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086f4:	ed93 7b00 	vldr	d7, [r3]
 80086f8:	4629      	mov	r1, r5
 80086fa:	ec53 2b17 	vmov	r2, r3, d7
 80086fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008702:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008706:	f7f7 fddf 	bl	80002c8 <__aeabi_dsub>
 800870a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800870e:	4606      	mov	r6, r0
 8008710:	460f      	mov	r7, r1
 8008712:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008716:	f7f7 fdd9 	bl	80002cc <__adddf3>
 800871a:	4602      	mov	r2, r0
 800871c:	460b      	mov	r3, r1
 800871e:	2000      	movs	r0, #0
 8008720:	49ba      	ldr	r1, [pc, #744]	@ (8008a0c <__ieee754_pow+0x78c>)
 8008722:	f7f8 f8b3 	bl	800088c <__aeabi_ddiv>
 8008726:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4630      	mov	r0, r6
 8008730:	4639      	mov	r1, r7
 8008732:	f7f7 ff81 	bl	8000638 <__aeabi_dmul>
 8008736:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800873a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800873e:	106d      	asrs	r5, r5, #1
 8008740:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008744:	f04f 0b00 	mov.w	fp, #0
 8008748:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800874c:	4661      	mov	r1, ip
 800874e:	2200      	movs	r2, #0
 8008750:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008754:	4658      	mov	r0, fp
 8008756:	46e1      	mov	r9, ip
 8008758:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800875c:	4614      	mov	r4, r2
 800875e:	461d      	mov	r5, r3
 8008760:	f7f7 ff6a 	bl	8000638 <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f7f7 fdac 	bl	80002c8 <__aeabi_dsub>
 8008770:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008774:	4606      	mov	r6, r0
 8008776:	460f      	mov	r7, r1
 8008778:	4620      	mov	r0, r4
 800877a:	4629      	mov	r1, r5
 800877c:	f7f7 fda4 	bl	80002c8 <__aeabi_dsub>
 8008780:	4602      	mov	r2, r0
 8008782:	460b      	mov	r3, r1
 8008784:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008788:	f7f7 fd9e 	bl	80002c8 <__aeabi_dsub>
 800878c:	465a      	mov	r2, fp
 800878e:	464b      	mov	r3, r9
 8008790:	f7f7 ff52 	bl	8000638 <__aeabi_dmul>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f7 fd94 	bl	80002c8 <__aeabi_dsub>
 80087a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80087a4:	f7f7 ff48 	bl	8000638 <__aeabi_dmul>
 80087a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80087b0:	4610      	mov	r0, r2
 80087b2:	4619      	mov	r1, r3
 80087b4:	f7f7 ff40 	bl	8000638 <__aeabi_dmul>
 80087b8:	a37d      	add	r3, pc, #500	@ (adr r3, 80089b0 <__ieee754_pow+0x730>)
 80087ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087be:	4604      	mov	r4, r0
 80087c0:	460d      	mov	r5, r1
 80087c2:	f7f7 ff39 	bl	8000638 <__aeabi_dmul>
 80087c6:	a37c      	add	r3, pc, #496	@ (adr r3, 80089b8 <__ieee754_pow+0x738>)
 80087c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087cc:	f7f7 fd7e 	bl	80002cc <__adddf3>
 80087d0:	4622      	mov	r2, r4
 80087d2:	462b      	mov	r3, r5
 80087d4:	f7f7 ff30 	bl	8000638 <__aeabi_dmul>
 80087d8:	a379      	add	r3, pc, #484	@ (adr r3, 80089c0 <__ieee754_pow+0x740>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f7 fd75 	bl	80002cc <__adddf3>
 80087e2:	4622      	mov	r2, r4
 80087e4:	462b      	mov	r3, r5
 80087e6:	f7f7 ff27 	bl	8000638 <__aeabi_dmul>
 80087ea:	a377      	add	r3, pc, #476	@ (adr r3, 80089c8 <__ieee754_pow+0x748>)
 80087ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f0:	f7f7 fd6c 	bl	80002cc <__adddf3>
 80087f4:	4622      	mov	r2, r4
 80087f6:	462b      	mov	r3, r5
 80087f8:	f7f7 ff1e 	bl	8000638 <__aeabi_dmul>
 80087fc:	a374      	add	r3, pc, #464	@ (adr r3, 80089d0 <__ieee754_pow+0x750>)
 80087fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008802:	f7f7 fd63 	bl	80002cc <__adddf3>
 8008806:	4622      	mov	r2, r4
 8008808:	462b      	mov	r3, r5
 800880a:	f7f7 ff15 	bl	8000638 <__aeabi_dmul>
 800880e:	a372      	add	r3, pc, #456	@ (adr r3, 80089d8 <__ieee754_pow+0x758>)
 8008810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008814:	f7f7 fd5a 	bl	80002cc <__adddf3>
 8008818:	4622      	mov	r2, r4
 800881a:	4606      	mov	r6, r0
 800881c:	460f      	mov	r7, r1
 800881e:	462b      	mov	r3, r5
 8008820:	4620      	mov	r0, r4
 8008822:	4629      	mov	r1, r5
 8008824:	f7f7 ff08 	bl	8000638 <__aeabi_dmul>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4630      	mov	r0, r6
 800882e:	4639      	mov	r1, r7
 8008830:	f7f7 ff02 	bl	8000638 <__aeabi_dmul>
 8008834:	465a      	mov	r2, fp
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	464b      	mov	r3, r9
 800883c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008840:	f7f7 fd44 	bl	80002cc <__adddf3>
 8008844:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008848:	f7f7 fef6 	bl	8000638 <__aeabi_dmul>
 800884c:	4622      	mov	r2, r4
 800884e:	462b      	mov	r3, r5
 8008850:	f7f7 fd3c 	bl	80002cc <__adddf3>
 8008854:	465a      	mov	r2, fp
 8008856:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800885a:	464b      	mov	r3, r9
 800885c:	4658      	mov	r0, fp
 800885e:	4649      	mov	r1, r9
 8008860:	f7f7 feea 	bl	8000638 <__aeabi_dmul>
 8008864:	4b6a      	ldr	r3, [pc, #424]	@ (8008a10 <__ieee754_pow+0x790>)
 8008866:	2200      	movs	r2, #0
 8008868:	4606      	mov	r6, r0
 800886a:	460f      	mov	r7, r1
 800886c:	f7f7 fd2e 	bl	80002cc <__adddf3>
 8008870:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008874:	f7f7 fd2a 	bl	80002cc <__adddf3>
 8008878:	46d8      	mov	r8, fp
 800887a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800887e:	460d      	mov	r5, r1
 8008880:	465a      	mov	r2, fp
 8008882:	460b      	mov	r3, r1
 8008884:	4640      	mov	r0, r8
 8008886:	4649      	mov	r1, r9
 8008888:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800888c:	f7f7 fed4 	bl	8000638 <__aeabi_dmul>
 8008890:	465c      	mov	r4, fp
 8008892:	4680      	mov	r8, r0
 8008894:	4689      	mov	r9, r1
 8008896:	4b5e      	ldr	r3, [pc, #376]	@ (8008a10 <__ieee754_pow+0x790>)
 8008898:	2200      	movs	r2, #0
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fd13 	bl	80002c8 <__aeabi_dsub>
 80088a2:	4632      	mov	r2, r6
 80088a4:	463b      	mov	r3, r7
 80088a6:	f7f7 fd0f 	bl	80002c8 <__aeabi_dsub>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088b2:	f7f7 fd09 	bl	80002c8 <__aeabi_dsub>
 80088b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ba:	f7f7 febd 	bl	8000638 <__aeabi_dmul>
 80088be:	4622      	mov	r2, r4
 80088c0:	4606      	mov	r6, r0
 80088c2:	460f      	mov	r7, r1
 80088c4:	462b      	mov	r3, r5
 80088c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088ca:	f7f7 feb5 	bl	8000638 <__aeabi_dmul>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	f7f7 fcf9 	bl	80002cc <__adddf3>
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4640      	mov	r0, r8
 80088e4:	4649      	mov	r1, r9
 80088e6:	f7f7 fcf1 	bl	80002cc <__adddf3>
 80088ea:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80088ee:	a33c      	add	r3, pc, #240	@ (adr r3, 80089e0 <__ieee754_pow+0x760>)
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	4658      	mov	r0, fp
 80088f6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80088fa:	460d      	mov	r5, r1
 80088fc:	f7f7 fe9c 	bl	8000638 <__aeabi_dmul>
 8008900:	465c      	mov	r4, fp
 8008902:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008906:	4642      	mov	r2, r8
 8008908:	464b      	mov	r3, r9
 800890a:	4620      	mov	r0, r4
 800890c:	4629      	mov	r1, r5
 800890e:	f7f7 fcdb 	bl	80002c8 <__aeabi_dsub>
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	4630      	mov	r0, r6
 8008918:	4639      	mov	r1, r7
 800891a:	f7f7 fcd5 	bl	80002c8 <__aeabi_dsub>
 800891e:	a332      	add	r3, pc, #200	@ (adr r3, 80089e8 <__ieee754_pow+0x768>)
 8008920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008924:	f7f7 fe88 	bl	8000638 <__aeabi_dmul>
 8008928:	a331      	add	r3, pc, #196	@ (adr r3, 80089f0 <__ieee754_pow+0x770>)
 800892a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892e:	4606      	mov	r6, r0
 8008930:	460f      	mov	r7, r1
 8008932:	4620      	mov	r0, r4
 8008934:	4629      	mov	r1, r5
 8008936:	f7f7 fe7f 	bl	8000638 <__aeabi_dmul>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4630      	mov	r0, r6
 8008940:	4639      	mov	r1, r7
 8008942:	f7f7 fcc3 	bl	80002cc <__adddf3>
 8008946:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008948:	4b32      	ldr	r3, [pc, #200]	@ (8008a14 <__ieee754_pow+0x794>)
 800894a:	4413      	add	r3, r2
 800894c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008950:	f7f7 fcbc 	bl	80002cc <__adddf3>
 8008954:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008958:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800895a:	f7f7 fe03 	bl	8000564 <__aeabi_i2d>
 800895e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008960:	4b2d      	ldr	r3, [pc, #180]	@ (8008a18 <__ieee754_pow+0x798>)
 8008962:	4413      	add	r3, r2
 8008964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008968:	4606      	mov	r6, r0
 800896a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800896e:	460f      	mov	r7, r1
 8008970:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008974:	f7f7 fcaa 	bl	80002cc <__adddf3>
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	f7f7 fca6 	bl	80002cc <__adddf3>
 8008980:	4632      	mov	r2, r6
 8008982:	463b      	mov	r3, r7
 8008984:	f7f7 fca2 	bl	80002cc <__adddf3>
 8008988:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800898c:	4632      	mov	r2, r6
 800898e:	463b      	mov	r3, r7
 8008990:	4658      	mov	r0, fp
 8008992:	460d      	mov	r5, r1
 8008994:	f7f7 fc98 	bl	80002c8 <__aeabi_dsub>
 8008998:	4642      	mov	r2, r8
 800899a:	464b      	mov	r3, r9
 800899c:	f7f7 fc94 	bl	80002c8 <__aeabi_dsub>
 80089a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089a4:	f7f7 fc90 	bl	80002c8 <__aeabi_dsub>
 80089a8:	465c      	mov	r4, fp
 80089aa:	4602      	mov	r2, r0
 80089ac:	e036      	b.n	8008a1c <__ieee754_pow+0x79c>
 80089ae:	bf00      	nop
 80089b0:	4a454eef 	.word	0x4a454eef
 80089b4:	3fca7e28 	.word	0x3fca7e28
 80089b8:	93c9db65 	.word	0x93c9db65
 80089bc:	3fcd864a 	.word	0x3fcd864a
 80089c0:	a91d4101 	.word	0xa91d4101
 80089c4:	3fd17460 	.word	0x3fd17460
 80089c8:	518f264d 	.word	0x518f264d
 80089cc:	3fd55555 	.word	0x3fd55555
 80089d0:	db6fabff 	.word	0xdb6fabff
 80089d4:	3fdb6db6 	.word	0x3fdb6db6
 80089d8:	33333303 	.word	0x33333303
 80089dc:	3fe33333 	.word	0x3fe33333
 80089e0:	e0000000 	.word	0xe0000000
 80089e4:	3feec709 	.word	0x3feec709
 80089e8:	dc3a03fd 	.word	0xdc3a03fd
 80089ec:	3feec709 	.word	0x3feec709
 80089f0:	145b01f5 	.word	0x145b01f5
 80089f4:	be3e2fe0 	.word	0xbe3e2fe0
 80089f8:	7ff00000 	.word	0x7ff00000
 80089fc:	43400000 	.word	0x43400000
 8008a00:	0003988e 	.word	0x0003988e
 8008a04:	000bb679 	.word	0x000bb679
 8008a08:	08009440 	.word	0x08009440
 8008a0c:	3ff00000 	.word	0x3ff00000
 8008a10:	40080000 	.word	0x40080000
 8008a14:	08009420 	.word	0x08009420
 8008a18:	08009430 	.word	0x08009430
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008a22:	e5d7      	b.n	80085d4 <__ieee754_pow+0x354>
 8008a24:	f04f 0a01 	mov.w	sl, #1
 8008a28:	e65e      	b.n	80086e8 <__ieee754_pow+0x468>
 8008a2a:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008cfc <__ieee754_pow+0xa7c>)
 8008a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a30:	4630      	mov	r0, r6
 8008a32:	4639      	mov	r1, r7
 8008a34:	f7f7 fc4a 	bl	80002cc <__adddf3>
 8008a38:	4642      	mov	r2, r8
 8008a3a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a3e:	464b      	mov	r3, r9
 8008a40:	4620      	mov	r0, r4
 8008a42:	4629      	mov	r1, r5
 8008a44:	f7f7 fc40 	bl	80002c8 <__aeabi_dsub>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a50:	f7f8 f882 	bl	8000b58 <__aeabi_dcmpgt>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f47f ae00 	bne.w	800865a <__ieee754_pow+0x3da>
 8008a5a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008a5e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008a62:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008a66:	fa43 fa0a 	asr.w	sl, r3, sl
 8008a6a:	44da      	add	sl, fp
 8008a6c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008a70:	489d      	ldr	r0, [pc, #628]	@ (8008ce8 <__ieee754_pow+0xa68>)
 8008a72:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008a76:	4108      	asrs	r0, r1
 8008a78:	ea00 030a 	and.w	r3, r0, sl
 8008a7c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008a80:	f1c1 0114 	rsb	r1, r1, #20
 8008a84:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008a88:	fa4a fa01 	asr.w	sl, sl, r1
 8008a8c:	f1bb 0f00 	cmp.w	fp, #0
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f04f 0200 	mov.w	r2, #0
 8008a98:	bfb8      	it	lt
 8008a9a:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a9e:	f7f7 fc13 	bl	80002c8 <__aeabi_dsub>
 8008aa2:	4680      	mov	r8, r0
 8008aa4:	4689      	mov	r9, r1
 8008aa6:	4632      	mov	r2, r6
 8008aa8:	463b      	mov	r3, r7
 8008aaa:	4640      	mov	r0, r8
 8008aac:	4649      	mov	r1, r9
 8008aae:	f7f7 fc0d 	bl	80002cc <__adddf3>
 8008ab2:	2400      	movs	r4, #0
 8008ab4:	a37c      	add	r3, pc, #496	@ (adr r3, 8008ca8 <__ieee754_pow+0xa28>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	4620      	mov	r0, r4
 8008abc:	460d      	mov	r5, r1
 8008abe:	f7f7 fdbb 	bl	8000638 <__aeabi_dmul>
 8008ac2:	4642      	mov	r2, r8
 8008ac4:	e9cd 0100 	strd	r0, r1, [sp]
 8008ac8:	464b      	mov	r3, r9
 8008aca:	4620      	mov	r0, r4
 8008acc:	4629      	mov	r1, r5
 8008ace:	f7f7 fbfb 	bl	80002c8 <__aeabi_dsub>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	4639      	mov	r1, r7
 8008ada:	f7f7 fbf5 	bl	80002c8 <__aeabi_dsub>
 8008ade:	a374      	add	r3, pc, #464	@ (adr r3, 8008cb0 <__ieee754_pow+0xa30>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	f7f7 fda8 	bl	8000638 <__aeabi_dmul>
 8008ae8:	a373      	add	r3, pc, #460	@ (adr r3, 8008cb8 <__ieee754_pow+0xa38>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	4680      	mov	r8, r0
 8008af0:	4689      	mov	r9, r1
 8008af2:	4620      	mov	r0, r4
 8008af4:	4629      	mov	r1, r5
 8008af6:	f7f7 fd9f 	bl	8000638 <__aeabi_dmul>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	4640      	mov	r0, r8
 8008b00:	4649      	mov	r1, r9
 8008b02:	f7f7 fbe3 	bl	80002cc <__adddf3>
 8008b06:	4604      	mov	r4, r0
 8008b08:	460d      	mov	r5, r1
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b12:	f7f7 fbdb 	bl	80002cc <__adddf3>
 8008b16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b1a:	4680      	mov	r8, r0
 8008b1c:	4689      	mov	r9, r1
 8008b1e:	f7f7 fbd3 	bl	80002c8 <__aeabi_dsub>
 8008b22:	4602      	mov	r2, r0
 8008b24:	460b      	mov	r3, r1
 8008b26:	4620      	mov	r0, r4
 8008b28:	4629      	mov	r1, r5
 8008b2a:	f7f7 fbcd 	bl	80002c8 <__aeabi_dsub>
 8008b2e:	4642      	mov	r2, r8
 8008b30:	4606      	mov	r6, r0
 8008b32:	460f      	mov	r7, r1
 8008b34:	464b      	mov	r3, r9
 8008b36:	4640      	mov	r0, r8
 8008b38:	4649      	mov	r1, r9
 8008b3a:	f7f7 fd7d 	bl	8000638 <__aeabi_dmul>
 8008b3e:	a360      	add	r3, pc, #384	@ (adr r3, 8008cc0 <__ieee754_pow+0xa40>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	4604      	mov	r4, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	f7f7 fd76 	bl	8000638 <__aeabi_dmul>
 8008b4c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008cc8 <__ieee754_pow+0xa48>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	f7f7 fbb9 	bl	80002c8 <__aeabi_dsub>
 8008b56:	4622      	mov	r2, r4
 8008b58:	462b      	mov	r3, r5
 8008b5a:	f7f7 fd6d 	bl	8000638 <__aeabi_dmul>
 8008b5e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008cd0 <__ieee754_pow+0xa50>)
 8008b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b64:	f7f7 fbb2 	bl	80002cc <__adddf3>
 8008b68:	4622      	mov	r2, r4
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	f7f7 fd64 	bl	8000638 <__aeabi_dmul>
 8008b70:	a359      	add	r3, pc, #356	@ (adr r3, 8008cd8 <__ieee754_pow+0xa58>)
 8008b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b76:	f7f7 fba7 	bl	80002c8 <__aeabi_dsub>
 8008b7a:	4622      	mov	r2, r4
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	f7f7 fd5b 	bl	8000638 <__aeabi_dmul>
 8008b82:	a357      	add	r3, pc, #348	@ (adr r3, 8008ce0 <__ieee754_pow+0xa60>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	f7f7 fba0 	bl	80002cc <__adddf3>
 8008b8c:	4622      	mov	r2, r4
 8008b8e:	462b      	mov	r3, r5
 8008b90:	f7f7 fd52 	bl	8000638 <__aeabi_dmul>
 8008b94:	4602      	mov	r2, r0
 8008b96:	460b      	mov	r3, r1
 8008b98:	4640      	mov	r0, r8
 8008b9a:	4649      	mov	r1, r9
 8008b9c:	f7f7 fb94 	bl	80002c8 <__aeabi_dsub>
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4649      	mov	r1, r9
 8008bac:	f7f7 fd44 	bl	8000638 <__aeabi_dmul>
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	e9cd 0100 	strd	r0, r1, [sp]
 8008bb6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f7f7 fb83 	bl	80002c8 <__aeabi_dsub>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	460b      	mov	r3, r1
 8008bc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008bca:	f7f7 fe5f 	bl	800088c <__aeabi_ddiv>
 8008bce:	4632      	mov	r2, r6
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	460d      	mov	r5, r1
 8008bd4:	463b      	mov	r3, r7
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 fd2d 	bl	8000638 <__aeabi_dmul>
 8008bde:	4632      	mov	r2, r6
 8008be0:	463b      	mov	r3, r7
 8008be2:	f7f7 fb73 	bl	80002cc <__adddf3>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	4620      	mov	r0, r4
 8008bec:	4629      	mov	r1, r5
 8008bee:	f7f7 fb6b 	bl	80002c8 <__aeabi_dsub>
 8008bf2:	4642      	mov	r2, r8
 8008bf4:	464b      	mov	r3, r9
 8008bf6:	f7f7 fb67 	bl	80002c8 <__aeabi_dsub>
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	493b      	ldr	r1, [pc, #236]	@ (8008cec <__ieee754_pow+0xa6c>)
 8008c00:	2000      	movs	r0, #0
 8008c02:	f7f7 fb61 	bl	80002c8 <__aeabi_dsub>
 8008c06:	ec41 0b10 	vmov	d0, r0, r1
 8008c0a:	ee10 3a90 	vmov	r3, s1
 8008c0e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008c12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c16:	da30      	bge.n	8008c7a <__ieee754_pow+0x9fa>
 8008c18:	4650      	mov	r0, sl
 8008c1a:	f000 f87d 	bl	8008d18 <scalbn>
 8008c1e:	ec51 0b10 	vmov	r0, r1, d0
 8008c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c26:	f7ff bbd2 	b.w	80083ce <__ieee754_pow+0x14e>
 8008c2a:	4c31      	ldr	r4, [pc, #196]	@ (8008cf0 <__ieee754_pow+0xa70>)
 8008c2c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c30:	42a3      	cmp	r3, r4
 8008c32:	d91a      	bls.n	8008c6a <__ieee754_pow+0x9ea>
 8008c34:	4b2f      	ldr	r3, [pc, #188]	@ (8008cf4 <__ieee754_pow+0xa74>)
 8008c36:	440b      	add	r3, r1
 8008c38:	4303      	orrs	r3, r0
 8008c3a:	d009      	beq.n	8008c50 <__ieee754_pow+0x9d0>
 8008c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c40:	2200      	movs	r2, #0
 8008c42:	2300      	movs	r3, #0
 8008c44:	f7f7 ff6a 	bl	8000b1c <__aeabi_dcmplt>
 8008c48:	3800      	subs	r0, #0
 8008c4a:	bf18      	it	ne
 8008c4c:	2001      	movne	r0, #1
 8008c4e:	e42b      	b.n	80084a8 <__ieee754_pow+0x228>
 8008c50:	4642      	mov	r2, r8
 8008c52:	464b      	mov	r3, r9
 8008c54:	f7f7 fb38 	bl	80002c8 <__aeabi_dsub>
 8008c58:	4632      	mov	r2, r6
 8008c5a:	463b      	mov	r3, r7
 8008c5c:	f7f7 ff72 	bl	8000b44 <__aeabi_dcmpge>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d1eb      	bne.n	8008c3c <__ieee754_pow+0x9bc>
 8008c64:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008d04 <__ieee754_pow+0xa84>
 8008c68:	e6f7      	b.n	8008a5a <__ieee754_pow+0x7da>
 8008c6a:	469a      	mov	sl, r3
 8008c6c:	4b22      	ldr	r3, [pc, #136]	@ (8008cf8 <__ieee754_pow+0xa78>)
 8008c6e:	459a      	cmp	sl, r3
 8008c70:	f63f aef3 	bhi.w	8008a5a <__ieee754_pow+0x7da>
 8008c74:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008c78:	e715      	b.n	8008aa6 <__ieee754_pow+0x826>
 8008c7a:	ec51 0b10 	vmov	r0, r1, d0
 8008c7e:	4619      	mov	r1, r3
 8008c80:	e7cf      	b.n	8008c22 <__ieee754_pow+0x9a2>
 8008c82:	491a      	ldr	r1, [pc, #104]	@ (8008cec <__ieee754_pow+0xa6c>)
 8008c84:	2000      	movs	r0, #0
 8008c86:	f7ff bb18 	b.w	80082ba <__ieee754_pow+0x3a>
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	f7ff bb14 	b.w	80082ba <__ieee754_pow+0x3a>
 8008c92:	4630      	mov	r0, r6
 8008c94:	4639      	mov	r1, r7
 8008c96:	f7ff bb10 	b.w	80082ba <__ieee754_pow+0x3a>
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f7ff bb5e 	b.w	800835c <__ieee754_pow+0xdc>
 8008ca0:	2400      	movs	r4, #0
 8008ca2:	f7ff bb49 	b.w	8008338 <__ieee754_pow+0xb8>
 8008ca6:	bf00      	nop
 8008ca8:	00000000 	.word	0x00000000
 8008cac:	3fe62e43 	.word	0x3fe62e43
 8008cb0:	fefa39ef 	.word	0xfefa39ef
 8008cb4:	3fe62e42 	.word	0x3fe62e42
 8008cb8:	0ca86c39 	.word	0x0ca86c39
 8008cbc:	be205c61 	.word	0xbe205c61
 8008cc0:	72bea4d0 	.word	0x72bea4d0
 8008cc4:	3e663769 	.word	0x3e663769
 8008cc8:	c5d26bf1 	.word	0xc5d26bf1
 8008ccc:	3ebbbd41 	.word	0x3ebbbd41
 8008cd0:	af25de2c 	.word	0xaf25de2c
 8008cd4:	3f11566a 	.word	0x3f11566a
 8008cd8:	16bebd93 	.word	0x16bebd93
 8008cdc:	3f66c16c 	.word	0x3f66c16c
 8008ce0:	5555553e 	.word	0x5555553e
 8008ce4:	3fc55555 	.word	0x3fc55555
 8008ce8:	fff00000 	.word	0xfff00000
 8008cec:	3ff00000 	.word	0x3ff00000
 8008cf0:	4090cbff 	.word	0x4090cbff
 8008cf4:	3f6f3400 	.word	0x3f6f3400
 8008cf8:	3fe00000 	.word	0x3fe00000
 8008cfc:	652b82fe 	.word	0x652b82fe
 8008d00:	3c971547 	.word	0x3c971547
 8008d04:	4090cc00 	.word	0x4090cc00

08008d08 <fabs>:
 8008d08:	ec51 0b10 	vmov	r0, r1, d0
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008d12:	ec43 2b10 	vmov	d0, r2, r3
 8008d16:	4770      	bx	lr

08008d18 <scalbn>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	ec55 4b10 	vmov	r4, r5, d0
 8008d1e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008d22:	4606      	mov	r6, r0
 8008d24:	462b      	mov	r3, r5
 8008d26:	b991      	cbnz	r1, 8008d4e <scalbn+0x36>
 8008d28:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008d2c:	4323      	orrs	r3, r4
 8008d2e:	d03d      	beq.n	8008dac <scalbn+0x94>
 8008d30:	4b35      	ldr	r3, [pc, #212]	@ (8008e08 <scalbn+0xf0>)
 8008d32:	4620      	mov	r0, r4
 8008d34:	4629      	mov	r1, r5
 8008d36:	2200      	movs	r2, #0
 8008d38:	f7f7 fc7e 	bl	8000638 <__aeabi_dmul>
 8008d3c:	4b33      	ldr	r3, [pc, #204]	@ (8008e0c <scalbn+0xf4>)
 8008d3e:	429e      	cmp	r6, r3
 8008d40:	4604      	mov	r4, r0
 8008d42:	460d      	mov	r5, r1
 8008d44:	da0f      	bge.n	8008d66 <scalbn+0x4e>
 8008d46:	a328      	add	r3, pc, #160	@ (adr r3, 8008de8 <scalbn+0xd0>)
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	e01e      	b.n	8008d8c <scalbn+0x74>
 8008d4e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008d52:	4291      	cmp	r1, r2
 8008d54:	d10b      	bne.n	8008d6e <scalbn+0x56>
 8008d56:	4622      	mov	r2, r4
 8008d58:	4620      	mov	r0, r4
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	f7f7 fab6 	bl	80002cc <__adddf3>
 8008d60:	4604      	mov	r4, r0
 8008d62:	460d      	mov	r5, r1
 8008d64:	e022      	b.n	8008dac <scalbn+0x94>
 8008d66:	460b      	mov	r3, r1
 8008d68:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008d6c:	3936      	subs	r1, #54	@ 0x36
 8008d6e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008d72:	4296      	cmp	r6, r2
 8008d74:	dd0d      	ble.n	8008d92 <scalbn+0x7a>
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	a11d      	add	r1, pc, #116	@ (adr r1, 8008df0 <scalbn+0xd8>)
 8008d7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d7e:	da02      	bge.n	8008d86 <scalbn+0x6e>
 8008d80:	a11d      	add	r1, pc, #116	@ (adr r1, 8008df8 <scalbn+0xe0>)
 8008d82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d86:	a31a      	add	r3, pc, #104	@ (adr r3, 8008df0 <scalbn+0xd8>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 fc54 	bl	8000638 <__aeabi_dmul>
 8008d90:	e7e6      	b.n	8008d60 <scalbn+0x48>
 8008d92:	1872      	adds	r2, r6, r1
 8008d94:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008d98:	428a      	cmp	r2, r1
 8008d9a:	dcec      	bgt.n	8008d76 <scalbn+0x5e>
 8008d9c:	2a00      	cmp	r2, #0
 8008d9e:	dd08      	ble.n	8008db2 <scalbn+0x9a>
 8008da0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008da4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008da8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008dac:	ec45 4b10 	vmov	d0, r4, r5
 8008db0:	bd70      	pop	{r4, r5, r6, pc}
 8008db2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008db6:	da08      	bge.n	8008dca <scalbn+0xb2>
 8008db8:	2d00      	cmp	r5, #0
 8008dba:	a10b      	add	r1, pc, #44	@ (adr r1, 8008de8 <scalbn+0xd0>)
 8008dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc0:	dac1      	bge.n	8008d46 <scalbn+0x2e>
 8008dc2:	a10f      	add	r1, pc, #60	@ (adr r1, 8008e00 <scalbn+0xe8>)
 8008dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dc8:	e7bd      	b.n	8008d46 <scalbn+0x2e>
 8008dca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008dce:	3236      	adds	r2, #54	@ 0x36
 8008dd0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008dd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008dd8:	4620      	mov	r0, r4
 8008dda:	4b0d      	ldr	r3, [pc, #52]	@ (8008e10 <scalbn+0xf8>)
 8008ddc:	4629      	mov	r1, r5
 8008dde:	2200      	movs	r2, #0
 8008de0:	e7d4      	b.n	8008d8c <scalbn+0x74>
 8008de2:	bf00      	nop
 8008de4:	f3af 8000 	nop.w
 8008de8:	c2f8f359 	.word	0xc2f8f359
 8008dec:	01a56e1f 	.word	0x01a56e1f
 8008df0:	8800759c 	.word	0x8800759c
 8008df4:	7e37e43c 	.word	0x7e37e43c
 8008df8:	8800759c 	.word	0x8800759c
 8008dfc:	fe37e43c 	.word	0xfe37e43c
 8008e00:	c2f8f359 	.word	0xc2f8f359
 8008e04:	81a56e1f 	.word	0x81a56e1f
 8008e08:	43500000 	.word	0x43500000
 8008e0c:	ffff3cb0 	.word	0xffff3cb0
 8008e10:	3c900000 	.word	0x3c900000

08008e14 <with_errno>:
 8008e14:	b510      	push	{r4, lr}
 8008e16:	ed2d 8b02 	vpush	{d8}
 8008e1a:	eeb0 8a40 	vmov.f32	s16, s0
 8008e1e:	eef0 8a60 	vmov.f32	s17, s1
 8008e22:	4604      	mov	r4, r0
 8008e24:	f7fd f904 	bl	8006030 <__errno>
 8008e28:	eeb0 0a48 	vmov.f32	s0, s16
 8008e2c:	eef0 0a68 	vmov.f32	s1, s17
 8008e30:	ecbd 8b02 	vpop	{d8}
 8008e34:	6004      	str	r4, [r0, #0]
 8008e36:	bd10      	pop	{r4, pc}

08008e38 <xflow>:
 8008e38:	4603      	mov	r3, r0
 8008e3a:	b507      	push	{r0, r1, r2, lr}
 8008e3c:	ec51 0b10 	vmov	r0, r1, d0
 8008e40:	b183      	cbz	r3, 8008e64 <xflow+0x2c>
 8008e42:	4602      	mov	r2, r0
 8008e44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e48:	e9cd 2300 	strd	r2, r3, [sp]
 8008e4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e50:	f7f7 fbf2 	bl	8000638 <__aeabi_dmul>
 8008e54:	ec41 0b10 	vmov	d0, r0, r1
 8008e58:	2022      	movs	r0, #34	@ 0x22
 8008e5a:	b003      	add	sp, #12
 8008e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e60:	f7ff bfd8 	b.w	8008e14 <with_errno>
 8008e64:	4602      	mov	r2, r0
 8008e66:	460b      	mov	r3, r1
 8008e68:	e7ee      	b.n	8008e48 <xflow+0x10>
 8008e6a:	0000      	movs	r0, r0
 8008e6c:	0000      	movs	r0, r0
	...

08008e70 <__math_uflow>:
 8008e70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e78 <__math_uflow+0x8>
 8008e74:	f7ff bfe0 	b.w	8008e38 <xflow>
 8008e78:	00000000 	.word	0x00000000
 8008e7c:	10000000 	.word	0x10000000

08008e80 <__math_oflow>:
 8008e80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e88 <__math_oflow+0x8>
 8008e84:	f7ff bfd8 	b.w	8008e38 <xflow>
 8008e88:	00000000 	.word	0x00000000
 8008e8c:	70000000 	.word	0x70000000

08008e90 <__ieee754_sqrt>:
 8008e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	4a68      	ldr	r2, [pc, #416]	@ (8009038 <__ieee754_sqrt+0x1a8>)
 8008e96:	ec55 4b10 	vmov	r4, r5, d0
 8008e9a:	43aa      	bics	r2, r5
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	d110      	bne.n	8008ec4 <__ieee754_sqrt+0x34>
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f7f7 fbc6 	bl	8000638 <__aeabi_dmul>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	f7f7 fa0a 	bl	80002cc <__adddf3>
 8008eb8:	4604      	mov	r4, r0
 8008eba:	460d      	mov	r5, r1
 8008ebc:	ec45 4b10 	vmov	d0, r4, r5
 8008ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec4:	2d00      	cmp	r5, #0
 8008ec6:	dc0e      	bgt.n	8008ee6 <__ieee754_sqrt+0x56>
 8008ec8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008ecc:	4322      	orrs	r2, r4
 8008ece:	d0f5      	beq.n	8008ebc <__ieee754_sqrt+0x2c>
 8008ed0:	b19d      	cbz	r5, 8008efa <__ieee754_sqrt+0x6a>
 8008ed2:	4622      	mov	r2, r4
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	f7f7 f9f6 	bl	80002c8 <__aeabi_dsub>
 8008edc:	4602      	mov	r2, r0
 8008ede:	460b      	mov	r3, r1
 8008ee0:	f7f7 fcd4 	bl	800088c <__aeabi_ddiv>
 8008ee4:	e7e8      	b.n	8008eb8 <__ieee754_sqrt+0x28>
 8008ee6:	152a      	asrs	r2, r5, #20
 8008ee8:	d115      	bne.n	8008f16 <__ieee754_sqrt+0x86>
 8008eea:	2000      	movs	r0, #0
 8008eec:	e009      	b.n	8008f02 <__ieee754_sqrt+0x72>
 8008eee:	0acb      	lsrs	r3, r1, #11
 8008ef0:	3a15      	subs	r2, #21
 8008ef2:	0549      	lsls	r1, r1, #21
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d0fa      	beq.n	8008eee <__ieee754_sqrt+0x5e>
 8008ef8:	e7f7      	b.n	8008eea <__ieee754_sqrt+0x5a>
 8008efa:	462a      	mov	r2, r5
 8008efc:	e7fa      	b.n	8008ef4 <__ieee754_sqrt+0x64>
 8008efe:	005b      	lsls	r3, r3, #1
 8008f00:	3001      	adds	r0, #1
 8008f02:	02dc      	lsls	r4, r3, #11
 8008f04:	d5fb      	bpl.n	8008efe <__ieee754_sqrt+0x6e>
 8008f06:	1e44      	subs	r4, r0, #1
 8008f08:	1b12      	subs	r2, r2, r4
 8008f0a:	f1c0 0420 	rsb	r4, r0, #32
 8008f0e:	fa21 f404 	lsr.w	r4, r1, r4
 8008f12:	4323      	orrs	r3, r4
 8008f14:	4081      	lsls	r1, r0
 8008f16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f1a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f22:	07d2      	lsls	r2, r2, #31
 8008f24:	bf5c      	itt	pl
 8008f26:	005b      	lslpl	r3, r3, #1
 8008f28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008f2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f30:	bf58      	it	pl
 8008f32:	0049      	lslpl	r1, r1, #1
 8008f34:	2600      	movs	r6, #0
 8008f36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008f3a:	106d      	asrs	r5, r5, #1
 8008f3c:	0049      	lsls	r1, r1, #1
 8008f3e:	2016      	movs	r0, #22
 8008f40:	4632      	mov	r2, r6
 8008f42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008f46:	1917      	adds	r7, r2, r4
 8008f48:	429f      	cmp	r7, r3
 8008f4a:	bfde      	ittt	le
 8008f4c:	193a      	addle	r2, r7, r4
 8008f4e:	1bdb      	suble	r3, r3, r7
 8008f50:	1936      	addle	r6, r6, r4
 8008f52:	0fcf      	lsrs	r7, r1, #31
 8008f54:	3801      	subs	r0, #1
 8008f56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008f5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008f5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008f62:	d1f0      	bne.n	8008f46 <__ieee754_sqrt+0xb6>
 8008f64:	4604      	mov	r4, r0
 8008f66:	2720      	movs	r7, #32
 8008f68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	eb00 0e0c 	add.w	lr, r0, ip
 8008f72:	db02      	blt.n	8008f7a <__ieee754_sqrt+0xea>
 8008f74:	d113      	bne.n	8008f9e <__ieee754_sqrt+0x10e>
 8008f76:	458e      	cmp	lr, r1
 8008f78:	d811      	bhi.n	8008f9e <__ieee754_sqrt+0x10e>
 8008f7a:	f1be 0f00 	cmp.w	lr, #0
 8008f7e:	eb0e 000c 	add.w	r0, lr, ip
 8008f82:	da42      	bge.n	800900a <__ieee754_sqrt+0x17a>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	db40      	blt.n	800900a <__ieee754_sqrt+0x17a>
 8008f88:	f102 0801 	add.w	r8, r2, #1
 8008f8c:	1a9b      	subs	r3, r3, r2
 8008f8e:	458e      	cmp	lr, r1
 8008f90:	bf88      	it	hi
 8008f92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008f96:	eba1 010e 	sub.w	r1, r1, lr
 8008f9a:	4464      	add	r4, ip
 8008f9c:	4642      	mov	r2, r8
 8008f9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008fa2:	3f01      	subs	r7, #1
 8008fa4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008fa8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008fac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008fb0:	d1dc      	bne.n	8008f6c <__ieee754_sqrt+0xdc>
 8008fb2:	4319      	orrs	r1, r3
 8008fb4:	d01b      	beq.n	8008fee <__ieee754_sqrt+0x15e>
 8008fb6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800903c <__ieee754_sqrt+0x1ac>
 8008fba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009040 <__ieee754_sqrt+0x1b0>
 8008fbe:	e9da 0100 	ldrd	r0, r1, [sl]
 8008fc2:	e9db 2300 	ldrd	r2, r3, [fp]
 8008fc6:	f7f7 f97f 	bl	80002c8 <__aeabi_dsub>
 8008fca:	e9da 8900 	ldrd	r8, r9, [sl]
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4640      	mov	r0, r8
 8008fd4:	4649      	mov	r1, r9
 8008fd6:	f7f7 fdab 	bl	8000b30 <__aeabi_dcmple>
 8008fda:	b140      	cbz	r0, 8008fee <__ieee754_sqrt+0x15e>
 8008fdc:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008fe0:	e9da 0100 	ldrd	r0, r1, [sl]
 8008fe4:	e9db 2300 	ldrd	r2, r3, [fp]
 8008fe8:	d111      	bne.n	800900e <__ieee754_sqrt+0x17e>
 8008fea:	3601      	adds	r6, #1
 8008fec:	463c      	mov	r4, r7
 8008fee:	1072      	asrs	r2, r6, #1
 8008ff0:	0863      	lsrs	r3, r4, #1
 8008ff2:	07f1      	lsls	r1, r6, #31
 8008ff4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008ff8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008ffc:	bf48      	it	mi
 8008ffe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009002:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009006:	4618      	mov	r0, r3
 8009008:	e756      	b.n	8008eb8 <__ieee754_sqrt+0x28>
 800900a:	4690      	mov	r8, r2
 800900c:	e7be      	b.n	8008f8c <__ieee754_sqrt+0xfc>
 800900e:	f7f7 f95d 	bl	80002cc <__adddf3>
 8009012:	e9da 8900 	ldrd	r8, r9, [sl]
 8009016:	4602      	mov	r2, r0
 8009018:	460b      	mov	r3, r1
 800901a:	4640      	mov	r0, r8
 800901c:	4649      	mov	r1, r9
 800901e:	f7f7 fd7d 	bl	8000b1c <__aeabi_dcmplt>
 8009022:	b120      	cbz	r0, 800902e <__ieee754_sqrt+0x19e>
 8009024:	1ca0      	adds	r0, r4, #2
 8009026:	bf08      	it	eq
 8009028:	3601      	addeq	r6, #1
 800902a:	3402      	adds	r4, #2
 800902c:	e7df      	b.n	8008fee <__ieee754_sqrt+0x15e>
 800902e:	1c63      	adds	r3, r4, #1
 8009030:	f023 0401 	bic.w	r4, r3, #1
 8009034:	e7db      	b.n	8008fee <__ieee754_sqrt+0x15e>
 8009036:	bf00      	nop
 8009038:	7ff00000 	.word	0x7ff00000
 800903c:	200001f0 	.word	0x200001f0
 8009040:	200001e8 	.word	0x200001e8

08009044 <_init>:
 8009044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009046:	bf00      	nop
 8009048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904a:	bc08      	pop	{r3}
 800904c:	469e      	mov	lr, r3
 800904e:	4770      	bx	lr

08009050 <_fini>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	bf00      	nop
 8009054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009056:	bc08      	pop	{r3}
 8009058:	469e      	mov	lr, r3
 800905a:	4770      	bx	lr
