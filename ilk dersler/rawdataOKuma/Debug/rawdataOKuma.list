
rawdataOKuma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002264  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002428  08002428  00003428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002440  08002440  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002440  08002440  00003440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002448  08002448  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002448  08002448  00003448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800244c  0800244c  0000344c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002450  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  0800245c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  0800245c  000040c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a56f  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000173e  00000000  00000000  0000e5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0000fcf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000760  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207a3  00000000  00000000  00010db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca23  00000000  00000000  00031553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c70ad  00000000  00000000  0003df76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105023  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000270c  00000000  00000000  00105068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00107774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002410 	.word	0x08002410

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002410 	.word	0x08002410

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa68 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f808 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8cc 	bl	800069c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f8a0 	bl	8000648 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000508:	f000 f870 	bl	80005ec <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <main+0x18>

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b094      	sub	sp, #80	@ 0x50
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 031c 	add.w	r3, r7, #28
 800051a:	2234      	movs	r2, #52	@ 0x34
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f001 ff4a 	bl	80023b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	f107 0308 	add.w	r3, r7, #8
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b2a      	ldr	r3, [pc, #168]	@ (80005e4 <SystemClock_Config+0xd4>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	4a29      	ldr	r2, [pc, #164]	@ (80005e4 <SystemClock_Config+0xd4>)
 800053e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000542:	6413      	str	r3, [r2, #64]	@ 0x40
 8000544:	4b27      	ldr	r3, [pc, #156]	@ (80005e4 <SystemClock_Config+0xd4>)
 8000546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000548:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800054c:	607b      	str	r3, [r7, #4]
 800054e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000550:	2300      	movs	r3, #0
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	4b24      	ldr	r3, [pc, #144]	@ (80005e8 <SystemClock_Config+0xd8>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800055c:	4a22      	ldr	r2, [pc, #136]	@ (80005e8 <SystemClock_Config+0xd8>)
 800055e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000562:	6013      	str	r3, [r2, #0]
 8000564:	4b20      	ldr	r3, [pc, #128]	@ (80005e8 <SystemClock_Config+0xd8>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000570:	2302      	movs	r3, #2
 8000572:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000578:	2310      	movs	r3, #16
 800057a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057c:	2302      	movs	r3, #2
 800057e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000580:	2300      	movs	r3, #0
 8000582:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000584:	2310      	movs	r3, #16
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000588:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800058c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800058e:	2304      	movs	r3, #4
 8000590:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000596:	2302      	movs	r3, #2
 8000598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 f9a8 	bl	80018f4 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80005aa:	f000 f8e5 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ae:	230f      	movs	r3, #15
 80005b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b2:	2302      	movs	r3, #2
 80005b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005c4:	f107 0308 	add.w	r3, r7, #8
 80005c8:	2102      	movs	r1, #2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fe48 	bl	8001260 <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xca>
  {
    Error_Handler();
 80005d6:	f000 f8cf 	bl	8000778 <Error_Handler>
  }
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	@ 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	@ (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800060e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	@ (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000628:	4804      	ldr	r0, [pc, #16]	@ (800063c <MX_I2C1_Init+0x50>)
 800062a:	f000 fcd5 	bl	8000fd8 <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000634:	f000 f8a0 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000028 	.word	0x20000028
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800064c:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <MX_USART2_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000652:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800067e:	4805      	ldr	r0, [pc, #20]	@ (8000694 <MX_USART2_UART_Init+0x4c>)
 8000680:	f001 fbd6 	bl	8001e30 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068a:	f000 f875 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	2000007c 	.word	0x2000007c
 8000698:	40004400 	.word	0x40004400

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	@ 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	613b      	str	r3, [r7, #16]
 80006b6:	4b2d      	ldr	r3, [pc, #180]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a2c      	ldr	r2, [pc, #176]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	613b      	str	r3, [r7, #16]
 80006cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	4b26      	ldr	r3, [pc, #152]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a25      	ldr	r2, [pc, #148]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b23      	ldr	r3, [pc, #140]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a1e      	ldr	r2, [pc, #120]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_GPIO_Init+0xd0>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_GPIO_Init+0xd0>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <MX_GPIO_Init+0xd0>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <MX_GPIO_Init+0xd0>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4812      	ldr	r0, [pc, #72]	@ (8000770 <MX_GPIO_Init+0xd4>)
 8000728:	f000 fc3c 	bl	8000fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000732:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0314 	add.w	r3, r7, #20
 8000740:	4619      	mov	r1, r3
 8000742:	480c      	ldr	r0, [pc, #48]	@ (8000774 <MX_GPIO_Init+0xd8>)
 8000744:	f000 fa9a 	bl	8000c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000748:	2320      	movs	r3, #32
 800074a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	4619      	mov	r1, r3
 800075e:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_GPIO_Init+0xd4>)
 8000760:	f000 fa8c 	bl	8000c7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000764:	bf00      	nop
 8000766:	3728      	adds	r7, #40	@ 0x28
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40020000 	.word	0x40020000
 8000774:	40020800 	.word	0x40020800

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a0f      	ldr	r2, [pc, #60]	@ (80007d0 <HAL_MspInit+0x4c>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
 800079a:	4b0d      	ldr	r3, [pc, #52]	@ (80007d0 <HAL_MspInit+0x4c>)
 800079c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800079e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a08      	ldr	r2, [pc, #32]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_MspInit+0x4c>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007c2:	2007      	movs	r0, #7
 80007c4:	f000 fa26 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800

080007d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
 80007e8:	60da      	str	r2, [r3, #12]
 80007ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a19      	ldr	r2, [pc, #100]	@ (8000858 <HAL_I2C_MspInit+0x84>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d12b      	bne.n	800084e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	613b      	str	r3, [r7, #16]
 80007fa:	4b18      	ldr	r3, [pc, #96]	@ (800085c <HAL_I2C_MspInit+0x88>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a17      	ldr	r2, [pc, #92]	@ (800085c <HAL_I2C_MspInit+0x88>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b15      	ldr	r3, [pc, #84]	@ (800085c <HAL_I2C_MspInit+0x88>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = scl_Pin|sda_Pin;
 8000812:	23c0      	movs	r3, #192	@ 0xc0
 8000814:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000816:	2312      	movs	r3, #18
 8000818:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081e:	2303      	movs	r3, #3
 8000820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000822:	2304      	movs	r3, #4
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000826:	f107 0314 	add.w	r3, r7, #20
 800082a:	4619      	mov	r1, r3
 800082c:	480c      	ldr	r0, [pc, #48]	@ (8000860 <HAL_I2C_MspInit+0x8c>)
 800082e:	f000 fa25 	bl	8000c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <HAL_I2C_MspInit+0x88>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	4a08      	ldr	r2, [pc, #32]	@ (800085c <HAL_I2C_MspInit+0x88>)
 800083c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000840:	6413      	str	r3, [r2, #64]	@ 0x40
 8000842:	4b06      	ldr	r3, [pc, #24]	@ (800085c <HAL_I2C_MspInit+0x88>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	@ 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40005400 	.word	0x40005400
 800085c:	40023800 	.word	0x40023800
 8000860:	40020400 	.word	0x40020400

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	@ 0x28
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a19      	ldr	r2, [pc, #100]	@ (80008e8 <HAL_UART_MspInit+0x84>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d12b      	bne.n	80008de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
 800088a:	4b18      	ldr	r3, [pc, #96]	@ (80008ec <HAL_UART_MspInit+0x88>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088e:	4a17      	ldr	r2, [pc, #92]	@ (80008ec <HAL_UART_MspInit+0x88>)
 8000890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000894:	6413      	str	r3, [r2, #64]	@ 0x40
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <HAL_UART_MspInit+0x88>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b11      	ldr	r3, [pc, #68]	@ (80008ec <HAL_UART_MspInit+0x88>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a10      	ldr	r2, [pc, #64]	@ (80008ec <HAL_UART_MspInit+0x88>)
 80008ac:	f043 0301 	orr.w	r3, r3, #1
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b0e      	ldr	r3, [pc, #56]	@ (80008ec <HAL_UART_MspInit+0x88>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0301 	and.w	r3, r3, #1
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008be:	230c      	movs	r3, #12
 80008c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c2:	2302      	movs	r3, #2
 80008c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ca:	2303      	movs	r3, #3
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ce:	2307      	movs	r3, #7
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <HAL_UART_MspInit+0x8c>)
 80008da:	f000 f9cf 	bl	8000c7c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	@ 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40004400 	.word	0x40004400
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020000 	.word	0x40020000

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <NMI_Handler+0x4>

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <MemManage_Handler+0x4>

0800090c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094a:	f000 f891 	bl	8000a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	@ (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800097c:	f7ff ffea 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000980:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000982:	490d      	ldr	r1, [pc, #52]	@ (80009b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000984:	4a0d      	ldr	r2, [pc, #52]	@ (80009bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800098c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000998:	4c0a      	ldr	r4, [pc, #40]	@ (80009c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f001 fd0f 	bl	80023c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009aa:	f7ff fda3 	bl	80004f4 <main>
  bx  lr    
 80009ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009bc:	08002450 	.word	0x08002450
  ldr r2, =_sbss
 80009c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c4:	200000c8 	.word	0x200000c8

080009c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a0c <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	@ (8000a0c <HAL_Init+0x40>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_Init+0x40>)
 80009e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	@ (8000a0c <HAL_Init+0x40>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f90d 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f000 f808 	bl	8000a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff fec0 	bl	8000784 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023c00 	.word	0x40023c00

08000a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a18:	4b12      	ldr	r3, [pc, #72]	@ (8000a64 <HAL_InitTick+0x54>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <HAL_InitTick+0x58>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	4619      	mov	r1, r3
 8000a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 f917 	bl	8000c62 <HAL_SYSTICK_Config>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e00e      	b.n	8000a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2b0f      	cmp	r3, #15
 8000a42:	d80a      	bhi.n	8000a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a44:	2200      	movs	r2, #0
 8000a46:	6879      	ldr	r1, [r7, #4]
 8000a48:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4c:	f000 f8ed 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a50:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <HAL_InitTick+0x5c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	20000000 	.word	0x20000000
 8000a68:	20000008 	.word	0x20000008
 8000a6c:	20000004 	.word	0x20000004

08000a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x20>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <HAL_IncTick+0x24>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a04      	ldr	r2, [pc, #16]	@ (8000a94 <HAL_IncTick+0x24>)
 8000a82:	6013      	str	r3, [r2, #0]
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000008 	.word	0x20000008
 8000a94:	200000c4 	.word	0x200000c4

08000a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <HAL_GetTick+0x14>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	200000c4 	.word	0x200000c4

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	@ (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	@ (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	@ 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	@ 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff47 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff5c 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff8e 	bl	8000b68 <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f7ff ffb0 	bl	8000bd0 <SysTick_Config>
 8000c70:	4603      	mov	r3, r0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
 8000c96:	e165      	b.n	8000f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	697a      	ldr	r2, [r7, #20]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	f040 8154 	bne.w	8000f5e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d005      	beq.n	8000cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d130      	bne.n	8000d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	68da      	ldr	r2, [r3, #12]
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d04:	2201      	movs	r2, #1
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	091b      	lsrs	r3, r3, #4
 8000d1a:	f003 0201 	and.w	r2, r3, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d017      	beq.n	8000d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	68db      	ldr	r3, [r3, #12]
 8000d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	2203      	movs	r2, #3
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4313      	orrs	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d123      	bne.n	8000dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	691a      	ldr	r2, [r3, #16]
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	69b9      	ldr	r1, [r7, #24]
 8000dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0203 	and.w	r2, r3, #3
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 80ae 	beq.w	8000f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b5d      	ldr	r3, [pc, #372]	@ (8000f7c <HAL_GPIO_Init+0x300>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0a:	4a5c      	ldr	r2, [pc, #368]	@ (8000f7c <HAL_GPIO_Init+0x300>)
 8000e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e12:	4b5a      	ldr	r3, [pc, #360]	@ (8000f7c <HAL_GPIO_Init+0x300>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1e:	4a58      	ldr	r2, [pc, #352]	@ (8000f80 <HAL_GPIO_Init+0x304>)
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	089b      	lsrs	r3, r3, #2
 8000e24:	3302      	adds	r3, #2
 8000e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	f003 0303 	and.w	r3, r3, #3
 8000e32:	009b      	lsls	r3, r3, #2
 8000e34:	220f      	movs	r2, #15
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4a4f      	ldr	r2, [pc, #316]	@ (8000f84 <HAL_GPIO_Init+0x308>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d025      	beq.n	8000e96 <HAL_GPIO_Init+0x21a>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8000f88 <HAL_GPIO_Init+0x30c>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d01f      	beq.n	8000e92 <HAL_GPIO_Init+0x216>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4d      	ldr	r2, [pc, #308]	@ (8000f8c <HAL_GPIO_Init+0x310>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d019      	beq.n	8000e8e <HAL_GPIO_Init+0x212>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8000f90 <HAL_GPIO_Init+0x314>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d013      	beq.n	8000e8a <HAL_GPIO_Init+0x20e>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4b      	ldr	r2, [pc, #300]	@ (8000f94 <HAL_GPIO_Init+0x318>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d00d      	beq.n	8000e86 <HAL_GPIO_Init+0x20a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000f98 <HAL_GPIO_Init+0x31c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d007      	beq.n	8000e82 <HAL_GPIO_Init+0x206>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a49      	ldr	r2, [pc, #292]	@ (8000f9c <HAL_GPIO_Init+0x320>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d101      	bne.n	8000e7e <HAL_GPIO_Init+0x202>
 8000e7a:	2306      	movs	r3, #6
 8000e7c:	e00c      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e7e:	2307      	movs	r3, #7
 8000e80:	e00a      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e82:	2305      	movs	r3, #5
 8000e84:	e008      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e006      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e004      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e8e:	2302      	movs	r3, #2
 8000e90:	e002      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e92:	2301      	movs	r3, #1
 8000e94:	e000      	b.n	8000e98 <HAL_GPIO_Init+0x21c>
 8000e96:	2300      	movs	r3, #0
 8000e98:	69fa      	ldr	r2, [r7, #28]
 8000e9a:	f002 0203 	and.w	r2, r2, #3
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	4093      	lsls	r3, r2
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea8:	4935      	ldr	r1, [pc, #212]	@ (8000f80 <HAL_GPIO_Init+0x304>)
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	089b      	lsrs	r3, r3, #2
 8000eae:	3302      	adds	r3, #2
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fa0 <HAL_GPIO_Init+0x324>)
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eda:	4a31      	ldr	r2, [pc, #196]	@ (8000fa0 <HAL_GPIO_Init+0x324>)
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8000fa0 <HAL_GPIO_Init+0x324>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4013      	ands	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d003      	beq.n	8000f04 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f04:	4a26      	ldr	r2, [pc, #152]	@ (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f06:	69bb      	ldr	r3, [r7, #24]
 8000f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0a:	4b25      	ldr	r3, [pc, #148]	@ (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	4013      	ands	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d003      	beq.n	8000f2e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f2e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	69ba      	ldr	r2, [r7, #24]
 8000f40:	4013      	ands	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f58:	4a11      	ldr	r2, [pc, #68]	@ (8000fa0 <HAL_GPIO_Init+0x324>)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3301      	adds	r3, #1
 8000f62:	61fb      	str	r3, [r7, #28]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	2b0f      	cmp	r3, #15
 8000f68:	f67f ae96 	bls.w	8000c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40023800 	.word	0x40023800
 8000f80:	40013800 	.word	0x40013800
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40020800 	.word	0x40020800
 8000f90:	40020c00 	.word	0x40020c00
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40021400 	.word	0x40021400
 8000f9c:	40021800 	.word	0x40021800
 8000fa0:	40013c00 	.word	0x40013c00

08000fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	460b      	mov	r3, r1
 8000fae:	807b      	strh	r3, [r7, #2]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb4:	787b      	ldrb	r3, [r7, #1]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fc0:	e003      	b.n	8000fca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	041a      	lsls	r2, r3, #16
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	619a      	str	r2, [r3, #24]
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e12b      	b.n	8001242 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fbe8 	bl	80007d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2224      	movs	r2, #36	@ 0x24
 8001008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f022 0201 	bic.w	r2, r2, #1
 800101a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800102a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800103a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800103c:	f000 fa02 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8001040:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4a81      	ldr	r2, [pc, #516]	@ (800124c <HAL_I2C_Init+0x274>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d807      	bhi.n	800105c <HAL_I2C_Init+0x84>
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4a80      	ldr	r2, [pc, #512]	@ (8001250 <HAL_I2C_Init+0x278>)
 8001050:	4293      	cmp	r3, r2
 8001052:	bf94      	ite	ls
 8001054:	2301      	movls	r3, #1
 8001056:	2300      	movhi	r3, #0
 8001058:	b2db      	uxtb	r3, r3
 800105a:	e006      	b.n	800106a <HAL_I2C_Init+0x92>
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4a7d      	ldr	r2, [pc, #500]	@ (8001254 <HAL_I2C_Init+0x27c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	bf94      	ite	ls
 8001064:	2301      	movls	r3, #1
 8001066:	2300      	movhi	r3, #0
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e0e7      	b.n	8001242 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4a78      	ldr	r2, [pc, #480]	@ (8001258 <HAL_I2C_Init+0x280>)
 8001076:	fba2 2303 	umull	r2, r3, r2, r3
 800107a:	0c9b      	lsrs	r3, r3, #18
 800107c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68ba      	ldr	r2, [r7, #8]
 800108e:	430a      	orrs	r2, r1
 8001090:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	4a6a      	ldr	r2, [pc, #424]	@ (800124c <HAL_I2C_Init+0x274>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d802      	bhi.n	80010ac <HAL_I2C_Init+0xd4>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	e009      	b.n	80010c0 <HAL_I2C_Init+0xe8>
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010b2:	fb02 f303 	mul.w	r3, r2, r3
 80010b6:	4a69      	ldr	r2, [pc, #420]	@ (800125c <HAL_I2C_Init+0x284>)
 80010b8:	fba2 2303 	umull	r2, r3, r2, r3
 80010bc:	099b      	lsrs	r3, r3, #6
 80010be:	3301      	adds	r3, #1
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	430b      	orrs	r3, r1
 80010c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80010d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	495c      	ldr	r1, [pc, #368]	@ (800124c <HAL_I2C_Init+0x274>)
 80010dc:	428b      	cmp	r3, r1
 80010de:	d819      	bhi.n	8001114 <HAL_I2C_Init+0x13c>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1e59      	subs	r1, r3, #1
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80010ee:	1c59      	adds	r1, r3, #1
 80010f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80010f4:	400b      	ands	r3, r1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d00a      	beq.n	8001110 <HAL_I2C_Init+0x138>
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	1e59      	subs	r1, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fbb1 f3f3 	udiv	r3, r1, r3
 8001108:	3301      	adds	r3, #1
 800110a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800110e:	e051      	b.n	80011b4 <HAL_I2C_Init+0x1dc>
 8001110:	2304      	movs	r3, #4
 8001112:	e04f      	b.n	80011b4 <HAL_I2C_Init+0x1dc>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d111      	bne.n	8001140 <HAL_I2C_Init+0x168>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	1e58      	subs	r0, r3, #1
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6859      	ldr	r1, [r3, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	440b      	add	r3, r1
 800112a:	fbb0 f3f3 	udiv	r3, r0, r3
 800112e:	3301      	adds	r3, #1
 8001130:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001134:	2b00      	cmp	r3, #0
 8001136:	bf0c      	ite	eq
 8001138:	2301      	moveq	r3, #1
 800113a:	2300      	movne	r3, #0
 800113c:	b2db      	uxtb	r3, r3
 800113e:	e012      	b.n	8001166 <HAL_I2C_Init+0x18e>
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	1e58      	subs	r0, r3, #1
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6859      	ldr	r1, [r3, #4]
 8001148:	460b      	mov	r3, r1
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	0099      	lsls	r1, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	fbb0 f3f3 	udiv	r3, r0, r3
 8001156:	3301      	adds	r3, #1
 8001158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800115c:	2b00      	cmp	r3, #0
 800115e:	bf0c      	ite	eq
 8001160:	2301      	moveq	r3, #1
 8001162:	2300      	movne	r3, #0
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_I2C_Init+0x196>
 800116a:	2301      	movs	r3, #1
 800116c:	e022      	b.n	80011b4 <HAL_I2C_Init+0x1dc>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d10e      	bne.n	8001194 <HAL_I2C_Init+0x1bc>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	1e58      	subs	r0, r3, #1
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6859      	ldr	r1, [r3, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	440b      	add	r3, r1
 8001184:	fbb0 f3f3 	udiv	r3, r0, r3
 8001188:	3301      	adds	r3, #1
 800118a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800118e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001192:	e00f      	b.n	80011b4 <HAL_I2C_Init+0x1dc>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	1e58      	subs	r0, r3, #1
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	0099      	lsls	r1, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80011aa:	3301      	adds	r3, #1
 80011ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	6809      	ldr	r1, [r1, #0]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69da      	ldr	r2, [r3, #28]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a1b      	ldr	r3, [r3, #32]
 80011ce:	431a      	orrs	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80011e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6911      	ldr	r1, [r2, #16]
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68d2      	ldr	r2, [r2, #12]
 80011ee:	4311      	orrs	r1, r2
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6812      	ldr	r2, [r2, #0]
 80011f4:	430b      	orrs	r3, r1
 80011f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68db      	ldr	r3, [r3, #12]
 80011fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	695a      	ldr	r2, [r3, #20]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	431a      	orrs	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	430a      	orrs	r2, r1
 8001212:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f042 0201 	orr.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2220      	movs	r2, #32
 800122e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2200      	movs	r2, #0
 800123c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	000186a0 	.word	0x000186a0
 8001250:	001e847f 	.word	0x001e847f
 8001254:	003d08ff 	.word	0x003d08ff
 8001258:	431bde83 	.word	0x431bde83
 800125c:	10624dd3 	.word	0x10624dd3

08001260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d101      	bne.n	8001274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e0cc      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001274:	4b68      	ldr	r3, [pc, #416]	@ (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d90c      	bls.n	800129c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b65      	ldr	r3, [pc, #404]	@ (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b63      	ldr	r3, [pc, #396]	@ (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e0b8      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d020      	beq.n	80012ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d005      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b4:	4b59      	ldr	r3, [pc, #356]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4a58      	ldr	r2, [pc, #352]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80012be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d005      	beq.n	80012d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012cc:	4b53      	ldr	r3, [pc, #332]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4a52      	ldr	r2, [pc, #328]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80012d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d8:	4b50      	ldr	r3, [pc, #320]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	494d      	ldr	r1, [pc, #308]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d044      	beq.n	8001380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d107      	bne.n	800130e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	4b47      	ldr	r3, [pc, #284]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d119      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e07f      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d003      	beq.n	800131e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800131a:	2b03      	cmp	r3, #3
 800131c:	d107      	bne.n	800132e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800131e:	4b3f      	ldr	r3, [pc, #252]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e06f      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e067      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800133e:	4b37      	ldr	r3, [pc, #220]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f023 0203 	bic.w	r2, r3, #3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	4934      	ldr	r1, [pc, #208]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 800134c:	4313      	orrs	r3, r2
 800134e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001350:	f7ff fba2 	bl	8000a98 <HAL_GetTick>
 8001354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	e00a      	b.n	800136e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001358:	f7ff fb9e 	bl	8000a98 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001366:	4293      	cmp	r3, r2
 8001368:	d901      	bls.n	800136e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e04f      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800136e:	4b2b      	ldr	r3, [pc, #172]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 020c 	and.w	r2, r3, #12
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	429a      	cmp	r2, r3
 800137e:	d1eb      	bne.n	8001358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001380:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	429a      	cmp	r2, r3
 800138c:	d20c      	bcs.n	80013a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800138e:	4b22      	ldr	r3, [pc, #136]	@ (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	b2d2      	uxtb	r2, r2
 8001394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001396:	4b20      	ldr	r3, [pc, #128]	@ (8001418 <HAL_RCC_ClockConfig+0x1b8>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	683a      	ldr	r2, [r7, #0]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e032      	b.n	800140e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d008      	beq.n	80013c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b4:	4b19      	ldr	r3, [pc, #100]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4916      	ldr	r1, [pc, #88]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0308 	and.w	r3, r3, #8
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d009      	beq.n	80013e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	490e      	ldr	r1, [pc, #56]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e6:	f000 f855 	bl	8001494 <HAL_RCC_GetSysClockFreq>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b0b      	ldr	r3, [pc, #44]	@ (800141c <HAL_RCC_ClockConfig+0x1bc>)
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	091b      	lsrs	r3, r3, #4
 80013f2:	f003 030f 	and.w	r3, r3, #15
 80013f6:	490a      	ldr	r1, [pc, #40]	@ (8001420 <HAL_RCC_ClockConfig+0x1c0>)
 80013f8:	5ccb      	ldrb	r3, [r1, r3]
 80013fa:	fa22 f303 	lsr.w	r3, r2, r3
 80013fe:	4a09      	ldr	r2, [pc, #36]	@ (8001424 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <HAL_RCC_ClockConfig+0x1c8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fb02 	bl	8000a10 <HAL_InitTick>

  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023c00 	.word	0x40023c00
 800141c:	40023800 	.word	0x40023800
 8001420:	08002428 	.word	0x08002428
 8001424:	20000000 	.word	0x20000000
 8001428:	20000004 	.word	0x20000004

0800142c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001430:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <HAL_RCC_GetHCLKFreq+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000000 	.word	0x20000000

08001444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001448:	f7ff fff0 	bl	800142c <HAL_RCC_GetHCLKFreq>
 800144c:	4602      	mov	r2, r0
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	0a9b      	lsrs	r3, r3, #10
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	4903      	ldr	r1, [pc, #12]	@ (8001468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800145a:	5ccb      	ldrb	r3, [r1, r3]
 800145c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001460:	4618      	mov	r0, r3
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	08002438 	.word	0x08002438

0800146c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001470:	f7ff ffdc 	bl	800142c <HAL_RCC_GetHCLKFreq>
 8001474:	4602      	mov	r2, r0
 8001476:	4b05      	ldr	r3, [pc, #20]	@ (800148c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	0b5b      	lsrs	r3, r3, #13
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	4903      	ldr	r1, [pc, #12]	@ (8001490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001482:	5ccb      	ldrb	r3, [r1, r3]
 8001484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001488:	4618      	mov	r0, r3
 800148a:	bd80      	pop	{r7, pc}
 800148c:	40023800 	.word	0x40023800
 8001490:	08002438 	.word	0x08002438

08001494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001498:	b0ae      	sub	sp, #184	@ 0xb8
 800149a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80014a2:	2300      	movs	r3, #0
 80014a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014ba:	4bcb      	ldr	r3, [pc, #812]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b0c      	cmp	r3, #12
 80014c4:	f200 8206 	bhi.w	80018d4 <HAL_RCC_GetSysClockFreq+0x440>
 80014c8:	a201      	add	r2, pc, #4	@ (adr r2, 80014d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80014ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014ce:	bf00      	nop
 80014d0:	08001505 	.word	0x08001505
 80014d4:	080018d5 	.word	0x080018d5
 80014d8:	080018d5 	.word	0x080018d5
 80014dc:	080018d5 	.word	0x080018d5
 80014e0:	0800150d 	.word	0x0800150d
 80014e4:	080018d5 	.word	0x080018d5
 80014e8:	080018d5 	.word	0x080018d5
 80014ec:	080018d5 	.word	0x080018d5
 80014f0:	08001515 	.word	0x08001515
 80014f4:	080018d5 	.word	0x080018d5
 80014f8:	080018d5 	.word	0x080018d5
 80014fc:	080018d5 	.word	0x080018d5
 8001500:	08001705 	.word	0x08001705
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001504:	4bb9      	ldr	r3, [pc, #740]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x358>)
 8001506:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800150a:	e1e7      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800150c:	4bb8      	ldr	r3, [pc, #736]	@ (80017f0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001512:	e1e3      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001514:	4bb4      	ldr	r3, [pc, #720]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800151c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001520:	4bb1      	ldr	r3, [pc, #708]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d071      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800152c:	4bae      	ldr	r3, [pc, #696]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	2200      	movs	r2, #0
 8001534:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001538:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800153c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001544:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800154e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001552:	4622      	mov	r2, r4
 8001554:	462b      	mov	r3, r5
 8001556:	f04f 0000 	mov.w	r0, #0
 800155a:	f04f 0100 	mov.w	r1, #0
 800155e:	0159      	lsls	r1, r3, #5
 8001560:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001564:	0150      	lsls	r0, r2, #5
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4621      	mov	r1, r4
 800156c:	1a51      	subs	r1, r2, r1
 800156e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001570:	4629      	mov	r1, r5
 8001572:	eb63 0301 	sbc.w	r3, r3, r1
 8001576:	647b      	str	r3, [r7, #68]	@ 0x44
 8001578:	f04f 0200 	mov.w	r2, #0
 800157c:	f04f 0300 	mov.w	r3, #0
 8001580:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001584:	4649      	mov	r1, r9
 8001586:	018b      	lsls	r3, r1, #6
 8001588:	4641      	mov	r1, r8
 800158a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800158e:	4641      	mov	r1, r8
 8001590:	018a      	lsls	r2, r1, #6
 8001592:	4641      	mov	r1, r8
 8001594:	1a51      	subs	r1, r2, r1
 8001596:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001598:	4649      	mov	r1, r9
 800159a:	eb63 0301 	sbc.w	r3, r3, r1
 800159e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80015ac:	4649      	mov	r1, r9
 80015ae:	00cb      	lsls	r3, r1, #3
 80015b0:	4641      	mov	r1, r8
 80015b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80015b6:	4641      	mov	r1, r8
 80015b8:	00ca      	lsls	r2, r1, #3
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	4603      	mov	r3, r0
 80015c0:	4622      	mov	r2, r4
 80015c2:	189b      	adds	r3, r3, r2
 80015c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80015c6:	462b      	mov	r3, r5
 80015c8:	460a      	mov	r2, r1
 80015ca:	eb42 0303 	adc.w	r3, r2, r3
 80015ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015dc:	4629      	mov	r1, r5
 80015de:	024b      	lsls	r3, r1, #9
 80015e0:	4621      	mov	r1, r4
 80015e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015e6:	4621      	mov	r1, r4
 80015e8:	024a      	lsls	r2, r1, #9
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015f2:	2200      	movs	r2, #0
 80015f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001600:	f7fe fe00 	bl	8000204 <__aeabi_uldivmod>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4613      	mov	r3, r2
 800160a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800160e:	e067      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001610:	4b75      	ldr	r3, [pc, #468]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	099b      	lsrs	r3, r3, #6
 8001616:	2200      	movs	r2, #0
 8001618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800161c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001620:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001624:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001628:	67bb      	str	r3, [r7, #120]	@ 0x78
 800162a:	2300      	movs	r3, #0
 800162c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800162e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001632:	4622      	mov	r2, r4
 8001634:	462b      	mov	r3, r5
 8001636:	f04f 0000 	mov.w	r0, #0
 800163a:	f04f 0100 	mov.w	r1, #0
 800163e:	0159      	lsls	r1, r3, #5
 8001640:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001644:	0150      	lsls	r0, r2, #5
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4621      	mov	r1, r4
 800164c:	1a51      	subs	r1, r2, r1
 800164e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001650:	4629      	mov	r1, r5
 8001652:	eb63 0301 	sbc.w	r3, r3, r1
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001664:	4649      	mov	r1, r9
 8001666:	018b      	lsls	r3, r1, #6
 8001668:	4641      	mov	r1, r8
 800166a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800166e:	4641      	mov	r1, r8
 8001670:	018a      	lsls	r2, r1, #6
 8001672:	4641      	mov	r1, r8
 8001674:	ebb2 0a01 	subs.w	sl, r2, r1
 8001678:	4649      	mov	r1, r9
 800167a:	eb63 0b01 	sbc.w	fp, r3, r1
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f04f 0300 	mov.w	r3, #0
 8001686:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800168a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800168e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001692:	4692      	mov	sl, r2
 8001694:	469b      	mov	fp, r3
 8001696:	4623      	mov	r3, r4
 8001698:	eb1a 0303 	adds.w	r3, sl, r3
 800169c:	623b      	str	r3, [r7, #32]
 800169e:	462b      	mov	r3, r5
 80016a0:	eb4b 0303 	adc.w	r3, fp, r3
 80016a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80016b2:	4629      	mov	r1, r5
 80016b4:	028b      	lsls	r3, r1, #10
 80016b6:	4621      	mov	r1, r4
 80016b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016bc:	4621      	mov	r1, r4
 80016be:	028a      	lsls	r2, r1, #10
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016c8:	2200      	movs	r2, #0
 80016ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80016cc:	677a      	str	r2, [r7, #116]	@ 0x74
 80016ce:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80016d2:	f7fe fd97 	bl	8000204 <__aeabi_uldivmod>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4613      	mov	r3, r2
 80016dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016e0:	4b41      	ldr	r3, [pc, #260]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	3301      	adds	r3, #1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80016f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001702:	e0eb      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001704:	4b38      	ldr	r3, [pc, #224]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800170c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001710:	4b35      	ldr	r3, [pc, #212]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d06b      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800171c:	4b32      	ldr	r3, [pc, #200]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x354>)
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	099b      	lsrs	r3, r3, #6
 8001722:	2200      	movs	r2, #0
 8001724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001726:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800172a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800172e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001730:	2300      	movs	r3, #0
 8001732:	667b      	str	r3, [r7, #100]	@ 0x64
 8001734:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001738:	4622      	mov	r2, r4
 800173a:	462b      	mov	r3, r5
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	0159      	lsls	r1, r3, #5
 8001746:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800174a:	0150      	lsls	r0, r2, #5
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4621      	mov	r1, r4
 8001752:	1a51      	subs	r1, r2, r1
 8001754:	61b9      	str	r1, [r7, #24]
 8001756:	4629      	mov	r1, r5
 8001758:	eb63 0301 	sbc.w	r3, r3, r1
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800176a:	4659      	mov	r1, fp
 800176c:	018b      	lsls	r3, r1, #6
 800176e:	4651      	mov	r1, sl
 8001770:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001774:	4651      	mov	r1, sl
 8001776:	018a      	lsls	r2, r1, #6
 8001778:	4651      	mov	r1, sl
 800177a:	ebb2 0801 	subs.w	r8, r2, r1
 800177e:	4659      	mov	r1, fp
 8001780:	eb63 0901 	sbc.w	r9, r3, r1
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001790:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001794:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001798:	4690      	mov	r8, r2
 800179a:	4699      	mov	r9, r3
 800179c:	4623      	mov	r3, r4
 800179e:	eb18 0303 	adds.w	r3, r8, r3
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	462b      	mov	r3, r5
 80017a6:	eb49 0303 	adc.w	r3, r9, r3
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	f04f 0300 	mov.w	r3, #0
 80017b4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80017b8:	4629      	mov	r1, r5
 80017ba:	024b      	lsls	r3, r1, #9
 80017bc:	4621      	mov	r1, r4
 80017be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80017c2:	4621      	mov	r1, r4
 80017c4:	024a      	lsls	r2, r1, #9
 80017c6:	4610      	mov	r0, r2
 80017c8:	4619      	mov	r1, r3
 80017ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80017ce:	2200      	movs	r2, #0
 80017d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80017d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80017d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80017d8:	f7fe fd14 	bl	8000204 <__aeabi_uldivmod>
 80017dc:	4602      	mov	r2, r0
 80017de:	460b      	mov	r3, r1
 80017e0:	4613      	mov	r3, r2
 80017e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80017e6:	e065      	b.n	80018b4 <HAL_RCC_GetSysClockFreq+0x420>
 80017e8:	40023800 	.word	0x40023800
 80017ec:	00f42400 	.word	0x00f42400
 80017f0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017f4:	4b3d      	ldr	r3, [pc, #244]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x458>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	099b      	lsrs	r3, r3, #6
 80017fa:	2200      	movs	r2, #0
 80017fc:	4618      	mov	r0, r3
 80017fe:	4611      	mov	r1, r2
 8001800:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001804:	653b      	str	r3, [r7, #80]	@ 0x50
 8001806:	2300      	movs	r3, #0
 8001808:	657b      	str	r3, [r7, #84]	@ 0x54
 800180a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800180e:	4642      	mov	r2, r8
 8001810:	464b      	mov	r3, r9
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	f04f 0100 	mov.w	r1, #0
 800181a:	0159      	lsls	r1, r3, #5
 800181c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001820:	0150      	lsls	r0, r2, #5
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4641      	mov	r1, r8
 8001828:	1a51      	subs	r1, r2, r1
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	4649      	mov	r1, r9
 800182e:	eb63 0301 	sbc.w	r3, r3, r1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	f04f 0300 	mov.w	r3, #0
 800183c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001840:	4659      	mov	r1, fp
 8001842:	018b      	lsls	r3, r1, #6
 8001844:	4651      	mov	r1, sl
 8001846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800184a:	4651      	mov	r1, sl
 800184c:	018a      	lsls	r2, r1, #6
 800184e:	4651      	mov	r1, sl
 8001850:	1a54      	subs	r4, r2, r1
 8001852:	4659      	mov	r1, fp
 8001854:	eb63 0501 	sbc.w	r5, r3, r1
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	f04f 0300 	mov.w	r3, #0
 8001860:	00eb      	lsls	r3, r5, #3
 8001862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001866:	00e2      	lsls	r2, r4, #3
 8001868:	4614      	mov	r4, r2
 800186a:	461d      	mov	r5, r3
 800186c:	4643      	mov	r3, r8
 800186e:	18e3      	adds	r3, r4, r3
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	464b      	mov	r3, r9
 8001874:	eb45 0303 	adc.w	r3, r5, r3
 8001878:	607b      	str	r3, [r7, #4]
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	f04f 0300 	mov.w	r3, #0
 8001882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001886:	4629      	mov	r1, r5
 8001888:	028b      	lsls	r3, r1, #10
 800188a:	4621      	mov	r1, r4
 800188c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001890:	4621      	mov	r1, r4
 8001892:	028a      	lsls	r2, r1, #10
 8001894:	4610      	mov	r0, r2
 8001896:	4619      	mov	r1, r3
 8001898:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800189c:	2200      	movs	r2, #0
 800189e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018a0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80018a6:	f7fe fcad 	bl	8000204 <__aeabi_uldivmod>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4613      	mov	r3, r2
 80018b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80018b4:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x458>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	0f1b      	lsrs	r3, r3, #28
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80018c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80018c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018d2:	e003      	b.n	80018dc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80018da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018dc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	37b8      	adds	r7, #184	@ 0xb8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	00f42400 	.word	0x00f42400

080018f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e28d      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 8083 	beq.w	8001a1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001914:	4b94      	ldr	r3, [pc, #592]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b04      	cmp	r3, #4
 800191e:	d019      	beq.n	8001954 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001920:	4b91      	ldr	r3, [pc, #580]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
        || \
 8001928:	2b08      	cmp	r3, #8
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800192c:	4b8e      	ldr	r3, [pc, #568]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001938:	d00c      	beq.n	8001954 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800193a:	4b8b      	ldr	r3, [pc, #556]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d112      	bne.n	800196c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001946:	4b88      	ldr	r3, [pc, #544]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001952:	d10b      	bne.n	800196c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	4b84      	ldr	r3, [pc, #528]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d05b      	beq.n	8001a18 <HAL_RCC_OscConfig+0x124>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d157      	bne.n	8001a18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e25a      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001974:	d106      	bne.n	8001984 <HAL_RCC_OscConfig+0x90>
 8001976:	4b7c      	ldr	r3, [pc, #496]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7b      	ldr	r2, [pc, #492]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 800197c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xcc>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0xb4>
 800198e:	4b76      	ldr	r3, [pc, #472]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a75      	ldr	r2, [pc, #468]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b73      	ldr	r3, [pc, #460]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a72      	ldr	r2, [pc, #456]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xcc>
 80019a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a6e      	ldr	r2, [pc, #440]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b6c      	ldr	r3, [pc, #432]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6b      	ldr	r2, [pc, #428]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff f866 	bl	8000a98 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff f862 	bl	8000a98 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	@ 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e21f      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b61      	ldr	r3, [pc, #388]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xdc>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff f852 	bl	8000a98 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff f84e 	bl	8000a98 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e20b      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0a:	4b57      	ldr	r3, [pc, #348]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x104>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d06f      	beq.n	8001b06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a26:	4b50      	ldr	r3, [pc, #320]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 030c 	and.w	r3, r3, #12
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d017      	beq.n	8001a62 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a32:	4b4d      	ldr	r3, [pc, #308]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a3a:	2b08      	cmp	r3, #8
 8001a3c:	d105      	bne.n	8001a4a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00b      	beq.n	8001a62 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a4a:	4b47      	ldr	r3, [pc, #284]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a52:	2b0c      	cmp	r3, #12
 8001a54:	d11c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a56:	4b44      	ldr	r3, [pc, #272]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d116      	bne.n	8001a90 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	4b41      	ldr	r3, [pc, #260]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_RCC_OscConfig+0x186>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d001      	beq.n	8001a7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e1d3      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4937      	ldr	r1, [pc, #220]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a8e:	e03a      	b.n	8001b06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a98:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <HAL_RCC_OscConfig+0x278>)
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a9e:	f7fe fffb 	bl	8000a98 <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa4:	e008      	b.n	8001ab8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aa6:	f7fe fff7 	bl	8000a98 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e1b4      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d0f0      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac4:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	4925      	ldr	r1, [pc, #148]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
 8001ad8:	e015      	b.n	8001b06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ada:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_RCC_OscConfig+0x278>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7fe ffda 	bl	8000a98 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ae8:	f7fe ffd6 	bl	8000a98 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e193      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001afa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0308 	and.w	r3, r3, #8
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d036      	beq.n	8001b80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d016      	beq.n	8001b48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1a:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_RCC_OscConfig+0x27c>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7fe ffba 	bl	8000a98 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b28:	f7fe ffb6 	bl	8000a98 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e173      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b68 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x234>
 8001b46:	e01b      	b.n	8001b80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_RCC_OscConfig+0x27c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4e:	f7fe ffa3 	bl	8000a98 <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b54:	e00e      	b.n	8001b74 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b56:	f7fe ff9f 	bl	8000a98 <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d907      	bls.n	8001b74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e15c      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	42470000 	.word	0x42470000
 8001b70:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b74:	4b8a      	ldr	r3, [pc, #552]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1ea      	bne.n	8001b56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 8097 	beq.w	8001cbc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b92:	4b83      	ldr	r3, [pc, #524]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10f      	bne.n	8001bbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
 8001ba2:	4b7f      	ldr	r3, [pc, #508]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba6:	4a7e      	ldr	r2, [pc, #504]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bae:	4b7c      	ldr	r3, [pc, #496]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb6:	60bb      	str	r3, [r7, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bbe:	4b79      	ldr	r3, [pc, #484]	@ (8001da4 <HAL_RCC_OscConfig+0x4b0>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d118      	bne.n	8001bfc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bca:	4b76      	ldr	r3, [pc, #472]	@ (8001da4 <HAL_RCC_OscConfig+0x4b0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a75      	ldr	r2, [pc, #468]	@ (8001da4 <HAL_RCC_OscConfig+0x4b0>)
 8001bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe ff5f 	bl	8000a98 <HAL_GetTick>
 8001bda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bdc:	e008      	b.n	8001bf0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bde:	f7fe ff5b 	bl	8000a98 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d901      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bec:	2303      	movs	r3, #3
 8001bee:	e118      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf0:	4b6c      	ldr	r3, [pc, #432]	@ (8001da4 <HAL_RCC_OscConfig+0x4b0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d0f0      	beq.n	8001bde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x31e>
 8001c04:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a65      	ldr	r2, [pc, #404]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c10:	e01c      	b.n	8001c4c <HAL_RCC_OscConfig+0x358>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d10c      	bne.n	8001c34 <HAL_RCC_OscConfig+0x340>
 8001c1a:	4b61      	ldr	r3, [pc, #388]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1e:	4a60      	ldr	r2, [pc, #384]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c20:	f043 0304 	orr.w	r3, r3, #4
 8001c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c26:	4b5e      	ldr	r3, [pc, #376]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c2a:	4a5d      	ldr	r2, [pc, #372]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c32:	e00b      	b.n	8001c4c <HAL_RCC_OscConfig+0x358>
 8001c34:	4b5a      	ldr	r3, [pc, #360]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c38:	4a59      	ldr	r2, [pc, #356]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c3a:	f023 0301 	bic.w	r3, r3, #1
 8001c3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c40:	4b57      	ldr	r3, [pc, #348]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c44:	4a56      	ldr	r2, [pc, #344]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c46:	f023 0304 	bic.w	r3, r3, #4
 8001c4a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d015      	beq.n	8001c80 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7fe ff20 	bl	8000a98 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe ff1c 	bl	8000a98 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0d7      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c72:	4b4b      	ldr	r3, [pc, #300]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0ee      	beq.n	8001c5c <HAL_RCC_OscConfig+0x368>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c80:	f7fe ff0a 	bl	8000a98 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c86:	e00a      	b.n	8001c9e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c88:	f7fe ff06 	bl	8000a98 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e0c1      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c9e:	4b40      	ldr	r3, [pc, #256]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1ee      	bne.n	8001c88 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb0:	4b3b      	ldr	r3, [pc, #236]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	4a3a      	ldr	r2, [pc, #232]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	f000 80ad 	beq.w	8001e20 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc6:	4b36      	ldr	r3, [pc, #216]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 030c 	and.w	r3, r3, #12
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d060      	beq.n	8001d94 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d145      	bne.n	8001d66 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cda:	4b33      	ldr	r3, [pc, #204]	@ (8001da8 <HAL_RCC_OscConfig+0x4b4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7fe feda 	bl	8000a98 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7fe fed6 	bl	8000a98 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e093      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cfa:	4b29      	ldr	r3, [pc, #164]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1f0      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69da      	ldr	r2, [r3, #28]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	019b      	lsls	r3, r3, #6
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	085b      	lsrs	r3, r3, #1
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	041b      	lsls	r3, r3, #16
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	061b      	lsls	r3, r3, #24
 8001d2a:	431a      	orrs	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	071b      	lsls	r3, r3, #28
 8001d32:	491b      	ldr	r1, [pc, #108]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d38:	4b1b      	ldr	r3, [pc, #108]	@ (8001da8 <HAL_RCC_OscConfig+0x4b4>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7fe feab 	bl	8000a98 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d46:	f7fe fea7 	bl	8000a98 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e064      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x452>
 8001d64:	e05c      	b.n	8001e20 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d66:	4b10      	ldr	r3, [pc, #64]	@ (8001da8 <HAL_RCC_OscConfig+0x4b4>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe fe94 	bl	8000a98 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7fe fe90 	bl	8000a98 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e04d      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d86:	4b06      	ldr	r3, [pc, #24]	@ (8001da0 <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x480>
 8001d92:	e045      	b.n	8001e20 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e040      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40007000 	.word	0x40007000
 8001da8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <HAL_RCC_OscConfig+0x538>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d030      	beq.n	8001e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d129      	bne.n	8001e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d122      	bne.n	8001e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001de2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d119      	bne.n	8001e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df2:	085b      	lsrs	r3, r3, #1
 8001df4:	3b01      	subs	r3, #1
 8001df6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d10f      	bne.n	8001e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e042      	b.n	8001ec8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d106      	bne.n	8001e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7fe fd04 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2224      	movs	r2, #36	@ 0x24
 8001e60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f82b 	bl	8001ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	691a      	ldr	r2, [r3, #16]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695a      	ldr	r2, [r3, #20]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2220      	movs	r2, #32
 8001ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ed0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed4:	b0c0      	sub	sp, #256	@ 0x100
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eec:	68d9      	ldr	r1, [r3, #12]
 8001eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	ea40 0301 	orr.w	r3, r0, r1
 8001ef8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001efa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001f28:	f021 010c 	bic.w	r1, r1, #12
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001f36:	430b      	orrs	r3, r1
 8001f38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f4a:	6999      	ldr	r1, [r3, #24]
 8001f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	ea40 0301 	orr.w	r3, r0, r1
 8001f56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b8f      	ldr	r3, [pc, #572]	@ (800219c <UART_SetConfig+0x2cc>)
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d005      	beq.n	8001f70 <UART_SetConfig+0xa0>
 8001f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80021a0 <UART_SetConfig+0x2d0>)
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d104      	bne.n	8001f7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f70:	f7ff fa7c 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8001f74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001f78:	e003      	b.n	8001f82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f7a:	f7ff fa63 	bl	8001444 <HAL_RCC_GetPCLK1Freq>
 8001f7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f86:	69db      	ldr	r3, [r3, #28]
 8001f88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f8c:	f040 810c 	bne.w	80021a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f94:	2200      	movs	r2, #0
 8001f96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	462b      	mov	r3, r5
 8001fa6:	1891      	adds	r1, r2, r2
 8001fa8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001faa:	415b      	adcs	r3, r3
 8001fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	eb12 0801 	adds.w	r8, r2, r1
 8001fb8:	4629      	mov	r1, r5
 8001fba:	eb43 0901 	adc.w	r9, r3, r1
 8001fbe:	f04f 0200 	mov.w	r2, #0
 8001fc2:	f04f 0300 	mov.w	r3, #0
 8001fc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001fca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fd2:	4690      	mov	r8, r2
 8001fd4:	4699      	mov	r9, r3
 8001fd6:	4623      	mov	r3, r4
 8001fd8:	eb18 0303 	adds.w	r3, r8, r3
 8001fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001fe0:	462b      	mov	r3, r5
 8001fe2:	eb49 0303 	adc.w	r3, r9, r3
 8001fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001ff6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001ffa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001ffe:	460b      	mov	r3, r1
 8002000:	18db      	adds	r3, r3, r3
 8002002:	653b      	str	r3, [r7, #80]	@ 0x50
 8002004:	4613      	mov	r3, r2
 8002006:	eb42 0303 	adc.w	r3, r2, r3
 800200a:	657b      	str	r3, [r7, #84]	@ 0x54
 800200c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002010:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002014:	f7fe f8f6 	bl	8000204 <__aeabi_uldivmod>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4b61      	ldr	r3, [pc, #388]	@ (80021a4 <UART_SetConfig+0x2d4>)
 800201e:	fba3 2302 	umull	r2, r3, r3, r2
 8002022:	095b      	lsrs	r3, r3, #5
 8002024:	011c      	lsls	r4, r3, #4
 8002026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800202a:	2200      	movs	r2, #0
 800202c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002030:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002034:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002038:	4642      	mov	r2, r8
 800203a:	464b      	mov	r3, r9
 800203c:	1891      	adds	r1, r2, r2
 800203e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002040:	415b      	adcs	r3, r3
 8002042:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002044:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002048:	4641      	mov	r1, r8
 800204a:	eb12 0a01 	adds.w	sl, r2, r1
 800204e:	4649      	mov	r1, r9
 8002050:	eb43 0b01 	adc.w	fp, r3, r1
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002060:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002064:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002068:	4692      	mov	sl, r2
 800206a:	469b      	mov	fp, r3
 800206c:	4643      	mov	r3, r8
 800206e:	eb1a 0303 	adds.w	r3, sl, r3
 8002072:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002076:	464b      	mov	r3, r9
 8002078:	eb4b 0303 	adc.w	r3, fp, r3
 800207c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800208c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002090:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002094:	460b      	mov	r3, r1
 8002096:	18db      	adds	r3, r3, r3
 8002098:	643b      	str	r3, [r7, #64]	@ 0x40
 800209a:	4613      	mov	r3, r2
 800209c:	eb42 0303 	adc.w	r3, r2, r3
 80020a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80020a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80020a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80020aa:	f7fe f8ab 	bl	8000204 <__aeabi_uldivmod>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4611      	mov	r1, r2
 80020b4:	4b3b      	ldr	r3, [pc, #236]	@ (80021a4 <UART_SetConfig+0x2d4>)
 80020b6:	fba3 2301 	umull	r2, r3, r3, r1
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	2264      	movs	r2, #100	@ 0x64
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	1acb      	subs	r3, r1, r3
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80020ca:	4b36      	ldr	r3, [pc, #216]	@ (80021a4 <UART_SetConfig+0x2d4>)
 80020cc:	fba3 2302 	umull	r2, r3, r3, r2
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80020d8:	441c      	add	r4, r3
 80020da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020de:	2200      	movs	r2, #0
 80020e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80020e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80020e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80020ec:	4642      	mov	r2, r8
 80020ee:	464b      	mov	r3, r9
 80020f0:	1891      	adds	r1, r2, r2
 80020f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020f4:	415b      	adcs	r3, r3
 80020f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80020fc:	4641      	mov	r1, r8
 80020fe:	1851      	adds	r1, r2, r1
 8002100:	6339      	str	r1, [r7, #48]	@ 0x30
 8002102:	4649      	mov	r1, r9
 8002104:	414b      	adcs	r3, r1
 8002106:	637b      	str	r3, [r7, #52]	@ 0x34
 8002108:	f04f 0200 	mov.w	r2, #0
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002114:	4659      	mov	r1, fp
 8002116:	00cb      	lsls	r3, r1, #3
 8002118:	4651      	mov	r1, sl
 800211a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800211e:	4651      	mov	r1, sl
 8002120:	00ca      	lsls	r2, r1, #3
 8002122:	4610      	mov	r0, r2
 8002124:	4619      	mov	r1, r3
 8002126:	4603      	mov	r3, r0
 8002128:	4642      	mov	r2, r8
 800212a:	189b      	adds	r3, r3, r2
 800212c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002130:	464b      	mov	r3, r9
 8002132:	460a      	mov	r2, r1
 8002134:	eb42 0303 	adc.w	r3, r2, r3
 8002138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800213c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002148:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800214c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002150:	460b      	mov	r3, r1
 8002152:	18db      	adds	r3, r3, r3
 8002154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002156:	4613      	mov	r3, r2
 8002158:	eb42 0303 	adc.w	r3, r2, r3
 800215c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800215e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002162:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002166:	f7fe f84d 	bl	8000204 <__aeabi_uldivmod>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4b0d      	ldr	r3, [pc, #52]	@ (80021a4 <UART_SetConfig+0x2d4>)
 8002170:	fba3 1302 	umull	r1, r3, r3, r2
 8002174:	095b      	lsrs	r3, r3, #5
 8002176:	2164      	movs	r1, #100	@ 0x64
 8002178:	fb01 f303 	mul.w	r3, r1, r3
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	3332      	adds	r3, #50	@ 0x32
 8002182:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <UART_SetConfig+0x2d4>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	f003 0207 	and.w	r2, r3, #7
 800218e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4422      	add	r2, r4
 8002196:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002198:	e106      	b.n	80023a8 <UART_SetConfig+0x4d8>
 800219a:	bf00      	nop
 800219c:	40011000 	.word	0x40011000
 80021a0:	40011400 	.word	0x40011400
 80021a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ac:	2200      	movs	r2, #0
 80021ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80021b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80021b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80021ba:	4642      	mov	r2, r8
 80021bc:	464b      	mov	r3, r9
 80021be:	1891      	adds	r1, r2, r2
 80021c0:	6239      	str	r1, [r7, #32]
 80021c2:	415b      	adcs	r3, r3
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80021ca:	4641      	mov	r1, r8
 80021cc:	1854      	adds	r4, r2, r1
 80021ce:	4649      	mov	r1, r9
 80021d0:	eb43 0501 	adc.w	r5, r3, r1
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	00eb      	lsls	r3, r5, #3
 80021de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021e2:	00e2      	lsls	r2, r4, #3
 80021e4:	4614      	mov	r4, r2
 80021e6:	461d      	mov	r5, r3
 80021e8:	4643      	mov	r3, r8
 80021ea:	18e3      	adds	r3, r4, r3
 80021ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021f0:	464b      	mov	r3, r9
 80021f2:	eb45 0303 	adc.w	r3, r5, r3
 80021f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80021fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002206:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800220a:	f04f 0200 	mov.w	r2, #0
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002216:	4629      	mov	r1, r5
 8002218:	008b      	lsls	r3, r1, #2
 800221a:	4621      	mov	r1, r4
 800221c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002220:	4621      	mov	r1, r4
 8002222:	008a      	lsls	r2, r1, #2
 8002224:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002228:	f7fd ffec 	bl	8000204 <__aeabi_uldivmod>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4b60      	ldr	r3, [pc, #384]	@ (80023b4 <UART_SetConfig+0x4e4>)
 8002232:	fba3 2302 	umull	r2, r3, r3, r2
 8002236:	095b      	lsrs	r3, r3, #5
 8002238:	011c      	lsls	r4, r3, #4
 800223a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800223e:	2200      	movs	r2, #0
 8002240:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002244:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002248:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800224c:	4642      	mov	r2, r8
 800224e:	464b      	mov	r3, r9
 8002250:	1891      	adds	r1, r2, r2
 8002252:	61b9      	str	r1, [r7, #24]
 8002254:	415b      	adcs	r3, r3
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800225c:	4641      	mov	r1, r8
 800225e:	1851      	adds	r1, r2, r1
 8002260:	6139      	str	r1, [r7, #16]
 8002262:	4649      	mov	r1, r9
 8002264:	414b      	adcs	r3, r1
 8002266:	617b      	str	r3, [r7, #20]
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002274:	4659      	mov	r1, fp
 8002276:	00cb      	lsls	r3, r1, #3
 8002278:	4651      	mov	r1, sl
 800227a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800227e:	4651      	mov	r1, sl
 8002280:	00ca      	lsls	r2, r1, #3
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	4603      	mov	r3, r0
 8002288:	4642      	mov	r2, r8
 800228a:	189b      	adds	r3, r3, r2
 800228c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002290:	464b      	mov	r3, r9
 8002292:	460a      	mov	r2, r1
 8002294:	eb42 0303 	adc.w	r3, r2, r3
 8002298:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800229c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80022b4:	4649      	mov	r1, r9
 80022b6:	008b      	lsls	r3, r1, #2
 80022b8:	4641      	mov	r1, r8
 80022ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022be:	4641      	mov	r1, r8
 80022c0:	008a      	lsls	r2, r1, #2
 80022c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80022c6:	f7fd ff9d 	bl	8000204 <__aeabi_uldivmod>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4611      	mov	r1, r2
 80022d0:	4b38      	ldr	r3, [pc, #224]	@ (80023b4 <UART_SetConfig+0x4e4>)
 80022d2:	fba3 2301 	umull	r2, r3, r3, r1
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2264      	movs	r2, #100	@ 0x64
 80022da:	fb02 f303 	mul.w	r3, r2, r3
 80022de:	1acb      	subs	r3, r1, r3
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	3332      	adds	r3, #50	@ 0x32
 80022e4:	4a33      	ldr	r2, [pc, #204]	@ (80023b4 <UART_SetConfig+0x4e4>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022f0:	441c      	add	r4, r3
 80022f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022f6:	2200      	movs	r2, #0
 80022f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80022fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80022fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002300:	4642      	mov	r2, r8
 8002302:	464b      	mov	r3, r9
 8002304:	1891      	adds	r1, r2, r2
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	415b      	adcs	r3, r3
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002310:	4641      	mov	r1, r8
 8002312:	1851      	adds	r1, r2, r1
 8002314:	6039      	str	r1, [r7, #0]
 8002316:	4649      	mov	r1, r9
 8002318:	414b      	adcs	r3, r1
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	f04f 0200 	mov.w	r2, #0
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002328:	4659      	mov	r1, fp
 800232a:	00cb      	lsls	r3, r1, #3
 800232c:	4651      	mov	r1, sl
 800232e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002332:	4651      	mov	r1, sl
 8002334:	00ca      	lsls	r2, r1, #3
 8002336:	4610      	mov	r0, r2
 8002338:	4619      	mov	r1, r3
 800233a:	4603      	mov	r3, r0
 800233c:	4642      	mov	r2, r8
 800233e:	189b      	adds	r3, r3, r2
 8002340:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002342:	464b      	mov	r3, r9
 8002344:	460a      	mov	r2, r1
 8002346:	eb42 0303 	adc.w	r3, r2, r3
 800234a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	663b      	str	r3, [r7, #96]	@ 0x60
 8002356:	667a      	str	r2, [r7, #100]	@ 0x64
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002364:	4649      	mov	r1, r9
 8002366:	008b      	lsls	r3, r1, #2
 8002368:	4641      	mov	r1, r8
 800236a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800236e:	4641      	mov	r1, r8
 8002370:	008a      	lsls	r2, r1, #2
 8002372:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002376:	f7fd ff45 	bl	8000204 <__aeabi_uldivmod>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4b0d      	ldr	r3, [pc, #52]	@ (80023b4 <UART_SetConfig+0x4e4>)
 8002380:	fba3 1302 	umull	r1, r3, r3, r2
 8002384:	095b      	lsrs	r3, r3, #5
 8002386:	2164      	movs	r1, #100	@ 0x64
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	3332      	adds	r3, #50	@ 0x32
 8002392:	4a08      	ldr	r2, [pc, #32]	@ (80023b4 <UART_SetConfig+0x4e4>)
 8002394:	fba2 2303 	umull	r2, r3, r2, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	f003 020f 	and.w	r2, r3, #15
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4422      	add	r2, r4
 80023a6:	609a      	str	r2, [r3, #8]
}
 80023a8:	bf00      	nop
 80023aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80023ae:	46bd      	mov	sp, r7
 80023b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023b4:	51eb851f 	.word	0x51eb851f

080023b8 <memset>:
 80023b8:	4402      	add	r2, r0
 80023ba:	4603      	mov	r3, r0
 80023bc:	4293      	cmp	r3, r2
 80023be:	d100      	bne.n	80023c2 <memset+0xa>
 80023c0:	4770      	bx	lr
 80023c2:	f803 1b01 	strb.w	r1, [r3], #1
 80023c6:	e7f9      	b.n	80023bc <memset+0x4>

080023c8 <__libc_init_array>:
 80023c8:	b570      	push	{r4, r5, r6, lr}
 80023ca:	4d0d      	ldr	r5, [pc, #52]	@ (8002400 <__libc_init_array+0x38>)
 80023cc:	4c0d      	ldr	r4, [pc, #52]	@ (8002404 <__libc_init_array+0x3c>)
 80023ce:	1b64      	subs	r4, r4, r5
 80023d0:	10a4      	asrs	r4, r4, #2
 80023d2:	2600      	movs	r6, #0
 80023d4:	42a6      	cmp	r6, r4
 80023d6:	d109      	bne.n	80023ec <__libc_init_array+0x24>
 80023d8:	4d0b      	ldr	r5, [pc, #44]	@ (8002408 <__libc_init_array+0x40>)
 80023da:	4c0c      	ldr	r4, [pc, #48]	@ (800240c <__libc_init_array+0x44>)
 80023dc:	f000 f818 	bl	8002410 <_init>
 80023e0:	1b64      	subs	r4, r4, r5
 80023e2:	10a4      	asrs	r4, r4, #2
 80023e4:	2600      	movs	r6, #0
 80023e6:	42a6      	cmp	r6, r4
 80023e8:	d105      	bne.n	80023f6 <__libc_init_array+0x2e>
 80023ea:	bd70      	pop	{r4, r5, r6, pc}
 80023ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80023f0:	4798      	blx	r3
 80023f2:	3601      	adds	r6, #1
 80023f4:	e7ee      	b.n	80023d4 <__libc_init_array+0xc>
 80023f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023fa:	4798      	blx	r3
 80023fc:	3601      	adds	r6, #1
 80023fe:	e7f2      	b.n	80023e6 <__libc_init_array+0x1e>
 8002400:	08002448 	.word	0x08002448
 8002404:	08002448 	.word	0x08002448
 8002408:	08002448 	.word	0x08002448
 800240c:	0800244c 	.word	0x0800244c

08002410 <_init>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	bf00      	nop
 8002414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002416:	bc08      	pop	{r3}
 8002418:	469e      	mov	lr, r3
 800241a:	4770      	bx	lr

0800241c <_fini>:
 800241c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241e:	bf00      	nop
 8002420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002422:	bc08      	pop	{r3}
 8002424:	469e      	mov	lr, r3
 8002426:	4770      	bx	lr
