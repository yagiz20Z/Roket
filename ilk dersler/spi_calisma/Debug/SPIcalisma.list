
SPIcalisma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000542c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005610  08005610  00006610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ec  080056ec  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  080056ec  080056ec  000066ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056f4  080056f4  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056f4  080056f4  000066f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080056f8  080056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080056fc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000005c  08005758  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08005758  0000736c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecb2  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000206a  00000000  00000000  00015d3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00017da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000096d  00000000  00000000  000189e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025595  00000000  00000000  00019355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f14d  00000000  00000000  0003e8ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebe1d  00000000  00000000  0004da37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00139854  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000384c  00000000  00000000  00139898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0013d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080055f4 	.word	0x080055f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	080055f4 	.word	0x080055f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96a 	b.w	8000d98 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	460c      	mov	r4, r1
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d14e      	bne.n	8000b86 <__udivmoddi4+0xaa>
 8000ae8:	4694      	mov	ip, r2
 8000aea:	458c      	cmp	ip, r1
 8000aec:	4686      	mov	lr, r0
 8000aee:	fab2 f282 	clz	r2, r2
 8000af2:	d962      	bls.n	8000bba <__udivmoddi4+0xde>
 8000af4:	b14a      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af6:	f1c2 0320 	rsb	r3, r2, #32
 8000afa:	4091      	lsls	r1, r2
 8000afc:	fa20 f303 	lsr.w	r3, r0, r3
 8000b00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b04:	4319      	orrs	r1, r3
 8000b06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b0e:	fa1f f68c 	uxth.w	r6, ip
 8000b12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b22:	fb04 f106 	mul.w	r1, r4, r6
 8000b26:	4299      	cmp	r1, r3
 8000b28:	d90a      	bls.n	8000b40 <__udivmoddi4+0x64>
 8000b2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b32:	f080 8112 	bcs.w	8000d5a <__udivmoddi4+0x27e>
 8000b36:	4299      	cmp	r1, r3
 8000b38:	f240 810f 	bls.w	8000d5a <__udivmoddi4+0x27e>
 8000b3c:	3c02      	subs	r4, #2
 8000b3e:	4463      	add	r3, ip
 8000b40:	1a59      	subs	r1, r3, r1
 8000b42:	fa1f f38e 	uxth.w	r3, lr
 8000b46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b52:	fb00 f606 	mul.w	r6, r0, r6
 8000b56:	429e      	cmp	r6, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x94>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b62:	f080 80fc 	bcs.w	8000d5e <__udivmoddi4+0x282>
 8000b66:	429e      	cmp	r6, r3
 8000b68:	f240 80f9 	bls.w	8000d5e <__udivmoddi4+0x282>
 8000b6c:	4463      	add	r3, ip
 8000b6e:	3802      	subs	r0, #2
 8000b70:	1b9b      	subs	r3, r3, r6
 8000b72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b76:	2100      	movs	r1, #0
 8000b78:	b11d      	cbz	r5, 8000b82 <__udivmoddi4+0xa6>
 8000b7a:	40d3      	lsrs	r3, r2
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d905      	bls.n	8000b96 <__udivmoddi4+0xba>
 8000b8a:	b10d      	cbz	r5, 8000b90 <__udivmoddi4+0xb4>
 8000b8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b90:	2100      	movs	r1, #0
 8000b92:	4608      	mov	r0, r1
 8000b94:	e7f5      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000b96:	fab3 f183 	clz	r1, r3
 8000b9a:	2900      	cmp	r1, #0
 8000b9c:	d146      	bne.n	8000c2c <__udivmoddi4+0x150>
 8000b9e:	42a3      	cmp	r3, r4
 8000ba0:	d302      	bcc.n	8000ba8 <__udivmoddi4+0xcc>
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	f0c0 80f0 	bcc.w	8000d88 <__udivmoddi4+0x2ac>
 8000ba8:	1a86      	subs	r6, r0, r2
 8000baa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bae:	2001      	movs	r0, #1
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e6      	beq.n	8000b82 <__udivmoddi4+0xa6>
 8000bb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb8:	e7e3      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000bba:	2a00      	cmp	r2, #0
 8000bbc:	f040 8090 	bne.w	8000ce0 <__udivmoddi4+0x204>
 8000bc0:	eba1 040c 	sub.w	r4, r1, ip
 8000bc4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc8:	fa1f f78c 	uxth.w	r7, ip
 8000bcc:	2101      	movs	r1, #1
 8000bce:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bd2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bde:	fb07 f006 	mul.w	r0, r7, r6
 8000be2:	4298      	cmp	r0, r3
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x11c>
 8000be6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x11a>
 8000bf0:	4298      	cmp	r0, r3
 8000bf2:	f200 80cd 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bf6:	4626      	mov	r6, r4
 8000bf8:	1a1c      	subs	r4, r3, r0
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c02:	fb08 4410 	mls	r4, r8, r0, r4
 8000c06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c0a:	fb00 f707 	mul.w	r7, r0, r7
 8000c0e:	429f      	cmp	r7, r3
 8000c10:	d908      	bls.n	8000c24 <__udivmoddi4+0x148>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x146>
 8000c1c:	429f      	cmp	r7, r3
 8000c1e:	f200 80b0 	bhi.w	8000d82 <__udivmoddi4+0x2a6>
 8000c22:	4620      	mov	r0, r4
 8000c24:	1bdb      	subs	r3, r3, r7
 8000c26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c2a:	e7a5      	b.n	8000b78 <__udivmoddi4+0x9c>
 8000c2c:	f1c1 0620 	rsb	r6, r1, #32
 8000c30:	408b      	lsls	r3, r1
 8000c32:	fa22 f706 	lsr.w	r7, r2, r6
 8000c36:	431f      	orrs	r7, r3
 8000c38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c40:	ea43 030c 	orr.w	r3, r3, ip
 8000c44:	40f4      	lsrs	r4, r6
 8000c46:	fa00 f801 	lsl.w	r8, r0, r1
 8000c4a:	0c38      	lsrs	r0, r7, #16
 8000c4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c50:	fbb4 fef0 	udiv	lr, r4, r0
 8000c54:	fa1f fc87 	uxth.w	ip, r7
 8000c58:	fb00 441e 	mls	r4, r0, lr, r4
 8000c5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c60:	fb0e f90c 	mul.w	r9, lr, ip
 8000c64:	45a1      	cmp	r9, r4
 8000c66:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6a:	d90a      	bls.n	8000c82 <__udivmoddi4+0x1a6>
 8000c6c:	193c      	adds	r4, r7, r4
 8000c6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c72:	f080 8084 	bcs.w	8000d7e <__udivmoddi4+0x2a2>
 8000c76:	45a1      	cmp	r9, r4
 8000c78:	f240 8081 	bls.w	8000d7e <__udivmoddi4+0x2a2>
 8000c7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c80:	443c      	add	r4, r7
 8000c82:	eba4 0409 	sub.w	r4, r4, r9
 8000c86:	fa1f f983 	uxth.w	r9, r3
 8000c8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	d907      	bls.n	8000cae <__udivmoddi4+0x1d2>
 8000c9e:	193c      	adds	r4, r7, r4
 8000ca0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ca4:	d267      	bcs.n	8000d76 <__udivmoddi4+0x29a>
 8000ca6:	45a4      	cmp	ip, r4
 8000ca8:	d965      	bls.n	8000d76 <__udivmoddi4+0x29a>
 8000caa:	3b02      	subs	r3, #2
 8000cac:	443c      	add	r4, r7
 8000cae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cb6:	eba4 040c 	sub.w	r4, r4, ip
 8000cba:	429c      	cmp	r4, r3
 8000cbc:	46ce      	mov	lr, r9
 8000cbe:	469c      	mov	ip, r3
 8000cc0:	d351      	bcc.n	8000d66 <__udivmoddi4+0x28a>
 8000cc2:	d04e      	beq.n	8000d62 <__udivmoddi4+0x286>
 8000cc4:	b155      	cbz	r5, 8000cdc <__udivmoddi4+0x200>
 8000cc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cca:	eb64 040c 	sbc.w	r4, r4, ip
 8000cce:	fa04 f606 	lsl.w	r6, r4, r6
 8000cd2:	40cb      	lsrs	r3, r1
 8000cd4:	431e      	orrs	r6, r3
 8000cd6:	40cc      	lsrs	r4, r1
 8000cd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cdc:	2100      	movs	r1, #0
 8000cde:	e750      	b.n	8000b82 <__udivmoddi4+0xa6>
 8000ce0:	f1c2 0320 	rsb	r3, r2, #32
 8000ce4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cec:	fa24 f303 	lsr.w	r3, r4, r3
 8000cf0:	4094      	lsls	r4, r2
 8000cf2:	430c      	orrs	r4, r1
 8000cf4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cfc:	fa1f f78c 	uxth.w	r7, ip
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3110 	mls	r1, r8, r0, r3
 8000d08:	0c23      	lsrs	r3, r4, #16
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb00 f107 	mul.w	r1, r0, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d908      	bls.n	8000d28 <__udivmoddi4+0x24c>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d1e:	d22c      	bcs.n	8000d7a <__udivmoddi4+0x29e>
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d92a      	bls.n	8000d7a <__udivmoddi4+0x29e>
 8000d24:	3802      	subs	r0, #2
 8000d26:	4463      	add	r3, ip
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d30:	fb08 3311 	mls	r3, r8, r1, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb01 f307 	mul.w	r3, r1, r7
 8000d3c:	42a3      	cmp	r3, r4
 8000d3e:	d908      	bls.n	8000d52 <__udivmoddi4+0x276>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d48:	d213      	bcs.n	8000d72 <__udivmoddi4+0x296>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d911      	bls.n	8000d72 <__udivmoddi4+0x296>
 8000d4e:	3902      	subs	r1, #2
 8000d50:	4464      	add	r4, ip
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d58:	e739      	b.n	8000bce <__udivmoddi4+0xf2>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	e6f0      	b.n	8000b40 <__udivmoddi4+0x64>
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e706      	b.n	8000b70 <__udivmoddi4+0x94>
 8000d62:	45c8      	cmp	r8, r9
 8000d64:	d2ae      	bcs.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d66:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d6a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d6e:	3801      	subs	r0, #1
 8000d70:	e7a8      	b.n	8000cc4 <__udivmoddi4+0x1e8>
 8000d72:	4631      	mov	r1, r6
 8000d74:	e7ed      	b.n	8000d52 <__udivmoddi4+0x276>
 8000d76:	4603      	mov	r3, r0
 8000d78:	e799      	b.n	8000cae <__udivmoddi4+0x1d2>
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	e7d4      	b.n	8000d28 <__udivmoddi4+0x24c>
 8000d7e:	46d6      	mov	lr, sl
 8000d80:	e77f      	b.n	8000c82 <__udivmoddi4+0x1a6>
 8000d82:	4463      	add	r3, ip
 8000d84:	3802      	subs	r0, #2
 8000d86:	e74d      	b.n	8000c24 <__udivmoddi4+0x148>
 8000d88:	4606      	mov	r6, r0
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	4608      	mov	r0, r1
 8000d8e:	e70f      	b.n	8000bb0 <__udivmoddi4+0xd4>
 8000d90:	3e02      	subs	r6, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	e730      	b.n	8000bf8 <__udivmoddi4+0x11c>
 8000d96:	bf00      	nop

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000d9c:	b4b0      	push	{r4, r5, r7}
 8000d9e:	b08f      	sub	sp, #60	@ 0x3c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000da4:	f240 13b1 	movw	r3, #433	@ 0x1b1
 8000da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000daa:	2307      	movs	r3, #7
 8000dac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000db0:	2307      	movs	r3, #7
 8000db2:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000dbc:	23ff      	movs	r3, #255	@ 0xff
 8000dbe:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000dc2:	2364      	movs	r3, #100	@ 0x64
 8000dc4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	461d      	mov	r5, r3
 8000dd0:	f107 040c 	add.w	r4, r7, #12
 8000dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ddc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000de0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	373c      	adds	r7, #60	@ 0x3c
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bcb0      	pop	{r4, r5, r7}
 8000dec:	4770      	bx	lr

08000dee <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000df8:	2101      	movs	r1, #1
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f9ff 	bl	80011fe <LoRa_read>
 8000e00:	4603      	mov	r3, r0
 8000e02:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d107      	bne.n	8000e1e <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	f023 0307 	bic.w	r3, r3, #7
 8000e14:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	61da      	str	r2, [r3, #28]
 8000e1c:	e03e      	b.n	8000e9c <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d10c      	bne.n	8000e3e <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000e24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e28:	f023 0307 	bic.w	r3, r3, #7
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	b25b      	sxtb	r3, r3
 8000e34:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	61da      	str	r2, [r3, #28]
 8000e3c:	e02e      	b.n	8000e9c <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d10c      	bne.n	8000e5e <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000e44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e48:	f023 0307 	bic.w	r3, r3, #7
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	f043 0303 	orr.w	r3, r3, #3
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2203      	movs	r2, #3
 8000e5a:	61da      	str	r2, [r3, #28]
 8000e5c:	e01e      	b.n	8000e9c <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	d10c      	bne.n	8000e7e <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e68:	f023 0307 	bic.w	r3, r3, #7
 8000e6c:	b25b      	sxtb	r3, r3
 8000e6e:	f043 0305 	orr.w	r3, r3, #5
 8000e72:	b25b      	sxtb	r3, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2205      	movs	r2, #5
 8000e7a:	61da      	str	r2, [r3, #28]
 8000e7c:	e00e      	b.n	8000e9c <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	2b06      	cmp	r3, #6
 8000e82:	d10b      	bne.n	8000e9c <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000e84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e88:	f023 0307 	bic.w	r3, r3, #7
 8000e8c:	b25b      	sxtb	r3, r3
 8000e8e:	f043 0306 	orr.w	r3, r3, #6
 8000e92:	b25b      	sxtb	r3, r3
 8000e94:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2206      	movs	r2, #6
 8000e9a:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e9c:	7bfb      	ldrb	r3, [r7, #15]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f000 f9c5 	bl	8001232 <LoRa_write>
	//HAL_Delay(10);
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6818      	ldr	r0, [r3, #0]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	889b      	ldrh	r3, [r3, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f001 f8fa 	bl	80020c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	6998      	ldr	r0, [r3, #24]
 8000ed4:	88fa      	ldrh	r2, [r7, #6]
 8000ed6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	f002 f9e5 	bl	80032aa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000ee0:	bf00      	nop
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f002 feac 	bl	8003c44 <HAL_SPI_GetState>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d1f7      	bne.n	8000ee2 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6998      	ldr	r0, [r3, #24]
 8000ef6:	8b3a      	ldrh	r2, [r7, #24]
 8000ef8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	f002 fb4a 	bl	8003596 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f02:	bf00      	nop
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fe9b 	bl	8003c44 <HAL_SPI_GetState>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d1f7      	bne.n	8000f04 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6818      	ldr	r0, [r3, #0]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	889b      	ldrh	r3, [r3, #4]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4619      	mov	r1, r3
 8000f20:	f001 f8d0 	bl	80020c4 <HAL_GPIO_WritePin>
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	4613      	mov	r3, r2
 8000f3a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6818      	ldr	r0, [r3, #0]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	889b      	ldrh	r3, [r3, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	4619      	mov	r1, r3
 8000f48:	f001 f8bc 	bl	80020c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6998      	ldr	r0, [r3, #24]
 8000f50:	88fa      	ldrh	r2, [r7, #6]
 8000f52:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	f002 f9a7 	bl	80032aa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f5c:	bf00      	nop
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 fe6e 	bl	8003c44 <HAL_SPI_GetState>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d1f7      	bne.n	8000f5e <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6998      	ldr	r0, [r3, #24]
 8000f72:	8b3a      	ldrh	r2, [r7, #24]
 8000f74:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000f78:	6839      	ldr	r1, [r7, #0]
 8000f7a:	f002 f996 	bl	80032aa <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f7e:	bf00      	nop
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f002 fe5d 	bl	8003c44 <HAL_SPI_GetState>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d1f7      	bne.n	8000f80 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	889b      	ldrh	r3, [r3, #4]
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f001 f892 	bl	80020c4 <HAL_GPIO_WritePin>
}
 8000fa0:	bf00      	nop
 8000fa2:	3710      	adds	r7, #16
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000fb4:	2126      	movs	r1, #38	@ 0x26
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f921 	bl	80011fe <LoRa_read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	73bb      	strb	r3, [r7, #14]
	
	if(value)
 8000fc0:	78fb      	ldrb	r3, [r7, #3]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d004      	beq.n	8000fd0 <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000fc6:	7bbb      	ldrb	r3, [r7, #14]
 8000fc8:	f043 0308 	orr.w	r3, r3, #8
 8000fcc:	73fb      	strb	r3, [r7, #15]
 8000fce:	e003      	b.n	8000fd8 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	f023 0308 	bic.w	r3, r3, #8
 8000fd6:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	461a      	mov	r2, r3
 8000fdc:	2126      	movs	r1, #38	@ 0x26
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f000 f927 	bl	8001232 <LoRa_write>
	HAL_Delay(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f000 fde5 	bl	8001bb4 <HAL_Delay>
}
 8000fea:	bf00      	nop
 8000fec:	3710      	adds	r7, #16
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b096      	sub	sp, #88	@ 0x58
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000ffc:	4a17      	ldr	r2, [pc, #92]	@ (800105c <LoRa_setAutoLDO+0x68>)
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4611      	mov	r1, r2
 8001004:	2250      	movs	r2, #80	@ 0x50
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fea8 	bl	8004d5c <memcpy>
	
	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001012:	461a      	mov	r2, r3
 8001014:	2301      	movs	r3, #1
 8001016:	4093      	lsls	r3, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff faa3 	bl	8000564 <__aeabi_i2d>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001024:	00db      	lsls	r3, r3, #3
 8001026:	3358      	adds	r3, #88	@ 0x58
 8001028:	443b      	add	r3, r7
 800102a:	3b50      	subs	r3, #80	@ 0x50
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff fc2c 	bl	800088c <__aeabi_ddiv>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd0e 	bl	8000a5c <__aeabi_d2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	2b10      	cmp	r3, #16
 8001044:	bfcc      	ite	gt
 8001046:	2301      	movgt	r3, #1
 8001048:	2300      	movle	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4619      	mov	r1, r3
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffaa 	bl	8000fa8 <LoRa_setLowDaraRateOptimization>
}
 8001054:	bf00      	nop
 8001056:	3758      	adds	r7, #88	@ 0x58
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	08005610 	.word	0x08005610

08001060 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	04db      	lsls	r3, r3, #19
 800106e:	115b      	asrs	r3, r3, #5
 8001070:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	0c1b      	lsrs	r3, r3, #16
 8001076:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001078:	7afb      	ldrb	r3, [r7, #11]
 800107a:	461a      	mov	r2, r3
 800107c:	2106      	movs	r1, #6
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f000 f8d7 	bl	8001232 <LoRa_write>
	HAL_Delay(5);
 8001084:	2005      	movs	r0, #5
 8001086:	f000 fd95 	bl	8001bb4 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	461a      	mov	r2, r3
 8001094:	2107      	movs	r1, #7
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f000 f8cb 	bl	8001232 <LoRa_write>
	HAL_Delay(5);
 800109c:	2005      	movs	r0, #5
 800109e:	f000 fd89 	bl	8001bb4 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 80010a6:	7afb      	ldrb	r3, [r7, #11]
 80010a8:	461a      	mov	r2, r3
 80010aa:	2108      	movs	r1, #8
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 f8c0 	bl	8001232 <LoRa_write>
	HAL_Delay(5);
 80010b2:	2005      	movs	r0, #5
 80010b4:	f000 fd7e 	bl	8001bb4 <HAL_Delay>
}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b0c      	cmp	r3, #12
 80010ce:	dd01      	ble.n	80010d4 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 80010d0:	230c      	movs	r3, #12
 80010d2:	603b      	str	r3, [r7, #0]
	if(SF<7)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	dc01      	bgt.n	80010de <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 80010da:	2307      	movs	r3, #7
 80010dc:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 80010de:	211e      	movs	r1, #30
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f88c 	bl	80011fe <LoRa_read>
 80010e6:	4603      	mov	r3, r0
 80010e8:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f000 fd62 	bl	8001bb4 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	4413      	add	r3, r2
 8001102:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001104:	7bbb      	ldrb	r3, [r7, #14]
 8001106:	461a      	mov	r2, r3
 8001108:	211e      	movs	r1, #30
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 f891 	bl	8001232 <LoRa_write>
	HAL_Delay(10);
 8001110:	200a      	movs	r0, #10
 8001112:	f000 fd4f 	bl	8001bb4 <HAL_Delay>
	
	LoRa_setAutoLDO(_LoRa);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff ff6c 	bl	8000ff4 <LoRa_setAutoLDO>
}
 800111c:	bf00      	nop
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	460b      	mov	r3, r1
 800112e:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8001130:	78fb      	ldrb	r3, [r7, #3]
 8001132:	461a      	mov	r2, r3
 8001134:	2109      	movs	r1, #9
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f87b 	bl	8001232 <LoRa_write>
	HAL_Delay(10);
 800113c:	200a      	movs	r0, #10
 800113e:	f000 fd39 	bl	8001bb4 <HAL_Delay>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b2c      	cmp	r3, #44	@ 0x2c
 8001160:	d801      	bhi.n	8001166 <LoRa_setOCP+0x1a>
		current = 45;
 8001162:	232d      	movs	r3, #45	@ 0x2d
 8001164:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8001166:	78fb      	ldrb	r3, [r7, #3]
 8001168:	2bf0      	cmp	r3, #240	@ 0xf0
 800116a:	d901      	bls.n	8001170 <LoRa_setOCP+0x24>
		current = 240;
 800116c:	23f0      	movs	r3, #240	@ 0xf0
 800116e:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001170:	78fb      	ldrb	r3, [r7, #3]
 8001172:	2b78      	cmp	r3, #120	@ 0x78
 8001174:	d809      	bhi.n	800118a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001176:	78fb      	ldrb	r3, [r7, #3]
 8001178:	3b2d      	subs	r3, #45	@ 0x2d
 800117a:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <LoRa_setOCP+0x78>)
 800117c:	fb82 1203 	smull	r1, r2, r2, r3
 8001180:	1052      	asrs	r2, r2, #1
 8001182:	17db      	asrs	r3, r3, #31
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e00b      	b.n	80011a2 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	2bf0      	cmp	r3, #240	@ 0xf0
 800118e:	d808      	bhi.n	80011a2 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	331e      	adds	r3, #30
 8001194:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <LoRa_setOCP+0x78>)
 8001196:	fb82 1203 	smull	r1, r2, r2, r3
 800119a:	1092      	asrs	r2, r2, #2
 800119c:	17db      	asrs	r3, r3, #31
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	3320      	adds	r3, #32
 80011a6:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	461a      	mov	r2, r3
 80011ac:	210b      	movs	r1, #11
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f83f 	bl	8001232 <LoRa_write>
	HAL_Delay(10);
 80011b4:	200a      	movs	r0, #10
 80011b6:	f000 fcfd 	bl	8001bb4 <HAL_Delay>
}
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	66666667 	.word	0x66666667

080011c8 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 80011d0:	211e      	movs	r1, #30
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f813 	bl	80011fe <LoRa_read>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	f043 0307 	orr.w	r3, r3, #7
 80011e2:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 80011e4:	7bbb      	ldrb	r3, [r7, #14]
 80011e6:	461a      	mov	r2, r3
 80011e8:	211e      	movs	r1, #30
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f821 	bl	8001232 <LoRa_write>
	HAL_Delay(10);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f000 fcdf 	bl	8001bb4 <HAL_Delay>
}
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af02      	add	r7, sp, #8
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	460b      	mov	r3, r1
 8001208:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800120a:	78fb      	ldrb	r3, [r7, #3]
 800120c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001210:	b2db      	uxtb	r3, r3
 8001212:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001214:	f107 030f 	add.w	r3, r7, #15
 8001218:	f107 010e 	add.w	r1, r7, #14
 800121c:	2201      	movs	r2, #1
 800121e:	9200      	str	r2, [sp, #0]
 8001220:	2201      	movs	r2, #1
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fe44 	bl	8000eb0 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af02      	add	r7, sp, #8
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	460b      	mov	r3, r1
 800123c:	70fb      	strb	r3, [r7, #3]
 800123e:	4613      	mov	r3, r2
 8001240:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001242:	78fb      	ldrb	r3, [r7, #3]
 8001244:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001248:	b2db      	uxtb	r3, r3
 800124a:	73bb      	strb	r3, [r7, #14]
	data = value;
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001250:	f107 030f 	add.w	r3, r7, #15
 8001254:	f107 010e 	add.w	r1, r7, #14
 8001258:	2201      	movs	r2, #1
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	2201      	movs	r2, #1
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe64 	bl	8000f2c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

	return 1;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800128a:	2105      	movs	r1, #5
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff fdae 	bl	8000dee <LoRa_gotoMode>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800129a:	b590      	push	{r4, r7, lr}
 800129c:	b089      	sub	sp, #36	@ 0x24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	4613      	mov	r3, r2
 80012a6:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
 80012b0:	e007      	b.n	80012c2 <LoRa_receive+0x28>
		data[i]=0;
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	4413      	add	r3, r2
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	3301      	adds	r3, #1
 80012c0:	61bb      	str	r3, [r7, #24]
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbf3      	blt.n	80012b2 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80012ca:	2101      	movs	r1, #1
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f7ff fd8e 	bl	8000dee <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80012d2:	2112      	movs	r1, #18
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff ff92 	bl	80011fe <LoRa_read>
 80012da:	4603      	mov	r3, r0
 80012dc:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80012de:	7cfb      	ldrb	r3, [r7, #19]
 80012e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d02f      	beq.n	8001348 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80012e8:	22ff      	movs	r2, #255	@ 0xff
 80012ea:	2112      	movs	r1, #18
 80012ec:	68f8      	ldr	r0, [r7, #12]
 80012ee:	f7ff ffa0 	bl	8001232 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80012f2:	2113      	movs	r1, #19
 80012f4:	68f8      	ldr	r0, [r7, #12]
 80012f6:	f7ff ff82 	bl	80011fe <LoRa_read>
 80012fa:	4603      	mov	r3, r0
 80012fc:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80012fe:	2110      	movs	r1, #16
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7ff ff7c 	bl	80011fe <LoRa_read>
 8001306:	4603      	mov	r3, r0
 8001308:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800130a:	7cfb      	ldrb	r3, [r7, #19]
 800130c:	461a      	mov	r2, r3
 800130e:	210d      	movs	r1, #13
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f7ff ff8e 	bl	8001232 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001316:	7cba      	ldrb	r2, [r7, #18]
 8001318:	79fb      	ldrb	r3, [r7, #7]
 800131a:	4293      	cmp	r3, r2
 800131c:	bf28      	it	cs
 800131e:	4613      	movcs	r3, r2
 8001320:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e00b      	b.n	8001340 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	18d4      	adds	r4, r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	68f8      	ldr	r0, [r7, #12]
 8001332:	f7ff ff64 	bl	80011fe <LoRa_read>
 8001336:	4603      	mov	r3, r0
 8001338:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	7ffb      	ldrb	r3, [r7, #31]
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	429a      	cmp	r2, r3
 8001346:	dbef      	blt.n	8001328 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001348:	2105      	movs	r1, #5
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f7ff fd4f 	bl	8000dee <LoRa_gotoMode>
    return min;
 8001350:	7ffb      	ldrb	r3, [r7, #31]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd90      	pop	{r4, r7, pc}

0800135a <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ff82 	bl	800126c <LoRa_isvalid>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	f000 8096 	beq.w	800149c <LoRa_init+0x142>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8001370:	2100      	movs	r1, #0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fd3b 	bl	8000dee <LoRa_gotoMode>
			HAL_Delay(10);
 8001378:	200a      	movs	r0, #10
 800137a:	f000 fc1b 	bl	8001bb4 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800137e:	2101      	movs	r1, #1
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff3c 	bl	80011fe <LoRa_read>
 8001386:	4603      	mov	r3, r0
 8001388:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 800138a:	200a      	movs	r0, #10
 800138c:	f000 fc12 	bl	8001bb4 <HAL_Delay>
			data = read | 0x80;
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001396:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001398:	7bbb      	ldrb	r3, [r7, #14]
 800139a:	461a      	mov	r2, r3
 800139c:	2101      	movs	r1, #1
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff ff47 	bl	8001232 <LoRa_write>
			HAL_Delay(100);
 80013a4:	2064      	movs	r0, #100	@ 0x64
 80013a6:	f000 fc05 	bl	8001bb4 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f7ff fe55 	bl	8001060 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff feb0 	bl	8001124 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80013ca:	4619      	mov	r1, r3
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff febd 	bl	800114c <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80013d2:	2223      	movs	r2, #35	@ 0x23
 80013d4:	210c      	movs	r1, #12
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff ff2b 	bl	8001232 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7ff fef3 	bl	80011c8 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fe68 	bl	80010c0 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80013f0:	22ff      	movs	r2, #255	@ 0xff
 80013f2:	211f      	movs	r1, #31
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff1c 	bl	8001232 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	b2da      	uxtb	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4413      	add	r3, r2
 8001414:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	461a      	mov	r2, r3
 800141a:	211d      	movs	r1, #29
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff08 	bl	8001232 <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fde6 	bl	8000ff4 <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800142c:	0a1b      	lsrs	r3, r3, #8
 800142e:	b29b      	uxth	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	461a      	mov	r2, r3
 8001434:	2120      	movs	r1, #32
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fefb 	bl	8001232 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001440:	b2db      	uxtb	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	2121      	movs	r1, #33	@ 0x21
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fef3 	bl	8001232 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 800144c:	2140      	movs	r1, #64	@ 0x40
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fed5 	bl	80011fe <LoRa_read>
 8001454:	4603      	mov	r3, r0
 8001456:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 800145e:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	461a      	mov	r2, r3
 8001464:	2140      	movs	r1, #64	@ 0x40
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff fee3 	bl	8001232 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 800146c:	2101      	movs	r1, #1
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fcbd 	bl	8000dee <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800147a:	200a      	movs	r0, #10
 800147c:	f000 fb9a 	bl	8001bb4 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001480:	2142      	movs	r1, #66	@ 0x42
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff febb 	bl	80011fe <LoRa_read>
 8001488:	4603      	mov	r3, r0
 800148a:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 800148c:	7bfb      	ldrb	r3, [r7, #15]
 800148e:	2b12      	cmp	r3, #18
 8001490:	d101      	bne.n	8001496 <LoRa_init+0x13c>
				return LORA_OK;
 8001492:	23c8      	movs	r3, #200	@ 0xc8
 8001494:	e004      	b.n	80014a0 <LoRa_init+0x146>
			else
				return LORA_NOT_FOUND;
 8001496:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800149a:	e001      	b.n	80014a0 <LoRa_init+0x146>
	}
	else {
		return LORA_UNAVAILABLE;
 800149c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ae:	f000 fb10 	bl	8001ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014b2:	f000 f825 	bl	8001500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b6:	f000 f8ed 	bl	8001694 <MX_GPIO_Init>
  MX_SPI1_Init();
 80014ba:	f000 f861 	bl	8001580 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80014be:	f000 f89d 	bl	80015fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LoRa_Setup();
 80014c2:	f000 f94d 	bl	8001760 <LoRa_Setup>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	      int packetSize = LoRa_receive(&lora, buffer, sizeof(buffer));
 80014c6:	2280      	movs	r2, #128	@ 0x80
 80014c8:	490a      	ldr	r1, [pc, #40]	@ (80014f4 <main+0x4c>)
 80014ca:	480b      	ldr	r0, [pc, #44]	@ (80014f8 <main+0x50>)
 80014cc:	f7ff fee5 	bl	800129a <LoRa_receive>
 80014d0:	4603      	mov	r3, r0
 80014d2:	607b      	str	r3, [r7, #4]

	          if (packetSize > 0)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	dd04      	ble.n	80014e4 <main+0x3c>
	          {
	              buffer[packetSize] = '\0'; // string tamamla
 80014da:	4a06      	ldr	r2, [pc, #24]	@ (80014f4 <main+0x4c>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2100      	movs	r1, #0
 80014e0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	          }
	          sprintf("📡 Gelen veri: %s\r\n", buffer); // UART üzerinden çıktı
 80014e4:	4903      	ldr	r1, [pc, #12]	@ (80014f4 <main+0x4c>)
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <main+0x54>)
 80014e8:	f003 fbe4 	bl	8004cb4 <siprintf>
	          HAL_Delay(200); // çok kısa tut
 80014ec:	20c8      	movs	r0, #200	@ 0xc8
 80014ee:	f000 fb61 	bl	8001bb4 <HAL_Delay>
  {
 80014f2:	e7e8      	b.n	80014c6 <main+0x1e>
 80014f4:	2000019c 	.word	0x2000019c
 80014f8:	20000078 	.word	0x20000078
 80014fc:	08005660 	.word	0x08005660

08001500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b094      	sub	sp, #80	@ 0x50
 8001504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	2238      	movs	r2, #56	@ 0x38
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fbf0 	bl	8004cf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]
 800151c:	609a      	str	r2, [r3, #8]
 800151e:	60da      	str	r2, [r3, #12]
 8001520:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001522:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001526:	f000 fde5 	bl	80020f4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800152a:	2302      	movs	r3, #2
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800152e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001532:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001534:	2340      	movs	r3, #64	@ 0x40
 8001536:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001538:	2300      	movs	r3, #0
 800153a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fe8b 	bl	800225c <HAL_RCC_OscConfig>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800154c:	f000 f93c 	bl	80017c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001550:	230f      	movs	r3, #15
 8001552:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001554:	2301      	movs	r3, #1
 8001556:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f001 f989 	bl	8002880 <HAL_RCC_ClockConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001574:	f000 f928 	bl	80017c8 <Error_Handler>
  }
}
 8001578:	bf00      	nop
 800157a:	3750      	adds	r7, #80	@ 0x50
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001584:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <MX_SPI1_Init+0x74>)
 8001586:	4a1c      	ldr	r2, [pc, #112]	@ (80015f8 <MX_SPI1_Init+0x78>)
 8001588:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800158a:	4b1a      	ldr	r3, [pc, #104]	@ (80015f4 <MX_SPI1_Init+0x74>)
 800158c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001590:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001592:	4b18      	ldr	r3, [pc, #96]	@ (80015f4 <MX_SPI1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001598:	4b16      	ldr	r3, [pc, #88]	@ (80015f4 <MX_SPI1_Init+0x74>)
 800159a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800159e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015a0:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015a6:	4b13      	ldr	r3, [pc, #76]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ac:	4b11      	ldr	r3, [pc, #68]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ba:	4b0e      	ldr	r3, [pc, #56]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015bc:	2200      	movs	r2, #0
 80015be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015ce:	2207      	movs	r2, #7
 80015d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015d2:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015d8:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015da:	2208      	movs	r2, #8
 80015dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015de:	4805      	ldr	r0, [pc, #20]	@ (80015f4 <MX_SPI1_Init+0x74>)
 80015e0:	f001 fdb8 	bl	8003154 <HAL_SPI_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015ea:	f000 f8ed 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200000a4 	.word	0x200000a4
 80015f8:	40013000 	.word	0x40013000

080015fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001600:	4b22      	ldr	r3, [pc, #136]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001602:	4a23      	ldr	r2, [pc, #140]	@ (8001690 <MX_USART1_UART_Init+0x94>)
 8001604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001606:	4b21      	ldr	r3, [pc, #132]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800160c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800160e:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001614:	4b1d      	ldr	r3, [pc, #116]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001616:	2200      	movs	r2, #0
 8001618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800161a:	4b1c      	ldr	r3, [pc, #112]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001620:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001622:	220c      	movs	r2, #12
 8001624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001626:	4b19      	ldr	r3, [pc, #100]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001638:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001644:	4811      	ldr	r0, [pc, #68]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001646:	f002 fcc7 	bl	8003fd8 <HAL_UART_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001650:	f000 f8ba 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001654:	2100      	movs	r1, #0
 8001656:	480d      	ldr	r0, [pc, #52]	@ (800168c <MX_USART1_UART_Init+0x90>)
 8001658:	f003 fa62 	bl	8004b20 <HAL_UARTEx_SetTxFifoThreshold>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001662:	f000 f8b1 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4808      	ldr	r0, [pc, #32]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800166a:	f003 fa97 	bl	8004b9c <HAL_UARTEx_SetRxFifoThreshold>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001674:	f000 f8a8 	bl	80017c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	@ (800168c <MX_USART1_UART_Init+0x90>)
 800167a:	f003 fa18 	bl	8004aae <HAL_UARTEx_DisableFifoMode>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001684:	f000 f8a0 	bl	80017c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	20000108 	.word	0x20000108
 8001690:	40013800 	.word	0x40013800

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	@ 0x28
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	4b2c      	ldr	r3, [pc, #176]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ae:	4a2b      	ldr	r2, [pc, #172]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016b0:	f043 0304 	orr.w	r3, r3, #4
 80016b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b6:	4b29      	ldr	r3, [pc, #164]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	613b      	str	r3, [r7, #16]
 80016c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016c2:	4b26      	ldr	r3, [pc, #152]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a25      	ldr	r2, [pc, #148]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016c8:	f043 0320 	orr.w	r3, r3, #32
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b23      	ldr	r3, [pc, #140]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0320 	and.w	r3, r3, #32
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	4a1f      	ldr	r2, [pc, #124]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e6:	4b1d      	ldr	r3, [pc, #116]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	60bb      	str	r3, [r7, #8]
 80016f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f2:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	4a19      	ldr	r2, [pc, #100]	@ (800175c <MX_GPIO_Init+0xc8>)
 80016f8:	f043 0302 	orr.w	r3, r3, #2
 80016fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016fe:	4b17      	ldr	r3, [pc, #92]	@ (800175c <MX_GPIO_Init+0xc8>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, reset_Pin|Nss_Pin, GPIO_PIN_RESET);
 800170a:	2200      	movs	r2, #0
 800170c:	f248 0140 	movw	r1, #32832	@ 0x8040
 8001710:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001714:	f000 fcd6 	bl	80020c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : reset_Pin Nss_Pin */
  GPIO_InitStruct.Pin = reset_Pin|Nss_Pin;
 8001718:	f248 0340 	movw	r3, #32832	@ 0x8040
 800171c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171e:	2301      	movs	r3, #1
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001734:	f000 fb44 	bl	8001dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : dio_Pin */
  GPIO_InitStruct.Pin = dio_Pin;
 8001738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800173c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(dio_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001750:	f000 fb36 	bl	8001dc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001754:	bf00      	nop
 8001756:	3728      	adds	r7, #40	@ 0x28
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	40021000 	.word	0x40021000

08001760 <LoRa_Setup>:

/* USER CODE BEGIN 4 */


void LoRa_Setup(void){
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	@ 0x30
 8001764:	af00      	add	r7, sp, #0

	LoRa lora = newLoRa();
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fb17 	bl	8000d9c <newLoRa>
	lora.CS_port = Nss_GPIO_Port;
 800176e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001772:	607b      	str	r3, [r7, #4]
	lora.CS_pin = Nss_Pin;
 8001774:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001778:	813b      	strh	r3, [r7, #8]
	lora.reset_port = reset_GPIO_Port;
 800177a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800177e:	60fb      	str	r3, [r7, #12]
	lora.reset_pin = reset_Pin;
 8001780:	2340      	movs	r3, #64	@ 0x40
 8001782:	823b      	strh	r3, [r7, #16]
	lora.DIO0_port = dio_GPIO_Port;
 8001784:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001788:	617b      	str	r3, [r7, #20]
	lora.DIO0_pin = dio_Pin;
 800178a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800178e:	833b      	strh	r3, [r7, #24]
	lora.hSPIx = &hspi1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	@ (80017c4 <LoRa_Setup+0x64>)
 8001792:	61fb      	str	r3, [r7, #28]
////
	lora.frequency = 868;
 8001794:	f44f 7359 	mov.w	r3, #868	@ 0x364
 8001798:	627b      	str	r3, [r7, #36]	@ 0x24
//	lora.spreadingFactor = SF_7;
	lora.bandWidth = BW_125KHz;
 800179a:	2307      	movs	r3, #7
 800179c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	lora.crcRate = CR_4_5;
 80017a0:	2301      	movs	r3, #1
 80017a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
	lora.preamble = 8;
 80017a6:	2308      	movs	r3, #8
 80017a8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

	LoRa_init(&lora);
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fdd4 	bl	800135a <LoRa_init>
    LoRa_startReceiving(&lora);
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fd64 	bl	8001282 <LoRa_startReceiving>

}
 80017ba:	bf00      	nop
 80017bc:	3730      	adds	r7, #48	@ 0x30
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200000a4 	.word	0x200000a4

080017c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017cc:	b672      	cpsid	i
}
 80017ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <Error_Handler+0x8>

080017d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <HAL_MspInit+0x44>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	4a0e      	ldr	r2, [pc, #56]	@ (8001818 <HAL_MspInit+0x44>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001818 <HAL_MspInit+0x44>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <HAL_MspInit+0x44>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017f6:	4a08      	ldr	r2, [pc, #32]	@ (8001818 <HAL_MspInit+0x44>)
 80017f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017fe:	4b06      	ldr	r3, [pc, #24]	@ (8001818 <HAL_MspInit+0x44>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001802:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800180a:	f000 fd17 	bl	800223c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a17      	ldr	r2, [pc, #92]	@ (8001898 <HAL_SPI_MspInit+0x7c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d127      	bne.n	800188e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800183e:	4b17      	ldr	r3, [pc, #92]	@ (800189c <HAL_SPI_MspInit+0x80>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001842:	4a16      	ldr	r2, [pc, #88]	@ (800189c <HAL_SPI_MspInit+0x80>)
 8001844:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001848:	6613      	str	r3, [r2, #96]	@ 0x60
 800184a:	4b14      	ldr	r3, [pc, #80]	@ (800189c <HAL_SPI_MspInit+0x80>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800184e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_SPI_MspInit+0x80>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800185a:	4a10      	ldr	r2, [pc, #64]	@ (800189c <HAL_SPI_MspInit+0x80>)
 800185c:	f043 0302 	orr.w	r3, r3, #2
 8001860:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_SPI_MspInit+0x80>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800186e:	2338      	movs	r3, #56	@ 0x38
 8001870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	2302      	movs	r3, #2
 8001874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800187e:	2305      	movs	r3, #5
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0314 	add.w	r3, r7, #20
 8001886:	4619      	mov	r1, r3
 8001888:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <HAL_SPI_MspInit+0x84>)
 800188a:	f000 fa99 	bl	8001dc0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	@ 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40013000 	.word	0x40013000
 800189c:	40021000 	.word	0x40021000
 80018a0:	48000400 	.word	0x48000400

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0a0      	sub	sp, #128	@ 0x80
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018bc:	f107 0318 	add.w	r3, r7, #24
 80018c0:	2254      	movs	r2, #84	@ 0x54
 80018c2:	2100      	movs	r1, #0
 80018c4:	4618      	mov	r0, r3
 80018c6:	f003 fa15 	bl	8004cf4 <memset>
  if(huart->Instance==USART1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <HAL_UART_MspInit+0xe0>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d153      	bne.n	800197c <HAL_UART_MspInit+0xd8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80018d4:	2301      	movs	r3, #1
 80018d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 f9e9 	bl	8002cb8 <HAL_RCCEx_PeriphCLKConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018ec:	f7ff ff6c 	bl	80017c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 80018f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018f4:	4a24      	ldr	r2, [pc, #144]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 80018f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018fa:	6613      	str	r3, [r2, #96]	@ 0x60
 80018fc:	4b22      	ldr	r3, [pc, #136]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 80018fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	4b1f      	ldr	r3, [pc, #124]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800190c:	4a1e      	ldr	r2, [pc, #120]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001914:	4b1c      	ldr	r3, [pc, #112]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001918:	f003 0301 	and.w	r3, r3, #1
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001920:	4b19      	ldr	r3, [pc, #100]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001924:	4a18      	ldr	r2, [pc, #96]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800192c:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <HAL_UART_MspInit+0xe4>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001938:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800193c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800194a:	2307      	movs	r3, #7
 800194c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001952:	4619      	mov	r1, r3
 8001954:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001958:	f000 fa32 	bl	8001dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800195c:	2340      	movs	r3, #64	@ 0x40
 800195e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800196c:	2307      	movs	r3, #7
 800196e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001974:	4619      	mov	r1, r3
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <HAL_UART_MspInit+0xe8>)
 8001978:	f000 fa22 	bl	8001dc0 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800197c:	bf00      	nop
 800197e:	3780      	adds	r7, #128	@ 0x80
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40013800 	.word	0x40013800
 8001988:	40021000 	.word	0x40021000
 800198c:	48000400 	.word	0x48000400

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001994:	bf00      	nop
 8001996:	e7fd      	b.n	8001994 <NMI_Handler+0x4>

08001998 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199c:	bf00      	nop
 800199e:	e7fd      	b.n	800199c <HardFault_Handler+0x4>

080019a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <MemManage_Handler+0x4>

080019a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <BusFault_Handler+0x4>

080019b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <UsageFault_Handler+0x4>

080019b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e6:	f000 f8c7 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
	...

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	@ (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	@ (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	@ (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f003 f970 	bl	8004d04 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	@ (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20020000 	.word	0x20020000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	2000021c 	.word	0x2000021c
 8001a58:	20000370 	.word	0x20000370

08001a5c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	@ (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff ffea 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	@ (8001ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <LoopForever+0xe>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001acc <LoopForever+0x16>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f003 f92f 	bl	8004d10 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab2:	f7ff fcf9 	bl	80014a8 <main>

08001ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab6:	e7fe      	b.n	8001ab6 <LoopForever>
  ldr   r0, =_estack
 8001ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ac4:	080056fc 	.word	0x080056fc
  ldr r2, =_sbss
 8001ac8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001acc:	2000036c 	.word	0x2000036c

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>

08001ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f93d 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f000 f80e 	bl	8001b04 <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	e001      	b.n	8001af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af4:	f7ff fe6e 	bl	80017d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af8:	79fb      	ldrb	r3, [r7, #7]

}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b10:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_InitTick+0x68>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d022      	beq.n	8001b5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_InitTick+0x6c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_InitTick+0x68>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f93a 	bl	8001da6 <HAL_SYSTICK_Config>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10f      	bne.n	8001b58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	d809      	bhi.n	8001b52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295
 8001b46:	f000 f914 	bl	8001d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_InitTick+0x70>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	e004      	b.n	8001b62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_IncTick+0x1c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a03      	ldr	r2, [pc, #12]	@ (8001b94 <HAL_IncTick+0x1c>)
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20000220 	.word	0x20000220
 8001b98:	20000008 	.word	0x20000008

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000220 	.word	0x20000220

08001bb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bbc:	f7ff ffee 	bl	8001b9c <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d004      	beq.n	8001bd8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bce:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_Delay+0x40>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bd8:	bf00      	nop
 8001bda:	f7ff ffdf 	bl	8001b9c <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d8f7      	bhi.n	8001bda <HAL_Delay+0x26>
  {
  }
}
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	3710      	adds	r7, #16
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c08:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c14:	4013      	ands	r3, r2
 8001c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c2a:	4a04      	ldr	r2, [pc, #16]	@ (8001c3c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	60d3      	str	r3, [r2, #12]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <__NVIC_GetPriorityGrouping+0x18>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f003 0307 	and.w	r3, r3, #7
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	@ (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	@ (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	@ 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	@ 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff47 	bl	8001bf8 <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d80:	f7ff ff5e 	bl	8001c40 <__NVIC_GetPriorityGrouping>
 8001d84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	68b9      	ldr	r1, [r7, #8]
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7ff ff90 	bl	8001cb0 <NVIC_EncodePriority>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d96:	4611      	mov	r1, r2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff ff5f 	bl	8001c5c <__NVIC_SetPriority>
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ffb2 	bl	8001d18 <SysTick_Config>
 8001db4:	4603      	mov	r3, r0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dce:	e15a      	b.n	8002086 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 814c 	beq.w	8002080 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d005      	beq.n	8001e00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d130      	bne.n	8001e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	2203      	movs	r2, #3
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68da      	ldr	r2, [r3, #12]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e36:	2201      	movs	r2, #1
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	f003 0201 	and.w	r2, r3, #1
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	693a      	ldr	r2, [r7, #16]
 8001e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	d017      	beq.n	8001e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d123      	bne.n	8001ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	693a      	ldr	r2, [r7, #16]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	691a      	ldr	r2, [r3, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	6939      	ldr	r1, [r7, #16]
 8001eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f003 0203 	and.w	r2, r3, #3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	693a      	ldr	r2, [r7, #16]
 8001f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 80a6 	beq.w	8002080 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f34:	4b5b      	ldr	r3, [pc, #364]	@ (80020a4 <HAL_GPIO_Init+0x2e4>)
 8001f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f38:	4a5a      	ldr	r2, [pc, #360]	@ (80020a4 <HAL_GPIO_Init+0x2e4>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f40:	4b58      	ldr	r3, [pc, #352]	@ (80020a4 <HAL_GPIO_Init+0x2e4>)
 8001f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f4c:	4a56      	ldr	r2, [pc, #344]	@ (80020a8 <HAL_GPIO_Init+0x2e8>)
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	089b      	lsrs	r3, r3, #2
 8001f52:	3302      	adds	r3, #2
 8001f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	220f      	movs	r2, #15
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f76:	d01f      	beq.n	8001fb8 <HAL_GPIO_Init+0x1f8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80020ac <HAL_GPIO_Init+0x2ec>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d019      	beq.n	8001fb4 <HAL_GPIO_Init+0x1f4>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a4b      	ldr	r2, [pc, #300]	@ (80020b0 <HAL_GPIO_Init+0x2f0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_GPIO_Init+0x1f0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80020b4 <HAL_GPIO_Init+0x2f4>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d00d      	beq.n	8001fac <HAL_GPIO_Init+0x1ec>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a49      	ldr	r2, [pc, #292]	@ (80020b8 <HAL_GPIO_Init+0x2f8>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d007      	beq.n	8001fa8 <HAL_GPIO_Init+0x1e8>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a48      	ldr	r2, [pc, #288]	@ (80020bc <HAL_GPIO_Init+0x2fc>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d101      	bne.n	8001fa4 <HAL_GPIO_Init+0x1e4>
 8001fa0:	2305      	movs	r3, #5
 8001fa2:	e00a      	b.n	8001fba <HAL_GPIO_Init+0x1fa>
 8001fa4:	2306      	movs	r3, #6
 8001fa6:	e008      	b.n	8001fba <HAL_GPIO_Init+0x1fa>
 8001fa8:	2304      	movs	r3, #4
 8001faa:	e006      	b.n	8001fba <HAL_GPIO_Init+0x1fa>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e004      	b.n	8001fba <HAL_GPIO_Init+0x1fa>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	e002      	b.n	8001fba <HAL_GPIO_Init+0x1fa>
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_GPIO_Init+0x1fa>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	f002 0203 	and.w	r2, r2, #3
 8001fc0:	0092      	lsls	r2, r2, #2
 8001fc2:	4093      	lsls	r3, r2
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fca:	4937      	ldr	r1, [pc, #220]	@ (80020a8 <HAL_GPIO_Init+0x2e8>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fd8:	4b39      	ldr	r3, [pc, #228]	@ (80020c0 <HAL_GPIO_Init+0x300>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ffc:	4a30      	ldr	r2, [pc, #192]	@ (80020c0 <HAL_GPIO_Init+0x300>)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002002:	4b2f      	ldr	r3, [pc, #188]	@ (80020c0 <HAL_GPIO_Init+0x300>)
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	43db      	mvns	r3, r3
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	4013      	ands	r3, r2
 8002010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002026:	4a26      	ldr	r2, [pc, #152]	@ (80020c0 <HAL_GPIO_Init+0x300>)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800202c:	4b24      	ldr	r3, [pc, #144]	@ (80020c0 <HAL_GPIO_Init+0x300>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002050:	4a1b      	ldr	r2, [pc, #108]	@ (80020c0 <HAL_GPIO_Init+0x300>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002056:	4b1a      	ldr	r3, [pc, #104]	@ (80020c0 <HAL_GPIO_Init+0x300>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800207a:	4a11      	ldr	r2, [pc, #68]	@ (80020c0 <HAL_GPIO_Init+0x300>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3301      	adds	r3, #1
 8002084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
 8002090:	2b00      	cmp	r3, #0
 8002092:	f47f ae9d 	bne.w	8001dd0 <HAL_GPIO_Init+0x10>
  }
}
 8002096:	bf00      	nop
 8002098:	bf00      	nop
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40010000 	.word	0x40010000
 80020ac:	48000400 	.word	0x48000400
 80020b0:	48000800 	.word	0x48000800
 80020b4:	48000c00 	.word	0x48000c00
 80020b8:	48001000 	.word	0x48001000
 80020bc:	48001400 	.word	0x48001400
 80020c0:	40010400 	.word	0x40010400

080020c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	460b      	mov	r3, r1
 80020ce:	807b      	strh	r3, [r7, #2]
 80020d0:	4613      	mov	r3, r2
 80020d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020d4:	787b      	ldrb	r3, [r7, #1]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020da:	887a      	ldrh	r2, [r7, #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d141      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002102:	4b4b      	ldr	r3, [pc, #300]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800210e:	d131      	bne.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002110:	4b47      	ldr	r3, [pc, #284]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002112:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002116:	4a46      	ldr	r2, [pc, #280]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002118:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800211c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002120:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002128:	4a41      	ldr	r2, [pc, #260]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800212e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002130:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2232      	movs	r2, #50	@ 0x32
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a3f      	ldr	r2, [pc, #252]	@ (8002238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002146:	e002      	b.n	800214e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3b01      	subs	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214e:	4b38      	ldr	r3, [pc, #224]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800215a:	d102      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f2      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002162:	4b33      	ldr	r3, [pc, #204]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800216e:	d158      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e057      	b.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002174:	4b2e      	ldr	r3, [pc, #184]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800217a:	4a2d      	ldr	r2, [pc, #180]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002180:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002184:	e04d      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800218c:	d141      	bne.n	8002212 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800218e:	4b28      	ldr	r3, [pc, #160]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800219a:	d131      	bne.n	8002200 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800219c:	4b24      	ldr	r3, [pc, #144]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021a2:	4a23      	ldr	r2, [pc, #140]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021ac:	4b20      	ldr	r3, [pc, #128]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021b4:	4a1e      	ldr	r2, [pc, #120]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2232      	movs	r2, #50	@ 0x32
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002238 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80021c8:	fba2 2303 	umull	r2, r3, r2, r3
 80021cc:	0c9b      	lsrs	r3, r3, #18
 80021ce:	3301      	adds	r3, #1
 80021d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021d2:	e002      	b.n	80021da <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021e6:	d102      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f2      	bne.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ee:	4b10      	ldr	r3, [pc, #64]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f0:	695b      	ldr	r3, [r3, #20]
 80021f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021fa:	d112      	bne.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e011      	b.n	8002224 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002206:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002208:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800220c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002210:	e007      	b.n	8002222 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002212:	4b07      	ldr	r3, [pc, #28]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800221a:	4a05      	ldr	r2, [pc, #20]	@ (8002230 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800221c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002220:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40007000 	.word	0x40007000
 8002234:	20000000 	.word	0x20000000
 8002238:	431bde83 	.word	0x431bde83

0800223c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002240:	4b05      	ldr	r3, [pc, #20]	@ (8002258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002246:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800224a:	6093      	str	r3, [r2, #8]
}
 800224c:	bf00      	nop
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40007000 	.word	0x40007000

0800225c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e2fe      	b.n	800286c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d075      	beq.n	8002366 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227a:	4b97      	ldr	r3, [pc, #604]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
 8002282:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002284:	4b94      	ldr	r3, [pc, #592]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	2b0c      	cmp	r3, #12
 8002292:	d102      	bne.n	800229a <HAL_RCC_OscConfig+0x3e>
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d002      	beq.n	80022a0 <HAL_RCC_OscConfig+0x44>
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b08      	cmp	r3, #8
 800229e:	d10b      	bne.n	80022b8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	4b8d      	ldr	r3, [pc, #564]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d05b      	beq.n	8002364 <HAL_RCC_OscConfig+0x108>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d157      	bne.n	8002364 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e2d9      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022c0:	d106      	bne.n	80022d0 <HAL_RCC_OscConfig+0x74>
 80022c2:	4b85      	ldr	r3, [pc, #532]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a84      	ldr	r2, [pc, #528]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	e01d      	b.n	800230c <HAL_RCC_OscConfig+0xb0>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x98>
 80022da:	4b7f      	ldr	r3, [pc, #508]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7e      	ldr	r2, [pc, #504]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	4b7c      	ldr	r3, [pc, #496]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7b      	ldr	r2, [pc, #492]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0xb0>
 80022f4:	4b78      	ldr	r3, [pc, #480]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a77      	ldr	r2, [pc, #476]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022fe:	6013      	str	r3, [r2, #0]
 8002300:	4b75      	ldr	r3, [pc, #468]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a74      	ldr	r2, [pc, #464]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d013      	beq.n	800233c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7ff fc42 	bl	8001b9c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800231c:	f7ff fc3e 	bl	8001b9c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b64      	cmp	r3, #100	@ 0x64
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e29e      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800232e:	4b6a      	ldr	r3, [pc, #424]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0xc0>
 800233a:	e014      	b.n	8002366 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233c:	f7ff fc2e 	bl	8001b9c <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002342:	e008      	b.n	8002356 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002344:	f7ff fc2a 	bl	8001b9c <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b64      	cmp	r3, #100	@ 0x64
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e28a      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002356:	4b60      	ldr	r3, [pc, #384]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f0      	bne.n	8002344 <HAL_RCC_OscConfig+0xe8>
 8002362:	e000      	b.n	8002366 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d075      	beq.n	800245e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002372:	4b59      	ldr	r3, [pc, #356]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237c:	4b56      	ldr	r3, [pc, #344]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0303 	and.w	r3, r3, #3
 8002384:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d102      	bne.n	8002392 <HAL_RCC_OscConfig+0x136>
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	2b02      	cmp	r3, #2
 8002390:	d002      	beq.n	8002398 <HAL_RCC_OscConfig+0x13c>
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b04      	cmp	r3, #4
 8002396:	d11f      	bne.n	80023d8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002398:	4b4f      	ldr	r3, [pc, #316]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x154>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d101      	bne.n	80023b0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e25d      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b0:	4b49      	ldr	r3, [pc, #292]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	061b      	lsls	r3, r3, #24
 80023be:	4946      	ldr	r1, [pc, #280]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80023c4:	4b45      	ldr	r3, [pc, #276]	@ (80024dc <HAL_RCC_OscConfig+0x280>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fb9b 	bl	8001b04 <HAL_InitTick>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d043      	beq.n	800245c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e249      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e0:	4b3d      	ldr	r3, [pc, #244]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3c      	ldr	r2, [pc, #240]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7ff fbd6 	bl	8001b9c <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f4:	f7ff fbd2 	bl	8001b9c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e232      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002406:	4b34      	ldr	r3, [pc, #208]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b31      	ldr	r3, [pc, #196]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	061b      	lsls	r3, r3, #24
 8002420:	492d      	ldr	r1, [pc, #180]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]
 8002426:	e01a      	b.n	800245e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002428:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800242e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002434:	f7ff fbb2 	bl	8001b9c <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243c:	f7ff fbae 	bl	8001b9c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e20e      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800244e:	4b22      	ldr	r3, [pc, #136]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x1e0>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d041      	beq.n	80024ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01c      	beq.n	80024ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002472:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 8002474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002478:	4a17      	ldr	r2, [pc, #92]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7ff fb8b 	bl	8001b9c <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800248a:	f7ff fb87 	bl	8001b9c <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e1e7      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800249c:	4b0e      	ldr	r3, [pc, #56]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0ef      	beq.n	800248a <HAL_RCC_OscConfig+0x22e>
 80024aa:	e020      	b.n	80024ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b2:	4a09      	ldr	r2, [pc, #36]	@ (80024d8 <HAL_RCC_OscConfig+0x27c>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024bc:	f7ff fb6e 	bl	8001b9c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c2:	e00d      	b.n	80024e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c4:	f7ff fb6a 	bl	8001b9c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d906      	bls.n	80024e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1ca      	b.n	800286c <HAL_RCC_OscConfig+0x610>
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000
 80024dc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ea      	bne.n	80024c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 80a6 	beq.w	8002648 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fc:	2300      	movs	r3, #0
 80024fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002500:	4b84      	ldr	r3, [pc, #528]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x2b4>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x2b6>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00d      	beq.n	8002532 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b7f      	ldr	r3, [pc, #508]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	4a7e      	ldr	r2, [pc, #504]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002520:	6593      	str	r3, [r2, #88]	@ 0x58
 8002522:	4b7c      	ldr	r3, [pc, #496]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002532:	4b79      	ldr	r3, [pc, #484]	@ (8002718 <HAL_RCC_OscConfig+0x4bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800253a:	2b00      	cmp	r3, #0
 800253c:	d118      	bne.n	8002570 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800253e:	4b76      	ldr	r3, [pc, #472]	@ (8002718 <HAL_RCC_OscConfig+0x4bc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a75      	ldr	r2, [pc, #468]	@ (8002718 <HAL_RCC_OscConfig+0x4bc>)
 8002544:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254a:	f7ff fb27 	bl	8001b9c <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002552:	f7ff fb23 	bl	8001b9c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e183      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002564:	4b6c      	ldr	r3, [pc, #432]	@ (8002718 <HAL_RCC_OscConfig+0x4bc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d108      	bne.n	800258a <HAL_RCC_OscConfig+0x32e>
 8002578:	4b66      	ldr	r3, [pc, #408]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800257a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800257e:	4a65      	ldr	r2, [pc, #404]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002588:	e024      	b.n	80025d4 <HAL_RCC_OscConfig+0x378>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	2b05      	cmp	r3, #5
 8002590:	d110      	bne.n	80025b4 <HAL_RCC_OscConfig+0x358>
 8002592:	4b60      	ldr	r3, [pc, #384]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002598:	4a5e      	ldr	r2, [pc, #376]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025a2:	4b5c      	ldr	r3, [pc, #368]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a8:	4a5a      	ldr	r2, [pc, #360]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_OscConfig+0x378>
 80025b4:	4b57      	ldr	r3, [pc, #348]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	4a56      	ldr	r2, [pc, #344]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80025c4:	4b53      	ldr	r3, [pc, #332]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	4a52      	ldr	r2, [pc, #328]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d016      	beq.n	800260a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f7ff fade 	bl	8001b9c <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e2:	e00a      	b.n	80025fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e4:	f7ff fada 	bl	8001b9c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e138      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fa:	4b46      	ldr	r3, [pc, #280]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ed      	beq.n	80025e4 <HAL_RCC_OscConfig+0x388>
 8002608:	e015      	b.n	8002636 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260a:	f7ff fac7 	bl	8001b9c <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002610:	e00a      	b.n	8002628 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002612:	f7ff fac3 	bl	8001b9c <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002620:	4293      	cmp	r3, r2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e121      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002628:	4b3a      	ldr	r3, [pc, #232]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800262a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1ed      	bne.n	8002612 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002636:	7ffb      	ldrb	r3, [r7, #31]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	4b35      	ldr	r3, [pc, #212]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002640:	4a34      	ldr	r2, [pc, #208]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002642:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002646:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d03c      	beq.n	80026ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d01c      	beq.n	8002696 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800265c:	4b2d      	ldr	r3, [pc, #180]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002662:	4a2c      	ldr	r2, [pc, #176]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff fa96 	bl	8001b9c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002674:	f7ff fa92 	bl	8001b9c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0f2      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002686:	4b23      	ldr	r3, [pc, #140]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002688:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800268c:	f003 0302 	and.w	r3, r3, #2
 8002690:	2b00      	cmp	r3, #0
 8002692:	d0ef      	beq.n	8002674 <HAL_RCC_OscConfig+0x418>
 8002694:	e01b      	b.n	80026ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002696:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800269c:	4a1d      	ldr	r2, [pc, #116]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a6:	f7ff fa79 	bl	8001b9c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026ae:	f7ff fa75 	bl	8001b9c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e0d5      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80026c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80026c6:	f003 0302 	and.w	r3, r3, #2
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1ef      	bne.n	80026ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 80c9 	beq.w	800286a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f003 030c 	and.w	r3, r3, #12
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	f000 8083 	beq.w	80027ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d15e      	bne.n	80027ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a08      	ldr	r2, [pc, #32]	@ (8002714 <HAL_RCC_OscConfig+0x4b8>)
 80026f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7ff fa4f 	bl	8001b9c <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	e00c      	b.n	800271c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff fa4b 	bl	8001b9c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d905      	bls.n	800271c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0ab      	b.n	800286c <HAL_RCC_OscConfig+0x610>
 8002714:	40021000 	.word	0x40021000
 8002718:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271c:	4b55      	ldr	r3, [pc, #340]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ec      	bne.n	8002702 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002728:	4b52      	ldr	r3, [pc, #328]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	4b52      	ldr	r3, [pc, #328]	@ (8002878 <HAL_RCC_OscConfig+0x61c>)
 800272e:	4013      	ands	r3, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6a11      	ldr	r1, [r2, #32]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002738:	3a01      	subs	r2, #1
 800273a:	0112      	lsls	r2, r2, #4
 800273c:	4311      	orrs	r1, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002742:	0212      	lsls	r2, r2, #8
 8002744:	4311      	orrs	r1, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800274a:	0852      	lsrs	r2, r2, #1
 800274c:	3a01      	subs	r2, #1
 800274e:	0552      	lsls	r2, r2, #21
 8002750:	4311      	orrs	r1, r2
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002756:	0852      	lsrs	r2, r2, #1
 8002758:	3a01      	subs	r2, #1
 800275a:	0652      	lsls	r2, r2, #25
 800275c:	4311      	orrs	r1, r2
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002762:	06d2      	lsls	r2, r2, #27
 8002764:	430a      	orrs	r2, r1
 8002766:	4943      	ldr	r1, [pc, #268]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 8002768:	4313      	orrs	r3, r2
 800276a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800276c:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a40      	ldr	r2, [pc, #256]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 8002772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002778:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a3d      	ldr	r2, [pc, #244]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 800277e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002782:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff fa0a 	bl	8001b9c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278c:	f7ff fa06 	bl	8001b9c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e066      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279e:	4b35      	ldr	r3, [pc, #212]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x530>
 80027aa:	e05e      	b.n	800286a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ac:	4b31      	ldr	r3, [pc, #196]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a30      	ldr	r2, [pc, #192]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b8:	f7ff f9f0 	bl	8001b9c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c0:	f7ff f9ec 	bl	8001b9c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e04c      	b.n	800286c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027d2:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1f0      	bne.n	80027c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027e0:	68da      	ldr	r2, [r3, #12]
 80027e2:	4924      	ldr	r1, [pc, #144]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027e4:	4b25      	ldr	r3, [pc, #148]	@ (800287c <HAL_RCC_OscConfig+0x620>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	60cb      	str	r3, [r1, #12]
 80027ea:	e03e      	b.n	800286a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e039      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027f8:	4b1e      	ldr	r3, [pc, #120]	@ (8002874 <HAL_RCC_OscConfig+0x618>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 0203 	and.w	r2, r3, #3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	429a      	cmp	r2, r3
 800280a:	d12c      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002816:	3b01      	subs	r3, #1
 8002818:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d123      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800282a:	429a      	cmp	r2, r3
 800282c:	d11b      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002838:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d113      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	085b      	lsrs	r3, r3, #1
 800284a:	3b01      	subs	r3, #1
 800284c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d109      	bne.n	8002866 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d001      	beq.n	800286a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e000      	b.n	800286c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3720      	adds	r7, #32
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40021000 	.word	0x40021000
 8002878:	019f800c 	.word	0x019f800c
 800287c:	feeefffc 	.word	0xfeeefffc

08002880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e11e      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b91      	ldr	r3, [pc, #580]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b8e      	ldr	r3, [pc, #568]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 020f 	bic.w	r2, r3, #15
 80028ae:	498c      	ldr	r1, [pc, #560]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b8a      	ldr	r3, [pc, #552]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e106      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d073      	beq.n	80029bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d129      	bne.n	8002930 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028dc:	4b81      	ldr	r3, [pc, #516]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e0f4      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028ec:	f000 f99e 	bl	8002c2c <RCC_GetSysClockFreqFromPLLSource>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	4a7c      	ldr	r2, [pc, #496]	@ (8002ae8 <HAL_RCC_ClockConfig+0x268>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d93f      	bls.n	800297a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028fa:	4b7a      	ldr	r3, [pc, #488]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800290e:	2b00      	cmp	r3, #0
 8002910:	d033      	beq.n	800297a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002916:	2b00      	cmp	r3, #0
 8002918:	d12f      	bne.n	800297a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800291a:	4b72      	ldr	r3, [pc, #456]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002922:	4a70      	ldr	r2, [pc, #448]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002928:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e024      	b.n	800297a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d107      	bne.n	8002948 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002938:	4b6a      	ldr	r3, [pc, #424]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002940:	2b00      	cmp	r3, #0
 8002942:	d109      	bne.n	8002958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e0c6      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	4b66      	ldr	r3, [pc, #408]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0be      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002958:	f000 f8ce 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 800295c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4a61      	ldr	r2, [pc, #388]	@ (8002ae8 <HAL_RCC_ClockConfig+0x268>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d909      	bls.n	800297a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002966:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800296e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002970:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002974:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800297a:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 0203 	bic.w	r2, r3, #3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4957      	ldr	r1, [pc, #348]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002988:	4313      	orrs	r3, r2
 800298a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800298c:	f7ff f906 	bl	8001b9c <HAL_GetTick>
 8002990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	e00a      	b.n	80029aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002994:	f7ff f902 	bl	8001b9c <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e095      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	4b4e      	ldr	r3, [pc, #312]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 020c 	and.w	r2, r3, #12
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d1eb      	bne.n	8002994 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d023      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d4:	4b43      	ldr	r3, [pc, #268]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a42      	ldr	r2, [pc, #264]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029ec:	4b3d      	ldr	r3, [pc, #244]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029f4:	4a3b      	ldr	r2, [pc, #236]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029f6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b39      	ldr	r3, [pc, #228]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4936      	ldr	r1, [pc, #216]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2b80      	cmp	r3, #128	@ 0x80
 8002a14:	d105      	bne.n	8002a22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a16:	4b33      	ldr	r3, [pc, #204]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4a32      	ldr	r2, [pc, #200]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a22:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d21d      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a30:	4b2b      	ldr	r3, [pc, #172]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 020f 	bic.w	r2, r3, #15
 8002a38:	4929      	ldr	r1, [pc, #164]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a40:	f7ff f8ac 	bl	8001b9c <HAL_GetTick>
 8002a44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a48:	f7ff f8a8 	bl	8001b9c <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e03b      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b20      	ldr	r3, [pc, #128]	@ (8002ae0 <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 030f 	and.w	r3, r3, #15
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1ed      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	4917      	ldr	r1, [pc, #92]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	490f      	ldr	r1, [pc, #60]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aaa:	f000 f825 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae4 <HAL_RCC_ClockConfig+0x264>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	490c      	ldr	r1, [pc, #48]	@ (8002aec <HAL_RCC_ClockConfig+0x26c>)
 8002abc:	5ccb      	ldrb	r3, [r1, r3]
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8002af0 <HAL_RCC_ClockConfig+0x270>)
 8002ac8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002aca:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <HAL_RCC_ClockConfig+0x274>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff f818 	bl	8001b04 <HAL_InitTick>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40022000 	.word	0x40022000
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	04c4b400 	.word	0x04c4b400
 8002aec:	08005678 	.word	0x08005678
 8002af0:	20000000 	.word	0x20000000
 8002af4:	20000004 	.word	0x20000004

08002af8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002afe:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d102      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	e047      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b10:	4b27      	ldr	r3, [pc, #156]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b1c:	4b26      	ldr	r3, [pc, #152]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e03e      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b22:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 030c 	and.w	r3, r3, #12
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d136      	bne.n	8002b9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b2e:	4b20      	ldr	r3, [pc, #128]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	3301      	adds	r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b54:	4a16      	ldr	r2, [pc, #88]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b56:	68d2      	ldr	r2, [r2, #12]
 8002b58:	0a12      	lsrs	r2, r2, #8
 8002b5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b5e:	fb02 f303 	mul.w	r3, r2, r3
 8002b62:	617b      	str	r3, [r7, #20]
      break;
 8002b64:	e00c      	b.n	8002b80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b66:	4a13      	ldr	r2, [pc, #76]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6e:	4a10      	ldr	r2, [pc, #64]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b70:	68d2      	ldr	r2, [r2, #12]
 8002b72:	0a12      	lsrs	r2, r2, #8
 8002b74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002b78:	fb02 f303 	mul.w	r3, r2, r3
 8002b7c:	617b      	str	r3, [r7, #20]
      break;
 8002b7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	0e5b      	lsrs	r3, r3, #25
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	e001      	b.n	8002ba0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ba0:	693b      	ldr	r3, [r7, #16]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	00f42400 	.word	0x00f42400
 8002bb8:	007a1200 	.word	0x007a1200

08002bbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bc0:	4b03      	ldr	r3, [pc, #12]	@ (8002bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	20000000 	.word	0x20000000

08002bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bd8:	f7ff fff0 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	4904      	ldr	r1, [pc, #16]	@ (8002bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	f003 031f 	and.w	r3, r3, #31
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	40021000 	.word	0x40021000
 8002bfc:	08005688 	.word	0x08005688

08002c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c04:	f7ff ffda 	bl	8002bbc <HAL_RCC_GetHCLKFreq>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	4b06      	ldr	r3, [pc, #24]	@ (8002c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	0adb      	lsrs	r3, r3, #11
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	4904      	ldr	r1, [pc, #16]	@ (8002c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c16:	5ccb      	ldrb	r3, [r1, r3]
 8002c18:	f003 031f 	and.w	r3, r3, #31
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	40021000 	.word	0x40021000
 8002c28:	08005688 	.word	0x08005688

08002c2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c32:	4b1e      	ldr	r3, [pc, #120]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	091b      	lsrs	r3, r3, #4
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	3301      	adds	r3, #1
 8002c48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d10c      	bne.n	8002c6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c50:	4a17      	ldr	r2, [pc, #92]	@ (8002cb0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	4a14      	ldr	r2, [pc, #80]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c5a:	68d2      	ldr	r2, [r2, #12]
 8002c5c:	0a12      	lsrs	r2, r2, #8
 8002c5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
    break;
 8002c68:	e00c      	b.n	8002c84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c6a:	4a12      	ldr	r2, [pc, #72]	@ (8002cb4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c72:	4a0e      	ldr	r2, [pc, #56]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c74:	68d2      	ldr	r2, [r2, #12]
 8002c76:	0a12      	lsrs	r2, r2, #8
 8002c78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	617b      	str	r3, [r7, #20]
    break;
 8002c82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c84:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	0e5b      	lsrs	r3, r3, #25
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002c94:	697a      	ldr	r2, [r7, #20]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c9e:	687b      	ldr	r3, [r7, #4]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	371c      	adds	r7, #28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	007a1200 	.word	0x007a1200
 8002cb4:	00f42400 	.word	0x00f42400

08002cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 8098 	beq.w	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10d      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4b40      	ldr	r3, [pc, #256]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cea:	4a3f      	ldr	r2, [pc, #252]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d02:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a39      	ldr	r2, [pc, #228]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d0e:	f7fe ff45 	bl	8001b9c <HAL_GetTick>
 8002d12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d14:	e009      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d16:	f7fe ff41 	bl	8001b9c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d902      	bls.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	74fb      	strb	r3, [r7, #19]
        break;
 8002d28:	e005      	b.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d2a:	4b30      	ldr	r3, [pc, #192]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0ef      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d36:	7cfb      	ldrb	r3, [r7, #19]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d159      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01e      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d019      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d58:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d64:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d74:	4b1c      	ldr	r3, [pc, #112]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	4a1b      	ldr	r2, [pc, #108]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d84:	4a18      	ldr	r2, [pc, #96]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d016      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe ff01 	bl	8001b9c <HAL_GetTick>
 8002d9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9c:	e00b      	b.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe fefd 	bl	8001b9c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d902      	bls.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	74fb      	strb	r3, [r7, #19]
            break;
 8002db4:	e006      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db6:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ec      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002dc4:	7cfb      	ldrb	r3, [r7, #19]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10b      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dca:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dd0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dd8:	4903      	ldr	r1, [pc, #12]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002de0:	e008      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de2:	7cfb      	ldrb	r3, [r7, #19]
 8002de4:	74bb      	strb	r3, [r7, #18]
 8002de6:	e005      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df4:	7c7b      	ldrb	r3, [r7, #17]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4ba7      	ldr	r3, [pc, #668]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	4aa6      	ldr	r2, [pc, #664]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e12:	4ba1      	ldr	r3, [pc, #644]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f023 0203 	bic.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	499d      	ldr	r1, [pc, #628]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e34:	4b98      	ldr	r3, [pc, #608]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 020c 	bic.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	4995      	ldr	r1, [pc, #596]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e56:	4b90      	ldr	r3, [pc, #576]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	498c      	ldr	r1, [pc, #560]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e78:	4b87      	ldr	r3, [pc, #540]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4984      	ldr	r1, [pc, #528]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0310 	and.w	r3, r3, #16
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e9a:	4b7f      	ldr	r3, [pc, #508]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	497b      	ldr	r1, [pc, #492]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ebc:	4b76      	ldr	r3, [pc, #472]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	4973      	ldr	r1, [pc, #460]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ede:	4b6e      	ldr	r3, [pc, #440]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	69db      	ldr	r3, [r3, #28]
 8002eec:	496a      	ldr	r1, [pc, #424]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f00:	4b65      	ldr	r3, [pc, #404]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	4962      	ldr	r1, [pc, #392]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f22:	4b5d      	ldr	r3, [pc, #372]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f30:	4959      	ldr	r1, [pc, #356]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f44:	4b54      	ldr	r3, [pc, #336]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f4a:	f023 0203 	bic.w	r2, r3, #3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	4951      	ldr	r1, [pc, #324]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f66:	4b4c      	ldr	r3, [pc, #304]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f6c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	4948      	ldr	r1, [pc, #288]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f88:	4b43      	ldr	r3, [pc, #268]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f96:	4940      	ldr	r1, [pc, #256]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	4a3a      	ldr	r2, [pc, #232]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fb2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d015      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fc0:	4b35      	ldr	r3, [pc, #212]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fce:	4932      	ldr	r1, [pc, #200]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fda:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fde:	d105      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fe6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fea:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ff8:	4b27      	ldr	r3, [pc, #156]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003006:	4924      	ldr	r1, [pc, #144]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003016:	d105      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003018:	4b1f      	ldr	r3, [pc, #124]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	4a1e      	ldr	r2, [pc, #120]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003022:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800303e:	4916      	ldr	r1, [pc, #88]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800304e:	d105      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003050:	4b11      	ldr	r3, [pc, #68]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a10      	ldr	r2, [pc, #64]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003056:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800305a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d019      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003068:	4b0b      	ldr	r3, [pc, #44]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	4908      	ldr	r1, [pc, #32]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003086:	d109      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4b03      	ldr	r3, [pc, #12]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a02      	ldr	r2, [pc, #8]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003092:	60d3      	str	r3, [r2, #12]
 8003094:	e002      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d015      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030a8:	4b29      	ldr	r3, [pc, #164]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ae:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b6:	4926      	ldr	r1, [pc, #152]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030c6:	d105      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030c8:	4b21      	ldr	r3, [pc, #132]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a20      	ldr	r2, [pc, #128]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d015      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80030e0:	4b1b      	ldr	r3, [pc, #108]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ee:	4918      	ldr	r1, [pc, #96]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fe:	d105      	bne.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003100:	4b13      	ldr	r3, [pc, #76]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4a12      	ldr	r2, [pc, #72]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d015      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003118:	4b0d      	ldr	r3, [pc, #52]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800311a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800311e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003126:	490a      	ldr	r1, [pc, #40]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003128:	4313      	orrs	r3, r2
 800312a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003132:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003136:	d105      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003138:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	4a04      	ldr	r2, [pc, #16]	@ (8003150 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800313e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003142:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003144:	7cbb      	ldrb	r3, [r7, #18]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	40021000 	.word	0x40021000

08003154 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e09d      	b.n	80032a2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003176:	d009      	beq.n	800318c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	61da      	str	r2, [r3, #28]
 800317e:	e005      	b.n	800318c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d106      	bne.n	80031ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7fe fb38 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80031c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031cc:	d902      	bls.n	80031d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	e002      	b.n	80031da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80031e2:	d007      	beq.n	80031f4 <HAL_SPI_Init+0xa0>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80031ec:	d002      	beq.n	80031f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003236:	ea42 0103 	orr.w	r1, r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800323e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	699b      	ldr	r3, [r3, #24]
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	f003 0204 	and.w	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003262:	f003 0308 	and.w	r3, r3, #8
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003270:	ea42 0103 	orr.w	r1, r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	69da      	ldr	r2, [r3, #28]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003290:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b088      	sub	sp, #32
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	4613      	mov	r3, r2
 80032b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ba:	f7fe fc6f 	bl	8001b9c <HAL_GetTick>
 80032be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80032c0:	88fb      	ldrh	r3, [r7, #6]
 80032c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80032d0:	2302      	movs	r3, #2
 80032d2:	e15c      	b.n	800358e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_SPI_Transmit+0x36>
 80032da:	88fb      	ldrh	r3, [r7, #6]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e154      	b.n	800358e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_SPI_Transmit+0x48>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e14d      	b.n	800358e <HAL_SPI_Transmit+0x2e4>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2203      	movs	r2, #3
 80032fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	88fa      	ldrh	r2, [r7, #6]
 8003312:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	88fa      	ldrh	r2, [r7, #6]
 8003318:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003344:	d10f      	bne.n	8003366 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003364:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003370:	2b40      	cmp	r3, #64	@ 0x40
 8003372:	d007      	beq.n	8003384 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003382:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800338c:	d952      	bls.n	8003434 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d002      	beq.n	800339c <HAL_SPI_Transmit+0xf2>
 8003396:	8b7b      	ldrh	r3, [r7, #26]
 8003398:	2b01      	cmp	r3, #1
 800339a:	d145      	bne.n	8003428 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80033c0:	e032      	b.n	8003428 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d112      	bne.n	80033f6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d4:	881a      	ldrh	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e0:	1c9a      	adds	r2, r3, #2
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033f4:	e018      	b.n	8003428 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033f6:	f7fe fbd1 	bl	8001b9c <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d803      	bhi.n	800340e <HAL_SPI_Transmit+0x164>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340c:	d102      	bne.n	8003414 <HAL_SPI_Transmit+0x16a>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d109      	bne.n	8003428 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e0b2      	b.n	800358e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1c7      	bne.n	80033c2 <HAL_SPI_Transmit+0x118>
 8003432:	e083      	b.n	800353c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d002      	beq.n	8003442 <HAL_SPI_Transmit+0x198>
 800343c:	8b7b      	ldrh	r3, [r7, #26]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d177      	bne.n	8003532 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003446:	b29b      	uxth	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	d912      	bls.n	8003472 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003450:	881a      	ldrh	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345c:	1c9a      	adds	r2, r3, #2
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	3b02      	subs	r3, #2
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003470:	e05f      	b.n	8003532 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	330c      	adds	r3, #12
 800347c:	7812      	ldrb	r2, [r2, #0]
 800347e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003484:	1c5a      	adds	r2, r3, #1
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800348e:	b29b      	uxth	r3, r3
 8003490:	3b01      	subs	r3, #1
 8003492:	b29a      	uxth	r2, r3
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003498:	e04b      	b.n	8003532 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d12b      	bne.n	8003500 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d912      	bls.n	80034d8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b6:	881a      	ldrh	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034c2:	1c9a      	adds	r2, r3, #2
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	3b02      	subs	r3, #2
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034d6:	e02c      	b.n	8003532 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	330c      	adds	r3, #12
 80034e2:	7812      	ldrb	r2, [r2, #0]
 80034e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ea:	1c5a      	adds	r2, r3, #1
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034fe:	e018      	b.n	8003532 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003500:	f7fe fb4c 	bl	8001b9c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d803      	bhi.n	8003518 <HAL_SPI_Transmit+0x26e>
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003516:	d102      	bne.n	800351e <HAL_SPI_Transmit+0x274>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d109      	bne.n	8003532 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e02d      	b.n	800358e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003536:	b29b      	uxth	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1ae      	bne.n	800349a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800353c:	69fa      	ldr	r2, [r7, #28]
 800353e:	6839      	ldr	r1, [r7, #0]
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 fd03 	bl	8003f4c <SPI_EndRxTxTransaction>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10a      	bne.n	8003570 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355a:	2300      	movs	r3, #0
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	617b      	str	r3, [r7, #20]
 800356e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800358c:	2300      	movs	r3, #0
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3720      	adds	r7, #32
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b088      	sub	sp, #32
 800359a:	af02      	add	r7, sp, #8
 800359c:	60f8      	str	r0, [r7, #12]
 800359e:	60b9      	str	r1, [r7, #8]
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d001      	beq.n	80035b6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80035b2:	2302      	movs	r3, #2
 80035b4:	e123      	b.n	80037fe <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <HAL_SPI_Receive+0x2c>
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e11b      	b.n	80037fe <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035ce:	d112      	bne.n	80035f6 <HAL_SPI_Receive+0x60>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10e      	bne.n	80035f6 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2204      	movs	r2, #4
 80035dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80035e0:	88fa      	ldrh	r2, [r7, #6]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	4613      	mov	r3, r2
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f90a 	bl	8003806 <HAL_SPI_TransmitReceive>
 80035f2:	4603      	mov	r3, r0
 80035f4:	e103      	b.n	80037fe <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035f6:	f7fe fad1 	bl	8001b9c <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003602:	2b01      	cmp	r3, #1
 8003604:	d101      	bne.n	800360a <HAL_SPI_Receive+0x74>
 8003606:	2302      	movs	r3, #2
 8003608:	e0f9      	b.n	80037fe <HAL_SPI_Receive+0x268>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2204      	movs	r2, #4
 8003616:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	88fa      	ldrh	r2, [r7, #6]
 800362a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	88fa      	ldrh	r2, [r7, #6]
 8003632:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800365c:	d908      	bls.n	8003670 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	e007      	b.n	8003680 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800367e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003688:	d10f      	bne.n	80036aa <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003698:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b4:	2b40      	cmp	r3, #64	@ 0x40
 80036b6:	d007      	beq.n	80036c8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036d0:	d875      	bhi.n	80037be <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80036d2:	e037      	b.n	8003744 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d117      	bne.n	8003712 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f103 020c 	add.w	r2, r3, #12
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	7812      	ldrb	r2, [r2, #0]
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003704:	b29b      	uxth	r3, r3
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003710:	e018      	b.n	8003744 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003712:	f7fe fa43 	bl	8001b9c <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d803      	bhi.n	800372a <HAL_SPI_Receive+0x194>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d102      	bne.n	8003730 <HAL_SPI_Receive+0x19a>
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d109      	bne.n	8003744 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e05c      	b.n	80037fe <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1c1      	bne.n	80036d4 <HAL_SPI_Receive+0x13e>
 8003750:	e03b      	b.n	80037ca <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	d115      	bne.n	800378c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68da      	ldr	r2, [r3, #12]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	b292      	uxth	r2, r2
 800376c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003772:	1c9a      	adds	r2, r3, #2
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800378a:	e018      	b.n	80037be <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800378c:	f7fe fa06 	bl	8001b9c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	683a      	ldr	r2, [r7, #0]
 8003798:	429a      	cmp	r2, r3
 800379a:	d803      	bhi.n	80037a4 <HAL_SPI_Receive+0x20e>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d102      	bne.n	80037aa <HAL_SPI_Receive+0x214>
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e01f      	b.n	80037fe <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1c3      	bne.n	8003752 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	6839      	ldr	r1, [r7, #0]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fb64 	bl	8003e9c <SPI_EndRxTransaction>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2220      	movs	r2, #32
 80037de:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 80037fc:	2300      	movs	r3, #0
  }
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b08a      	sub	sp, #40	@ 0x28
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	607a      	str	r2, [r7, #4]
 8003812:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003814:	2301      	movs	r3, #1
 8003816:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003818:	f7fe f9c0 	bl	8001b9c <HAL_GetTick>
 800381c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003824:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800382c:	887b      	ldrh	r3, [r7, #2]
 800382e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003830:	887b      	ldrh	r3, [r7, #2]
 8003832:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003834:	7ffb      	ldrb	r3, [r7, #31]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d00c      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x4e>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003840:	d106      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d102      	bne.n	8003850 <HAL_SPI_TransmitReceive+0x4a>
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	2b04      	cmp	r3, #4
 800384e:	d001      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003850:	2302      	movs	r3, #2
 8003852:	e1f3      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x60>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <HAL_SPI_TransmitReceive+0x60>
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e1e8      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003870:	2b01      	cmp	r3, #1
 8003872:	d101      	bne.n	8003878 <HAL_SPI_TransmitReceive+0x72>
 8003874:	2302      	movs	r3, #2
 8003876:	e1e1      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x436>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b04      	cmp	r3, #4
 800388a:	d003      	beq.n	8003894 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2205      	movs	r2, #5
 8003890:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	887a      	ldrh	r2, [r7, #2]
 80038a4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	887a      	ldrh	r2, [r7, #2]
 80038ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	887a      	ldrh	r2, [r7, #2]
 80038ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038d6:	d802      	bhi.n	80038de <HAL_SPI_TransmitReceive+0xd8>
 80038d8:	8abb      	ldrh	r3, [r7, #20]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d908      	bls.n	80038f0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	e007      	b.n	8003900 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80038fe:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390a:	2b40      	cmp	r3, #64	@ 0x40
 800390c:	d007      	beq.n	800391e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800391c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003926:	f240 8083 	bls.w	8003a30 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <HAL_SPI_TransmitReceive+0x132>
 8003932:	8afb      	ldrh	r3, [r7, #22]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d16f      	bne.n	8003a18 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393c:	881a      	ldrh	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800395c:	e05c      	b.n	8003a18 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b02      	cmp	r3, #2
 800396a:	d11b      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x19e>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d016      	beq.n	80039a4 <HAL_SPI_TransmitReceive+0x19e>
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	2b01      	cmp	r3, #1
 800397a:	d113      	bne.n	80039a4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003980:	881a      	ldrh	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800398c:	1c9a      	adds	r2, r3, #2
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003996:	b29b      	uxth	r3, r3
 8003998:	3b01      	subs	r3, #1
 800399a:	b29a      	uxth	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d11c      	bne.n	80039ec <HAL_SPI_TransmitReceive+0x1e6>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d016      	beq.n	80039ec <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c8:	b292      	uxth	r2, r2
 80039ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d0:	1c9a      	adds	r2, r3, #2
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039e8:	2301      	movs	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039ec:	f7fe f8d6 	bl	8001b9c <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d80d      	bhi.n	8003a18 <HAL_SPI_TransmitReceive+0x212>
 80039fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a02:	d009      	beq.n	8003a18 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e111      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d19d      	bne.n	800395e <HAL_SPI_TransmitReceive+0x158>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d197      	bne.n	800395e <HAL_SPI_TransmitReceive+0x158>
 8003a2e:	e0e5      	b.n	8003bfc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x23a>
 8003a38:	8afb      	ldrh	r3, [r7, #22]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f040 80d1 	bne.w	8003be2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d912      	bls.n	8003a70 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4e:	881a      	ldrh	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a5a:	1c9a      	adds	r2, r3, #2
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b02      	subs	r3, #2
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a6e:	e0b8      	b.n	8003be2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	330c      	adds	r3, #12
 8003a7a:	7812      	ldrb	r2, [r2, #0]
 8003a7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a96:	e0a4      	b.n	8003be2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d134      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x30a>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d02f      	beq.n	8003b10 <HAL_SPI_TransmitReceive+0x30a>
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d12c      	bne.n	8003b10 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d912      	bls.n	8003ae6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac4:	881a      	ldrh	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad0:	1c9a      	adds	r2, r3, #2
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b02      	subs	r3, #2
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ae4:	e012      	b.n	8003b0c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	7812      	ldrb	r2, [r2, #0]
 8003af2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d148      	bne.n	8003bb0 <HAL_SPI_TransmitReceive+0x3aa>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d042      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d923      	bls.n	8003b7e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68da      	ldr	r2, [r3, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b40:	b292      	uxth	r2, r2
 8003b42:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b48:	1c9a      	adds	r2, r3, #2
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	3b02      	subs	r3, #2
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d81f      	bhi.n	8003bac <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	e016      	b.n	8003bac <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f103 020c 	add.w	r2, r3, #12
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bac:	2301      	movs	r3, #1
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bb0:	f7fd fff4 	bl	8001b9c <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d803      	bhi.n	8003bc8 <HAL_SPI_TransmitReceive+0x3c2>
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc6:	d102      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x3c8>
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d109      	bne.n	8003be2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e02c      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f47f af55 	bne.w	8003a98 <HAL_SPI_TransmitReceive+0x292>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f47f af4e 	bne.w	8003a98 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bfc:	6a3a      	ldr	r2, [r7, #32]
 8003bfe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003c00:	68f8      	ldr	r0, [r7, #12]
 8003c02:	f000 f9a3 	bl	8003f4c <SPI_EndRxTxTransaction>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d008      	beq.n	8003c1e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e00e      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
  }
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3728      	adds	r7, #40	@ 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c52:	b2db      	uxtb	r3, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c70:	f7fd ff94 	bl	8001b9c <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4413      	add	r3, r2
 8003c7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c80:	f7fd ff8c 	bl	8001b9c <HAL_GetTick>
 8003c84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c86:	4b39      	ldr	r3, [pc, #228]	@ (8003d6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	015b      	lsls	r3, r3, #5
 8003c8c:	0d1b      	lsrs	r3, r3, #20
 8003c8e:	69fa      	ldr	r2, [r7, #28]
 8003c90:	fb02 f303 	mul.w	r3, r2, r3
 8003c94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c96:	e054      	b.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9e:	d050      	beq.n	8003d42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ca0:	f7fd ff7c 	bl	8001b9c <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	69fa      	ldr	r2, [r7, #28]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d902      	bls.n	8003cb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d13d      	bne.n	8003d32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cc4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cce:	d111      	bne.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd8:	d004      	beq.n	8003ce4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ce2:	d107      	bne.n	8003cf4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cf2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cfc:	d10f      	bne.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e017      	b.n	8003d62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	bf0c      	ite	eq
 8003d52:	2301      	moveq	r3, #1
 8003d54:	2300      	movne	r3, #0
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	461a      	mov	r2, r3
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d19b      	bne.n	8003c98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3720      	adds	r7, #32
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000000 	.word	0x20000000

08003d70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	@ 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003d82:	f7fd ff0b 	bl	8001b9c <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	4413      	add	r3, r2
 8003d90:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003d92:	f7fd ff03 	bl	8001b9c <HAL_GetTick>
 8003d96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	330c      	adds	r3, #12
 8003d9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003da0:	4b3d      	ldr	r3, [pc, #244]	@ (8003e98 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	00da      	lsls	r2, r3, #3
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	0d1b      	lsrs	r3, r3, #20
 8003db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003db8:	e060      	b.n	8003e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003dc0:	d107      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d104      	bne.n	8003dd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003dd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d050      	beq.n	8003e7c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003dda:	f7fd fedf 	bl	8001b9c <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d902      	bls.n	8003df0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d13d      	bne.n	8003e6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003dfe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e08:	d111      	bne.n	8003e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e12:	d004      	beq.n	8003e1e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e1c:	d107      	bne.n	8003e2e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e2c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e36:	d10f      	bne.n	8003e58 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e56:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e010      	b.n	8003e8e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	689a      	ldr	r2, [r3, #8]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	4013      	ands	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d196      	bne.n	8003dba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3728      	adds	r7, #40	@ 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000000 	.word	0x20000000

08003e9c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af02      	add	r7, sp, #8
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003eb0:	d111      	bne.n	8003ed6 <SPI_EndRxTransaction+0x3a>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eba:	d004      	beq.n	8003ec6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ec4:	d107      	bne.n	8003ed6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ed4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2200      	movs	r2, #0
 8003ede:	2180      	movs	r1, #128	@ 0x80
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff febd 	bl	8003c60 <SPI_WaitFlagStateUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef0:	f043 0220 	orr.w	r2, r3, #32
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	e023      	b.n	8003f44 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f04:	d11d      	bne.n	8003f42 <SPI_EndRxTransaction+0xa6>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f0e:	d004      	beq.n	8003f1a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f18:	d113      	bne.n	8003f42 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7ff ff22 	bl	8003d70 <SPI_WaitFifoStateUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d007      	beq.n	8003f42 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f36:	f043 0220 	orr.w	r2, r3, #32
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e000      	b.n	8003f44 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f7ff ff03 	bl	8003d70 <SPI_WaitFifoStateUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d007      	beq.n	8003f80 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e027      	b.n	8003fd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2200      	movs	r2, #0
 8003f88:	2180      	movs	r1, #128	@ 0x80
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f7ff fe68 	bl	8003c60 <SPI_WaitFlagStateUntilTimeout>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d007      	beq.n	8003fa6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e014      	b.n	8003fd0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff fedc 	bl	8003d70 <SPI_WaitFifoStateUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d007      	beq.n	8003fce <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fc2:	f043 0220 	orr.w	r2, r3, #32
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e000      	b.n	8003fd0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d101      	bne.n	8003fea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e042      	b.n	8004070 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fd fc51 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2224      	movs	r2, #36	@ 0x24
 8004006:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0201 	bic.w	r2, r2, #1
 8004018:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fb24 	bl	8004670 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f825 	bl	8004078 <UART_SetConfig>
 800402e:	4603      	mov	r3, r0
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e01b      	b.n	8004070 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004046:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004056:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0201 	orr.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fba3 	bl	80047b4 <UART_CheckIdleState>
 800406e:	4603      	mov	r3, r0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3708      	adds	r7, #8
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800407c:	b08c      	sub	sp, #48	@ 0x30
 800407e:	af00      	add	r7, sp, #0
 8004080:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004082:	2300      	movs	r3, #0
 8004084:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	431a      	orrs	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	4313      	orrs	r3, r2
 800409e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4baa      	ldr	r3, [pc, #680]	@ (8004350 <UART_SetConfig+0x2d8>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a9f      	ldr	r2, [pc, #636]	@ (8004354 <UART_SetConfig+0x2dc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040e0:	4313      	orrs	r3, r2
 80040e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80040ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004102:	f023 010f 	bic.w	r1, r3, #15
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a90      	ldr	r2, [pc, #576]	@ (8004358 <UART_SetConfig+0x2e0>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d125      	bne.n	8004168 <UART_SetConfig+0xf0>
 800411c:	4b8f      	ldr	r3, [pc, #572]	@ (800435c <UART_SetConfig+0x2e4>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b03      	cmp	r3, #3
 8004128:	d81a      	bhi.n	8004160 <UART_SetConfig+0xe8>
 800412a:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <UART_SetConfig+0xb8>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004141 	.word	0x08004141
 8004134:	08004151 	.word	0x08004151
 8004138:	08004149 	.word	0x08004149
 800413c:	08004159 	.word	0x08004159
 8004140:	2301      	movs	r3, #1
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004146:	e116      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004148:	2302      	movs	r3, #2
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800414e:	e112      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004150:	2304      	movs	r3, #4
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004156:	e10e      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004158:	2308      	movs	r3, #8
 800415a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800415e:	e10a      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004160:	2310      	movs	r3, #16
 8004162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004166:	e106      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a7c      	ldr	r2, [pc, #496]	@ (8004360 <UART_SetConfig+0x2e8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d138      	bne.n	80041e4 <UART_SetConfig+0x16c>
 8004172:	4b7a      	ldr	r3, [pc, #488]	@ (800435c <UART_SetConfig+0x2e4>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004178:	f003 030c 	and.w	r3, r3, #12
 800417c:	2b0c      	cmp	r3, #12
 800417e:	d82d      	bhi.n	80041dc <UART_SetConfig+0x164>
 8004180:	a201      	add	r2, pc, #4	@ (adr r2, 8004188 <UART_SetConfig+0x110>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041bd 	.word	0x080041bd
 800418c:	080041dd 	.word	0x080041dd
 8004190:	080041dd 	.word	0x080041dd
 8004194:	080041dd 	.word	0x080041dd
 8004198:	080041cd 	.word	0x080041cd
 800419c:	080041dd 	.word	0x080041dd
 80041a0:	080041dd 	.word	0x080041dd
 80041a4:	080041dd 	.word	0x080041dd
 80041a8:	080041c5 	.word	0x080041c5
 80041ac:	080041dd 	.word	0x080041dd
 80041b0:	080041dd 	.word	0x080041dd
 80041b4:	080041dd 	.word	0x080041dd
 80041b8:	080041d5 	.word	0x080041d5
 80041bc:	2300      	movs	r3, #0
 80041be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041c2:	e0d8      	b.n	8004376 <UART_SetConfig+0x2fe>
 80041c4:	2302      	movs	r3, #2
 80041c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041ca:	e0d4      	b.n	8004376 <UART_SetConfig+0x2fe>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041d2:	e0d0      	b.n	8004376 <UART_SetConfig+0x2fe>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041da:	e0cc      	b.n	8004376 <UART_SetConfig+0x2fe>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80041e2:	e0c8      	b.n	8004376 <UART_SetConfig+0x2fe>
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a5e      	ldr	r2, [pc, #376]	@ (8004364 <UART_SetConfig+0x2ec>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d125      	bne.n	800423a <UART_SetConfig+0x1c2>
 80041ee:	4b5b      	ldr	r3, [pc, #364]	@ (800435c <UART_SetConfig+0x2e4>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80041f8:	2b30      	cmp	r3, #48	@ 0x30
 80041fa:	d016      	beq.n	800422a <UART_SetConfig+0x1b2>
 80041fc:	2b30      	cmp	r3, #48	@ 0x30
 80041fe:	d818      	bhi.n	8004232 <UART_SetConfig+0x1ba>
 8004200:	2b20      	cmp	r3, #32
 8004202:	d00a      	beq.n	800421a <UART_SetConfig+0x1a2>
 8004204:	2b20      	cmp	r3, #32
 8004206:	d814      	bhi.n	8004232 <UART_SetConfig+0x1ba>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <UART_SetConfig+0x19a>
 800420c:	2b10      	cmp	r3, #16
 800420e:	d008      	beq.n	8004222 <UART_SetConfig+0x1aa>
 8004210:	e00f      	b.n	8004232 <UART_SetConfig+0x1ba>
 8004212:	2300      	movs	r3, #0
 8004214:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004218:	e0ad      	b.n	8004376 <UART_SetConfig+0x2fe>
 800421a:	2302      	movs	r3, #2
 800421c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004220:	e0a9      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004222:	2304      	movs	r3, #4
 8004224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004228:	e0a5      	b.n	8004376 <UART_SetConfig+0x2fe>
 800422a:	2308      	movs	r3, #8
 800422c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004230:	e0a1      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004232:	2310      	movs	r3, #16
 8004234:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004238:	e09d      	b.n	8004376 <UART_SetConfig+0x2fe>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a4a      	ldr	r2, [pc, #296]	@ (8004368 <UART_SetConfig+0x2f0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d125      	bne.n	8004290 <UART_SetConfig+0x218>
 8004244:	4b45      	ldr	r3, [pc, #276]	@ (800435c <UART_SetConfig+0x2e4>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800424e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004250:	d016      	beq.n	8004280 <UART_SetConfig+0x208>
 8004252:	2bc0      	cmp	r3, #192	@ 0xc0
 8004254:	d818      	bhi.n	8004288 <UART_SetConfig+0x210>
 8004256:	2b80      	cmp	r3, #128	@ 0x80
 8004258:	d00a      	beq.n	8004270 <UART_SetConfig+0x1f8>
 800425a:	2b80      	cmp	r3, #128	@ 0x80
 800425c:	d814      	bhi.n	8004288 <UART_SetConfig+0x210>
 800425e:	2b00      	cmp	r3, #0
 8004260:	d002      	beq.n	8004268 <UART_SetConfig+0x1f0>
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d008      	beq.n	8004278 <UART_SetConfig+0x200>
 8004266:	e00f      	b.n	8004288 <UART_SetConfig+0x210>
 8004268:	2300      	movs	r3, #0
 800426a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800426e:	e082      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004270:	2302      	movs	r3, #2
 8004272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004276:	e07e      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004278:	2304      	movs	r3, #4
 800427a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800427e:	e07a      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004280:	2308      	movs	r3, #8
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004286:	e076      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004288:	2310      	movs	r3, #16
 800428a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800428e:	e072      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a35      	ldr	r2, [pc, #212]	@ (800436c <UART_SetConfig+0x2f4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d12a      	bne.n	80042f0 <UART_SetConfig+0x278>
 800429a:	4b30      	ldr	r3, [pc, #192]	@ (800435c <UART_SetConfig+0x2e4>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042a4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042a8:	d01a      	beq.n	80042e0 <UART_SetConfig+0x268>
 80042aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ae:	d81b      	bhi.n	80042e8 <UART_SetConfig+0x270>
 80042b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042b4:	d00c      	beq.n	80042d0 <UART_SetConfig+0x258>
 80042b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042ba:	d815      	bhi.n	80042e8 <UART_SetConfig+0x270>
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <UART_SetConfig+0x250>
 80042c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c4:	d008      	beq.n	80042d8 <UART_SetConfig+0x260>
 80042c6:	e00f      	b.n	80042e8 <UART_SetConfig+0x270>
 80042c8:	2300      	movs	r3, #0
 80042ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ce:	e052      	b.n	8004376 <UART_SetConfig+0x2fe>
 80042d0:	2302      	movs	r3, #2
 80042d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042d6:	e04e      	b.n	8004376 <UART_SetConfig+0x2fe>
 80042d8:	2304      	movs	r3, #4
 80042da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042de:	e04a      	b.n	8004376 <UART_SetConfig+0x2fe>
 80042e0:	2308      	movs	r3, #8
 80042e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042e6:	e046      	b.n	8004376 <UART_SetConfig+0x2fe>
 80042e8:	2310      	movs	r3, #16
 80042ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80042ee:	e042      	b.n	8004376 <UART_SetConfig+0x2fe>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a17      	ldr	r2, [pc, #92]	@ (8004354 <UART_SetConfig+0x2dc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d13a      	bne.n	8004370 <UART_SetConfig+0x2f8>
 80042fa:	4b18      	ldr	r3, [pc, #96]	@ (800435c <UART_SetConfig+0x2e4>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004304:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004308:	d01a      	beq.n	8004340 <UART_SetConfig+0x2c8>
 800430a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800430e:	d81b      	bhi.n	8004348 <UART_SetConfig+0x2d0>
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004314:	d00c      	beq.n	8004330 <UART_SetConfig+0x2b8>
 8004316:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800431a:	d815      	bhi.n	8004348 <UART_SetConfig+0x2d0>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <UART_SetConfig+0x2b0>
 8004320:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004324:	d008      	beq.n	8004338 <UART_SetConfig+0x2c0>
 8004326:	e00f      	b.n	8004348 <UART_SetConfig+0x2d0>
 8004328:	2300      	movs	r3, #0
 800432a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800432e:	e022      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004330:	2302      	movs	r3, #2
 8004332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004336:	e01e      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004338:	2304      	movs	r3, #4
 800433a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800433e:	e01a      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004340:	2308      	movs	r3, #8
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004346:	e016      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004348:	2310      	movs	r3, #16
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800434e:	e012      	b.n	8004376 <UART_SetConfig+0x2fe>
 8004350:	cfff69f3 	.word	0xcfff69f3
 8004354:	40008000 	.word	0x40008000
 8004358:	40013800 	.word	0x40013800
 800435c:	40021000 	.word	0x40021000
 8004360:	40004400 	.word	0x40004400
 8004364:	40004800 	.word	0x40004800
 8004368:	40004c00 	.word	0x40004c00
 800436c:	40005000 	.word	0x40005000
 8004370:	2310      	movs	r3, #16
 8004372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4aae      	ldr	r2, [pc, #696]	@ (8004634 <UART_SetConfig+0x5bc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	f040 8097 	bne.w	80044b0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004386:	2b08      	cmp	r3, #8
 8004388:	d823      	bhi.n	80043d2 <UART_SetConfig+0x35a>
 800438a:	a201      	add	r2, pc, #4	@ (adr r2, 8004390 <UART_SetConfig+0x318>)
 800438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043d3 	.word	0x080043d3
 8004398:	080043bd 	.word	0x080043bd
 800439c:	080043d3 	.word	0x080043d3
 80043a0:	080043c3 	.word	0x080043c3
 80043a4:	080043d3 	.word	0x080043d3
 80043a8:	080043d3 	.word	0x080043d3
 80043ac:	080043d3 	.word	0x080043d3
 80043b0:	080043cb 	.word	0x080043cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b4:	f7fe fc0e 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 80043b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043ba:	e010      	b.n	80043de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043bc:	4b9e      	ldr	r3, [pc, #632]	@ (8004638 <UART_SetConfig+0x5c0>)
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043c0:	e00d      	b.n	80043de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c2:	f7fe fb99 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 80043c6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043c8:	e009      	b.n	80043de <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043d0:	e005      	b.n	80043de <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80043d2:	2300      	movs	r3, #0
 80043d4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80043dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8130 	beq.w	8004646 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ea:	4a94      	ldr	r2, [pc, #592]	@ (800463c <UART_SetConfig+0x5c4>)
 80043ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043f0:	461a      	mov	r2, r3
 80043f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	4413      	add	r3, r2
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	429a      	cmp	r2, r3
 8004408:	d305      	bcc.n	8004416 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	429a      	cmp	r2, r3
 8004414:	d903      	bls.n	800441e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800441c:	e113      	b.n	8004646 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	2200      	movs	r2, #0
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	60fa      	str	r2, [r7, #12]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442a:	4a84      	ldr	r2, [pc, #528]	@ (800463c <UART_SetConfig+0x5c4>)
 800442c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004430:	b29b      	uxth	r3, r3
 8004432:	2200      	movs	r2, #0
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004440:	f7fc fb34 	bl	8000aac <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	020b      	lsls	r3, r1, #8
 8004456:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800445a:	0202      	lsls	r2, r0, #8
 800445c:	6979      	ldr	r1, [r7, #20]
 800445e:	6849      	ldr	r1, [r1, #4]
 8004460:	0849      	lsrs	r1, r1, #1
 8004462:	2000      	movs	r0, #0
 8004464:	460c      	mov	r4, r1
 8004466:	4605      	mov	r5, r0
 8004468:	eb12 0804 	adds.w	r8, r2, r4
 800446c:	eb43 0905 	adc.w	r9, r3, r5
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	469a      	mov	sl, r3
 8004478:	4693      	mov	fp, r2
 800447a:	4652      	mov	r2, sl
 800447c:	465b      	mov	r3, fp
 800447e:	4640      	mov	r0, r8
 8004480:	4649      	mov	r1, r9
 8004482:	f7fc fb13 	bl	8000aac <__aeabi_uldivmod>
 8004486:	4602      	mov	r2, r0
 8004488:	460b      	mov	r3, r1
 800448a:	4613      	mov	r3, r2
 800448c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800448e:	6a3b      	ldr	r3, [r7, #32]
 8004490:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004494:	d308      	bcc.n	80044a8 <UART_SetConfig+0x430>
 8004496:	6a3b      	ldr	r3, [r7, #32]
 8004498:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800449c:	d204      	bcs.n	80044a8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6a3a      	ldr	r2, [r7, #32]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	e0ce      	b.n	8004646 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80044ae:	e0ca      	b.n	8004646 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044b8:	d166      	bne.n	8004588 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80044ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80044be:	2b08      	cmp	r3, #8
 80044c0:	d827      	bhi.n	8004512 <UART_SetConfig+0x49a>
 80044c2:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <UART_SetConfig+0x450>)
 80044c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c8:	080044ed 	.word	0x080044ed
 80044cc:	080044f5 	.word	0x080044f5
 80044d0:	080044fd 	.word	0x080044fd
 80044d4:	08004513 	.word	0x08004513
 80044d8:	08004503 	.word	0x08004503
 80044dc:	08004513 	.word	0x08004513
 80044e0:	08004513 	.word	0x08004513
 80044e4:	08004513 	.word	0x08004513
 80044e8:	0800450b 	.word	0x0800450b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ec:	f7fe fb72 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 80044f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044f2:	e014      	b.n	800451e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044f4:	f7fe fb84 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 80044f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80044fa:	e010      	b.n	800451e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004638 <UART_SetConfig+0x5c0>)
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004500:	e00d      	b.n	800451e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004502:	f7fe faf9 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 8004506:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004508:	e009      	b.n	800451e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800450a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004510:	e005      	b.n	800451e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800451c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8090 	beq.w	8004646 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	4a44      	ldr	r2, [pc, #272]	@ (800463c <UART_SetConfig+0x5c4>)
 800452c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004530:	461a      	mov	r2, r3
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	fbb3 f3f2 	udiv	r3, r3, r2
 8004538:	005a      	lsls	r2, r3, #1
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	441a      	add	r2, r3
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	fbb2 f3f3 	udiv	r3, r2, r3
 800454a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	2b0f      	cmp	r3, #15
 8004550:	d916      	bls.n	8004580 <UART_SetConfig+0x508>
 8004552:	6a3b      	ldr	r3, [r7, #32]
 8004554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004558:	d212      	bcs.n	8004580 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	b29b      	uxth	r3, r3
 800455e:	f023 030f 	bic.w	r3, r3, #15
 8004562:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	b29b      	uxth	r3, r3
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	b29a      	uxth	r2, r3
 8004570:	8bfb      	ldrh	r3, [r7, #30]
 8004572:	4313      	orrs	r3, r2
 8004574:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	8bfa      	ldrh	r2, [r7, #30]
 800457c:	60da      	str	r2, [r3, #12]
 800457e:	e062      	b.n	8004646 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004586:	e05e      	b.n	8004646 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004588:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800458c:	2b08      	cmp	r3, #8
 800458e:	d828      	bhi.n	80045e2 <UART_SetConfig+0x56a>
 8004590:	a201      	add	r2, pc, #4	@ (adr r2, 8004598 <UART_SetConfig+0x520>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	080045e3 	.word	0x080045e3
 80045a8:	080045d3 	.word	0x080045d3
 80045ac:	080045e3 	.word	0x080045e3
 80045b0:	080045e3 	.word	0x080045e3
 80045b4:	080045e3 	.word	0x080045e3
 80045b8:	080045db 	.word	0x080045db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045bc:	f7fe fb0a 	bl	8002bd4 <HAL_RCC_GetPCLK1Freq>
 80045c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045c2:	e014      	b.n	80045ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045c4:	f7fe fb1c 	bl	8002c00 <HAL_RCC_GetPCLK2Freq>
 80045c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045ca:	e010      	b.n	80045ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004638 <UART_SetConfig+0x5c0>)
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045d0:	e00d      	b.n	80045ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d2:	f7fe fa91 	bl	8002af8 <HAL_RCC_GetSysClockFreq>
 80045d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80045d8:	e009      	b.n	80045ee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80045e0:	e005      	b.n	80045ee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80045e2:	2300      	movs	r3, #0
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80045ec:	bf00      	nop
    }

    if (pclk != 0U)
 80045ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d028      	beq.n	8004646 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f8:	4a10      	ldr	r2, [pc, #64]	@ (800463c <UART_SetConfig+0x5c4>)
 80045fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045fe:	461a      	mov	r2, r3
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	fbb3 f2f2 	udiv	r2, r3, r2
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	441a      	add	r2, r3
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	fbb2 f3f3 	udiv	r3, r2, r3
 8004616:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b0f      	cmp	r3, #15
 800461c:	d910      	bls.n	8004640 <UART_SetConfig+0x5c8>
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004624:	d20c      	bcs.n	8004640 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	b29a      	uxth	r2, r3
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	e009      	b.n	8004646 <UART_SetConfig+0x5ce>
 8004632:	bf00      	nop
 8004634:	40008000 	.word	0x40008000
 8004638:	00f42400 	.word	0x00f42400
 800463c:	08005690 	.word	0x08005690
      }
      else
      {
        ret = HAL_ERROR;
 8004640:	2301      	movs	r3, #1
 8004642:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	2201      	movs	r2, #1
 800464a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2201      	movs	r2, #1
 8004652:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2200      	movs	r2, #0
 800465a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	2200      	movs	r2, #0
 8004660:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004662:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004666:	4618      	mov	r0, r3
 8004668:	3730      	adds	r7, #48	@ 0x30
 800466a:	46bd      	mov	sp, r7
 800466c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004670 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	430a      	orrs	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	f003 0301 	and.w	r3, r3, #1
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00a      	beq.n	80046bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00a      	beq.n	8004722 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01a      	beq.n	8004786 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	430a      	orrs	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800476e:	d10a      	bne.n	8004786 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	430a      	orrs	r2, r1
 8004784:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00a      	beq.n	80047a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	430a      	orrs	r2, r1
 80047a6:	605a      	str	r2, [r3, #4]
  }
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b098      	sub	sp, #96	@ 0x60
 80047b8:	af02      	add	r7, sp, #8
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047c4:	f7fd f9ea 	bl	8001b9c <HAL_GetTick>
 80047c8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	d12f      	bne.n	8004838 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047d8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047e0:	2200      	movs	r2, #0
 80047e2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f88e 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d022      	beq.n	8004838 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004802:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004806:	653b      	str	r3, [r7, #80]	@ 0x50
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004810:	647b      	str	r3, [r7, #68]	@ 0x44
 8004812:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004816:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800481e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e6      	bne.n	80047f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2220      	movs	r2, #32
 8004828:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004834:	2303      	movs	r3, #3
 8004836:	e063      	b.n	8004900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b04      	cmp	r3, #4
 8004844:	d149      	bne.n	80048da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004846:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800484a:	9300      	str	r3, [sp, #0]
 800484c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800484e:	2200      	movs	r2, #0
 8004850:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f000 f857 	bl	8004908 <UART_WaitOnFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d03c      	beq.n	80048da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	623b      	str	r3, [r7, #32]
   return(result);
 800486e:	6a3b      	ldr	r3, [r7, #32]
 8004870:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004874:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800487e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004880:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004884:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e6      	bne.n	8004860 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3308      	adds	r3, #8
 8004898:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f023 0301 	bic.w	r3, r3, #1
 80048a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3308      	adds	r3, #8
 80048b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048b2:	61fa      	str	r2, [r7, #28]
 80048b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	69b9      	ldr	r1, [r7, #24]
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	617b      	str	r3, [r7, #20]
   return(result);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e5      	bne.n	8004892 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e012      	b.n	8004900 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3758      	adds	r7, #88	@ 0x58
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	603b      	str	r3, [r7, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004918:	e04f      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004920:	d04b      	beq.n	80049ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004922:	f7fd f93b 	bl	8001b9c <HAL_GetTick>
 8004926:	4602      	mov	r2, r0
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	1ad3      	subs	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	429a      	cmp	r2, r3
 8004930:	d302      	bcc.n	8004938 <UART_WaitOnFlagUntilTimeout+0x30>
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e04e      	b.n	80049da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d037      	beq.n	80049ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b80      	cmp	r3, #128	@ 0x80
 800494e:	d034      	beq.n	80049ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b40      	cmp	r3, #64	@ 0x40
 8004954:	d031      	beq.n	80049ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	69db      	ldr	r3, [r3, #28]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b08      	cmp	r3, #8
 8004962:	d110      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2208      	movs	r2, #8
 800496a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f838 	bl	80049e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2208      	movs	r2, #8
 8004976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e029      	b.n	80049da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004990:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004994:	d111      	bne.n	80049ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800499e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f81e 	bl	80049e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2220      	movs	r2, #32
 80049aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e00f      	b.n	80049da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	69da      	ldr	r2, [r3, #28]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4013      	ands	r3, r2
 80049c4:	68ba      	ldr	r2, [r7, #8]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	bf0c      	ite	eq
 80049ca:	2301      	moveq	r3, #1
 80049cc:	2300      	movne	r3, #0
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d0a0      	beq.n	800491a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049e2:	b480      	push	{r7}
 80049e4:	b095      	sub	sp, #84	@ 0x54
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a08:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a0a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a0e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e6      	bne.n	80049ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3308      	adds	r3, #8
 8004a22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	e853 3f00 	ldrex	r3, [r3]
 8004a2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a32:	f023 0301 	bic.w	r3, r3, #1
 8004a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3308      	adds	r3, #8
 8004a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a48:	e841 2300 	strex	r3, r2, [r1]
 8004a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d1e3      	bne.n	8004a1c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d118      	bne.n	8004a8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a7a:	61bb      	str	r3, [r7, #24]
 8004a7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6979      	ldr	r1, [r7, #20]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	613b      	str	r3, [r7, #16]
   return(result);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e6      	bne.n	8004a5c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004aa2:	bf00      	nop
 8004aa4:	3754      	adds	r7, #84	@ 0x54
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e027      	b.n	8004b14 <HAL_UARTEx_DisableFifoMode+0x66>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2224      	movs	r2, #36	@ 0x24
 8004ad0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004af2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2220      	movs	r2, #32
 8004b06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b12:	2300      	movs	r3, #0
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3714      	adds	r7, #20
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e02d      	b.n	8004b94 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2224      	movs	r2, #36	@ 0x24
 8004b44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 f84f 	bl	8004c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2220      	movs	r2, #32
 8004b86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3710      	adds	r7, #16
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}

08004b9c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e02d      	b.n	8004c10 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2224      	movs	r2, #36	@ 0x24
 8004bc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0201 	bic.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f811 	bl	8004c18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2220      	movs	r2, #32
 8004c02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d108      	bne.n	8004c3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c38:	e031      	b.n	8004c9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c3e:	2308      	movs	r3, #8
 8004c40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	0e5b      	lsrs	r3, r3, #25
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	0f5b      	lsrs	r3, r3, #29
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c62:	7bbb      	ldrb	r3, [r7, #14]
 8004c64:	7b3a      	ldrb	r2, [r7, #12]
 8004c66:	4911      	ldr	r1, [pc, #68]	@ (8004cac <UARTEx_SetNbDataToProcess+0x94>)
 8004c68:	5c8a      	ldrb	r2, [r1, r2]
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c6e:	7b3a      	ldrb	r2, [r7, #12]
 8004c70:	490f      	ldr	r1, [pc, #60]	@ (8004cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8004c72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c74:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	7b7a      	ldrb	r2, [r7, #13]
 8004c84:	4909      	ldr	r1, [pc, #36]	@ (8004cac <UARTEx_SetNbDataToProcess+0x94>)
 8004c86:	5c8a      	ldrb	r2, [r1, r2]
 8004c88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c8c:	7b7a      	ldrb	r2, [r7, #13]
 8004c8e:	4908      	ldr	r1, [pc, #32]	@ (8004cb0 <UARTEx_SetNbDataToProcess+0x98>)
 8004c90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c92:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004c9e:	bf00      	nop
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	080056a8 	.word	0x080056a8
 8004cb0:	080056b0 	.word	0x080056b0

08004cb4 <siprintf>:
 8004cb4:	b40e      	push	{r1, r2, r3}
 8004cb6:	b500      	push	{lr}
 8004cb8:	b09c      	sub	sp, #112	@ 0x70
 8004cba:	ab1d      	add	r3, sp, #116	@ 0x74
 8004cbc:	9002      	str	r0, [sp, #8]
 8004cbe:	9006      	str	r0, [sp, #24]
 8004cc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004cc4:	4809      	ldr	r0, [pc, #36]	@ (8004cec <siprintf+0x38>)
 8004cc6:	9107      	str	r1, [sp, #28]
 8004cc8:	9104      	str	r1, [sp, #16]
 8004cca:	4909      	ldr	r1, [pc, #36]	@ (8004cf0 <siprintf+0x3c>)
 8004ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cd0:	9105      	str	r1, [sp, #20]
 8004cd2:	6800      	ldr	r0, [r0, #0]
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	a902      	add	r1, sp, #8
 8004cd8:	f000 f9a2 	bl	8005020 <_svfiprintf_r>
 8004cdc:	9b02      	ldr	r3, [sp, #8]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	b01c      	add	sp, #112	@ 0x70
 8004ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ce8:	b003      	add	sp, #12
 8004cea:	4770      	bx	lr
 8004cec:	2000000c 	.word	0x2000000c
 8004cf0:	ffff0208 	.word	0xffff0208

08004cf4 <memset>:
 8004cf4:	4402      	add	r2, r0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d100      	bne.n	8004cfe <memset+0xa>
 8004cfc:	4770      	bx	lr
 8004cfe:	f803 1b01 	strb.w	r1, [r3], #1
 8004d02:	e7f9      	b.n	8004cf8 <memset+0x4>

08004d04 <__errno>:
 8004d04:	4b01      	ldr	r3, [pc, #4]	@ (8004d0c <__errno+0x8>)
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	2000000c 	.word	0x2000000c

08004d10 <__libc_init_array>:
 8004d10:	b570      	push	{r4, r5, r6, lr}
 8004d12:	4d0d      	ldr	r5, [pc, #52]	@ (8004d48 <__libc_init_array+0x38>)
 8004d14:	4c0d      	ldr	r4, [pc, #52]	@ (8004d4c <__libc_init_array+0x3c>)
 8004d16:	1b64      	subs	r4, r4, r5
 8004d18:	10a4      	asrs	r4, r4, #2
 8004d1a:	2600      	movs	r6, #0
 8004d1c:	42a6      	cmp	r6, r4
 8004d1e:	d109      	bne.n	8004d34 <__libc_init_array+0x24>
 8004d20:	4d0b      	ldr	r5, [pc, #44]	@ (8004d50 <__libc_init_array+0x40>)
 8004d22:	4c0c      	ldr	r4, [pc, #48]	@ (8004d54 <__libc_init_array+0x44>)
 8004d24:	f000 fc66 	bl	80055f4 <_init>
 8004d28:	1b64      	subs	r4, r4, r5
 8004d2a:	10a4      	asrs	r4, r4, #2
 8004d2c:	2600      	movs	r6, #0
 8004d2e:	42a6      	cmp	r6, r4
 8004d30:	d105      	bne.n	8004d3e <__libc_init_array+0x2e>
 8004d32:	bd70      	pop	{r4, r5, r6, pc}
 8004d34:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d38:	4798      	blx	r3
 8004d3a:	3601      	adds	r6, #1
 8004d3c:	e7ee      	b.n	8004d1c <__libc_init_array+0xc>
 8004d3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d42:	4798      	blx	r3
 8004d44:	3601      	adds	r6, #1
 8004d46:	e7f2      	b.n	8004d2e <__libc_init_array+0x1e>
 8004d48:	080056f4 	.word	0x080056f4
 8004d4c:	080056f4 	.word	0x080056f4
 8004d50:	080056f4 	.word	0x080056f4
 8004d54:	080056f8 	.word	0x080056f8

08004d58 <__retarget_lock_acquire_recursive>:
 8004d58:	4770      	bx	lr

08004d5a <__retarget_lock_release_recursive>:
 8004d5a:	4770      	bx	lr

08004d5c <memcpy>:
 8004d5c:	440a      	add	r2, r1
 8004d5e:	4291      	cmp	r1, r2
 8004d60:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d64:	d100      	bne.n	8004d68 <memcpy+0xc>
 8004d66:	4770      	bx	lr
 8004d68:	b510      	push	{r4, lr}
 8004d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d72:	4291      	cmp	r1, r2
 8004d74:	d1f9      	bne.n	8004d6a <memcpy+0xe>
 8004d76:	bd10      	pop	{r4, pc}

08004d78 <_free_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	d041      	beq.n	8004e04 <_free_r+0x8c>
 8004d80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d84:	1f0c      	subs	r4, r1, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	bfb8      	it	lt
 8004d8a:	18e4      	addlt	r4, r4, r3
 8004d8c:	f000 f8e0 	bl	8004f50 <__malloc_lock>
 8004d90:	4a1d      	ldr	r2, [pc, #116]	@ (8004e08 <_free_r+0x90>)
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	b933      	cbnz	r3, 8004da4 <_free_r+0x2c>
 8004d96:	6063      	str	r3, [r4, #4]
 8004d98:	6014      	str	r4, [r2, #0]
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004da0:	f000 b8dc 	b.w	8004f5c <__malloc_unlock>
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	d908      	bls.n	8004dba <_free_r+0x42>
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	1821      	adds	r1, r4, r0
 8004dac:	428b      	cmp	r3, r1
 8004dae:	bf01      	itttt	eq
 8004db0:	6819      	ldreq	r1, [r3, #0]
 8004db2:	685b      	ldreq	r3, [r3, #4]
 8004db4:	1809      	addeq	r1, r1, r0
 8004db6:	6021      	streq	r1, [r4, #0]
 8004db8:	e7ed      	b.n	8004d96 <_free_r+0x1e>
 8004dba:	461a      	mov	r2, r3
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	b10b      	cbz	r3, 8004dc4 <_free_r+0x4c>
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d9fa      	bls.n	8004dba <_free_r+0x42>
 8004dc4:	6811      	ldr	r1, [r2, #0]
 8004dc6:	1850      	adds	r0, r2, r1
 8004dc8:	42a0      	cmp	r0, r4
 8004dca:	d10b      	bne.n	8004de4 <_free_r+0x6c>
 8004dcc:	6820      	ldr	r0, [r4, #0]
 8004dce:	4401      	add	r1, r0
 8004dd0:	1850      	adds	r0, r2, r1
 8004dd2:	4283      	cmp	r3, r0
 8004dd4:	6011      	str	r1, [r2, #0]
 8004dd6:	d1e0      	bne.n	8004d9a <_free_r+0x22>
 8004dd8:	6818      	ldr	r0, [r3, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	6053      	str	r3, [r2, #4]
 8004dde:	4408      	add	r0, r1
 8004de0:	6010      	str	r0, [r2, #0]
 8004de2:	e7da      	b.n	8004d9a <_free_r+0x22>
 8004de4:	d902      	bls.n	8004dec <_free_r+0x74>
 8004de6:	230c      	movs	r3, #12
 8004de8:	602b      	str	r3, [r5, #0]
 8004dea:	e7d6      	b.n	8004d9a <_free_r+0x22>
 8004dec:	6820      	ldr	r0, [r4, #0]
 8004dee:	1821      	adds	r1, r4, r0
 8004df0:	428b      	cmp	r3, r1
 8004df2:	bf04      	itt	eq
 8004df4:	6819      	ldreq	r1, [r3, #0]
 8004df6:	685b      	ldreq	r3, [r3, #4]
 8004df8:	6063      	str	r3, [r4, #4]
 8004dfa:	bf04      	itt	eq
 8004dfc:	1809      	addeq	r1, r1, r0
 8004dfe:	6021      	streq	r1, [r4, #0]
 8004e00:	6054      	str	r4, [r2, #4]
 8004e02:	e7ca      	b.n	8004d9a <_free_r+0x22>
 8004e04:	bd38      	pop	{r3, r4, r5, pc}
 8004e06:	bf00      	nop
 8004e08:	20000368 	.word	0x20000368

08004e0c <sbrk_aligned>:
 8004e0c:	b570      	push	{r4, r5, r6, lr}
 8004e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004e4c <sbrk_aligned+0x40>)
 8004e10:	460c      	mov	r4, r1
 8004e12:	6831      	ldr	r1, [r6, #0]
 8004e14:	4605      	mov	r5, r0
 8004e16:	b911      	cbnz	r1, 8004e1e <sbrk_aligned+0x12>
 8004e18:	f000 fba6 	bl	8005568 <_sbrk_r>
 8004e1c:	6030      	str	r0, [r6, #0]
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4628      	mov	r0, r5
 8004e22:	f000 fba1 	bl	8005568 <_sbrk_r>
 8004e26:	1c43      	adds	r3, r0, #1
 8004e28:	d103      	bne.n	8004e32 <sbrk_aligned+0x26>
 8004e2a:	f04f 34ff 	mov.w	r4, #4294967295
 8004e2e:	4620      	mov	r0, r4
 8004e30:	bd70      	pop	{r4, r5, r6, pc}
 8004e32:	1cc4      	adds	r4, r0, #3
 8004e34:	f024 0403 	bic.w	r4, r4, #3
 8004e38:	42a0      	cmp	r0, r4
 8004e3a:	d0f8      	beq.n	8004e2e <sbrk_aligned+0x22>
 8004e3c:	1a21      	subs	r1, r4, r0
 8004e3e:	4628      	mov	r0, r5
 8004e40:	f000 fb92 	bl	8005568 <_sbrk_r>
 8004e44:	3001      	adds	r0, #1
 8004e46:	d1f2      	bne.n	8004e2e <sbrk_aligned+0x22>
 8004e48:	e7ef      	b.n	8004e2a <sbrk_aligned+0x1e>
 8004e4a:	bf00      	nop
 8004e4c:	20000364 	.word	0x20000364

08004e50 <_malloc_r>:
 8004e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e54:	1ccd      	adds	r5, r1, #3
 8004e56:	f025 0503 	bic.w	r5, r5, #3
 8004e5a:	3508      	adds	r5, #8
 8004e5c:	2d0c      	cmp	r5, #12
 8004e5e:	bf38      	it	cc
 8004e60:	250c      	movcc	r5, #12
 8004e62:	2d00      	cmp	r5, #0
 8004e64:	4606      	mov	r6, r0
 8004e66:	db01      	blt.n	8004e6c <_malloc_r+0x1c>
 8004e68:	42a9      	cmp	r1, r5
 8004e6a:	d904      	bls.n	8004e76 <_malloc_r+0x26>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	6033      	str	r3, [r6, #0]
 8004e70:	2000      	movs	r0, #0
 8004e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004f4c <_malloc_r+0xfc>
 8004e7a:	f000 f869 	bl	8004f50 <__malloc_lock>
 8004e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004e82:	461c      	mov	r4, r3
 8004e84:	bb44      	cbnz	r4, 8004ed8 <_malloc_r+0x88>
 8004e86:	4629      	mov	r1, r5
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f7ff ffbf 	bl	8004e0c <sbrk_aligned>
 8004e8e:	1c43      	adds	r3, r0, #1
 8004e90:	4604      	mov	r4, r0
 8004e92:	d158      	bne.n	8004f46 <_malloc_r+0xf6>
 8004e94:	f8d8 4000 	ldr.w	r4, [r8]
 8004e98:	4627      	mov	r7, r4
 8004e9a:	2f00      	cmp	r7, #0
 8004e9c:	d143      	bne.n	8004f26 <_malloc_r+0xd6>
 8004e9e:	2c00      	cmp	r4, #0
 8004ea0:	d04b      	beq.n	8004f3a <_malloc_r+0xea>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	4639      	mov	r1, r7
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	eb04 0903 	add.w	r9, r4, r3
 8004eac:	f000 fb5c 	bl	8005568 <_sbrk_r>
 8004eb0:	4581      	cmp	r9, r0
 8004eb2:	d142      	bne.n	8004f3a <_malloc_r+0xea>
 8004eb4:	6821      	ldr	r1, [r4, #0]
 8004eb6:	1a6d      	subs	r5, r5, r1
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7ff ffa6 	bl	8004e0c <sbrk_aligned>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d03a      	beq.n	8004f3a <_malloc_r+0xea>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	442b      	add	r3, r5
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	f8d8 3000 	ldr.w	r3, [r8]
 8004ece:	685a      	ldr	r2, [r3, #4]
 8004ed0:	bb62      	cbnz	r2, 8004f2c <_malloc_r+0xdc>
 8004ed2:	f8c8 7000 	str.w	r7, [r8]
 8004ed6:	e00f      	b.n	8004ef8 <_malloc_r+0xa8>
 8004ed8:	6822      	ldr	r2, [r4, #0]
 8004eda:	1b52      	subs	r2, r2, r5
 8004edc:	d420      	bmi.n	8004f20 <_malloc_r+0xd0>
 8004ede:	2a0b      	cmp	r2, #11
 8004ee0:	d917      	bls.n	8004f12 <_malloc_r+0xc2>
 8004ee2:	1961      	adds	r1, r4, r5
 8004ee4:	42a3      	cmp	r3, r4
 8004ee6:	6025      	str	r5, [r4, #0]
 8004ee8:	bf18      	it	ne
 8004eea:	6059      	strne	r1, [r3, #4]
 8004eec:	6863      	ldr	r3, [r4, #4]
 8004eee:	bf08      	it	eq
 8004ef0:	f8c8 1000 	streq.w	r1, [r8]
 8004ef4:	5162      	str	r2, [r4, r5]
 8004ef6:	604b      	str	r3, [r1, #4]
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f000 f82f 	bl	8004f5c <__malloc_unlock>
 8004efe:	f104 000b 	add.w	r0, r4, #11
 8004f02:	1d23      	adds	r3, r4, #4
 8004f04:	f020 0007 	bic.w	r0, r0, #7
 8004f08:	1ac2      	subs	r2, r0, r3
 8004f0a:	bf1c      	itt	ne
 8004f0c:	1a1b      	subne	r3, r3, r0
 8004f0e:	50a3      	strne	r3, [r4, r2]
 8004f10:	e7af      	b.n	8004e72 <_malloc_r+0x22>
 8004f12:	6862      	ldr	r2, [r4, #4]
 8004f14:	42a3      	cmp	r3, r4
 8004f16:	bf0c      	ite	eq
 8004f18:	f8c8 2000 	streq.w	r2, [r8]
 8004f1c:	605a      	strne	r2, [r3, #4]
 8004f1e:	e7eb      	b.n	8004ef8 <_malloc_r+0xa8>
 8004f20:	4623      	mov	r3, r4
 8004f22:	6864      	ldr	r4, [r4, #4]
 8004f24:	e7ae      	b.n	8004e84 <_malloc_r+0x34>
 8004f26:	463c      	mov	r4, r7
 8004f28:	687f      	ldr	r7, [r7, #4]
 8004f2a:	e7b6      	b.n	8004e9a <_malloc_r+0x4a>
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	42a3      	cmp	r3, r4
 8004f32:	d1fb      	bne.n	8004f2c <_malloc_r+0xdc>
 8004f34:	2300      	movs	r3, #0
 8004f36:	6053      	str	r3, [r2, #4]
 8004f38:	e7de      	b.n	8004ef8 <_malloc_r+0xa8>
 8004f3a:	230c      	movs	r3, #12
 8004f3c:	6033      	str	r3, [r6, #0]
 8004f3e:	4630      	mov	r0, r6
 8004f40:	f000 f80c 	bl	8004f5c <__malloc_unlock>
 8004f44:	e794      	b.n	8004e70 <_malloc_r+0x20>
 8004f46:	6005      	str	r5, [r0, #0]
 8004f48:	e7d6      	b.n	8004ef8 <_malloc_r+0xa8>
 8004f4a:	bf00      	nop
 8004f4c:	20000368 	.word	0x20000368

08004f50 <__malloc_lock>:
 8004f50:	4801      	ldr	r0, [pc, #4]	@ (8004f58 <__malloc_lock+0x8>)
 8004f52:	f7ff bf01 	b.w	8004d58 <__retarget_lock_acquire_recursive>
 8004f56:	bf00      	nop
 8004f58:	20000360 	.word	0x20000360

08004f5c <__malloc_unlock>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	@ (8004f64 <__malloc_unlock+0x8>)
 8004f5e:	f7ff befc 	b.w	8004d5a <__retarget_lock_release_recursive>
 8004f62:	bf00      	nop
 8004f64:	20000360 	.word	0x20000360

08004f68 <__ssputs_r>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	688e      	ldr	r6, [r1, #8]
 8004f6e:	461f      	mov	r7, r3
 8004f70:	42be      	cmp	r6, r7
 8004f72:	680b      	ldr	r3, [r1, #0]
 8004f74:	4682      	mov	sl, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	4690      	mov	r8, r2
 8004f7a:	d82d      	bhi.n	8004fd8 <__ssputs_r+0x70>
 8004f7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004f84:	d026      	beq.n	8004fd4 <__ssputs_r+0x6c>
 8004f86:	6965      	ldr	r5, [r4, #20]
 8004f88:	6909      	ldr	r1, [r1, #16]
 8004f8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f8e:	eba3 0901 	sub.w	r9, r3, r1
 8004f92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f96:	1c7b      	adds	r3, r7, #1
 8004f98:	444b      	add	r3, r9
 8004f9a:	106d      	asrs	r5, r5, #1
 8004f9c:	429d      	cmp	r5, r3
 8004f9e:	bf38      	it	cc
 8004fa0:	461d      	movcc	r5, r3
 8004fa2:	0553      	lsls	r3, r2, #21
 8004fa4:	d527      	bpl.n	8004ff6 <__ssputs_r+0x8e>
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f7ff ff52 	bl	8004e50 <_malloc_r>
 8004fac:	4606      	mov	r6, r0
 8004fae:	b360      	cbz	r0, 800500a <__ssputs_r+0xa2>
 8004fb0:	6921      	ldr	r1, [r4, #16]
 8004fb2:	464a      	mov	r2, r9
 8004fb4:	f7ff fed2 	bl	8004d5c <memcpy>
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc2:	81a3      	strh	r3, [r4, #12]
 8004fc4:	6126      	str	r6, [r4, #16]
 8004fc6:	6165      	str	r5, [r4, #20]
 8004fc8:	444e      	add	r6, r9
 8004fca:	eba5 0509 	sub.w	r5, r5, r9
 8004fce:	6026      	str	r6, [r4, #0]
 8004fd0:	60a5      	str	r5, [r4, #8]
 8004fd2:	463e      	mov	r6, r7
 8004fd4:	42be      	cmp	r6, r7
 8004fd6:	d900      	bls.n	8004fda <__ssputs_r+0x72>
 8004fd8:	463e      	mov	r6, r7
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	4632      	mov	r2, r6
 8004fde:	4641      	mov	r1, r8
 8004fe0:	f000 faa8 	bl	8005534 <memmove>
 8004fe4:	68a3      	ldr	r3, [r4, #8]
 8004fe6:	1b9b      	subs	r3, r3, r6
 8004fe8:	60a3      	str	r3, [r4, #8]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	4433      	add	r3, r6
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff6:	462a      	mov	r2, r5
 8004ff8:	f000 fac6 	bl	8005588 <_realloc_r>
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d1e0      	bne.n	8004fc4 <__ssputs_r+0x5c>
 8005002:	6921      	ldr	r1, [r4, #16]
 8005004:	4650      	mov	r0, sl
 8005006:	f7ff feb7 	bl	8004d78 <_free_r>
 800500a:	230c      	movs	r3, #12
 800500c:	f8ca 3000 	str.w	r3, [sl]
 8005010:	89a3      	ldrh	r3, [r4, #12]
 8005012:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	f04f 30ff 	mov.w	r0, #4294967295
 800501c:	e7e9      	b.n	8004ff2 <__ssputs_r+0x8a>
	...

08005020 <_svfiprintf_r>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	4698      	mov	r8, r3
 8005026:	898b      	ldrh	r3, [r1, #12]
 8005028:	061b      	lsls	r3, r3, #24
 800502a:	b09d      	sub	sp, #116	@ 0x74
 800502c:	4607      	mov	r7, r0
 800502e:	460d      	mov	r5, r1
 8005030:	4614      	mov	r4, r2
 8005032:	d510      	bpl.n	8005056 <_svfiprintf_r+0x36>
 8005034:	690b      	ldr	r3, [r1, #16]
 8005036:	b973      	cbnz	r3, 8005056 <_svfiprintf_r+0x36>
 8005038:	2140      	movs	r1, #64	@ 0x40
 800503a:	f7ff ff09 	bl	8004e50 <_malloc_r>
 800503e:	6028      	str	r0, [r5, #0]
 8005040:	6128      	str	r0, [r5, #16]
 8005042:	b930      	cbnz	r0, 8005052 <_svfiprintf_r+0x32>
 8005044:	230c      	movs	r3, #12
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	b01d      	add	sp, #116	@ 0x74
 800504e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005052:	2340      	movs	r3, #64	@ 0x40
 8005054:	616b      	str	r3, [r5, #20]
 8005056:	2300      	movs	r3, #0
 8005058:	9309      	str	r3, [sp, #36]	@ 0x24
 800505a:	2320      	movs	r3, #32
 800505c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005060:	f8cd 800c 	str.w	r8, [sp, #12]
 8005064:	2330      	movs	r3, #48	@ 0x30
 8005066:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005204 <_svfiprintf_r+0x1e4>
 800506a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800506e:	f04f 0901 	mov.w	r9, #1
 8005072:	4623      	mov	r3, r4
 8005074:	469a      	mov	sl, r3
 8005076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800507a:	b10a      	cbz	r2, 8005080 <_svfiprintf_r+0x60>
 800507c:	2a25      	cmp	r2, #37	@ 0x25
 800507e:	d1f9      	bne.n	8005074 <_svfiprintf_r+0x54>
 8005080:	ebba 0b04 	subs.w	fp, sl, r4
 8005084:	d00b      	beq.n	800509e <_svfiprintf_r+0x7e>
 8005086:	465b      	mov	r3, fp
 8005088:	4622      	mov	r2, r4
 800508a:	4629      	mov	r1, r5
 800508c:	4638      	mov	r0, r7
 800508e:	f7ff ff6b 	bl	8004f68 <__ssputs_r>
 8005092:	3001      	adds	r0, #1
 8005094:	f000 80a7 	beq.w	80051e6 <_svfiprintf_r+0x1c6>
 8005098:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800509a:	445a      	add	r2, fp
 800509c:	9209      	str	r2, [sp, #36]	@ 0x24
 800509e:	f89a 3000 	ldrb.w	r3, [sl]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 809f 	beq.w	80051e6 <_svfiprintf_r+0x1c6>
 80050a8:	2300      	movs	r3, #0
 80050aa:	f04f 32ff 	mov.w	r2, #4294967295
 80050ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050b2:	f10a 0a01 	add.w	sl, sl, #1
 80050b6:	9304      	str	r3, [sp, #16]
 80050b8:	9307      	str	r3, [sp, #28]
 80050ba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050be:	931a      	str	r3, [sp, #104]	@ 0x68
 80050c0:	4654      	mov	r4, sl
 80050c2:	2205      	movs	r2, #5
 80050c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c8:	484e      	ldr	r0, [pc, #312]	@ (8005204 <_svfiprintf_r+0x1e4>)
 80050ca:	f7fb f8a9 	bl	8000220 <memchr>
 80050ce:	9a04      	ldr	r2, [sp, #16]
 80050d0:	b9d8      	cbnz	r0, 800510a <_svfiprintf_r+0xea>
 80050d2:	06d0      	lsls	r0, r2, #27
 80050d4:	bf44      	itt	mi
 80050d6:	2320      	movmi	r3, #32
 80050d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050dc:	0711      	lsls	r1, r2, #28
 80050de:	bf44      	itt	mi
 80050e0:	232b      	movmi	r3, #43	@ 0x2b
 80050e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050e6:	f89a 3000 	ldrb.w	r3, [sl]
 80050ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80050ec:	d015      	beq.n	800511a <_svfiprintf_r+0xfa>
 80050ee:	9a07      	ldr	r2, [sp, #28]
 80050f0:	4654      	mov	r4, sl
 80050f2:	2000      	movs	r0, #0
 80050f4:	f04f 0c0a 	mov.w	ip, #10
 80050f8:	4621      	mov	r1, r4
 80050fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050fe:	3b30      	subs	r3, #48	@ 0x30
 8005100:	2b09      	cmp	r3, #9
 8005102:	d94b      	bls.n	800519c <_svfiprintf_r+0x17c>
 8005104:	b1b0      	cbz	r0, 8005134 <_svfiprintf_r+0x114>
 8005106:	9207      	str	r2, [sp, #28]
 8005108:	e014      	b.n	8005134 <_svfiprintf_r+0x114>
 800510a:	eba0 0308 	sub.w	r3, r0, r8
 800510e:	fa09 f303 	lsl.w	r3, r9, r3
 8005112:	4313      	orrs	r3, r2
 8005114:	9304      	str	r3, [sp, #16]
 8005116:	46a2      	mov	sl, r4
 8005118:	e7d2      	b.n	80050c0 <_svfiprintf_r+0xa0>
 800511a:	9b03      	ldr	r3, [sp, #12]
 800511c:	1d19      	adds	r1, r3, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	9103      	str	r1, [sp, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	bfbb      	ittet	lt
 8005126:	425b      	neglt	r3, r3
 8005128:	f042 0202 	orrlt.w	r2, r2, #2
 800512c:	9307      	strge	r3, [sp, #28]
 800512e:	9307      	strlt	r3, [sp, #28]
 8005130:	bfb8      	it	lt
 8005132:	9204      	strlt	r2, [sp, #16]
 8005134:	7823      	ldrb	r3, [r4, #0]
 8005136:	2b2e      	cmp	r3, #46	@ 0x2e
 8005138:	d10a      	bne.n	8005150 <_svfiprintf_r+0x130>
 800513a:	7863      	ldrb	r3, [r4, #1]
 800513c:	2b2a      	cmp	r3, #42	@ 0x2a
 800513e:	d132      	bne.n	80051a6 <_svfiprintf_r+0x186>
 8005140:	9b03      	ldr	r3, [sp, #12]
 8005142:	1d1a      	adds	r2, r3, #4
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	9203      	str	r2, [sp, #12]
 8005148:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800514c:	3402      	adds	r4, #2
 800514e:	9305      	str	r3, [sp, #20]
 8005150:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005214 <_svfiprintf_r+0x1f4>
 8005154:	7821      	ldrb	r1, [r4, #0]
 8005156:	2203      	movs	r2, #3
 8005158:	4650      	mov	r0, sl
 800515a:	f7fb f861 	bl	8000220 <memchr>
 800515e:	b138      	cbz	r0, 8005170 <_svfiprintf_r+0x150>
 8005160:	9b04      	ldr	r3, [sp, #16]
 8005162:	eba0 000a 	sub.w	r0, r0, sl
 8005166:	2240      	movs	r2, #64	@ 0x40
 8005168:	4082      	lsls	r2, r0
 800516a:	4313      	orrs	r3, r2
 800516c:	3401      	adds	r4, #1
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005174:	4824      	ldr	r0, [pc, #144]	@ (8005208 <_svfiprintf_r+0x1e8>)
 8005176:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800517a:	2206      	movs	r2, #6
 800517c:	f7fb f850 	bl	8000220 <memchr>
 8005180:	2800      	cmp	r0, #0
 8005182:	d036      	beq.n	80051f2 <_svfiprintf_r+0x1d2>
 8005184:	4b21      	ldr	r3, [pc, #132]	@ (800520c <_svfiprintf_r+0x1ec>)
 8005186:	bb1b      	cbnz	r3, 80051d0 <_svfiprintf_r+0x1b0>
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	3307      	adds	r3, #7
 800518c:	f023 0307 	bic.w	r3, r3, #7
 8005190:	3308      	adds	r3, #8
 8005192:	9303      	str	r3, [sp, #12]
 8005194:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005196:	4433      	add	r3, r6
 8005198:	9309      	str	r3, [sp, #36]	@ 0x24
 800519a:	e76a      	b.n	8005072 <_svfiprintf_r+0x52>
 800519c:	fb0c 3202 	mla	r2, ip, r2, r3
 80051a0:	460c      	mov	r4, r1
 80051a2:	2001      	movs	r0, #1
 80051a4:	e7a8      	b.n	80050f8 <_svfiprintf_r+0xd8>
 80051a6:	2300      	movs	r3, #0
 80051a8:	3401      	adds	r4, #1
 80051aa:	9305      	str	r3, [sp, #20]
 80051ac:	4619      	mov	r1, r3
 80051ae:	f04f 0c0a 	mov.w	ip, #10
 80051b2:	4620      	mov	r0, r4
 80051b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051b8:	3a30      	subs	r2, #48	@ 0x30
 80051ba:	2a09      	cmp	r2, #9
 80051bc:	d903      	bls.n	80051c6 <_svfiprintf_r+0x1a6>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0c6      	beq.n	8005150 <_svfiprintf_r+0x130>
 80051c2:	9105      	str	r1, [sp, #20]
 80051c4:	e7c4      	b.n	8005150 <_svfiprintf_r+0x130>
 80051c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80051ca:	4604      	mov	r4, r0
 80051cc:	2301      	movs	r3, #1
 80051ce:	e7f0      	b.n	80051b2 <_svfiprintf_r+0x192>
 80051d0:	ab03      	add	r3, sp, #12
 80051d2:	9300      	str	r3, [sp, #0]
 80051d4:	462a      	mov	r2, r5
 80051d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <_svfiprintf_r+0x1f0>)
 80051d8:	a904      	add	r1, sp, #16
 80051da:	4638      	mov	r0, r7
 80051dc:	f3af 8000 	nop.w
 80051e0:	1c42      	adds	r2, r0, #1
 80051e2:	4606      	mov	r6, r0
 80051e4:	d1d6      	bne.n	8005194 <_svfiprintf_r+0x174>
 80051e6:	89ab      	ldrh	r3, [r5, #12]
 80051e8:	065b      	lsls	r3, r3, #25
 80051ea:	f53f af2d 	bmi.w	8005048 <_svfiprintf_r+0x28>
 80051ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051f0:	e72c      	b.n	800504c <_svfiprintf_r+0x2c>
 80051f2:	ab03      	add	r3, sp, #12
 80051f4:	9300      	str	r3, [sp, #0]
 80051f6:	462a      	mov	r2, r5
 80051f8:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <_svfiprintf_r+0x1f0>)
 80051fa:	a904      	add	r1, sp, #16
 80051fc:	4638      	mov	r0, r7
 80051fe:	f000 f879 	bl	80052f4 <_printf_i>
 8005202:	e7ed      	b.n	80051e0 <_svfiprintf_r+0x1c0>
 8005204:	080056b8 	.word	0x080056b8
 8005208:	080056c2 	.word	0x080056c2
 800520c:	00000000 	.word	0x00000000
 8005210:	08004f69 	.word	0x08004f69
 8005214:	080056be 	.word	0x080056be

08005218 <_printf_common>:
 8005218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	4616      	mov	r6, r2
 800521e:	4698      	mov	r8, r3
 8005220:	688a      	ldr	r2, [r1, #8]
 8005222:	690b      	ldr	r3, [r1, #16]
 8005224:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005228:	4293      	cmp	r3, r2
 800522a:	bfb8      	it	lt
 800522c:	4613      	movlt	r3, r2
 800522e:	6033      	str	r3, [r6, #0]
 8005230:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005234:	4607      	mov	r7, r0
 8005236:	460c      	mov	r4, r1
 8005238:	b10a      	cbz	r2, 800523e <_printf_common+0x26>
 800523a:	3301      	adds	r3, #1
 800523c:	6033      	str	r3, [r6, #0]
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	0699      	lsls	r1, r3, #26
 8005242:	bf42      	ittt	mi
 8005244:	6833      	ldrmi	r3, [r6, #0]
 8005246:	3302      	addmi	r3, #2
 8005248:	6033      	strmi	r3, [r6, #0]
 800524a:	6825      	ldr	r5, [r4, #0]
 800524c:	f015 0506 	ands.w	r5, r5, #6
 8005250:	d106      	bne.n	8005260 <_printf_common+0x48>
 8005252:	f104 0a19 	add.w	sl, r4, #25
 8005256:	68e3      	ldr	r3, [r4, #12]
 8005258:	6832      	ldr	r2, [r6, #0]
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	42ab      	cmp	r3, r5
 800525e:	dc26      	bgt.n	80052ae <_printf_common+0x96>
 8005260:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005264:	6822      	ldr	r2, [r4, #0]
 8005266:	3b00      	subs	r3, #0
 8005268:	bf18      	it	ne
 800526a:	2301      	movne	r3, #1
 800526c:	0692      	lsls	r2, r2, #26
 800526e:	d42b      	bmi.n	80052c8 <_printf_common+0xb0>
 8005270:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005274:	4641      	mov	r1, r8
 8005276:	4638      	mov	r0, r7
 8005278:	47c8      	blx	r9
 800527a:	3001      	adds	r0, #1
 800527c:	d01e      	beq.n	80052bc <_printf_common+0xa4>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	6922      	ldr	r2, [r4, #16]
 8005282:	f003 0306 	and.w	r3, r3, #6
 8005286:	2b04      	cmp	r3, #4
 8005288:	bf02      	ittt	eq
 800528a:	68e5      	ldreq	r5, [r4, #12]
 800528c:	6833      	ldreq	r3, [r6, #0]
 800528e:	1aed      	subeq	r5, r5, r3
 8005290:	68a3      	ldr	r3, [r4, #8]
 8005292:	bf0c      	ite	eq
 8005294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005298:	2500      	movne	r5, #0
 800529a:	4293      	cmp	r3, r2
 800529c:	bfc4      	itt	gt
 800529e:	1a9b      	subgt	r3, r3, r2
 80052a0:	18ed      	addgt	r5, r5, r3
 80052a2:	2600      	movs	r6, #0
 80052a4:	341a      	adds	r4, #26
 80052a6:	42b5      	cmp	r5, r6
 80052a8:	d11a      	bne.n	80052e0 <_printf_common+0xc8>
 80052aa:	2000      	movs	r0, #0
 80052ac:	e008      	b.n	80052c0 <_printf_common+0xa8>
 80052ae:	2301      	movs	r3, #1
 80052b0:	4652      	mov	r2, sl
 80052b2:	4641      	mov	r1, r8
 80052b4:	4638      	mov	r0, r7
 80052b6:	47c8      	blx	r9
 80052b8:	3001      	adds	r0, #1
 80052ba:	d103      	bne.n	80052c4 <_printf_common+0xac>
 80052bc:	f04f 30ff 	mov.w	r0, #4294967295
 80052c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052c4:	3501      	adds	r5, #1
 80052c6:	e7c6      	b.n	8005256 <_printf_common+0x3e>
 80052c8:	18e1      	adds	r1, r4, r3
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	2030      	movs	r0, #48	@ 0x30
 80052ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80052d2:	4422      	add	r2, r4
 80052d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80052d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80052dc:	3302      	adds	r3, #2
 80052de:	e7c7      	b.n	8005270 <_printf_common+0x58>
 80052e0:	2301      	movs	r3, #1
 80052e2:	4622      	mov	r2, r4
 80052e4:	4641      	mov	r1, r8
 80052e6:	4638      	mov	r0, r7
 80052e8:	47c8      	blx	r9
 80052ea:	3001      	adds	r0, #1
 80052ec:	d0e6      	beq.n	80052bc <_printf_common+0xa4>
 80052ee:	3601      	adds	r6, #1
 80052f0:	e7d9      	b.n	80052a6 <_printf_common+0x8e>
	...

080052f4 <_printf_i>:
 80052f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	7e0f      	ldrb	r7, [r1, #24]
 80052fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80052fc:	2f78      	cmp	r7, #120	@ 0x78
 80052fe:	4691      	mov	r9, r2
 8005300:	4680      	mov	r8, r0
 8005302:	460c      	mov	r4, r1
 8005304:	469a      	mov	sl, r3
 8005306:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800530a:	d807      	bhi.n	800531c <_printf_i+0x28>
 800530c:	2f62      	cmp	r7, #98	@ 0x62
 800530e:	d80a      	bhi.n	8005326 <_printf_i+0x32>
 8005310:	2f00      	cmp	r7, #0
 8005312:	f000 80d2 	beq.w	80054ba <_printf_i+0x1c6>
 8005316:	2f58      	cmp	r7, #88	@ 0x58
 8005318:	f000 80b9 	beq.w	800548e <_printf_i+0x19a>
 800531c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005320:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005324:	e03a      	b.n	800539c <_printf_i+0xa8>
 8005326:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800532a:	2b15      	cmp	r3, #21
 800532c:	d8f6      	bhi.n	800531c <_printf_i+0x28>
 800532e:	a101      	add	r1, pc, #4	@ (adr r1, 8005334 <_printf_i+0x40>)
 8005330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005334:	0800538d 	.word	0x0800538d
 8005338:	080053a1 	.word	0x080053a1
 800533c:	0800531d 	.word	0x0800531d
 8005340:	0800531d 	.word	0x0800531d
 8005344:	0800531d 	.word	0x0800531d
 8005348:	0800531d 	.word	0x0800531d
 800534c:	080053a1 	.word	0x080053a1
 8005350:	0800531d 	.word	0x0800531d
 8005354:	0800531d 	.word	0x0800531d
 8005358:	0800531d 	.word	0x0800531d
 800535c:	0800531d 	.word	0x0800531d
 8005360:	080054a1 	.word	0x080054a1
 8005364:	080053cb 	.word	0x080053cb
 8005368:	0800545b 	.word	0x0800545b
 800536c:	0800531d 	.word	0x0800531d
 8005370:	0800531d 	.word	0x0800531d
 8005374:	080054c3 	.word	0x080054c3
 8005378:	0800531d 	.word	0x0800531d
 800537c:	080053cb 	.word	0x080053cb
 8005380:	0800531d 	.word	0x0800531d
 8005384:	0800531d 	.word	0x0800531d
 8005388:	08005463 	.word	0x08005463
 800538c:	6833      	ldr	r3, [r6, #0]
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6032      	str	r2, [r6, #0]
 8005394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005398:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800539c:	2301      	movs	r3, #1
 800539e:	e09d      	b.n	80054dc <_printf_i+0x1e8>
 80053a0:	6833      	ldr	r3, [r6, #0]
 80053a2:	6820      	ldr	r0, [r4, #0]
 80053a4:	1d19      	adds	r1, r3, #4
 80053a6:	6031      	str	r1, [r6, #0]
 80053a8:	0606      	lsls	r6, r0, #24
 80053aa:	d501      	bpl.n	80053b0 <_printf_i+0xbc>
 80053ac:	681d      	ldr	r5, [r3, #0]
 80053ae:	e003      	b.n	80053b8 <_printf_i+0xc4>
 80053b0:	0645      	lsls	r5, r0, #25
 80053b2:	d5fb      	bpl.n	80053ac <_printf_i+0xb8>
 80053b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80053b8:	2d00      	cmp	r5, #0
 80053ba:	da03      	bge.n	80053c4 <_printf_i+0xd0>
 80053bc:	232d      	movs	r3, #45	@ 0x2d
 80053be:	426d      	negs	r5, r5
 80053c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80053c4:	4859      	ldr	r0, [pc, #356]	@ (800552c <_printf_i+0x238>)
 80053c6:	230a      	movs	r3, #10
 80053c8:	e011      	b.n	80053ee <_printf_i+0xfa>
 80053ca:	6821      	ldr	r1, [r4, #0]
 80053cc:	6833      	ldr	r3, [r6, #0]
 80053ce:	0608      	lsls	r0, r1, #24
 80053d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80053d4:	d402      	bmi.n	80053dc <_printf_i+0xe8>
 80053d6:	0649      	lsls	r1, r1, #25
 80053d8:	bf48      	it	mi
 80053da:	b2ad      	uxthmi	r5, r5
 80053dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80053de:	4853      	ldr	r0, [pc, #332]	@ (800552c <_printf_i+0x238>)
 80053e0:	6033      	str	r3, [r6, #0]
 80053e2:	bf14      	ite	ne
 80053e4:	230a      	movne	r3, #10
 80053e6:	2308      	moveq	r3, #8
 80053e8:	2100      	movs	r1, #0
 80053ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80053ee:	6866      	ldr	r6, [r4, #4]
 80053f0:	60a6      	str	r6, [r4, #8]
 80053f2:	2e00      	cmp	r6, #0
 80053f4:	bfa2      	ittt	ge
 80053f6:	6821      	ldrge	r1, [r4, #0]
 80053f8:	f021 0104 	bicge.w	r1, r1, #4
 80053fc:	6021      	strge	r1, [r4, #0]
 80053fe:	b90d      	cbnz	r5, 8005404 <_printf_i+0x110>
 8005400:	2e00      	cmp	r6, #0
 8005402:	d04b      	beq.n	800549c <_printf_i+0x1a8>
 8005404:	4616      	mov	r6, r2
 8005406:	fbb5 f1f3 	udiv	r1, r5, r3
 800540a:	fb03 5711 	mls	r7, r3, r1, r5
 800540e:	5dc7      	ldrb	r7, [r0, r7]
 8005410:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005414:	462f      	mov	r7, r5
 8005416:	42bb      	cmp	r3, r7
 8005418:	460d      	mov	r5, r1
 800541a:	d9f4      	bls.n	8005406 <_printf_i+0x112>
 800541c:	2b08      	cmp	r3, #8
 800541e:	d10b      	bne.n	8005438 <_printf_i+0x144>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	07df      	lsls	r7, r3, #31
 8005424:	d508      	bpl.n	8005438 <_printf_i+0x144>
 8005426:	6923      	ldr	r3, [r4, #16]
 8005428:	6861      	ldr	r1, [r4, #4]
 800542a:	4299      	cmp	r1, r3
 800542c:	bfde      	ittt	le
 800542e:	2330      	movle	r3, #48	@ 0x30
 8005430:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005434:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005438:	1b92      	subs	r2, r2, r6
 800543a:	6122      	str	r2, [r4, #16]
 800543c:	f8cd a000 	str.w	sl, [sp]
 8005440:	464b      	mov	r3, r9
 8005442:	aa03      	add	r2, sp, #12
 8005444:	4621      	mov	r1, r4
 8005446:	4640      	mov	r0, r8
 8005448:	f7ff fee6 	bl	8005218 <_printf_common>
 800544c:	3001      	adds	r0, #1
 800544e:	d14a      	bne.n	80054e6 <_printf_i+0x1f2>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	b004      	add	sp, #16
 8005456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	f043 0320 	orr.w	r3, r3, #32
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	4833      	ldr	r0, [pc, #204]	@ (8005530 <_printf_i+0x23c>)
 8005464:	2778      	movs	r7, #120	@ 0x78
 8005466:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	6831      	ldr	r1, [r6, #0]
 800546e:	061f      	lsls	r7, r3, #24
 8005470:	f851 5b04 	ldr.w	r5, [r1], #4
 8005474:	d402      	bmi.n	800547c <_printf_i+0x188>
 8005476:	065f      	lsls	r7, r3, #25
 8005478:	bf48      	it	mi
 800547a:	b2ad      	uxthmi	r5, r5
 800547c:	6031      	str	r1, [r6, #0]
 800547e:	07d9      	lsls	r1, r3, #31
 8005480:	bf44      	itt	mi
 8005482:	f043 0320 	orrmi.w	r3, r3, #32
 8005486:	6023      	strmi	r3, [r4, #0]
 8005488:	b11d      	cbz	r5, 8005492 <_printf_i+0x19e>
 800548a:	2310      	movs	r3, #16
 800548c:	e7ac      	b.n	80053e8 <_printf_i+0xf4>
 800548e:	4827      	ldr	r0, [pc, #156]	@ (800552c <_printf_i+0x238>)
 8005490:	e7e9      	b.n	8005466 <_printf_i+0x172>
 8005492:	6823      	ldr	r3, [r4, #0]
 8005494:	f023 0320 	bic.w	r3, r3, #32
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	e7f6      	b.n	800548a <_printf_i+0x196>
 800549c:	4616      	mov	r6, r2
 800549e:	e7bd      	b.n	800541c <_printf_i+0x128>
 80054a0:	6833      	ldr	r3, [r6, #0]
 80054a2:	6825      	ldr	r5, [r4, #0]
 80054a4:	6961      	ldr	r1, [r4, #20]
 80054a6:	1d18      	adds	r0, r3, #4
 80054a8:	6030      	str	r0, [r6, #0]
 80054aa:	062e      	lsls	r6, r5, #24
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	d501      	bpl.n	80054b4 <_printf_i+0x1c0>
 80054b0:	6019      	str	r1, [r3, #0]
 80054b2:	e002      	b.n	80054ba <_printf_i+0x1c6>
 80054b4:	0668      	lsls	r0, r5, #25
 80054b6:	d5fb      	bpl.n	80054b0 <_printf_i+0x1bc>
 80054b8:	8019      	strh	r1, [r3, #0]
 80054ba:	2300      	movs	r3, #0
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	4616      	mov	r6, r2
 80054c0:	e7bc      	b.n	800543c <_printf_i+0x148>
 80054c2:	6833      	ldr	r3, [r6, #0]
 80054c4:	1d1a      	adds	r2, r3, #4
 80054c6:	6032      	str	r2, [r6, #0]
 80054c8:	681e      	ldr	r6, [r3, #0]
 80054ca:	6862      	ldr	r2, [r4, #4]
 80054cc:	2100      	movs	r1, #0
 80054ce:	4630      	mov	r0, r6
 80054d0:	f7fa fea6 	bl	8000220 <memchr>
 80054d4:	b108      	cbz	r0, 80054da <_printf_i+0x1e6>
 80054d6:	1b80      	subs	r0, r0, r6
 80054d8:	6060      	str	r0, [r4, #4]
 80054da:	6863      	ldr	r3, [r4, #4]
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	2300      	movs	r3, #0
 80054e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054e4:	e7aa      	b.n	800543c <_printf_i+0x148>
 80054e6:	6923      	ldr	r3, [r4, #16]
 80054e8:	4632      	mov	r2, r6
 80054ea:	4649      	mov	r1, r9
 80054ec:	4640      	mov	r0, r8
 80054ee:	47d0      	blx	sl
 80054f0:	3001      	adds	r0, #1
 80054f2:	d0ad      	beq.n	8005450 <_printf_i+0x15c>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	079b      	lsls	r3, r3, #30
 80054f8:	d413      	bmi.n	8005522 <_printf_i+0x22e>
 80054fa:	68e0      	ldr	r0, [r4, #12]
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	4298      	cmp	r0, r3
 8005500:	bfb8      	it	lt
 8005502:	4618      	movlt	r0, r3
 8005504:	e7a6      	b.n	8005454 <_printf_i+0x160>
 8005506:	2301      	movs	r3, #1
 8005508:	4632      	mov	r2, r6
 800550a:	4649      	mov	r1, r9
 800550c:	4640      	mov	r0, r8
 800550e:	47d0      	blx	sl
 8005510:	3001      	adds	r0, #1
 8005512:	d09d      	beq.n	8005450 <_printf_i+0x15c>
 8005514:	3501      	adds	r5, #1
 8005516:	68e3      	ldr	r3, [r4, #12]
 8005518:	9903      	ldr	r1, [sp, #12]
 800551a:	1a5b      	subs	r3, r3, r1
 800551c:	42ab      	cmp	r3, r5
 800551e:	dcf2      	bgt.n	8005506 <_printf_i+0x212>
 8005520:	e7eb      	b.n	80054fa <_printf_i+0x206>
 8005522:	2500      	movs	r5, #0
 8005524:	f104 0619 	add.w	r6, r4, #25
 8005528:	e7f5      	b.n	8005516 <_printf_i+0x222>
 800552a:	bf00      	nop
 800552c:	080056c9 	.word	0x080056c9
 8005530:	080056da 	.word	0x080056da

08005534 <memmove>:
 8005534:	4288      	cmp	r0, r1
 8005536:	b510      	push	{r4, lr}
 8005538:	eb01 0402 	add.w	r4, r1, r2
 800553c:	d902      	bls.n	8005544 <memmove+0x10>
 800553e:	4284      	cmp	r4, r0
 8005540:	4623      	mov	r3, r4
 8005542:	d807      	bhi.n	8005554 <memmove+0x20>
 8005544:	1e43      	subs	r3, r0, #1
 8005546:	42a1      	cmp	r1, r4
 8005548:	d008      	beq.n	800555c <memmove+0x28>
 800554a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800554e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005552:	e7f8      	b.n	8005546 <memmove+0x12>
 8005554:	4402      	add	r2, r0
 8005556:	4601      	mov	r1, r0
 8005558:	428a      	cmp	r2, r1
 800555a:	d100      	bne.n	800555e <memmove+0x2a>
 800555c:	bd10      	pop	{r4, pc}
 800555e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005562:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005566:	e7f7      	b.n	8005558 <memmove+0x24>

08005568 <_sbrk_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4d06      	ldr	r5, [pc, #24]	@ (8005584 <_sbrk_r+0x1c>)
 800556c:	2300      	movs	r3, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	602b      	str	r3, [r5, #0]
 8005574:	f7fc fa3c 	bl	80019f0 <_sbrk>
 8005578:	1c43      	adds	r3, r0, #1
 800557a:	d102      	bne.n	8005582 <_sbrk_r+0x1a>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b103      	cbz	r3, 8005582 <_sbrk_r+0x1a>
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	2000035c 	.word	0x2000035c

08005588 <_realloc_r>:
 8005588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558c:	4680      	mov	r8, r0
 800558e:	4615      	mov	r5, r2
 8005590:	460c      	mov	r4, r1
 8005592:	b921      	cbnz	r1, 800559e <_realloc_r+0x16>
 8005594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	4611      	mov	r1, r2
 800559a:	f7ff bc59 	b.w	8004e50 <_malloc_r>
 800559e:	b92a      	cbnz	r2, 80055ac <_realloc_r+0x24>
 80055a0:	f7ff fbea 	bl	8004d78 <_free_r>
 80055a4:	2400      	movs	r4, #0
 80055a6:	4620      	mov	r0, r4
 80055a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ac:	f000 f81a 	bl	80055e4 <_malloc_usable_size_r>
 80055b0:	4285      	cmp	r5, r0
 80055b2:	4606      	mov	r6, r0
 80055b4:	d802      	bhi.n	80055bc <_realloc_r+0x34>
 80055b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80055ba:	d8f4      	bhi.n	80055a6 <_realloc_r+0x1e>
 80055bc:	4629      	mov	r1, r5
 80055be:	4640      	mov	r0, r8
 80055c0:	f7ff fc46 	bl	8004e50 <_malloc_r>
 80055c4:	4607      	mov	r7, r0
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d0ec      	beq.n	80055a4 <_realloc_r+0x1c>
 80055ca:	42b5      	cmp	r5, r6
 80055cc:	462a      	mov	r2, r5
 80055ce:	4621      	mov	r1, r4
 80055d0:	bf28      	it	cs
 80055d2:	4632      	movcs	r2, r6
 80055d4:	f7ff fbc2 	bl	8004d5c <memcpy>
 80055d8:	4621      	mov	r1, r4
 80055da:	4640      	mov	r0, r8
 80055dc:	f7ff fbcc 	bl	8004d78 <_free_r>
 80055e0:	463c      	mov	r4, r7
 80055e2:	e7e0      	b.n	80055a6 <_realloc_r+0x1e>

080055e4 <_malloc_usable_size_r>:
 80055e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e8:	1f18      	subs	r0, r3, #4
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	bfbc      	itt	lt
 80055ee:	580b      	ldrlt	r3, [r1, r0]
 80055f0:	18c0      	addlt	r0, r0, r3
 80055f2:	4770      	bx	lr

080055f4 <_init>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr

08005600 <_fini>:
 8005600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005602:	bf00      	nop
 8005604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005606:	bc08      	pop	{r3}
 8005608:	469e      	mov	lr, r3
 800560a:	4770      	bx	lr
