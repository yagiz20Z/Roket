
LoraCalisma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000341c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080035f8  080035f8  000045f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003658  08003658  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003658  08003658  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003658  08003658  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003658  08003658  00004658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800365c  0800365c  0000465c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003660  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  0800366c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  0800366c  000051c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080bb  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000196c  00000000  00000000  0000d0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0000ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000661  00000000  00000000  0000f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e07  00000000  00000000  0000f961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009986  00000000  00000000  00033768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1933  00000000  00000000  0003d0ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ea21  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002264  00000000  00000000  0011ea64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  00120cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080035dc 	.word	0x080035dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080035dc 	.word	0x080035dc

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000a04:	b4b0      	push	{r4, r5, r7}
 8000a06:	b08f      	sub	sp, #60	@ 0x3c
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <newLoRa+0x50>)
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 8000a10:	2307      	movs	r3, #7
 8000a12:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000a16:	2307      	movs	r3, #7
 8000a18:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	new_LoRa.power				   = POWER_20db;
 8000a22:	23ff      	movs	r3, #255	@ 0xff
 8000a24:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	new_LoRa.overCurrentProtection = 100       ;
 8000a28:	2364      	movs	r3, #100	@ 0x64
 8000a2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	new_LoRa.preamble			   = 8         ;
 8000a2e:	2308      	movs	r3, #8
 8000a30:	86bb      	strh	r3, [r7, #52]	@ 0x34

	return new_LoRa;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	461d      	mov	r5, r3
 8000a36:	f107 040c 	add.w	r4, r7, #12
 8000a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a42:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000a4a:	6878      	ldr	r0, [r7, #4]
 8000a4c:	373c      	adds	r7, #60	@ 0x3c
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bcb0      	pop	{r4, r5, r7}
 8000a52:	4770      	bx	lr
 8000a54:	43d88000 	.word	0x43d88000

08000a58 <LoRa_gotoMode>:
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000a62:	2101      	movs	r1, #1
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f9fe 	bl	8000e66 <LoRa_read>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000a6e:	7bbb      	ldrb	r3, [r7, #14]
 8000a70:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d107      	bne.n	8000a88 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000a78:	7bbb      	ldrb	r3, [r7, #14]
 8000a7a:	f023 0307 	bic.w	r3, r3, #7
 8000a7e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
 8000a86:	e03e      	b.n	8000b06 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d10c      	bne.n	8000aa8 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000a8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000a92:	f023 0307 	bic.w	r3, r3, #7
 8000a96:	b25b      	sxtb	r3, r3
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	b25b      	sxtb	r3, r3
 8000a9e:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	61da      	str	r2, [r3, #28]
 8000aa6:	e02e      	b.n	8000b06 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d10c      	bne.n	8000ac8 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 8000aae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ab2:	f023 0307 	bic.w	r3, r3, #7
 8000ab6:	b25b      	sxtb	r3, r3
 8000ab8:	f043 0303 	orr.w	r3, r3, #3
 8000abc:	b25b      	sxtb	r3, r3
 8000abe:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2203      	movs	r2, #3
 8000ac4:	61da      	str	r2, [r3, #28]
 8000ac6:	e01e      	b.n	8000b06 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	2b05      	cmp	r3, #5
 8000acc:	d10c      	bne.n	8000ae8 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 8000ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000ad2:	f023 0307 	bic.w	r3, r3, #7
 8000ad6:	b25b      	sxtb	r3, r3
 8000ad8:	f043 0305 	orr.w	r3, r3, #5
 8000adc:	b25b      	sxtb	r3, r3
 8000ade:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2205      	movs	r2, #5
 8000ae4:	61da      	str	r2, [r3, #28]
 8000ae6:	e00e      	b.n	8000b06 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d10b      	bne.n	8000b06 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 8000aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000af2:	f023 0307 	bic.w	r3, r3, #7
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	f043 0306 	orr.w	r3, r3, #6
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2206      	movs	r2, #6
 8000b04:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000b06:	7bfb      	ldrb	r3, [r7, #15]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f000 f9c4 	bl	8000e9a <LoRa_write>
	//HAL_Delay(10);
}
 8000b12:	bf00      	nop
 8000b14:	3710      	adds	r7, #16
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}

08000b1a <LoRa_readReg>:
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	b084      	sub	sp, #16
 8000b1e:	af00      	add	r7, sp, #0
 8000b20:	60f8      	str	r0, [r7, #12]
 8000b22:	60b9      	str	r1, [r7, #8]
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4613      	mov	r3, r2
 8000b28:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	6818      	ldr	r0, [r3, #0]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	889b      	ldrh	r3, [r3, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	4619      	mov	r1, r3
 8000b36:	f001 f813 	bl	8001b60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	6998      	ldr	r0, [r3, #24]
 8000b3e:	88fa      	ldrh	r2, [r7, #6]
 8000b40:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	f001 fe78 	bl	800283a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b4a:	bf00      	nop
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fb3f 	bl	80031d4 <HAL_SPI_GetState>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d1f7      	bne.n	8000b4c <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6998      	ldr	r0, [r3, #24]
 8000b60:	8b3a      	ldrh	r2, [r7, #24]
 8000b62:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000b66:	6839      	ldr	r1, [r7, #0]
 8000b68:	f001 ffdd 	bl	8002b26 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000b6c:	bf00      	nop
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	699b      	ldr	r3, [r3, #24]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f002 fb2e 	bl	80031d4 <HAL_SPI_GetState>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d1f7      	bne.n	8000b6e <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	6818      	ldr	r0, [r3, #0]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	889b      	ldrh	r3, [r3, #4]
 8000b86:	2201      	movs	r2, #1
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f000 ffe9 	bl	8001b60 <HAL_GPIO_WritePin>
}
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <LoRa_writeReg>:
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b084      	sub	sp, #16
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	4613      	mov	r3, r2
 8000ba4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6818      	ldr	r0, [r3, #0]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	889b      	ldrh	r3, [r3, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f000 ffd5 	bl	8001b60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	6998      	ldr	r0, [r3, #24]
 8000bba:	88fa      	ldrh	r2, [r7, #6]
 8000bbc:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	f001 fe3a 	bl	800283a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000bc6:	bf00      	nop
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f002 fb01 	bl	80031d4 <HAL_SPI_GetState>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d1f7      	bne.n	8000bc8 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	6998      	ldr	r0, [r3, #24]
 8000bdc:	8b3a      	ldrh	r2, [r7, #24]
 8000bde:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000be2:	6839      	ldr	r1, [r7, #0]
 8000be4:	f001 fe29 	bl	800283a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000be8:	bf00      	nop
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 faf0 	bl	80031d4 <HAL_SPI_GetState>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d1f7      	bne.n	8000bea <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	6818      	ldr	r0, [r3, #0]
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	889b      	ldrh	r3, [r3, #4]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	f000 ffab 	bl	8001b60 <HAL_GPIO_WritePin>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <LoRa_setLowDaraRateOptimization>:
			LoRa*	LoRa         --> LoRa object handler
			uint8_t	value        --> 0 to disable, otherwise to enable

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setLowDaraRateOptimization(LoRa* _LoRa, uint8_t value){
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	70fb      	strb	r3, [r7, #3]
	uint8_t	data;
	uint8_t	read;

	read = LoRa_read(_LoRa, RegModemConfig3);
 8000c1e:	2126      	movs	r1, #38	@ 0x26
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f000 f920 	bl	8000e66 <LoRa_read>
 8000c26:	4603      	mov	r3, r0
 8000c28:	73bb      	strb	r3, [r7, #14]

	if(value)
 8000c2a:	78fb      	ldrb	r3, [r7, #3]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d004      	beq.n	8000c3a <LoRa_setLowDaraRateOptimization+0x28>
		data = read | 0x08;
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	f043 0308 	orr.w	r3, r3, #8
 8000c36:	73fb      	strb	r3, [r7, #15]
 8000c38:	e003      	b.n	8000c42 <LoRa_setLowDaraRateOptimization+0x30>
	else
		data = read & 0xF7;
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	f023 0308 	bic.w	r3, r3, #8
 8000c40:	73fb      	strb	r3, [r7, #15]

	LoRa_write(_LoRa, RegModemConfig3, data);
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	461a      	mov	r2, r3
 8000c46:	2126      	movs	r1, #38	@ 0x26
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 f926 	bl	8000e9a <LoRa_write>
	HAL_Delay(10);
 8000c4e:	200a      	movs	r0, #10
 8000c50:	f000 fcfe 	bl	8001650 <HAL_Delay>
}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <LoRa_setAutoLDO>:
		arguments   :
			LoRa*	LoRa         --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setAutoLDO(LoRa* _LoRa){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b096      	sub	sp, #88	@ 0x58
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	double BW[] = {7.8, 10.4, 15.6, 20.8, 31.25, 41.7, 62.5, 125.0, 250.0, 500.0};
 8000c64:	4a17      	ldr	r2, [pc, #92]	@ (8000cc4 <LoRa_setAutoLDO+0x68>)
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	2250      	movs	r2, #80	@ 0x50
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f002 fca6 	bl	80035c0 <memcpy>

	LoRa_setLowDaraRateOptimization(_LoRa, (long)((1 << _LoRa->spredingFactor) / ((double)BW[_LoRa->bandWidth])) > 16.0);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	4093      	lsls	r3, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc1b 	bl	80004bc <__aeabi_i2d>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	3358      	adds	r3, #88	@ 0x58
 8000c90:	443b      	add	r3, r7
 8000c92:	3b50      	subs	r3, #80	@ 0x50
 8000c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c98:	f7ff fda4 	bl	80007e4 <__aeabi_ddiv>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4610      	mov	r0, r2
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f7ff fe86 	bl	80009b4 <__aeabi_d2iz>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b10      	cmp	r3, #16
 8000cac:	bfcc      	ite	gt
 8000cae:	2301      	movgt	r3, #1
 8000cb0:	2300      	movle	r3, #0
 8000cb2:	b2db      	uxtb	r3, r3
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffab 	bl	8000c12 <LoRa_setLowDaraRateOptimization>
}
 8000cbc:	bf00      	nop
 8000cbe:	3758      	adds	r7, #88	@ 0x58
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	080035f8 	.word	0x080035f8

08000cc8 <LoRa_setFrequency>:
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	04db      	lsls	r3, r3, #19
 8000cd6:	115b      	asrs	r3, r3, #5
 8000cd8:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	0c1b      	lsrs	r3, r3, #16
 8000cde:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8000ce0:	7afb      	ldrb	r3, [r7, #11]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	2106      	movs	r1, #6
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f000 f8d7 	bl	8000e9a <LoRa_write>
	HAL_Delay(5);
 8000cec:	2005      	movs	r0, #5
 8000cee:	f000 fcaf 	bl	8001650 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	0a1b      	lsrs	r3, r3, #8
 8000cf6:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000cf8:	7afb      	ldrb	r3, [r7, #11]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	2107      	movs	r1, #7
 8000cfe:	6878      	ldr	r0, [r7, #4]
 8000d00:	f000 f8cb 	bl	8000e9a <LoRa_write>
	HAL_Delay(5);
 8000d04:	2005      	movs	r0, #5
 8000d06:	f000 fca3 	bl	8001650 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8000d0e:	7afb      	ldrb	r3, [r7, #11]
 8000d10:	461a      	mov	r2, r3
 8000d12:	2108      	movs	r1, #8
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 f8c0 	bl	8000e9a <LoRa_write>
	HAL_Delay(5);
 8000d1a:	2005      	movs	r0, #5
 8000d1c:	f000 fc98 	bl	8001650 <HAL_Delay>
}
 8000d20:	bf00      	nop
 8000d22:	3710      	adds	r7, #16
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <LoRa_setSpreadingFactor>:
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b0c      	cmp	r3, #12
 8000d36:	dd01      	ble.n	8000d3c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000d38:	230c      	movs	r3, #12
 8000d3a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	2b06      	cmp	r3, #6
 8000d40:	dc01      	bgt.n	8000d46 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8000d42:	2307      	movs	r3, #7
 8000d44:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000d46:	211e      	movs	r1, #30
 8000d48:	6878      	ldr	r0, [r7, #4]
 8000d4a:	f000 f88c 	bl	8000e66 <LoRa_read>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8000d52:	200a      	movs	r0, #10
 8000d54:	f000 fc7c 	bl	8001650 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	4413      	add	r3, r2
 8000d6a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000d6c:	7bbb      	ldrb	r3, [r7, #14]
 8000d6e:	461a      	mov	r2, r3
 8000d70:	211e      	movs	r1, #30
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f000 f891 	bl	8000e9a <LoRa_write>
	HAL_Delay(10);
 8000d78:	200a      	movs	r0, #10
 8000d7a:	f000 fc69 	bl	8001650 <HAL_Delay>

	LoRa_setAutoLDO(_LoRa);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ff6c 	bl	8000c5c <LoRa_setAutoLDO>
}
 8000d84:	bf00      	nop
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <LoRa_setPower>:
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power like POWER_17db

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	460b      	mov	r3, r1
 8000d96:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2109      	movs	r1, #9
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f000 f87b 	bl	8000e9a <LoRa_write>
	HAL_Delay(10);
 8000da4:	200a      	movs	r0, #10
 8000da6:	f000 fc53 	bl	8001650 <HAL_Delay>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <LoRa_setOCP>:
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	2b2c      	cmp	r3, #44	@ 0x2c
 8000dc8:	d801      	bhi.n	8000dce <LoRa_setOCP+0x1a>
		current = 45;
 8000dca:	232d      	movs	r3, #45	@ 0x2d
 8000dcc:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	2bf0      	cmp	r3, #240	@ 0xf0
 8000dd2:	d901      	bls.n	8000dd8 <LoRa_setOCP+0x24>
		current = 240;
 8000dd4:	23f0      	movs	r3, #240	@ 0xf0
 8000dd6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	2b78      	cmp	r3, #120	@ 0x78
 8000ddc:	d809      	bhi.n	8000df2 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000dde:	78fb      	ldrb	r3, [r7, #3]
 8000de0:	3b2d      	subs	r3, #45	@ 0x2d
 8000de2:	4a12      	ldr	r2, [pc, #72]	@ (8000e2c <LoRa_setOCP+0x78>)
 8000de4:	fb82 1203 	smull	r1, r2, r2, r3
 8000de8:	1052      	asrs	r2, r2, #1
 8000dea:	17db      	asrs	r3, r3, #31
 8000dec:	1ad3      	subs	r3, r2, r3
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e00b      	b.n	8000e0a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000df2:	78fb      	ldrb	r3, [r7, #3]
 8000df4:	2bf0      	cmp	r3, #240	@ 0xf0
 8000df6:	d808      	bhi.n	8000e0a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8000df8:	78fb      	ldrb	r3, [r7, #3]
 8000dfa:	331e      	adds	r3, #30
 8000dfc:	4a0b      	ldr	r2, [pc, #44]	@ (8000e2c <LoRa_setOCP+0x78>)
 8000dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8000e02:	1092      	asrs	r2, r2, #2
 8000e04:	17db      	asrs	r3, r3, #31
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
 8000e0c:	3320      	adds	r3, #32
 8000e0e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
 8000e12:	461a      	mov	r2, r3
 8000e14:	210b      	movs	r1, #11
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f000 f83f 	bl	8000e9a <LoRa_write>
	HAL_Delay(10);
 8000e1c:	200a      	movs	r0, #10
 8000e1e:	f000 fc17 	bl	8001650 <HAL_Delay>
}
 8000e22:	bf00      	nop
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	66666667 	.word	0x66666667

08000e30 <LoRa_setTOMsb_setCRCon>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000e38:	211e      	movs	r1, #30
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f813 	bl	8000e66 <LoRa_read>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f043 0307 	orr.w	r3, r3, #7
 8000e4a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	211e      	movs	r1, #30
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f821 	bl	8000e9a <LoRa_write>
	HAL_Delay(10);
 8000e58:	200a      	movs	r0, #10
 8000e5a:	f000 fbf9 	bl	8001650 <HAL_Delay>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}

08000e66 <LoRa_read>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D

		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b086      	sub	sp, #24
 8000e6a:	af02      	add	r7, sp, #8
 8000e6c:	6078      	str	r0, [r7, #4]
 8000e6e:	460b      	mov	r3, r1
 8000e70:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8000e72:	78fb      	ldrb	r3, [r7, #3]
 8000e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000e7c:	f107 030f 	add.w	r3, r7, #15
 8000e80:	f107 010e 	add.w	r1, r7, #14
 8000e84:	2201      	movs	r2, #1
 8000e86:	9200      	str	r2, [sp, #0]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fe45 	bl	8000b1a <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <LoRa_write>:
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af02      	add	r7, sp, #8
 8000ea0:	6078      	str	r0, [r7, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	70fb      	strb	r3, [r7, #3]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000eaa:	78fb      	ldrb	r3, [r7, #3]
 8000eac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000eb4:	78bb      	ldrb	r3, [r7, #2]
 8000eb6:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000eb8:	f107 030f 	add.w	r3, r7, #15
 8000ebc:	f107 010e 	add.w	r1, r7, #14
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	9200      	str	r2, [sp, #0]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff fe65 	bl	8000b96 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <LoRa_isvalid>:
		arguments   :
			LoRa* LoRa --> LoRa object handler

		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

	return 1;
 8000edc:	2301      	movs	r3, #1
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <LoRa_startReceiving>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000ef2:	2105      	movs	r1, #5
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff fdaf 	bl	8000a58 <LoRa_gotoMode>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <LoRa_receive>:
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read

		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000f02:	b590      	push	{r4, r7, lr}
 8000f04:	b089      	sub	sp, #36	@ 0x24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	60f8      	str	r0, [r7, #12]
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	e007      	b.n	8000f2a <LoRa_receive+0x28>
		data[i]=0;
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	68ba      	ldr	r2, [r7, #8]
 8000f1e:	4413      	add	r3, r2
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	3301      	adds	r3, #1
 8000f28:	61bb      	str	r3, [r7, #24]
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	dbf3      	blt.n	8000f1a <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000f32:	2101      	movs	r1, #1
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff fd8f 	bl	8000a58 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000f3a:	2112      	movs	r1, #18
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff ff92 	bl	8000e66 <LoRa_read>
 8000f42:	4603      	mov	r3, r0
 8000f44:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000f46:	7cfb      	ldrb	r3, [r7, #19]
 8000f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d02f      	beq.n	8000fb0 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000f50:	22ff      	movs	r2, #255	@ 0xff
 8000f52:	2112      	movs	r1, #18
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff ffa0 	bl	8000e9a <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000f5a:	2113      	movs	r1, #19
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f7ff ff82 	bl	8000e66 <LoRa_read>
 8000f62:	4603      	mov	r3, r0
 8000f64:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000f66:	2110      	movs	r1, #16
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f7ff ff7c 	bl	8000e66 <LoRa_read>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000f72:	7cfb      	ldrb	r3, [r7, #19]
 8000f74:	461a      	mov	r2, r3
 8000f76:	210d      	movs	r1, #13
 8000f78:	68f8      	ldr	r0, [r7, #12]
 8000f7a:	f7ff ff8e 	bl	8000e9a <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000f7e:	7cba      	ldrb	r2, [r7, #18]
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4293      	cmp	r3, r2
 8000f84:	bf28      	it	cs
 8000f86:	4613      	movcs	r3, r2
 8000f88:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	e00b      	b.n	8000fa8 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	18d4      	adds	r4, r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f7ff ff64 	bl	8000e66 <LoRa_read>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	7ffb      	ldrb	r3, [r7, #31]
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	dbef      	blt.n	8000f90 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000fb0:	2105      	movs	r1, #5
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f7ff fd50 	bl	8000a58 <LoRa_gotoMode>
    return min;
 8000fb8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	@ 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd90      	pop	{r4, r7, pc}

08000fc2 <LoRa_init>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler

		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b084      	sub	sp, #16
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff82 	bl	8000ed4 <LoRa_isvalid>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 809a 	beq.w	800110c <LoRa_init+0x14a>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fd3c 	bl	8000a58 <LoRa_gotoMode>
			HAL_Delay(10);
 8000fe0:	200a      	movs	r0, #10
 8000fe2:	f000 fb35 	bl	8001650 <HAL_Delay>

		// turn on LoRa mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff3c 	bl	8000e66 <LoRa_read>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000ff2:	200a      	movs	r0, #10
 8000ff4:	f000 fb2c 	bl	8001650 <HAL_Delay>
			data = read | 0x80;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
 8000ffa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000ffe:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	461a      	mov	r2, r3
 8001004:	2101      	movs	r1, #1
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff47 	bl	8000e9a <LoRa_write>
			HAL_Delay(100);
 800100c:	2064      	movs	r0, #100	@ 0x64
 800100e:	f000 fb1f 	bl	8001650 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	edd3 7a08 	vldr	s15, [r3, #32]
 8001018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101c:	ee17 1a90 	vmov	r1, s15
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff fe51 	bl	8000cc8 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 800102c:	4619      	mov	r1, r3
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff feac 	bl	8000d8c <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 800103a:	4619      	mov	r1, r3
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f7ff feb9 	bl	8000db4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001042:	2223      	movs	r2, #35	@ 0x23
 8001044:	210c      	movs	r1, #12
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff ff27 	bl	8000e9a <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff feef 	bl	8000e30 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fe64 	bl	8000d28 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001060:	22ff      	movs	r2, #255	@ 0xff
 8001062:	211f      	movs	r1, #31
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff18 	bl	8000e9a <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	b2da      	uxtb	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4413      	add	r3, r2
 8001084:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8001086:	7bbb      	ldrb	r3, [r7, #14]
 8001088:	461a      	mov	r2, r3
 800108a:	211d      	movs	r1, #29
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff04 	bl	8000e9a <LoRa_write>
			LoRa_setAutoLDO(_LoRa);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fde2 	bl	8000c5c <LoRa_setAutoLDO>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	b29b      	uxth	r3, r3
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	2120      	movs	r1, #32
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fef7 	bl	8000e9a <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	2121      	movs	r1, #33	@ 0x21
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff feef 	bl	8000e9a <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 80010bc:	2140      	movs	r1, #64	@ 0x40
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fed1 	bl	8000e66 <LoRa_read>
 80010c4:	4603      	mov	r3, r0
 80010c6:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80010ce:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	461a      	mov	r2, r3
 80010d4:	2140      	movs	r1, #64	@ 0x40
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fedf 	bl	8000e9a <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80010dc:	2101      	movs	r1, #1
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fcba 	bl	8000a58 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2201      	movs	r2, #1
 80010e8:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 80010ea:	200a      	movs	r0, #10
 80010ec:	f000 fab0 	bl	8001650 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 80010f0:	2142      	movs	r1, #66	@ 0x42
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff feb7 	bl	8000e66 <LoRa_read>
 80010f8:	4603      	mov	r3, r0
 80010fa:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
 80010fe:	2b12      	cmp	r3, #18
 8001100:	d101      	bne.n	8001106 <LoRa_init+0x144>
				return LORA_OK;
 8001102:	23c8      	movs	r3, #200	@ 0xc8
 8001104:	e004      	b.n	8001110 <LoRa_init+0x14e>
			else
				return LORA_NOT_FOUND;
 8001106:	f44f 73ca 	mov.w	r3, #404	@ 0x194
 800110a:	e001      	b.n	8001110 <LoRa_init+0x14e>
	}
	else {
		return LORA_UNAVAILABLE;
 800110c:	f240 13f7 	movw	r3, #503	@ 0x1f7
	}
}
 8001110:	4618      	mov	r0, r3
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
 800112c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112e:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <MX_GPIO_Init+0xb4>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001132:	4a26      	ldr	r2, [pc, #152]	@ (80011cc <MX_GPIO_Init+0xb4>)
 8001134:	f043 0320 	orr.w	r3, r3, #32
 8001138:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113a:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <MX_GPIO_Init+0xb4>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113e:	f003 0320 	and.w	r3, r3, #32
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001146:	4b21      	ldr	r3, [pc, #132]	@ (80011cc <MX_GPIO_Init+0xb4>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800114a:	4a20      	ldr	r2, [pc, #128]	@ (80011cc <MX_GPIO_Init+0xb4>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001152:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <MX_GPIO_Init+0xb4>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <MX_GPIO_Init+0xb4>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001162:	4a1a      	ldr	r2, [pc, #104]	@ (80011cc <MX_GPIO_Init+0xb4>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <MX_GPIO_Init+0xb4>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	603b      	str	r3, [r7, #0]
 8001174:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f248 0140 	movw	r1, #32832	@ 0x8040
 800117c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001180:	f000 fcee 	bl	8001b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8001184:	f248 0340 	movw	r3, #32832	@ 0x8040
 8001188:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	4619      	mov	r1, r3
 800119c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011a0:	f000 fb5c 	bl	800185c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO_Pin */
  GPIO_InitStruct.Pin = DIO_Pin;
 80011a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011aa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(DIO_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011be:	f000 fb4d 	bl	800185c <HAL_GPIO_Init>

}
 80011c2:	bf00      	nop
 80011c4:	3720      	adds	r7, #32
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000

080011d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b08e      	sub	sp, #56	@ 0x38
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d6:	f000 f9ca 	bl	800156e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011da:	f000 f871 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011de:	f7ff ff9b 	bl	8001118 <MX_GPIO_Init>
  MX_SPI1_Init();
 80011e2:	f000 f8b3 	bl	800134c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myLoRa = newLoRa();
 80011e6:	4c31      	ldr	r4, [pc, #196]	@ (80012ac <main+0xdc>)
 80011e8:	463b      	mov	r3, r7
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fc0a 	bl	8000a04 <newLoRa>
 80011f0:	4625      	mov	r5, r4
 80011f2:	463c      	mov	r4, r7
 80011f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011fc:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001200:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  myLoRa.CS_port         = NSS_GPIO_Port;
 8001204:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <main+0xdc>)
 8001206:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800120a:	601a      	str	r2, [r3, #0]
  myLoRa.CS_pin          = NSS_Pin;
 800120c:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <main+0xdc>)
 800120e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001212:	809a      	strh	r2, [r3, #4]
  myLoRa.reset_port      = RST_GPIO_Port;
 8001214:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <main+0xdc>)
 8001216:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800121a:	609a      	str	r2, [r3, #8]
  myLoRa.reset_pin       = RST_Pin;
 800121c:	4b23      	ldr	r3, [pc, #140]	@ (80012ac <main+0xdc>)
 800121e:	2240      	movs	r2, #64	@ 0x40
 8001220:	819a      	strh	r2, [r3, #12]
  myLoRa.DIO0_port       = DIO_GPIO_Port;
 8001222:	4b22      	ldr	r3, [pc, #136]	@ (80012ac <main+0xdc>)
 8001224:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8001228:	611a      	str	r2, [r3, #16]
  myLoRa.DIO0_pin        = DIO_Pin;
 800122a:	4b20      	ldr	r3, [pc, #128]	@ (80012ac <main+0xdc>)
 800122c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001230:	829a      	strh	r2, [r3, #20]
  myLoRa.hSPIx           = &hspi1;
 8001232:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <main+0xdc>)
 8001234:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <main+0xe0>)
 8001236:	619a      	str	r2, [r3, #24]

  myLoRa.frequency             = 433.633;             // default = 433 MHz
 8001238:	4b1c      	ldr	r3, [pc, #112]	@ (80012ac <main+0xdc>)
 800123a:	4a1e      	ldr	r2, [pc, #120]	@ (80012b4 <main+0xe4>)
 800123c:	621a      	str	r2, [r3, #32]
  myLoRa.spredingFactor        = SF_7;            // default = SF_7
 800123e:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <main+0xdc>)
 8001240:	2207      	movs	r2, #7
 8001242:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  myLoRa.bandWidth             = BW_500KHz;       // default = BW_125KHz
 8001246:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <main+0xdc>)
 8001248:	2209      	movs	r2, #9
 800124a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  myLoRa.crcRate               = CR_4_5;          // default = CR_4_5
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <main+0xdc>)
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  myLoRa.power                 = POWER_20db;      // default = 20db
 8001256:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <main+0xdc>)
 8001258:	22ff      	movs	r2, #255	@ 0xff
 800125a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  myLoRa.overCurrentProtection = 250;             // default = 100 mA
 800125e:	4b13      	ldr	r3, [pc, #76]	@ (80012ac <main+0xdc>)
 8001260:	22fa      	movs	r2, #250	@ 0xfa
 8001262:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  myLoRa.preamble              = 8;              // default = 8;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <main+0xdc>)
 8001268:	2208      	movs	r2, #8
 800126a:	851a      	strh	r2, [r3, #40]	@ 0x28


if(LoRa_init(&myLoRa)==LORA_OK){
 800126c:	480f      	ldr	r0, [pc, #60]	@ (80012ac <main+0xdc>)
 800126e:	f7ff fea8 	bl	8000fc2 <LoRa_init>
 8001272:	4603      	mov	r3, r0
 8001274:	2bc8      	cmp	r3, #200	@ 0xc8
 8001276:	d102      	bne.n	800127e <main+0xae>
	lora_stat = 1;
 8001278:	4b0f      	ldr	r3, [pc, #60]	@ (80012b8 <main+0xe8>)
 800127a:	2201      	movs	r2, #1
 800127c:	801a      	strh	r2, [r3, #0]

}

LoRa_startReceiving(&myLoRa);
 800127e:	480b      	ldr	r0, [pc, #44]	@ (80012ac <main+0xdc>)
 8001280:	f7ff fe33 	bl	8000eea <LoRa_startReceiving>
uint16_t txbuffer[3];
txbuffer[0]=45;
 8001284:	232d      	movs	r3, #45	@ 0x2d
 8001286:	863b      	strh	r3, [r7, #48]	@ 0x30
txbuffer[1]=0x12;
 8001288:	2312      	movs	r3, #18
 800128a:	867b      	strh	r3, [r7, #50]	@ 0x32
txbuffer[2]='G';
 800128c:	2347      	movs	r3, #71	@ 0x47
 800128e:	86bb      	strh	r3, [r7, #52]	@ 0x34



HAL_Delay(1000);
 8001290:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001294:	f000 f9dc 	bl	8001650 <HAL_Delay>

    /* USER CODE BEGIN 3 */


//	  LoRa_transmit(&myLoRa, txbuffer,3, 500);
	  LoRa_receive(&myLoRa, Bxbuffer, sizeof(Bxbuffer));
 8001298:	2200      	movs	r2, #0
 800129a:	4908      	ldr	r1, [pc, #32]	@ (80012bc <main+0xec>)
 800129c:	4803      	ldr	r0, [pc, #12]	@ (80012ac <main+0xdc>)
 800129e:	f7ff fe30 	bl	8000f02 <LoRa_receive>
	  HAL_Delay(100);
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	f000 f9d4 	bl	8001650 <HAL_Delay>
	  LoRa_receive(&myLoRa, Bxbuffer, sizeof(Bxbuffer));
 80012a8:	bf00      	nop
 80012aa:	e7f5      	b.n	8001298 <main+0xc8>
 80012ac:	20000028 	.word	0x20000028
 80012b0:	20000158 	.word	0x20000158
 80012b4:	43d8d106 	.word	0x43d8d106
 80012b8:	20000054 	.word	0x20000054
 80012bc:	20000058 	.word	0x20000058

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	@ 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	2238      	movs	r2, #56	@ 0x38
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f94a 	bl	8003568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80012e6:	f000 fc53 	bl	8001b90 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f4:	2340      	movs	r3, #64	@ 0x40
 80012f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fcf9 	bl	8001cf8 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800130c:	f000 f818 	bl	8001340 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001314:	2301      	movs	r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fff7 	bl	800231c <HAL_RCC_ClockConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001334:	f000 f804 	bl	8001340 <Error_Handler>
  }
}
 8001338:	bf00      	nop
 800133a:	3750      	adds	r7, #80	@ 0x50
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	bf00      	nop
 800134a:	e7fd      	b.n	8001348 <Error_Handler+0x8>

0800134c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001350:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_SPI1_Init+0x74>)
 8001352:	4a1c      	ldr	r2, [pc, #112]	@ (80013c4 <MX_SPI1_Init+0x78>)
 8001354:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001356:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_SPI1_Init+0x74>)
 8001358:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800135c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <MX_SPI1_Init+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_SPI1_Init+0x74>)
 8001366:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800136a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_SPI1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_SPI1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_SPI1_Init+0x74>)
 800137a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_SPI1_Init+0x74>)
 8001382:	2220      	movs	r2, #32
 8001384:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_SPI1_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_SPI1_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_SPI1_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_SPI1_Init+0x74>)
 800139a:	2207      	movs	r2, #7
 800139c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_SPI1_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_SPI1_Init+0x74>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_SPI1_Init+0x74>)
 80013ac:	f001 f99a 	bl	80026e4 <HAL_SPI_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f7ff ffc3 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000158 	.word	0x20000158
 80013c4:	40013000 	.word	0x40013000

080013c8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	@ 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <HAL_SPI_MspInit+0x7c>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d127      	bne.n	800143a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ea:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ee:	4a16      	ldr	r2, [pc, #88]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 80013f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013f6:	4b14      	ldr	r3, [pc, #80]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001406:	4a10      	ldr	r2, [pc, #64]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140e:	4b0e      	ldr	r3, [pc, #56]	@ (8001448 <HAL_SPI_MspInit+0x80>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800141a:	2338      	movs	r3, #56	@ 0x38
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141e:	2302      	movs	r3, #2
 8001420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	2300      	movs	r3, #0
 8001424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142a:	2305      	movs	r3, #5
 800142c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	f107 0314 	add.w	r3, r7, #20
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	@ (800144c <HAL_SPI_MspInit+0x84>)
 8001436:	f000 fa11 	bl	800185c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800143a:	bf00      	nop
 800143c:	3728      	adds	r7, #40	@ 0x28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	40013000 	.word	0x40013000
 8001448:	40021000 	.word	0x40021000
 800144c:	48000400 	.word	0x48000400

08001450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001456:	4b0f      	ldr	r3, [pc, #60]	@ (8001494 <HAL_MspInit+0x44>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800145a:	4a0e      	ldr	r2, [pc, #56]	@ (8001494 <HAL_MspInit+0x44>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6613      	str	r3, [r2, #96]	@ 0x60
 8001462:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <HAL_MspInit+0x44>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_MspInit+0x44>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001472:	4a08      	ldr	r2, [pc, #32]	@ (8001494 <HAL_MspInit+0x44>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001478:	6593      	str	r3, [r2, #88]	@ 0x58
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_MspInit+0x44>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001486:	f000 fc27 	bl	8001cd8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800149c:	bf00      	nop
 800149e:	e7fd      	b.n	800149c <NMI_Handler+0x4>

080014a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <MemManage_Handler+0x4>

080014b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <UsageFault_Handler+0x4>

080014c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ee:	f000 f891 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800151c:	480d      	ldr	r0, [pc, #52]	@ (8001554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800151e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001520:	f7ff ffea 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001524:	480c      	ldr	r0, [pc, #48]	@ (8001558 <LoopForever+0x6>)
  ldr r1, =_edata
 8001526:	490d      	ldr	r1, [pc, #52]	@ (800155c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001528:	4a0d      	ldr	r2, [pc, #52]	@ (8001560 <LoopForever+0xe>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <LoopForever+0x12>)
  ldr r4, =_ebss
 800153c:	4c0a      	ldr	r4, [pc, #40]	@ (8001568 <LoopForever+0x16>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154a:	f002 f815 	bl	8003578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800154e:	f7ff fe3f 	bl	80011d0 <main>

08001552 <LoopForever>:

LoopForever:
    b LoopForever
 8001552:	e7fe      	b.n	8001552 <LoopForever>
  ldr   r0, =_estack
 8001554:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001560:	08003660 	.word	0x08003660
  ldr r2, =_sbss
 8001564:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001568:	200001c0 	.word	0x200001c0

0800156c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC1_2_IRQHandler>

0800156e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001574:	2300      	movs	r3, #0
 8001576:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001578:	2003      	movs	r0, #3
 800157a:	f000 f93d 	bl	80017f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800157e:	200f      	movs	r0, #15
 8001580:	f000 f80e 	bl	80015a0 <HAL_InitTick>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d002      	beq.n	8001590 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	71fb      	strb	r3, [r7, #7]
 800158e:	e001      	b.n	8001594 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001590:	f7ff ff5e 	bl	8001450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001594:	79fb      	ldrb	r3, [r7, #7]

}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
	...

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80015ac:	4b16      	ldr	r3, [pc, #88]	@ (8001608 <HAL_InitTick+0x68>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d022      	beq.n	80015fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <HAL_InitTick+0x6c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <HAL_InitTick+0x68>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80015c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f000 f93a 	bl	8001842 <HAL_SYSTICK_Config>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10f      	bne.n	80015f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b0f      	cmp	r3, #15
 80015d8:	d809      	bhi.n	80015ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015da:	2200      	movs	r2, #0
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	f04f 30ff 	mov.w	r0, #4294967295
 80015e2:	f000 f914 	bl	800180e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001610 <HAL_InitTick+0x70>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6013      	str	r3, [r2, #0]
 80015ec:	e007      	b.n	80015fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
 80015f2:	e004      	b.n	80015fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	73fb      	strb	r3, [r7, #15]
 80015f8:	e001      	b.n	80015fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000008 	.word	0x20000008
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_IncTick+0x1c>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b05      	ldr	r3, [pc, #20]	@ (8001634 <HAL_IncTick+0x20>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4413      	add	r3, r2
 8001622:	4a03      	ldr	r2, [pc, #12]	@ (8001630 <HAL_IncTick+0x1c>)
 8001624:	6013      	str	r3, [r2, #0]
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	200001bc 	.word	0x200001bc
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return uwTick;
 800163c:	4b03      	ldr	r3, [pc, #12]	@ (800164c <HAL_GetTick+0x14>)
 800163e:	681b      	ldr	r3, [r3, #0]
}
 8001640:	4618      	mov	r0, r3
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	200001bc 	.word	0x200001bc

08001650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001658:	f7ff ffee 	bl	8001638 <HAL_GetTick>
 800165c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001668:	d004      	beq.n	8001674 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800166a:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <HAL_Delay+0x40>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4413      	add	r3, r2
 8001672:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001674:	bf00      	nop
 8001676:	f7ff ffdf 	bl	8001638 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	429a      	cmp	r2, r3
 8001684:	d8f7      	bhi.n	8001676 <HAL_Delay+0x26>
  {
  }
}
 8001686:	bf00      	nop
 8001688:	bf00      	nop
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000008 	.word	0x20000008

08001694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001694:	b480      	push	{r7}
 8001696:	b085      	sub	sp, #20
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016aa:	68ba      	ldr	r2, [r7, #8]
 80016ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016b0:	4013      	ands	r3, r2
 80016b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016c6:	4a04      	ldr	r2, [pc, #16]	@ (80016d8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	60d3      	str	r3, [r2, #12]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <__NVIC_GetPriorityGrouping+0x18>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	f003 0307 	and.w	r3, r3, #7
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	6039      	str	r1, [r7, #0]
 8001702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	2b00      	cmp	r3, #0
 800170a:	db0a      	blt.n	8001722 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	b2da      	uxtb	r2, r3
 8001710:	490c      	ldr	r1, [pc, #48]	@ (8001744 <__NVIC_SetPriority+0x4c>)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	0112      	lsls	r2, r2, #4
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	440b      	add	r3, r1
 800171c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001720:	e00a      	b.n	8001738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4908      	ldr	r1, [pc, #32]	@ (8001748 <__NVIC_SetPriority+0x50>)
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	3b04      	subs	r3, #4
 8001730:	0112      	lsls	r2, r2, #4
 8001732:	b2d2      	uxtb	r2, r2
 8001734:	440b      	add	r3, r1
 8001736:	761a      	strb	r2, [r3, #24]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100
 8001748:	e000ed00 	.word	0xe000ed00

0800174c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800174c:	b480      	push	{r7}
 800174e:	b089      	sub	sp, #36	@ 0x24
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 0307 	and.w	r3, r3, #7
 800175e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f1c3 0307 	rsb	r3, r3, #7
 8001766:	2b04      	cmp	r3, #4
 8001768:	bf28      	it	cs
 800176a:	2304      	movcs	r3, #4
 800176c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	3304      	adds	r3, #4
 8001772:	2b06      	cmp	r3, #6
 8001774:	d902      	bls.n	800177c <NVIC_EncodePriority+0x30>
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	3b03      	subs	r3, #3
 800177a:	e000      	b.n	800177e <NVIC_EncodePriority+0x32>
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001780:	f04f 32ff 	mov.w	r2, #4294967295
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	401a      	ands	r2, r3
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001794:	f04f 31ff 	mov.w	r1, #4294967295
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	fa01 f303 	lsl.w	r3, r1, r3
 800179e:	43d9      	mvns	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	4313      	orrs	r3, r2
         );
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3724      	adds	r7, #36	@ 0x24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017c4:	d301      	bcc.n	80017ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017c6:	2301      	movs	r3, #1
 80017c8:	e00f      	b.n	80017ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ca:	4a0a      	ldr	r2, [pc, #40]	@ (80017f4 <SysTick_Config+0x40>)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017d2:	210f      	movs	r1, #15
 80017d4:	f04f 30ff 	mov.w	r0, #4294967295
 80017d8:	f7ff ff8e 	bl	80016f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017dc:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <SysTick_Config+0x40>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017e2:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <SysTick_Config+0x40>)
 80017e4:	2207      	movs	r2, #7
 80017e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	e000e010 	.word	0xe000e010

080017f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff ff47 	bl	8001694 <__NVIC_SetPriorityGrouping>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	60b9      	str	r1, [r7, #8]
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800181c:	f7ff ff5e 	bl	80016dc <__NVIC_GetPriorityGrouping>
 8001820:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68b9      	ldr	r1, [r7, #8]
 8001826:	6978      	ldr	r0, [r7, #20]
 8001828:	f7ff ff90 	bl	800174c <NVIC_EncodePriority>
 800182c:	4602      	mov	r2, r0
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff5f 	bl	80016f8 <__NVIC_SetPriority>
}
 800183a:	bf00      	nop
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffb2 	bl	80017b4 <SysTick_Config>
 8001850:	4603      	mov	r3, r0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800186a:	e15a      	b.n	8001b22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	2101      	movs	r1, #1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	fa01 f303 	lsl.w	r3, r1, r3
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 814c 	beq.w	8001b1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d005      	beq.n	800189c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001898:	2b02      	cmp	r3, #2
 800189a:	d130      	bne.n	80018fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	4013      	ands	r3, r2
 80018b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	693a      	ldr	r2, [r7, #16]
 80018ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018d2:	2201      	movs	r2, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	091b      	lsrs	r3, r3, #4
 80018e8:	f003 0201 	and.w	r2, r3, #1
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	2b03      	cmp	r3, #3
 8001908:	d017      	beq.n	800193a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d123      	bne.n	800198e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	6939      	ldr	r1, [r7, #16]
 800198a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0203 	and.w	r2, r3, #3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 80a6 	beq.w	8001b1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019d4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6613      	str	r3, [r2, #96]	@ 0x60
 80019dc:	4b58      	ldr	r3, [pc, #352]	@ (8001b40 <HAL_GPIO_Init+0x2e4>)
 80019de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e8:	4a56      	ldr	r2, [pc, #344]	@ (8001b44 <HAL_GPIO_Init+0x2e8>)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a12:	d01f      	beq.n	8001a54 <HAL_GPIO_Init+0x1f8>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a4c      	ldr	r2, [pc, #304]	@ (8001b48 <HAL_GPIO_Init+0x2ec>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d019      	beq.n	8001a50 <HAL_GPIO_Init+0x1f4>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	4a4b      	ldr	r2, [pc, #300]	@ (8001b4c <HAL_GPIO_Init+0x2f0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d013      	beq.n	8001a4c <HAL_GPIO_Init+0x1f0>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	4a4a      	ldr	r2, [pc, #296]	@ (8001b50 <HAL_GPIO_Init+0x2f4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d00d      	beq.n	8001a48 <HAL_GPIO_Init+0x1ec>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	4a49      	ldr	r2, [pc, #292]	@ (8001b54 <HAL_GPIO_Init+0x2f8>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d007      	beq.n	8001a44 <HAL_GPIO_Init+0x1e8>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a48      	ldr	r2, [pc, #288]	@ (8001b58 <HAL_GPIO_Init+0x2fc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <HAL_GPIO_Init+0x1e4>
 8001a3c:	2305      	movs	r3, #5
 8001a3e:	e00a      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a40:	2306      	movs	r3, #6
 8001a42:	e008      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a44:	2304      	movs	r3, #4
 8001a46:	e006      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e004      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e002      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a50:	2301      	movs	r3, #1
 8001a52:	e000      	b.n	8001a56 <HAL_GPIO_Init+0x1fa>
 8001a54:	2300      	movs	r3, #0
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	f002 0203 	and.w	r2, r2, #3
 8001a5c:	0092      	lsls	r2, r2, #2
 8001a5e:	4093      	lsls	r3, r2
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a66:	4937      	ldr	r1, [pc, #220]	@ (8001b44 <HAL_GPIO_Init+0x2e8>)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a74:	4b39      	ldr	r3, [pc, #228]	@ (8001b5c <HAL_GPIO_Init+0x300>)
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a98:	4a30      	ldr	r2, [pc, #192]	@ (8001b5c <HAL_GPIO_Init+0x300>)
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b5c <HAL_GPIO_Init+0x300>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ac2:	4a26      	ldr	r2, [pc, #152]	@ (8001b5c <HAL_GPIO_Init+0x300>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ac8:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <HAL_GPIO_Init+0x300>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aec:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <HAL_GPIO_Init+0x300>)
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_GPIO_Init+0x300>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	693a      	ldr	r2, [r7, #16]
 8001afe:	4013      	ands	r3, r2
 8001b00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b16:	4a11      	ldr	r2, [pc, #68]	@ (8001b5c <HAL_GPIO_Init+0x300>)
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	3301      	adds	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	fa22 f303 	lsr.w	r3, r2, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f47f ae9d 	bne.w	800186c <HAL_GPIO_Init+0x10>
  }
}
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40010000 	.word	0x40010000
 8001b48:	48000400 	.word	0x48000400
 8001b4c:	48000800 	.word	0x48000800
 8001b50:	48000c00 	.word	0x48000c00
 8001b54:	48001000 	.word	0x48001000
 8001b58:	48001400 	.word	0x48001400
 8001b5c:	40010400 	.word	0x40010400

08001b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b76:	887a      	ldrh	r2, [r7, #2]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b7c:	e002      	b.n	8001b84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b7e:	887a      	ldrh	r2, [r7, #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d141      	bne.n	8001c22 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b9e:	4b4b      	ldr	r3, [pc, #300]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001baa:	d131      	bne.n	8001c10 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bac:	4b47      	ldr	r3, [pc, #284]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bb2:	4a46      	ldr	r2, [pc, #280]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001bb8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbc:	4b43      	ldr	r3, [pc, #268]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bc4:	4a41      	ldr	r2, [pc, #260]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bcc:	4b40      	ldr	r3, [pc, #256]	@ (8001cd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2232      	movs	r2, #50	@ 0x32
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	4a3f      	ldr	r2, [pc, #252]	@ (8001cd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bdc:	0c9b      	lsrs	r3, r3, #18
 8001bde:	3301      	adds	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001be2:	e002      	b.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bea:	4b38      	ldr	r3, [pc, #224]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bf6:	d102      	bne.n	8001bfe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f2      	bne.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bfe:	4b33      	ldr	r3, [pc, #204]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c0a:	d158      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e057      	b.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c10:	4b2e      	ldr	r3, [pc, #184]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c16:	4a2d      	ldr	r2, [pc, #180]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001c20:	e04d      	b.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c28:	d141      	bne.n	8001cae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c2a:	4b28      	ldr	r3, [pc, #160]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c36:	d131      	bne.n	8001c9c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c38:	4b24      	ldr	r3, [pc, #144]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001c3e:	4a23      	ldr	r2, [pc, #140]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c48:	4b20      	ldr	r3, [pc, #128]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001c50:	4a1e      	ldr	r2, [pc, #120]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c58:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2232      	movs	r2, #50	@ 0x32
 8001c5e:	fb02 f303 	mul.w	r3, r2, r3
 8001c62:	4a1c      	ldr	r2, [pc, #112]	@ (8001cd4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c64:	fba2 2303 	umull	r2, r3, r2, r3
 8001c68:	0c9b      	lsrs	r3, r3, #18
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6e:	e002      	b.n	8001c76 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c82:	d102      	bne.n	8001c8a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f2      	bne.n	8001c70 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c8a:	4b10      	ldr	r3, [pc, #64]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c96:	d112      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e011      	b.n	8001cc0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ca8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001cac:	e007      	b.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001cae:	4b07      	ldr	r3, [pc, #28]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001cb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ccc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cbc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3714      	adds	r7, #20
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	20000000 	.word	0x20000000
 8001cd4:	431bde83 	.word	0x431bde83

08001cd8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ce2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce6:	6093      	str	r3, [r2, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	40007000 	.word	0x40007000

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e2fe      	b.n	8002308 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d075      	beq.n	8001e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d16:	4b97      	ldr	r3, [pc, #604]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d20:	4b94      	ldr	r3, [pc, #592]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	2b0c      	cmp	r3, #12
 8001d2e:	d102      	bne.n	8001d36 <HAL_RCC_OscConfig+0x3e>
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b03      	cmp	r3, #3
 8001d34:	d002      	beq.n	8001d3c <HAL_RCC_OscConfig+0x44>
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d10b      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4b8d      	ldr	r3, [pc, #564]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x108>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d157      	bne.n	8001e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e2d9      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x74>
 8001d5e:	4b85      	ldr	r3, [pc, #532]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a84      	ldr	r2, [pc, #528]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b7f      	ldr	r3, [pc, #508]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a7e      	ldr	r2, [pc, #504]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b7c      	ldr	r3, [pc, #496]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7b      	ldr	r2, [pc, #492]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d90:	4b78      	ldr	r3, [pc, #480]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a77      	ldr	r2, [pc, #476]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b75      	ldr	r3, [pc, #468]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a74      	ldr	r2, [pc, #464]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff fc42 	bl	8001638 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff fc3e 	bl	8001638 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e29e      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dca:	4b6a      	ldr	r3, [pc, #424]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xc0>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fc2e 	bl	8001638 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff fc2a 	bl	8001638 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e28a      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001df2:	4b60      	ldr	r3, [pc, #384]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0xe8>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d075      	beq.n	8001efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e0e:	4b59      	ldr	r3, [pc, #356]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e18:	4b56      	ldr	r3, [pc, #344]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	2b0c      	cmp	r3, #12
 8001e26:	d102      	bne.n	8001e2e <HAL_RCC_OscConfig+0x136>
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d002      	beq.n	8001e34 <HAL_RCC_OscConfig+0x13c>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d11f      	bne.n	8001e74 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e34:	4b4f      	ldr	r3, [pc, #316]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_OscConfig+0x154>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e25d      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4c:	4b49      	ldr	r3, [pc, #292]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	061b      	lsls	r3, r3, #24
 8001e5a:	4946      	ldr	r1, [pc, #280]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e60:	4b45      	ldr	r3, [pc, #276]	@ (8001f78 <HAL_RCC_OscConfig+0x280>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fb9b 	bl	80015a0 <HAL_InitTick>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d043      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e249      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d023      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e7c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a3c      	ldr	r2, [pc, #240]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7ff fbd6 	bl	8001638 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e90:	f7ff fbd2 	bl	8001638 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e232      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ea2:	4b34      	ldr	r3, [pc, #208]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	061b      	lsls	r3, r3, #24
 8001ebc:	492d      	ldr	r1, [pc, #180]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	604b      	str	r3, [r1, #4]
 8001ec2:	e01a      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001eca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fbb2 	bl	8001638 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fbae 	bl	8001638 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e20e      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eea:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f0      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x1e0>
 8001ef6:	e000      	b.n	8001efa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ef8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d041      	beq.n	8001f8a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01c      	beq.n	8001f48 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f14:	4a17      	ldr	r2, [pc, #92]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001f16:	f043 0301 	orr.w	r3, r3, #1
 8001f1a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f1e:	f7ff fb8b 	bl	8001638 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff fb87 	bl	8001638 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e1e7      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f38:	4b0e      	ldr	r3, [pc, #56]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0ef      	beq.n	8001f26 <HAL_RCC_OscConfig+0x22e>
 8001f46:	e020      	b.n	8001f8a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f48:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f4e:	4a09      	ldr	r2, [pc, #36]	@ (8001f74 <HAL_RCC_OscConfig+0x27c>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff fb6e 	bl	8001638 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f5e:	e00d      	b.n	8001f7c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f60:	f7ff fb6a 	bl	8001638 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d906      	bls.n	8001f7c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e1ca      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
 8001f72:	bf00      	nop
 8001f74:	40021000 	.word	0x40021000
 8001f78:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f7c:	4b8c      	ldr	r3, [pc, #560]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1ea      	bne.n	8001f60 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80a6 	beq.w	80020e4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f9c:	4b84      	ldr	r3, [pc, #528]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_RCC_OscConfig+0x2b4>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x2b6>
 8001fac:	2300      	movs	r3, #0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	4a7e      	ldr	r2, [pc, #504]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8001fb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	@ 0x58
 8001fbe:	4b7c      	ldr	r3, [pc, #496]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fce:	4b79      	ldr	r3, [pc, #484]	@ (80021b4 <HAL_RCC_OscConfig+0x4bc>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d118      	bne.n	800200c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fda:	4b76      	ldr	r3, [pc, #472]	@ (80021b4 <HAL_RCC_OscConfig+0x4bc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a75      	ldr	r2, [pc, #468]	@ (80021b4 <HAL_RCC_OscConfig+0x4bc>)
 8001fe0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fb27 	bl	8001638 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fee:	f7ff fb23 	bl	8001638 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e183      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002000:	4b6c      	ldr	r3, [pc, #432]	@ (80021b4 <HAL_RCC_OscConfig+0x4bc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d108      	bne.n	8002026 <HAL_RCC_OscConfig+0x32e>
 8002014:	4b66      	ldr	r3, [pc, #408]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002016:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800201a:	4a65      	ldr	r2, [pc, #404]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002024:	e024      	b.n	8002070 <HAL_RCC_OscConfig+0x378>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b05      	cmp	r3, #5
 800202c:	d110      	bne.n	8002050 <HAL_RCC_OscConfig+0x358>
 800202e:	4b60      	ldr	r3, [pc, #384]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002034:	4a5e      	ldr	r2, [pc, #376]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002036:	f043 0304 	orr.w	r3, r3, #4
 800203a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800203e:	4b5c      	ldr	r3, [pc, #368]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002040:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002044:	4a5a      	ldr	r2, [pc, #360]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002046:	f043 0301 	orr.w	r3, r3, #1
 800204a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800204e:	e00f      	b.n	8002070 <HAL_RCC_OscConfig+0x378>
 8002050:	4b57      	ldr	r3, [pc, #348]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002056:	4a56      	ldr	r2, [pc, #344]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002060:	4b53      	ldr	r3, [pc, #332]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002066:	4a52      	ldr	r2, [pc, #328]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002068:	f023 0304 	bic.w	r3, r3, #4
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d016      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fade 	bl	8001638 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800207e:	e00a      	b.n	8002096 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002080:	f7ff fada 	bl	8001638 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e138      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002096:	4b46      	ldr	r3, [pc, #280]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ed      	beq.n	8002080 <HAL_RCC_OscConfig+0x388>
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a6:	f7ff fac7 	bl	8001638 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff fac3 	bl	8001638 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e121      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020c4:	4b3a      	ldr	r3, [pc, #232]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ed      	bne.n	80020ae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020d2:	7ffb      	ldrb	r3, [r7, #31]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d105      	bne.n	80020e4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d8:	4b35      	ldr	r3, [pc, #212]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020dc:	4a34      	ldr	r2, [pc, #208]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 80020de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0320 	and.w	r3, r3, #32
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03c      	beq.n	800216a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01c      	beq.n	8002132 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80020f8:	4b2d      	ldr	r3, [pc, #180]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 80020fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80020fe:	4a2c      	ldr	r2, [pc, #176]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fa96 	bl	8001638 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002110:	f7ff fa92 	bl	8001638 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0f2      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002122:	4b23      	ldr	r3, [pc, #140]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002124:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0ef      	beq.n	8002110 <HAL_RCC_OscConfig+0x418>
 8002130:	e01b      	b.n	800216a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002132:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002134:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002138:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002142:	f7ff fa79 	bl	8001638 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002148:	e008      	b.n	800215c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800214a:	f7ff fa75 	bl	8001638 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d901      	bls.n	800215c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e0d5      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800215c:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1ef      	bne.n	800214a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80c9 	beq.w	8002306 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002174:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f003 030c 	and.w	r3, r3, #12
 800217c:	2b0c      	cmp	r3, #12
 800217e:	f000 8083 	beq.w	8002288 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d15e      	bne.n	8002248 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218a:	4b09      	ldr	r3, [pc, #36]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a08      	ldr	r2, [pc, #32]	@ (80021b0 <HAL_RCC_OscConfig+0x4b8>)
 8002190:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7ff fa4f 	bl	8001638 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219c:	e00c      	b.n	80021b8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7ff fa4b 	bl	8001638 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d905      	bls.n	80021b8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e0ab      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	4b55      	ldr	r3, [pc, #340]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ec      	bne.n	800219e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021c4:	4b52      	ldr	r3, [pc, #328]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	4b52      	ldr	r3, [pc, #328]	@ (8002314 <HAL_RCC_OscConfig+0x61c>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6a11      	ldr	r1, [r2, #32]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021d4:	3a01      	subs	r2, #1
 80021d6:	0112      	lsls	r2, r2, #4
 80021d8:	4311      	orrs	r1, r2
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80021de:	0212      	lsls	r2, r2, #8
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80021e6:	0852      	lsrs	r2, r2, #1
 80021e8:	3a01      	subs	r2, #1
 80021ea:	0552      	lsls	r2, r2, #21
 80021ec:	4311      	orrs	r1, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80021f2:	0852      	lsrs	r2, r2, #1
 80021f4:	3a01      	subs	r2, #1
 80021f6:	0652      	lsls	r2, r2, #25
 80021f8:	4311      	orrs	r1, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021fe:	06d2      	lsls	r2, r2, #27
 8002200:	430a      	orrs	r2, r1
 8002202:	4943      	ldr	r1, [pc, #268]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 8002204:	4313      	orrs	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002208:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a40      	ldr	r2, [pc, #256]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 800220e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002212:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002214:	4b3e      	ldr	r3, [pc, #248]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	4a3d      	ldr	r2, [pc, #244]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 800221a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800221e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002220:	f7ff fa0a 	bl	8001638 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002228:	f7ff fa06 	bl	8001638 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e066      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223a:	4b35      	ldr	r3, [pc, #212]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x530>
 8002246:	e05e      	b.n	8002306 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b31      	ldr	r3, [pc, #196]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a30      	ldr	r2, [pc, #192]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 800224e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7ff f9f0 	bl	8001638 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff f9ec 	bl	8001638 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e04c      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226e:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800227a:	4b25      	ldr	r3, [pc, #148]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4924      	ldr	r1, [pc, #144]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 8002280:	4b25      	ldr	r3, [pc, #148]	@ (8002318 <HAL_RCC_OscConfig+0x620>)
 8002282:	4013      	ands	r3, r2
 8002284:	60cb      	str	r3, [r1, #12]
 8002286:	e03e      	b.n	8002306 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e039      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002294:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <HAL_RCC_OscConfig+0x618>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	f003 0203 	and.w	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d12c      	bne.n	8002302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	3b01      	subs	r3, #1
 80022b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d123      	bne.n	8002302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d11b      	bne.n	8002302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d113      	bne.n	8002302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	085b      	lsrs	r3, r3, #1
 80022e6:	3b01      	subs	r3, #1
 80022e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022f8:	085b      	lsrs	r3, r3, #1
 80022fa:	3b01      	subs	r3, #1
 80022fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d001      	beq.n	8002306 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	019f800c 	.word	0x019f800c
 8002318:	feeefffc 	.word	0xfeeefffc

0800231c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e11e      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b91      	ldr	r3, [pc, #580]	@ (800257c <HAL_RCC_ClockConfig+0x260>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 030f 	and.w	r3, r3, #15
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b8e      	ldr	r3, [pc, #568]	@ (800257c <HAL_RCC_ClockConfig+0x260>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 020f 	bic.w	r2, r3, #15
 800234a:	498c      	ldr	r1, [pc, #560]	@ (800257c <HAL_RCC_ClockConfig+0x260>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b8a      	ldr	r3, [pc, #552]	@ (800257c <HAL_RCC_ClockConfig+0x260>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e106      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b00      	cmp	r3, #0
 800236e:	d073      	beq.n	8002458 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b03      	cmp	r3, #3
 8002376:	d129      	bne.n	80023cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002378:	4b81      	ldr	r3, [pc, #516]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0f4      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002388:	f000 f966 	bl	8002658 <RCC_GetSysClockFreqFromPLLSource>
 800238c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4a7c      	ldr	r2, [pc, #496]	@ (8002584 <HAL_RCC_ClockConfig+0x268>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d93f      	bls.n	8002416 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002396:	4b7a      	ldr	r3, [pc, #488]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d033      	beq.n	8002416 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d12f      	bne.n	8002416 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023b6:	4b72      	ldr	r3, [pc, #456]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023be:	4a70      	ldr	r2, [pc, #448]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 80023c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	e024      	b.n	8002416 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d109      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0c6      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e4:	4b66      	ldr	r3, [pc, #408]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0be      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80023f4:	f000 f8ce 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 80023f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4a61      	ldr	r2, [pc, #388]	@ (8002584 <HAL_RCC_ClockConfig+0x268>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d909      	bls.n	8002416 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002402:	4b5f      	ldr	r3, [pc, #380]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800240a:	4a5d      	ldr	r2, [pc, #372]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 800240c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002410:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002412:	2380      	movs	r3, #128	@ 0x80
 8002414:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002416:	4b5a      	ldr	r3, [pc, #360]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 0203 	bic.w	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4957      	ldr	r1, [pc, #348]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002428:	f7ff f906 	bl	8001638 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242e:	e00a      	b.n	8002446 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002430:	f7ff f902 	bl	8001638 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e095      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	4b4e      	ldr	r3, [pc, #312]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 020c 	and.w	r2, r3, #12
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d1eb      	bne.n	8002430 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d023      	beq.n	80024ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002470:	4b43      	ldr	r3, [pc, #268]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a42      	ldr	r2, [pc, #264]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002476:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800247a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	2b00      	cmp	r3, #0
 8002486:	d007      	beq.n	8002498 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002488:	4b3d      	ldr	r3, [pc, #244]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002490:	4a3b      	ldr	r2, [pc, #236]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002492:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b39      	ldr	r3, [pc, #228]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4936      	ldr	r1, [pc, #216]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	608b      	str	r3, [r1, #8]
 80024aa:	e008      	b.n	80024be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b80      	cmp	r3, #128	@ 0x80
 80024b0:	d105      	bne.n	80024be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024b2:	4b33      	ldr	r3, [pc, #204]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4a32      	ldr	r2, [pc, #200]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 80024b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024be:	4b2f      	ldr	r3, [pc, #188]	@ (800257c <HAL_RCC_ClockConfig+0x260>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d21d      	bcs.n	8002508 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024cc:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <HAL_RCC_ClockConfig+0x260>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f023 020f 	bic.w	r2, r3, #15
 80024d4:	4929      	ldr	r1, [pc, #164]	@ (800257c <HAL_RCC_ClockConfig+0x260>)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024dc:	f7ff f8ac 	bl	8001638 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7ff f8a8 	bl	8001638 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e03b      	b.n	8002572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fa:	4b20      	ldr	r3, [pc, #128]	@ (800257c <HAL_RCC_ClockConfig+0x260>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d1ed      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	4b1a      	ldr	r3, [pc, #104]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	4917      	ldr	r1, [pc, #92]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	490f      	ldr	r1, [pc, #60]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002546:	f000 f825 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800254a:	4602      	mov	r2, r0
 800254c:	4b0c      	ldr	r3, [pc, #48]	@ (8002580 <HAL_RCC_ClockConfig+0x264>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	490c      	ldr	r1, [pc, #48]	@ (8002588 <HAL_RCC_ClockConfig+0x26c>)
 8002558:	5ccb      	ldrb	r3, [r1, r3]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	fa22 f303 	lsr.w	r3, r2, r3
 8002562:	4a0a      	ldr	r2, [pc, #40]	@ (800258c <HAL_RCC_ClockConfig+0x270>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002566:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <HAL_RCC_ClockConfig+0x274>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff f818 	bl	80015a0 <HAL_InitTick>
 8002570:	4603      	mov	r3, r0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40022000 	.word	0x40022000
 8002580:	40021000 	.word	0x40021000
 8002584:	04c4b400 	.word	0x04c4b400
 8002588:	08003648 	.word	0x08003648
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800259a:	4b2c      	ldr	r3, [pc, #176]	@ (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f003 030c 	and.w	r3, r3, #12
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d102      	bne.n	80025ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025a8:	613b      	str	r3, [r7, #16]
 80025aa:	e047      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025ac:	4b27      	ldr	r3, [pc, #156]	@ (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d102      	bne.n	80025be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025b8:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ba:	613b      	str	r3, [r7, #16]
 80025bc:	e03e      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f003 030c 	and.w	r3, r3, #12
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d136      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d4:	4b1d      	ldr	r3, [pc, #116]	@ (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3301      	adds	r3, #1
 80025e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d10c      	bne.n	8002602 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025e8:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	4a16      	ldr	r2, [pc, #88]	@ (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f2:	68d2      	ldr	r2, [r2, #12]
 80025f4:	0a12      	lsrs	r2, r2, #8
 80025f6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	617b      	str	r3, [r7, #20]
      break;
 8002600:	e00c      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002602:	4a13      	ldr	r2, [pc, #76]	@ (8002650 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	4a10      	ldr	r2, [pc, #64]	@ (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 800260c:	68d2      	ldr	r2, [r2, #12]
 800260e:	0a12      	lsrs	r2, r2, #8
 8002610:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002614:	fb02 f303 	mul.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
      break;
 800261a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800261c:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <HAL_RCC_GetSysClockFreq+0xb8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0e5b      	lsrs	r3, r3, #25
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	3301      	adds	r3, #1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	fbb2 f3f3 	udiv	r3, r2, r3
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	e001      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800263c:	693b      	ldr	r3, [r7, #16]
}
 800263e:	4618      	mov	r0, r3
 8002640:	371c      	adds	r7, #28
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	00f42400 	.word	0x00f42400
 8002654:	007a1200 	.word	0x007a1200

08002658 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002658:	b480      	push	{r7}
 800265a:	b087      	sub	sp, #28
 800265c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800265e:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002668:	4b1b      	ldr	r3, [pc, #108]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3301      	adds	r3, #1
 8002674:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b03      	cmp	r3, #3
 800267a:	d10c      	bne.n	8002696 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800267c:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	fbb2 f3f3 	udiv	r3, r2, r3
 8002684:	4a14      	ldr	r2, [pc, #80]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002686:	68d2      	ldr	r2, [r2, #12]
 8002688:	0a12      	lsrs	r2, r2, #8
 800268a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800268e:	fb02 f303 	mul.w	r3, r2, r3
 8002692:	617b      	str	r3, [r7, #20]
    break;
 8002694:	e00c      	b.n	80026b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002696:	4a12      	ldr	r2, [pc, #72]	@ (80026e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4a0e      	ldr	r2, [pc, #56]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026a0:	68d2      	ldr	r2, [r2, #12]
 80026a2:	0a12      	lsrs	r2, r2, #8
 80026a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80026a8:	fb02 f303 	mul.w	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
    break;
 80026ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026b0:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	0e5b      	lsrs	r3, r3, #25
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	3301      	adds	r3, #1
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80026ca:	687b      	ldr	r3, [r7, #4]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	371c      	adds	r7, #28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40021000 	.word	0x40021000
 80026dc:	007a1200 	.word	0x007a1200
 80026e0:	00f42400 	.word	0x00f42400

080026e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e09d      	b.n	8002832 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d108      	bne.n	8002710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002706:	d009      	beq.n	800271c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
 800270e:	e005      	b.n	800271c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fe46 	bl	80013c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002752:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800275c:	d902      	bls.n	8002764 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e002      	b.n	800276a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002764:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002768:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002772:	d007      	beq.n	8002784 <HAL_SPI_Init+0xa0>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800277c:	d002      	beq.n	8002784 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c6:	ea42 0103 	orr.w	r1, r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	0c1b      	lsrs	r3, r3, #16
 80027e0:	f003 0204 	and.w	r2, r3, #4
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027f2:	f003 0308 	and.w	r3, r3, #8
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002800:	ea42 0103 	orr.w	r1, r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002820:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b088      	sub	sp, #32
 800283e:	af00      	add	r7, sp, #0
 8002840:	60f8      	str	r0, [r7, #12]
 8002842:	60b9      	str	r1, [r7, #8]
 8002844:	603b      	str	r3, [r7, #0]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800284a:	f7fe fef5 	bl	8001638 <HAL_GetTick>
 800284e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b01      	cmp	r3, #1
 800285e:	d001      	beq.n	8002864 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002860:	2302      	movs	r3, #2
 8002862:	e15c      	b.n	8002b1e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <HAL_SPI_Transmit+0x36>
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e154      	b.n	8002b1e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_SPI_Transmit+0x48>
 800287e:	2302      	movs	r3, #2
 8002880:	e14d      	b.n	8002b1e <HAL_SPI_Transmit+0x2e4>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2203      	movs	r2, #3
 800288e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	88fa      	ldrh	r2, [r7, #6]
 80028a8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d4:	d10f      	bne.n	80028f6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80028e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002900:	2b40      	cmp	r3, #64	@ 0x40
 8002902:	d007      	beq.n	8002914 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002912:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800291c:	d952      	bls.n	80029c4 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_SPI_Transmit+0xf2>
 8002926:	8b7b      	ldrh	r3, [r7, #26]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d145      	bne.n	80029b8 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	881a      	ldrh	r2, [r3, #0]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800293c:	1c9a      	adds	r2, r3, #2
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002946:	b29b      	uxth	r3, r3
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002950:	e032      	b.n	80029b8 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b02      	cmp	r3, #2
 800295e:	d112      	bne.n	8002986 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002964:	881a      	ldrh	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	1c9a      	adds	r2, r3, #2
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002984:	e018      	b.n	80029b8 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002986:	f7fe fe57 	bl	8001638 <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d803      	bhi.n	800299e <HAL_SPI_Transmit+0x164>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d102      	bne.n	80029a4 <HAL_SPI_Transmit+0x16a>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e0b2      	b.n	8002b1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1c7      	bne.n	8002952 <HAL_SPI_Transmit+0x118>
 80029c2:	e083      	b.n	8002acc <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d002      	beq.n	80029d2 <HAL_SPI_Transmit+0x198>
 80029cc:	8b7b      	ldrh	r3, [r7, #26]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d177      	bne.n	8002ac2 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d912      	bls.n	8002a02 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029e0:	881a      	ldrh	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	1c9a      	adds	r2, r3, #2
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b02      	subs	r3, #2
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a00:	e05f      	b.n	8002ac2 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	330c      	adds	r3, #12
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	3b01      	subs	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002a28:	e04b      	b.n	8002ac2 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d12b      	bne.n	8002a90 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d912      	bls.n	8002a68 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a46:	881a      	ldrh	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	3b02      	subs	r3, #2
 8002a60:	b29a      	uxth	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a66:	e02c      	b.n	8002ac2 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	330c      	adds	r3, #12
 8002a72:	7812      	ldrb	r2, [r2, #0]
 8002a74:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002a8e:	e018      	b.n	8002ac2 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a90:	f7fe fdd2 	bl	8001638 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d803      	bhi.n	8002aa8 <HAL_SPI_Transmit+0x26e>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa6:	d102      	bne.n	8002aae <HAL_SPI_Transmit+0x274>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e02d      	b.n	8002b1e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1ae      	bne.n	8002a2a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002acc:	69fa      	ldr	r2, [r7, #28]
 8002ace:	6839      	ldr	r1, [r7, #0]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f000 fd03 	bl	80034dc <SPI_EndRxTxTransaction>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2201      	movs	r2, #1
 8002b04:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3720      	adds	r7, #32
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b088      	sub	sp, #32
 8002b2a:	af02      	add	r7, sp, #8
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	603b      	str	r3, [r7, #0]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002b42:	2302      	movs	r3, #2
 8002b44:	e123      	b.n	8002d8e <HAL_SPI_Receive+0x268>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <HAL_SPI_Receive+0x2c>
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e11b      	b.n	8002d8e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b5e:	d112      	bne.n	8002b86 <HAL_SPI_Receive+0x60>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10e      	bne.n	8002b86 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2204      	movs	r2, #4
 8002b6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4613      	mov	r3, r2
 8002b78:	68ba      	ldr	r2, [r7, #8]
 8002b7a:	68b9      	ldr	r1, [r7, #8]
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f90a 	bl	8002d96 <HAL_SPI_TransmitReceive>
 8002b82:	4603      	mov	r3, r0
 8002b84:	e103      	b.n	8002d8e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b86:	f7fe fd57 	bl	8001638 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_SPI_Receive+0x74>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e0f9      	b.n	8002d8e <HAL_SPI_Receive+0x268>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	88fa      	ldrh	r2, [r7, #6]
 8002bba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	88fa      	ldrh	r2, [r7, #6]
 8002bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002bec:	d908      	bls.n	8002c00 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	e007      	b.n	8002c10 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002c0e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c18:	d10f      	bne.n	8002c3a <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c38:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c44:	2b40      	cmp	r3, #64	@ 0x40
 8002c46:	d007      	beq.n	8002c58 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c56:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c60:	d875      	bhi.n	8002d4e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002c62:	e037      	b.n	8002cd4 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d117      	bne.n	8002ca2 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f103 020c 	add.w	r2, r3, #12
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	7812      	ldrb	r2, [r2, #0]
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002ca0:	e018      	b.n	8002cd4 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ca2:	f7fe fcc9 	bl	8001638 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d803      	bhi.n	8002cba <HAL_SPI_Receive+0x194>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d102      	bne.n	8002cc0 <HAL_SPI_Receive+0x19a>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d109      	bne.n	8002cd4 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e05c      	b.n	8002d8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1c1      	bne.n	8002c64 <HAL_SPI_Receive+0x13e>
 8002ce0:	e03b      	b.n	8002d5a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d115      	bne.n	8002d1c <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68da      	ldr	r2, [r3, #12]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	b292      	uxth	r2, r2
 8002cfc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	1c9a      	adds	r2, r3, #2
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002d1a:	e018      	b.n	8002d4e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d1c:	f7fe fc8c 	bl	8001638 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d803      	bhi.n	8002d34 <HAL_SPI_Receive+0x20e>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d102      	bne.n	8002d3a <HAL_SPI_Receive+0x214>
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d109      	bne.n	8002d4e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e01f      	b.n	8002d8e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1c3      	bne.n	8002ce2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	6839      	ldr	r1, [r7, #0]
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 fb64 	bl	800342c <SPI_EndRxTransaction>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2220      	movs	r2, #32
 8002d6e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3718      	adds	r7, #24
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b08a      	sub	sp, #40	@ 0x28
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
 8002da2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002da4:	2301      	movs	r3, #1
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002da8:	f7fe fc46 	bl	8001638 <HAL_GetTick>
 8002dac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002db4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002dbc:	887b      	ldrh	r3, [r7, #2]
 8002dbe:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8002dc0:	887b      	ldrh	r3, [r7, #2]
 8002dc2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002dc4:	7ffb      	ldrb	r3, [r7, #31]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d00c      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x4e>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002dd0:	d106      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_SPI_TransmitReceive+0x4a>
 8002dda:	7ffb      	ldrb	r3, [r7, #31]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d001      	beq.n	8002de4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002de0:	2302      	movs	r3, #2
 8002de2:	e1f3      	b.n	80031cc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x60>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d002      	beq.n	8002df6 <HAL_SPI_TransmitReceive+0x60>
 8002df0:	887b      	ldrh	r3, [r7, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e1e8      	b.n	80031cc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_SPI_TransmitReceive+0x72>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e1e1      	b.n	80031cc <HAL_SPI_TransmitReceive+0x436>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b04      	cmp	r3, #4
 8002e1a:	d003      	beq.n	8002e24 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2205      	movs	r2, #5
 8002e20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	887a      	ldrh	r2, [r7, #2]
 8002e34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	887a      	ldrh	r2, [r7, #2]
 8002e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	887a      	ldrh	r2, [r7, #2]
 8002e50:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e66:	d802      	bhi.n	8002e6e <HAL_SPI_TransmitReceive+0xd8>
 8002e68:	8abb      	ldrh	r3, [r7, #20]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d908      	bls.n	8002e80 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685a      	ldr	r2, [r3, #4]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e7c:	605a      	str	r2, [r3, #4]
 8002e7e:	e007      	b.n	8002e90 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e9a:	2b40      	cmp	r3, #64	@ 0x40
 8002e9c:	d007      	beq.n	8002eae <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002eb6:	f240 8083 	bls.w	8002fc0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_SPI_TransmitReceive+0x132>
 8002ec2:	8afb      	ldrh	r3, [r7, #22]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d16f      	bne.n	8002fa8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ecc:	881a      	ldrh	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed8:	1c9a      	adds	r2, r3, #2
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002eec:	e05c      	b.n	8002fa8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d11b      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x19e>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d016      	beq.n	8002f34 <HAL_SPI_TransmitReceive+0x19e>
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d113      	bne.n	8002f34 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f10:	881a      	ldrh	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3b01      	subs	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002f30:	2300      	movs	r3, #0
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d11c      	bne.n	8002f7c <HAL_SPI_TransmitReceive+0x1e6>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	b292      	uxth	r2, r2
 8002f5a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002f7c:	f7fe fb5c 	bl	8001638 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d80d      	bhi.n	8002fa8 <HAL_SPI_TransmitReceive+0x212>
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f92:	d009      	beq.n	8002fa8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e111      	b.n	80031cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d19d      	bne.n	8002eee <HAL_SPI_TransmitReceive+0x158>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d197      	bne.n	8002eee <HAL_SPI_TransmitReceive+0x158>
 8002fbe:	e0e5      	b.n	800318c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_SPI_TransmitReceive+0x23a>
 8002fc8:	8afb      	ldrh	r3, [r7, #22]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	f040 80d1 	bne.w	8003172 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d912      	bls.n	8003000 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fde:	881a      	ldrh	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fea:	1c9a      	adds	r2, r3, #2
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	3b02      	subs	r3, #2
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ffe:	e0b8      	b.n	8003172 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	330c      	adds	r3, #12
 800300a:	7812      	ldrb	r2, [r2, #0]
 800300c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	1c5a      	adds	r2, r3, #1
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003026:	e0a4      	b.n	8003172 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b02      	cmp	r3, #2
 8003034:	d134      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x30a>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d02f      	beq.n	80030a0 <HAL_SPI_TransmitReceive+0x30a>
 8003040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003042:	2b01      	cmp	r3, #1
 8003044:	d12c      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d912      	bls.n	8003076 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003054:	881a      	ldrh	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003060:	1c9a      	adds	r2, r3, #2
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800306a:	b29b      	uxth	r3, r3
 800306c:	3b02      	subs	r3, #2
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003074:	e012      	b.n	800309c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	7812      	ldrb	r2, [r2, #0]
 8003082:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d148      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x3aa>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d042      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d923      	bls.n	800310e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	b292      	uxth	r2, r2
 80030d2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	3b02      	subs	r3, #2
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d81f      	bhi.n	800313c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	e016      	b.n	800313c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f103 020c 	add.w	r2, r3, #12
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003140:	f7fe fa7a 	bl	8001638 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800314c:	429a      	cmp	r2, r3
 800314e:	d803      	bhi.n	8003158 <HAL_SPI_TransmitReceive+0x3c2>
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003156:	d102      	bne.n	800315e <HAL_SPI_TransmitReceive+0x3c8>
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	2b00      	cmp	r3, #0
 800315c:	d109      	bne.n	8003172 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2201      	movs	r2, #1
 8003162:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e02c      	b.n	80031cc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	f47f af55 	bne.w	8003028 <HAL_SPI_TransmitReceive+0x292>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003184:	b29b      	uxth	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	f47f af4e 	bne.w	8003028 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f9a3 	bl	80034dc <SPI_EndRxTxTransaction>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2220      	movs	r2, #32
 80031a0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e00e      	b.n	80031cc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80031e2:	b2db      	uxtb	r3, r3
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b088      	sub	sp, #32
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	603b      	str	r3, [r7, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003200:	f7fe fa1a 	bl	8001638 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	4413      	add	r3, r2
 800320e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003210:	f7fe fa12 	bl	8001638 <HAL_GetTick>
 8003214:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003216:	4b39      	ldr	r3, [pc, #228]	@ (80032fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	0d1b      	lsrs	r3, r3, #20
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	fb02 f303 	mul.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003226:	e054      	b.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322e:	d050      	beq.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003230:	f7fe fa02 	bl	8001638 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	429a      	cmp	r2, r3
 800323e:	d902      	bls.n	8003246 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d13d      	bne.n	80032c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800325e:	d111      	bne.n	8003284 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003268:	d004      	beq.n	8003274 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003272:	d107      	bne.n	8003284 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328c:	d10f      	bne.n	80032ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e017      	b.n	80032f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4013      	ands	r3, r2
 80032dc:	68ba      	ldr	r2, [r7, #8]
 80032de:	429a      	cmp	r2, r3
 80032e0:	bf0c      	ite	eq
 80032e2:	2301      	moveq	r3, #1
 80032e4:	2300      	movne	r3, #0
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	461a      	mov	r2, r3
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d19b      	bne.n	8003228 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	20000000 	.word	0x20000000

08003300 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	@ 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003312:	f7fe f991 	bl	8001638 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	4413      	add	r3, r2
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003322:	f7fe f989 	bl	8001638 <HAL_GetTick>
 8003326:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003330:	4b3d      	ldr	r3, [pc, #244]	@ (8003428 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	00da      	lsls	r2, r3, #3
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	0d1b      	lsrs	r3, r3, #20
 8003340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003348:	e060      	b.n	800340c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003350:	d107      	bne.n	8003362 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d104      	bne.n	8003362 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003360:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d050      	beq.n	800340c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800336a:	f7fe f965 	bl	8001638 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6a3b      	ldr	r3, [r7, #32]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003376:	429a      	cmp	r2, r3
 8003378:	d902      	bls.n	8003380 <SPI_WaitFifoStateUntilTimeout+0x80>
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337c:	2b00      	cmp	r3, #0
 800337e:	d13d      	bne.n	80033fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800338e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003398:	d111      	bne.n	80033be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a2:	d004      	beq.n	80033ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033ac:	d107      	bne.n	80033be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c6:	d10f      	bne.n	80033e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e010      	b.n	800341e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	3b01      	subs	r3, #1
 800340a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	429a      	cmp	r2, r3
 800341a:	d196      	bne.n	800334a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3728      	adds	r7, #40	@ 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	20000000 	.word	0x20000000

0800342c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003440:	d111      	bne.n	8003466 <SPI_EndRxTransaction+0x3a>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344a:	d004      	beq.n	8003456 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003454:	d107      	bne.n	8003466 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003464:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2200      	movs	r2, #0
 800346e:	2180      	movs	r1, #128	@ 0x80
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f7ff febd 	bl	80031f0 <SPI_WaitFlagStateUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d007      	beq.n	800348c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003480:	f043 0220 	orr.w	r2, r3, #32
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e023      	b.n	80034d4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003494:	d11d      	bne.n	80034d2 <SPI_EndRxTransaction+0xa6>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800349e:	d004      	beq.n	80034aa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a8:	d113      	bne.n	80034d2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f7ff ff22 	bl	8003300 <SPI_WaitFifoStateUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d007      	beq.n	80034d2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034c6:	f043 0220 	orr.w	r2, r3, #32
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e000      	b.n	80034d4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f7ff ff03 	bl	8003300 <SPI_WaitFifoStateUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d007      	beq.n	8003510 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e027      	b.n	8003560 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	2200      	movs	r2, #0
 8003518:	2180      	movs	r1, #128	@ 0x80
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff fe68 	bl	80031f0 <SPI_WaitFlagStateUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d007      	beq.n	8003536 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800352a:	f043 0220 	orr.w	r2, r3, #32
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e014      	b.n	8003560 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff fedc 	bl	8003300 <SPI_WaitFifoStateUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003552:	f043 0220 	orr.w	r2, r3, #32
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e000      	b.n	8003560 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <memset>:
 8003568:	4402      	add	r2, r0
 800356a:	4603      	mov	r3, r0
 800356c:	4293      	cmp	r3, r2
 800356e:	d100      	bne.n	8003572 <memset+0xa>
 8003570:	4770      	bx	lr
 8003572:	f803 1b01 	strb.w	r1, [r3], #1
 8003576:	e7f9      	b.n	800356c <memset+0x4>

08003578 <__libc_init_array>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	4d0d      	ldr	r5, [pc, #52]	@ (80035b0 <__libc_init_array+0x38>)
 800357c:	4c0d      	ldr	r4, [pc, #52]	@ (80035b4 <__libc_init_array+0x3c>)
 800357e:	1b64      	subs	r4, r4, r5
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	2600      	movs	r6, #0
 8003584:	42a6      	cmp	r6, r4
 8003586:	d109      	bne.n	800359c <__libc_init_array+0x24>
 8003588:	4d0b      	ldr	r5, [pc, #44]	@ (80035b8 <__libc_init_array+0x40>)
 800358a:	4c0c      	ldr	r4, [pc, #48]	@ (80035bc <__libc_init_array+0x44>)
 800358c:	f000 f826 	bl	80035dc <_init>
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	2600      	movs	r6, #0
 8003596:	42a6      	cmp	r6, r4
 8003598:	d105      	bne.n	80035a6 <__libc_init_array+0x2e>
 800359a:	bd70      	pop	{r4, r5, r6, pc}
 800359c:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a0:	4798      	blx	r3
 80035a2:	3601      	adds	r6, #1
 80035a4:	e7ee      	b.n	8003584 <__libc_init_array+0xc>
 80035a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035aa:	4798      	blx	r3
 80035ac:	3601      	adds	r6, #1
 80035ae:	e7f2      	b.n	8003596 <__libc_init_array+0x1e>
 80035b0:	08003658 	.word	0x08003658
 80035b4:	08003658 	.word	0x08003658
 80035b8:	08003658 	.word	0x08003658
 80035bc:	0800365c 	.word	0x0800365c

080035c0 <memcpy>:
 80035c0:	440a      	add	r2, r1
 80035c2:	4291      	cmp	r1, r2
 80035c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80035c8:	d100      	bne.n	80035cc <memcpy+0xc>
 80035ca:	4770      	bx	lr
 80035cc:	b510      	push	{r4, lr}
 80035ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80035d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80035d6:	4291      	cmp	r1, r2
 80035d8:	d1f9      	bne.n	80035ce <memcpy+0xe>
 80035da:	bd10      	pop	{r4, pc}

080035dc <_init>:
 80035dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035de:	bf00      	nop
 80035e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035e2:	bc08      	pop	{r3}
 80035e4:	469e      	mov	lr, r3
 80035e6:	4770      	bx	lr

080035e8 <_fini>:
 80035e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ea:	bf00      	nop
 80035ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035ee:	bc08      	pop	{r3}
 80035f0:	469e      	mov	lr, r3
 80035f2:	4770      	bx	lr
