
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bc4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003d94  08003d94  00004d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e24  08003e24  00005010  2**0
                  CONTENTS
  4 .ARM          00000008  08003e24  08003e24  00004e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e2c  08003e2c  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e2c  08003e2c  00004e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e30  08003e30  00004e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003e34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004064  20000010  08003e44  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004074  08003e44  00005074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fe5  00000000  00000000  00005040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d66  00000000  00000000  00017025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00019d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d43  00000000  00000000  0001aea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023022  00000000  00000000  0001bbeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014670  00000000  00000000  0003ec0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d8dee  00000000  00000000  0005327d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012c06b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004688  00000000  00000000  0012c0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00130738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d7c 	.word	0x08003d7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003d7c 	.word	0x08003d7c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96a 	b.w	80004fc <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	460c      	mov	r4, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d14e      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024c:	4694      	mov	ip, r2
 800024e:	458c      	cmp	ip, r1
 8000250:	4686      	mov	lr, r0
 8000252:	fab2 f282 	clz	r2, r2
 8000256:	d962      	bls.n	800031e <__udivmoddi4+0xde>
 8000258:	b14a      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025a:	f1c2 0320 	rsb	r3, r2, #32
 800025e:	4091      	lsls	r1, r2
 8000260:	fa20 f303 	lsr.w	r3, r0, r3
 8000264:	fa0c fc02 	lsl.w	ip, ip, r2
 8000268:	4319      	orrs	r1, r3
 800026a:	fa00 fe02 	lsl.w	lr, r0, r2
 800026e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000272:	fa1f f68c 	uxth.w	r6, ip
 8000276:	fbb1 f4f7 	udiv	r4, r1, r7
 800027a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800027e:	fb07 1114 	mls	r1, r7, r4, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb04 f106 	mul.w	r1, r4, r6
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f104 30ff 	add.w	r0, r4, #4294967295
 8000296:	f080 8112 	bcs.w	80004be <__udivmoddi4+0x27e>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 810f 	bls.w	80004be <__udivmoddi4+0x27e>
 80002a0:	3c02      	subs	r4, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a59      	subs	r1, r3, r1
 80002a6:	fa1f f38e 	uxth.w	r3, lr
 80002aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80002ae:	fb07 1110 	mls	r1, r7, r0, r1
 80002b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002b6:	fb00 f606 	mul.w	r6, r0, r6
 80002ba:	429e      	cmp	r6, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x94>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002c6:	f080 80fc 	bcs.w	80004c2 <__udivmoddi4+0x282>
 80002ca:	429e      	cmp	r6, r3
 80002cc:	f240 80f9 	bls.w	80004c2 <__udivmoddi4+0x282>
 80002d0:	4463      	add	r3, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	1b9b      	subs	r3, r3, r6
 80002d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002da:	2100      	movs	r1, #0
 80002dc:	b11d      	cbz	r5, 80002e6 <__udivmoddi4+0xa6>
 80002de:	40d3      	lsrs	r3, r2
 80002e0:	2200      	movs	r2, #0
 80002e2:	e9c5 3200 	strd	r3, r2, [r5]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d905      	bls.n	80002fa <__udivmoddi4+0xba>
 80002ee:	b10d      	cbz	r5, 80002f4 <__udivmoddi4+0xb4>
 80002f0:	e9c5 0100 	strd	r0, r1, [r5]
 80002f4:	2100      	movs	r1, #0
 80002f6:	4608      	mov	r0, r1
 80002f8:	e7f5      	b.n	80002e6 <__udivmoddi4+0xa6>
 80002fa:	fab3 f183 	clz	r1, r3
 80002fe:	2900      	cmp	r1, #0
 8000300:	d146      	bne.n	8000390 <__udivmoddi4+0x150>
 8000302:	42a3      	cmp	r3, r4
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xcc>
 8000306:	4290      	cmp	r0, r2
 8000308:	f0c0 80f0 	bcc.w	80004ec <__udivmoddi4+0x2ac>
 800030c:	1a86      	subs	r6, r0, r2
 800030e:	eb64 0303 	sbc.w	r3, r4, r3
 8000312:	2001      	movs	r0, #1
 8000314:	2d00      	cmp	r5, #0
 8000316:	d0e6      	beq.n	80002e6 <__udivmoddi4+0xa6>
 8000318:	e9c5 6300 	strd	r6, r3, [r5]
 800031c:	e7e3      	b.n	80002e6 <__udivmoddi4+0xa6>
 800031e:	2a00      	cmp	r2, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x204>
 8000324:	eba1 040c 	sub.w	r4, r1, ip
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	fa1f f78c 	uxth.w	r7, ip
 8000330:	2101      	movs	r1, #1
 8000332:	fbb4 f6f8 	udiv	r6, r4, r8
 8000336:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033a:	fb08 4416 	mls	r4, r8, r6, r4
 800033e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000342:	fb07 f006 	mul.w	r0, r7, r6
 8000346:	4298      	cmp	r0, r3
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x11c>
 800034a:	eb1c 0303 	adds.w	r3, ip, r3
 800034e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x11a>
 8000354:	4298      	cmp	r0, r3
 8000356:	f200 80cd 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 800035a:	4626      	mov	r6, r4
 800035c:	1a1c      	subs	r4, r3, r0
 800035e:	fa1f f38e 	uxth.w	r3, lr
 8000362:	fbb4 f0f8 	udiv	r0, r4, r8
 8000366:	fb08 4410 	mls	r4, r8, r0, r4
 800036a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800036e:	fb00 f707 	mul.w	r7, r0, r7
 8000372:	429f      	cmp	r7, r3
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x148>
 8000376:	eb1c 0303 	adds.w	r3, ip, r3
 800037a:	f100 34ff 	add.w	r4, r0, #4294967295
 800037e:	d202      	bcs.n	8000386 <__udivmoddi4+0x146>
 8000380:	429f      	cmp	r7, r3
 8000382:	f200 80b0 	bhi.w	80004e6 <__udivmoddi4+0x2a6>
 8000386:	4620      	mov	r0, r4
 8000388:	1bdb      	subs	r3, r3, r7
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	e7a5      	b.n	80002dc <__udivmoddi4+0x9c>
 8000390:	f1c1 0620 	rsb	r6, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 f706 	lsr.w	r7, r2, r6
 800039a:	431f      	orrs	r7, r3
 800039c:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a0:	fa04 f301 	lsl.w	r3, r4, r1
 80003a4:	ea43 030c 	orr.w	r3, r3, ip
 80003a8:	40f4      	lsrs	r4, r6
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	0c38      	lsrs	r0, r7, #16
 80003b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003b4:	fbb4 fef0 	udiv	lr, r4, r0
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	fb00 441e 	mls	r4, r0, lr, r4
 80003c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c4:	fb0e f90c 	mul.w	r9, lr, ip
 80003c8:	45a1      	cmp	r9, r4
 80003ca:	fa02 f201 	lsl.w	r2, r2, r1
 80003ce:	d90a      	bls.n	80003e6 <__udivmoddi4+0x1a6>
 80003d0:	193c      	adds	r4, r7, r4
 80003d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003d6:	f080 8084 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80003da:	45a1      	cmp	r9, r4
 80003dc:	f240 8081 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80003e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003e4:	443c      	add	r4, r7
 80003e6:	eba4 0409 	sub.w	r4, r4, r9
 80003ea:	fa1f f983 	uxth.w	r9, r3
 80003ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80003f2:	fb00 4413 	mls	r4, r0, r3, r4
 80003f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d907      	bls.n	8000412 <__udivmoddi4+0x1d2>
 8000402:	193c      	adds	r4, r7, r4
 8000404:	f103 30ff 	add.w	r0, r3, #4294967295
 8000408:	d267      	bcs.n	80004da <__udivmoddi4+0x29a>
 800040a:	45a4      	cmp	ip, r4
 800040c:	d965      	bls.n	80004da <__udivmoddi4+0x29a>
 800040e:	3b02      	subs	r3, #2
 8000410:	443c      	add	r4, r7
 8000412:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000416:	fba0 9302 	umull	r9, r3, r0, r2
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	429c      	cmp	r4, r3
 8000420:	46ce      	mov	lr, r9
 8000422:	469c      	mov	ip, r3
 8000424:	d351      	bcc.n	80004ca <__udivmoddi4+0x28a>
 8000426:	d04e      	beq.n	80004c6 <__udivmoddi4+0x286>
 8000428:	b155      	cbz	r5, 8000440 <__udivmoddi4+0x200>
 800042a:	ebb8 030e 	subs.w	r3, r8, lr
 800042e:	eb64 040c 	sbc.w	r4, r4, ip
 8000432:	fa04 f606 	lsl.w	r6, r4, r6
 8000436:	40cb      	lsrs	r3, r1
 8000438:	431e      	orrs	r6, r3
 800043a:	40cc      	lsrs	r4, r1
 800043c:	e9c5 6400 	strd	r6, r4, [r5]
 8000440:	2100      	movs	r1, #0
 8000442:	e750      	b.n	80002e6 <__udivmoddi4+0xa6>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f103 	lsr.w	r1, r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa24 f303 	lsr.w	r3, r4, r3
 8000454:	4094      	lsls	r4, r2
 8000456:	430c      	orrs	r4, r1
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000460:	fa1f f78c 	uxth.w	r7, ip
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3110 	mls	r1, r8, r0, r3
 800046c:	0c23      	lsrs	r3, r4, #16
 800046e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000472:	fb00 f107 	mul.w	r1, r0, r7
 8000476:	4299      	cmp	r1, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x24c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000482:	d22c      	bcs.n	80004de <__udivmoddi4+0x29e>
 8000484:	4299      	cmp	r1, r3
 8000486:	d92a      	bls.n	80004de <__udivmoddi4+0x29e>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b2a4      	uxth	r4, r4
 8000490:	fbb3 f1f8 	udiv	r1, r3, r8
 8000494:	fb08 3311 	mls	r3, r8, r1, r3
 8000498:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800049c:	fb01 f307 	mul.w	r3, r1, r7
 80004a0:	42a3      	cmp	r3, r4
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x276>
 80004a4:	eb1c 0404 	adds.w	r4, ip, r4
 80004a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80004ac:	d213      	bcs.n	80004d6 <__udivmoddi4+0x296>
 80004ae:	42a3      	cmp	r3, r4
 80004b0:	d911      	bls.n	80004d6 <__udivmoddi4+0x296>
 80004b2:	3902      	subs	r1, #2
 80004b4:	4464      	add	r4, ip
 80004b6:	1ae4      	subs	r4, r4, r3
 80004b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004bc:	e739      	b.n	8000332 <__udivmoddi4+0xf2>
 80004be:	4604      	mov	r4, r0
 80004c0:	e6f0      	b.n	80002a4 <__udivmoddi4+0x64>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e706      	b.n	80002d4 <__udivmoddi4+0x94>
 80004c6:	45c8      	cmp	r8, r9
 80004c8:	d2ae      	bcs.n	8000428 <__udivmoddi4+0x1e8>
 80004ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80004ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80004d2:	3801      	subs	r0, #1
 80004d4:	e7a8      	b.n	8000428 <__udivmoddi4+0x1e8>
 80004d6:	4631      	mov	r1, r6
 80004d8:	e7ed      	b.n	80004b6 <__udivmoddi4+0x276>
 80004da:	4603      	mov	r3, r0
 80004dc:	e799      	b.n	8000412 <__udivmoddi4+0x1d2>
 80004de:	4630      	mov	r0, r6
 80004e0:	e7d4      	b.n	800048c <__udivmoddi4+0x24c>
 80004e2:	46d6      	mov	lr, sl
 80004e4:	e77f      	b.n	80003e6 <__udivmoddi4+0x1a6>
 80004e6:	4463      	add	r3, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e74d      	b.n	8000388 <__udivmoddi4+0x148>
 80004ec:	4606      	mov	r6, r0
 80004ee:	4623      	mov	r3, r4
 80004f0:	4608      	mov	r0, r1
 80004f2:	e70f      	b.n	8000314 <__udivmoddi4+0xd4>
 80004f4:	3e02      	subs	r6, #2
 80004f6:	4463      	add	r3, ip
 80004f8:	e730      	b.n	800035c <__udivmoddi4+0x11c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	60f8      	str	r0, [r7, #12]
 8000508:	60b9      	str	r1, [r7, #8]
 800050a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4a07      	ldr	r2, [pc, #28]	@ (800052c <vApplicationGetIdleTaskMemory+0x2c>)
 8000510:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	4a06      	ldr	r2, [pc, #24]	@ (8000530 <vApplicationGetIdleTaskMemory+0x30>)
 8000516:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051e:	bf00      	nop
 8000520:	3714      	adds	r7, #20
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000038 	.word	0x20000038
 8000530:	2000008c 	.word	0x2000008c

08000534 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000534:	b5b0      	push	{r4, r5, r7, lr}
 8000536:	b096      	sub	sp, #88	@ 0x58
 8000538:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800053a:	4b1d      	ldr	r3, [pc, #116]	@ (80005b0 <MX_FREERTOS_Init+0x7c>)
 800053c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800054a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800054e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000552:	2100      	movs	r1, #0
 8000554:	4618      	mov	r0, r3
 8000556:	f002 f9a8 	bl	80028aa <osThreadCreate>
 800055a:	4603      	mov	r3, r0
 800055c:	4a15      	ldr	r2, [pc, #84]	@ (80005b4 <MX_FREERTOS_Init+0x80>)
 800055e:	6013      	str	r3, [r2, #0]

  /* definition and creation of gorev */
  osThreadDef(gorev, StartTask02, osPriorityNormal, 0, 128);
 8000560:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <MX_FREERTOS_Init+0x84>)
 8000562:	f107 0420 	add.w	r4, r7, #32
 8000566:	461d      	mov	r5, r3
 8000568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800056a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800056c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000570:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gorevHandle = osThreadCreate(osThread(gorev), NULL);
 8000574:	f107 0320 	add.w	r3, r7, #32
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f002 f995 	bl	80028aa <osThreadCreate>
 8000580:	4603      	mov	r3, r0
 8000582:	4a0e      	ldr	r2, [pc, #56]	@ (80005bc <MX_FREERTOS_Init+0x88>)
 8000584:	6013      	str	r3, [r2, #0]

  /* definition and creation of bmp180 */
  osThreadDef(bmp180, StartTask03, osPriorityNormal, 0, 128);
 8000586:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_FREERTOS_Init+0x8c>)
 8000588:	1d3c      	adds	r4, r7, #4
 800058a:	461d      	mov	r5, r3
 800058c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000590:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000594:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bmp180Handle = osThreadCreate(osThread(bmp180), NULL);
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f984 	bl	80028aa <osThreadCreate>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a07      	ldr	r2, [pc, #28]	@ (80005c4 <MX_FREERTOS_Init+0x90>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005a8:	bf00      	nop
 80005aa:	3758      	adds	r7, #88	@ 0x58
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bdb0      	pop	{r4, r5, r7, pc}
 80005b0:	08003da0 	.word	0x08003da0
 80005b4:	2000002c 	.word	0x2000002c
 80005b8:	08003dc4 	.word	0x08003dc4
 80005bc:	20000030 	.word	0x20000030
 80005c0:	08003de8 	.word	0x08003de8
 80005c4:	20000034 	.word	0x20000034

080005c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d0:	2001      	movs	r0, #1
 80005d2:	f002 f9b6 	bl	8002942 <osDelay>
 80005d6:	e7fb      	b.n	80005d0 <StartDefaultTask+0x8>

080005d8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {

	  HAL_StatusTypeDef  durum = HAL_GPIO_ReadPin(buton_GPIO_Port, buton_Pin);
 80005e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005e4:	480c      	ldr	r0, [pc, #48]	@ (8000618 <StartTask02+0x40>)
 80005e6:	f000 fd75 	bl	80010d4 <HAL_GPIO_ReadPin>
 80005ea:	4603      	mov	r3, r0
 80005ec:	73fb      	strb	r3, [r7, #15]
	  if(durum == HAL_OK){
 80005ee:	7bfb      	ldrb	r3, [r7, #15]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d107      	bne.n	8000604 <StartTask02+0x2c>
		  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 80005f4:	2120      	movs	r1, #32
 80005f6:	4809      	ldr	r0, [pc, #36]	@ (800061c <StartTask02+0x44>)
 80005f8:	f000 fd9d 	bl	8001136 <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 80005fc:	2064      	movs	r0, #100	@ 0x64
 80005fe:	f000 facf 	bl	8000ba0 <HAL_Delay>
 8000602:	e004      	b.n	800060e <StartTask02+0x36>
	  }
	  else{
		  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2120      	movs	r1, #32
 8000608:	4804      	ldr	r0, [pc, #16]	@ (800061c <StartTask02+0x44>)
 800060a:	f000 fd7b 	bl	8001104 <HAL_GPIO_WritePin>

	  }

	  osDelay(1);
 800060e:	2001      	movs	r0, #1
 8000610:	f002 f997 	bl	8002942 <osDelay>
  {
 8000614:	e7e4      	b.n	80005e0 <StartTask02+0x8>
 8000616:	bf00      	nop
 8000618:	40020800 	.word	0x40020800
 800061c:	40020000 	.word	0x40020000

08000620 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f002 f98a 	bl	8002942 <osDelay>
 800062e:	e7fb      	b.n	8000628 <StartTask03+0x8>

08000630 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
 8000644:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]
 800064a:	4b2d      	ldr	r3, [pc, #180]	@ (8000700 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	4a2c      	ldr	r2, [pc, #176]	@ (8000700 <MX_GPIO_Init+0xd0>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	@ 0x30
 8000656:	4b2a      	ldr	r3, [pc, #168]	@ (8000700 <MX_GPIO_Init+0xd0>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	613b      	str	r3, [r7, #16]
 8000660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	4b26      	ldr	r3, [pc, #152]	@ (8000700 <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4a25      	ldr	r2, [pc, #148]	@ (8000700 <MX_GPIO_Init+0xd0>)
 800066c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <MX_GPIO_Init+0xd0>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	60bb      	str	r3, [r7, #8]
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a1e      	ldr	r2, [pc, #120]	@ (8000700 <MX_GPIO_Init+0xd0>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b1c      	ldr	r3, [pc, #112]	@ (8000700 <MX_GPIO_Init+0xd0>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b18      	ldr	r3, [pc, #96]	@ (8000700 <MX_GPIO_Init+0xd0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <MX_GPIO_Init+0xd0>)
 80006a4:	f043 0302 	orr.w	r3, r3, #2
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b15      	ldr	r3, [pc, #84]	@ (8000700 <MX_GPIO_Init+0xd0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0302 	and.w	r3, r3, #2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2120      	movs	r1, #32
 80006ba:	4812      	ldr	r0, [pc, #72]	@ (8000704 <MX_GPIO_Init+0xd4>)
 80006bc:	f000 fd22 	bl	8001104 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : buton_Pin */
  GPIO_InitStruct.Pin = buton_Pin;
 80006c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006c6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buton_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 0314 	add.w	r3, r7, #20
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	@ (8000708 <MX_GPIO_Init+0xd8>)
 80006d8:	f000 fb68 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80006dc:	2320      	movs	r3, #32
 80006de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	4619      	mov	r1, r3
 80006f2:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_GPIO_Init+0xd4>)
 80006f4:	f000 fb5a 	bl	8000dac <HAL_GPIO_Init>

}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	@ 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40020000 	.word	0x40020000
 8000708:	40020800 	.word	0x40020800

0800070c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 fa04 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f80a 	bl	800072c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f7ff ff8a 	bl	8000630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800071c:	f000 f962 	bl	80009e4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000720:	f7ff ff08 	bl	8000534 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000724:	f002 f8ba 	bl	800289c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000728:	bf00      	nop
 800072a:	e7fd      	b.n	8000728 <main+0x1c>

0800072c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b094      	sub	sp, #80	@ 0x50
 8000730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	2234      	movs	r2, #52	@ 0x34
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f003 faf2 	bl	8003d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000740:	f107 0308 	add.w	r3, r7, #8
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	4b2a      	ldr	r3, [pc, #168]	@ (8000800 <SystemClock_Config+0xd4>)
 8000756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000758:	4a29      	ldr	r2, [pc, #164]	@ (8000800 <SystemClock_Config+0xd4>)
 800075a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800075e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000760:	4b27      	ldr	r3, [pc, #156]	@ (8000800 <SystemClock_Config+0xd4>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800076c:	2300      	movs	r3, #0
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	4b24      	ldr	r3, [pc, #144]	@ (8000804 <SystemClock_Config+0xd8>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000778:	4a22      	ldr	r2, [pc, #136]	@ (8000804 <SystemClock_Config+0xd8>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800077e:	6013      	str	r3, [r2, #0]
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <SystemClock_Config+0xd8>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800078c:	2302      	movs	r3, #2
 800078e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000790:	2301      	movs	r3, #1
 8000792:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000794:	2310      	movs	r3, #16
 8000796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000798:	2302      	movs	r3, #2
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007a0:	2310      	movs	r3, #16
 80007a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007a8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007aa:	2304      	movs	r3, #4
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 f852 	bl	8001864 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80007c6:	f000 f831 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2102      	movs	r1, #2
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 fcc0 	bl	800116c <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80007f2:	f000 f81b 	bl	800082c <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	@ 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000816:	4293      	cmp	r3, r2
 8000818:	d101      	bne.n	800081e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800081a:	f000 f9a1 	bl	8000b60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40010000 	.word	0x40010000

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <Error_Handler+0x8>

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <HAL_MspInit+0x54>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a11      	ldr	r2, [pc, #68]	@ (800088c <HAL_MspInit+0x54>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
 800084e:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <HAL_MspInit+0x54>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <HAL_MspInit+0x54>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000862:	4a0a      	ldr	r2, [pc, #40]	@ (800088c <HAL_MspInit+0x54>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	@ 0x40
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_MspInit+0x54>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	210f      	movs	r1, #15
 800087a:	f06f 0001 	mvn.w	r0, #1
 800087e:	f000 fa6b 	bl	8000d58 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	@ 0x30
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000960 <HAL_InitTick+0xd0>)
 80008a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000960 <HAL_InitTick+0xd0>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80008b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000960 <HAL_InitTick+0xd0>)
 80008b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008bc:	f107 020c 	add.w	r2, r7, #12
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fd6a 	bl	80013a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80008cc:	f000 fd54 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 80008d0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008d4:	4a23      	ldr	r2, [pc, #140]	@ (8000964 <HAL_InitTick+0xd4>)
 80008d6:	fba2 2303 	umull	r2, r3, r2, r3
 80008da:	0c9b      	lsrs	r3, r3, #18
 80008dc:	3b01      	subs	r3, #1
 80008de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80008e0:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <HAL_InitTick+0xd8>)
 80008e2:	4a22      	ldr	r2, [pc, #136]	@ (800096c <HAL_InitTick+0xdc>)
 80008e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <HAL_InitTick+0xd8>)
 80008e8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80008ec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80008ee:	4a1e      	ldr	r2, [pc, #120]	@ (8000968 <HAL_InitTick+0xd8>)
 80008f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80008f4:	4b1c      	ldr	r3, [pc, #112]	@ (8000968 <HAL_InitTick+0xd8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <HAL_InitTick+0xd8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <HAL_InitTick+0xd8>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000906:	4818      	ldr	r0, [pc, #96]	@ (8000968 <HAL_InitTick+0xd8>)
 8000908:	f001 fa4a 	bl	8001da0 <HAL_TIM_Base_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000912:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000916:	2b00      	cmp	r3, #0
 8000918:	d11b      	bne.n	8000952 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800091a:	4813      	ldr	r0, [pc, #76]	@ (8000968 <HAL_InitTick+0xd8>)
 800091c:	f001 fa9a 	bl	8001e54 <HAL_TIM_Base_Start_IT>
 8000920:	4603      	mov	r3, r0
 8000922:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000926:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800092a:	2b00      	cmp	r3, #0
 800092c:	d111      	bne.n	8000952 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800092e:	2019      	movs	r0, #25
 8000930:	f000 fa2e 	bl	8000d90 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	d808      	bhi.n	800094c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800093a:	2200      	movs	r2, #0
 800093c:	6879      	ldr	r1, [r7, #4]
 800093e:	2019      	movs	r0, #25
 8000940:	f000 fa0a 	bl	8000d58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000944:	4a0a      	ldr	r2, [pc, #40]	@ (8000970 <HAL_InitTick+0xe0>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6013      	str	r3, [r2, #0]
 800094a:	e002      	b.n	8000952 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800094c:	2301      	movs	r3, #1
 800094e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000952:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000956:	4618      	mov	r0, r3
 8000958:	3730      	adds	r7, #48	@ 0x30
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800
 8000964:	431bde83 	.word	0x431bde83
 8000968:	2000028c 	.word	0x2000028c
 800096c:	40010000 	.word	0x40010000
 8000970:	20000004 	.word	0x20000004

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <UsageFault_Handler+0x4>

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009b0:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80009b2:	f001 fabf 	bl	8001f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000028c 	.word	0x2000028c

080009c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <SystemInit+0x20>)
 80009c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ca:	4a05      	ldr	r2, [pc, #20]	@ (80009e0 <SystemInit+0x20>)
 80009cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	e000ed00 	.word	0xe000ed00

080009e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e8:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009ea:	4a12      	ldr	r2, [pc, #72]	@ (8000a34 <MX_USART2_UART_Init+0x50>)
 80009ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a08:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a0a:	220c      	movs	r2, #12
 8000a0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a14:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1a:	4805      	ldr	r0, [pc, #20]	@ (8000a30 <MX_USART2_UART_Init+0x4c>)
 8000a1c:	f001 fc62 	bl	80022e4 <HAL_UART_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a26:	f7ff ff01 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2a:	bf00      	nop
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200002d4 	.word	0x200002d4
 8000a34:	40004400 	.word	0x40004400

08000a38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08a      	sub	sp, #40	@ 0x28
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a19      	ldr	r2, [pc, #100]	@ (8000abc <HAL_UART_MspInit+0x84>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d12b      	bne.n	8000ab2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b11      	ldr	r3, [pc, #68]	@ (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a10      	ldr	r2, [pc, #64]	@ (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a80:	f043 0301 	orr.w	r3, r3, #1
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ac0 <HAL_UART_MspInit+0x88>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a92:	230c      	movs	r3, #12
 8000a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4805      	ldr	r0, [pc, #20]	@ (8000ac4 <HAL_UART_MspInit+0x8c>)
 8000aae:	f000 f97d 	bl	8000dac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	@ 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40004400 	.word	0x40004400
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000acc:	f7ff ff78 	bl	80009c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000af6:	f003 f91d 	bl	8003d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fe07 	bl	800070c <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b0c:	08003e34 	.word	0x08003e34
  ldr r2, =_sbss
 8000b10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b14:	20004074 	.word	0x20004074

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f8fc 	bl	8000d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff fea0 	bl	8000890 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fe72 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b64:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_IncTick+0x20>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b06      	ldr	r3, [pc, #24]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4413      	add	r3, r2
 8000b70:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <HAL_IncTick+0x24>)
 8000b72:	6013      	str	r3, [r2, #0]
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008
 8000b84:	2000031c 	.word	0x2000031c

08000b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b8c:	4b03      	ldr	r3, [pc, #12]	@ (8000b9c <HAL_GetTick+0x14>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2000031c 	.word	0x2000031c

08000ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ba8:	f7ff ffee 	bl	8000b88 <HAL_GetTick>
 8000bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bb8:	d005      	beq.n	8000bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bba:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <HAL_Delay+0x44>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bc6:	bf00      	nop
 8000bc8:	f7ff ffde 	bl	8000b88 <HAL_GetTick>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	68fa      	ldr	r2, [r7, #12]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d8f7      	bhi.n	8000bc8 <HAL_Delay+0x28>
  {
  }
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000008 	.word	0x20000008

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	@ (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	@ (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	@ (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	@ (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	@ 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	@ 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ff4c 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6a:	f7ff ff61 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f7ff ffb1 	bl	8000cdc <NVIC_EncodePriority>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff80 	bl	8000c88 <__NVIC_SetPriority>
}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff54 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	@ 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e165      	b.n	8001094 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 8154 	bne.w	800108e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	f003 0303 	and.w	r3, r3, #3
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d005      	beq.n	8000dfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d130      	bne.n	8000e60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	689b      	ldr	r3, [r3, #8]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	2203      	movs	r2, #3
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e34:	2201      	movs	r2, #1
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4013      	ands	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	f003 0201 	and.w	r2, r3, #1
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b03      	cmp	r3, #3
 8000e6a:	d017      	beq.n	8000e9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	2203      	movs	r2, #3
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	689a      	ldr	r2, [r3, #8]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80ae 	beq.w	800108e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5d      	ldr	r3, [pc, #372]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3a:	4a5c      	ldr	r2, [pc, #368]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f42:	4b5a      	ldr	r3, [pc, #360]	@ (80010ac <HAL_GPIO_Init+0x300>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a58      	ldr	r2, [pc, #352]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4f      	ldr	r2, [pc, #316]	@ (80010b4 <HAL_GPIO_Init+0x308>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d025      	beq.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4e      	ldr	r2, [pc, #312]	@ (80010b8 <HAL_GPIO_Init+0x30c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d01f      	beq.n	8000fc2 <HAL_GPIO_Init+0x216>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4d      	ldr	r2, [pc, #308]	@ (80010bc <HAL_GPIO_Init+0x310>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d019      	beq.n	8000fbe <HAL_GPIO_Init+0x212>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4c      	ldr	r2, [pc, #304]	@ (80010c0 <HAL_GPIO_Init+0x314>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d013      	beq.n	8000fba <HAL_GPIO_Init+0x20e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4b      	ldr	r2, [pc, #300]	@ (80010c4 <HAL_GPIO_Init+0x318>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d00d      	beq.n	8000fb6 <HAL_GPIO_Init+0x20a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80010c8 <HAL_GPIO_Init+0x31c>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d007      	beq.n	8000fb2 <HAL_GPIO_Init+0x206>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a49      	ldr	r2, [pc, #292]	@ (80010cc <HAL_GPIO_Init+0x320>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d101      	bne.n	8000fae <HAL_GPIO_Init+0x202>
 8000faa:	2306      	movs	r3, #6
 8000fac:	e00c      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fae:	2307      	movs	r3, #7
 8000fb0:	e00a      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	e008      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	e006      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e004      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	e002      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_GPIO_Init+0x21c>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	69fa      	ldr	r2, [r7, #28]
 8000fca:	f002 0203 	and.w	r2, r2, #3
 8000fce:	0092      	lsls	r2, r2, #2
 8000fd0:	4093      	lsls	r3, r2
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fd8:	4935      	ldr	r1, [pc, #212]	@ (80010b0 <HAL_GPIO_Init+0x304>)
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fe6:	4b3a      	ldr	r3, [pc, #232]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4313      	orrs	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800100a:	4a31      	ldr	r2, [pc, #196]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001010:	4b2f      	ldr	r3, [pc, #188]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001034:	4a26      	ldr	r2, [pc, #152]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800103a:	4b25      	ldr	r3, [pc, #148]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	43db      	mvns	r3, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4013      	ands	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800105e:	4a1c      	ldr	r2, [pc, #112]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001064:	4b1a      	ldr	r3, [pc, #104]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001088:	4a11      	ldr	r2, [pc, #68]	@ (80010d0 <HAL_GPIO_Init+0x324>)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3301      	adds	r3, #1
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	2b0f      	cmp	r3, #15
 8001098:	f67f ae96 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3724      	adds	r7, #36	@ 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40013800 	.word	0x40013800
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40021400 	.word	0x40021400
 80010cc:	40021800 	.word	0x40021800
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	691a      	ldr	r2, [r3, #16]
 80010e4:	887b      	ldrh	r3, [r7, #2]
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d002      	beq.n	80010f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010ec:	2301      	movs	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	4613      	mov	r3, r2
 8001112:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001114:	787b      	ldrb	r3, [r7, #1]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800111a:	887a      	ldrh	r2, [r7, #2]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001120:	e003      	b.n	800112a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	041a      	lsls	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	619a      	str	r2, [r3, #24]
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001136:	b480      	push	{r7}
 8001138:	b085      	sub	sp, #20
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	4013      	ands	r3, r2
 800114e:	041a      	lsls	r2, r3, #16
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43d9      	mvns	r1, r3
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	400b      	ands	r3, r1
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	619a      	str	r2, [r3, #24]
}
 800115e:	bf00      	nop
 8001160:	3714      	adds	r7, #20
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	e0cc      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001180:	4b68      	ldr	r3, [pc, #416]	@ (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	683a      	ldr	r2, [r7, #0]
 800118a:	429a      	cmp	r2, r3
 800118c:	d90c      	bls.n	80011a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800118e:	4b65      	ldr	r3, [pc, #404]	@ (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	683a      	ldr	r2, [r7, #0]
 8001192:	b2d2      	uxtb	r2, r2
 8001194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001196:	4b63      	ldr	r3, [pc, #396]	@ (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 030f 	and.w	r3, r3, #15
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d001      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e0b8      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d020      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0304 	and.w	r3, r3, #4
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011c0:	4b59      	ldr	r3, [pc, #356]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a58      	ldr	r2, [pc, #352]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80011ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011d8:	4b53      	ldr	r3, [pc, #332]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4a52      	ldr	r2, [pc, #328]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80011e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011e4:	4b50      	ldr	r3, [pc, #320]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	494d      	ldr	r1, [pc, #308]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d044      	beq.n	800128c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d107      	bne.n	800121a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4b47      	ldr	r3, [pc, #284]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d119      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e07f      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b02      	cmp	r3, #2
 8001220:	d003      	beq.n	800122a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001226:	2b03      	cmp	r3, #3
 8001228:	d107      	bne.n	800123a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800122a:	4b3f      	ldr	r3, [pc, #252]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e06f      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123a:	4b3b      	ldr	r3, [pc, #236]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e067      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800124a:	4b37      	ldr	r3, [pc, #220]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f023 0203 	bic.w	r2, r3, #3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	4934      	ldr	r1, [pc, #208]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 8001258:	4313      	orrs	r3, r2
 800125a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800125c:	f7ff fc94 	bl	8000b88 <HAL_GetTick>
 8001260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001262:	e00a      	b.n	800127a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001264:	f7ff fc90 	bl	8000b88 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001272:	4293      	cmp	r3, r2
 8001274:	d901      	bls.n	800127a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e04f      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800127a:	4b2b      	ldr	r3, [pc, #172]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f003 020c 	and.w	r2, r3, #12
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	429a      	cmp	r2, r3
 800128a:	d1eb      	bne.n	8001264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800128c:	4b25      	ldr	r3, [pc, #148]	@ (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	429a      	cmp	r2, r3
 8001298:	d20c      	bcs.n	80012b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129a:	4b22      	ldr	r3, [pc, #136]	@ (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 800129c:	683a      	ldr	r2, [r7, #0]
 800129e:	b2d2      	uxtb	r2, r2
 80012a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012a2:	4b20      	ldr	r3, [pc, #128]	@ (8001324 <HAL_RCC_ClockConfig+0x1b8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	683a      	ldr	r2, [r7, #0]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d001      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e032      	b.n	800131a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0304 	and.w	r3, r3, #4
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d008      	beq.n	80012d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	4916      	ldr	r1, [pc, #88]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d009      	beq.n	80012f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012de:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	490e      	ldr	r1, [pc, #56]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012f2:	f000 f887 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 80012f6:	4602      	mov	r2, r0
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_RCC_ClockConfig+0x1bc>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	091b      	lsrs	r3, r3, #4
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	490a      	ldr	r1, [pc, #40]	@ (800132c <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	5ccb      	ldrb	r3, [r1, r3]
 8001306:	fa22 f303 	lsr.w	r3, r2, r3
 800130a:	4a09      	ldr	r2, [pc, #36]	@ (8001330 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_RCC_ClockConfig+0x1c8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fabc 	bl	8000890 <HAL_InitTick>

  return HAL_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023c00 	.word	0x40023c00
 8001328:	40023800 	.word	0x40023800
 800132c:	08003e0c 	.word	0x08003e0c
 8001330:	20000000 	.word	0x20000000
 8001334:	20000004 	.word	0x20000004

08001338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800133c:	4b03      	ldr	r3, [pc, #12]	@ (800134c <HAL_RCC_GetHCLKFreq+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000000 	.word	0x20000000

08001350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001354:	f7ff fff0 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001358:	4602      	mov	r2, r0
 800135a:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	0a9b      	lsrs	r3, r3, #10
 8001360:	f003 0307 	and.w	r3, r3, #7
 8001364:	4903      	ldr	r1, [pc, #12]	@ (8001374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001366:	5ccb      	ldrb	r3, [r1, r3]
 8001368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800136c:	4618      	mov	r0, r3
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	08003e1c 	.word	0x08003e1c

08001378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800137c:	f7ff ffdc 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001380:	4602      	mov	r2, r0
 8001382:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0b5b      	lsrs	r3, r3, #13
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4903      	ldr	r1, [pc, #12]	@ (800139c <HAL_RCC_GetPCLK2Freq+0x24>)
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001394:	4618      	mov	r0, r3
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	08003e1c 	.word	0x08003e1c

080013a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	220f      	movs	r2, #15
 80013ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0203 	and.w	r2, r3, #3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013bc:	4b0f      	ldr	r3, [pc, #60]	@ (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <HAL_RCC_GetClockConfig+0x5c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	08db      	lsrs	r3, r3, #3
 80013da:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013e2:	4b07      	ldr	r3, [pc, #28]	@ (8001400 <HAL_RCC_GetClockConfig+0x60>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 020f 	and.w	r2, r3, #15
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	601a      	str	r2, [r3, #0]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001408:	b0ae      	sub	sp, #184	@ 0xb8
 800140a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800142a:	4bcb      	ldr	r3, [pc, #812]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b0c      	cmp	r3, #12
 8001434:	f200 8206 	bhi.w	8001844 <HAL_RCC_GetSysClockFreq+0x440>
 8001438:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <HAL_RCC_GetSysClockFreq+0x3c>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001475 	.word	0x08001475
 8001444:	08001845 	.word	0x08001845
 8001448:	08001845 	.word	0x08001845
 800144c:	08001845 	.word	0x08001845
 8001450:	0800147d 	.word	0x0800147d
 8001454:	08001845 	.word	0x08001845
 8001458:	08001845 	.word	0x08001845
 800145c:	08001845 	.word	0x08001845
 8001460:	08001485 	.word	0x08001485
 8001464:	08001845 	.word	0x08001845
 8001468:	08001845 	.word	0x08001845
 800146c:	08001845 	.word	0x08001845
 8001470:	08001675 	.word	0x08001675
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001474:	4bb9      	ldr	r3, [pc, #740]	@ (800175c <HAL_RCC_GetSysClockFreq+0x358>)
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800147a:	e1e7      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800147c:	4bb8      	ldr	r3, [pc, #736]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x35c>)
 800147e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001482:	e1e3      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001484:	4bb4      	ldr	r3, [pc, #720]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001490:	4bb1      	ldr	r3, [pc, #708]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d071      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149c:	4bae      	ldr	r3, [pc, #696]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80014ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014c2:	4622      	mov	r2, r4
 80014c4:	462b      	mov	r3, r5
 80014c6:	f04f 0000 	mov.w	r0, #0
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	0159      	lsls	r1, r3, #5
 80014d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014d4:	0150      	lsls	r0, r2, #5
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4621      	mov	r1, r4
 80014dc:	1a51      	subs	r1, r2, r1
 80014de:	6439      	str	r1, [r7, #64]	@ 0x40
 80014e0:	4629      	mov	r1, r5
 80014e2:	eb63 0301 	sbc.w	r3, r3, r1
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014f4:	4649      	mov	r1, r9
 80014f6:	018b      	lsls	r3, r1, #6
 80014f8:	4641      	mov	r1, r8
 80014fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014fe:	4641      	mov	r1, r8
 8001500:	018a      	lsls	r2, r1, #6
 8001502:	4641      	mov	r1, r8
 8001504:	1a51      	subs	r1, r2, r1
 8001506:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001508:	4649      	mov	r1, r9
 800150a:	eb63 0301 	sbc.w	r3, r3, r1
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800151c:	4649      	mov	r1, r9
 800151e:	00cb      	lsls	r3, r1, #3
 8001520:	4641      	mov	r1, r8
 8001522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001526:	4641      	mov	r1, r8
 8001528:	00ca      	lsls	r2, r1, #3
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	4603      	mov	r3, r0
 8001530:	4622      	mov	r2, r4
 8001532:	189b      	adds	r3, r3, r2
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
 8001536:	462b      	mov	r3, r5
 8001538:	460a      	mov	r2, r1
 800153a:	eb42 0303 	adc.w	r3, r2, r3
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800154c:	4629      	mov	r1, r5
 800154e:	024b      	lsls	r3, r1, #9
 8001550:	4621      	mov	r1, r4
 8001552:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001556:	4621      	mov	r1, r4
 8001558:	024a      	lsls	r2, r1, #9
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001562:	2200      	movs	r2, #0
 8001564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800156c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001570:	f7fe fe4e 	bl	8000210 <__aeabi_uldivmod>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4613      	mov	r3, r2
 800157a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800157e:	e067      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001580:	4b75      	ldr	r3, [pc, #468]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	099b      	lsrs	r3, r3, #6
 8001586:	2200      	movs	r2, #0
 8001588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800158c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001598:	67bb      	str	r3, [r7, #120]	@ 0x78
 800159a:	2300      	movs	r3, #0
 800159c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800159e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015a2:	4622      	mov	r2, r4
 80015a4:	462b      	mov	r3, r5
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	0159      	lsls	r1, r3, #5
 80015b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b4:	0150      	lsls	r0, r2, #5
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4621      	mov	r1, r4
 80015bc:	1a51      	subs	r1, r2, r1
 80015be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015c0:	4629      	mov	r1, r5
 80015c2:	eb63 0301 	sbc.w	r3, r3, r1
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015d4:	4649      	mov	r1, r9
 80015d6:	018b      	lsls	r3, r1, #6
 80015d8:	4641      	mov	r1, r8
 80015da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015de:	4641      	mov	r1, r8
 80015e0:	018a      	lsls	r2, r1, #6
 80015e2:	4641      	mov	r1, r8
 80015e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80015e8:	4649      	mov	r1, r9
 80015ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001602:	4692      	mov	sl, r2
 8001604:	469b      	mov	fp, r3
 8001606:	4623      	mov	r3, r4
 8001608:	eb1a 0303 	adds.w	r3, sl, r3
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	462b      	mov	r3, r5
 8001610:	eb4b 0303 	adc.w	r3, fp, r3
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001622:	4629      	mov	r1, r5
 8001624:	028b      	lsls	r3, r1, #10
 8001626:	4621      	mov	r1, r4
 8001628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800162c:	4621      	mov	r1, r4
 800162e:	028a      	lsls	r2, r1, #10
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001638:	2200      	movs	r2, #0
 800163a:	673b      	str	r3, [r7, #112]	@ 0x70
 800163c:	677a      	str	r2, [r7, #116]	@ 0x74
 800163e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001642:	f7fe fde5 	bl	8000210 <__aeabi_uldivmod>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4613      	mov	r3, r2
 800164c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001650:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	0c1b      	lsrs	r3, r3, #16
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	3301      	adds	r3, #1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001672:	e0eb      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001674:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800167c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001680:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d06b      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	2200      	movs	r2, #0
 8001694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001696:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800169a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169e:	663b      	str	r3, [r7, #96]	@ 0x60
 80016a0:	2300      	movs	r3, #0
 80016a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80016a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016a8:	4622      	mov	r2, r4
 80016aa:	462b      	mov	r3, r5
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	0159      	lsls	r1, r3, #5
 80016b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ba:	0150      	lsls	r0, r2, #5
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4621      	mov	r1, r4
 80016c2:	1a51      	subs	r1, r2, r1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	4629      	mov	r1, r5
 80016c8:	eb63 0301 	sbc.w	r3, r3, r1
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016da:	4659      	mov	r1, fp
 80016dc:	018b      	lsls	r3, r1, #6
 80016de:	4651      	mov	r1, sl
 80016e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e4:	4651      	mov	r1, sl
 80016e6:	018a      	lsls	r2, r1, #6
 80016e8:	4651      	mov	r1, sl
 80016ea:	ebb2 0801 	subs.w	r8, r2, r1
 80016ee:	4659      	mov	r1, fp
 80016f0:	eb63 0901 	sbc.w	r9, r3, r1
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001700:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001704:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001708:	4690      	mov	r8, r2
 800170a:	4699      	mov	r9, r3
 800170c:	4623      	mov	r3, r4
 800170e:	eb18 0303 	adds.w	r3, r8, r3
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	462b      	mov	r3, r5
 8001716:	eb49 0303 	adc.w	r3, r9, r3
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001728:	4629      	mov	r1, r5
 800172a:	024b      	lsls	r3, r1, #9
 800172c:	4621      	mov	r1, r4
 800172e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001732:	4621      	mov	r1, r4
 8001734:	024a      	lsls	r2, r1, #9
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800173e:	2200      	movs	r2, #0
 8001740:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001742:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001748:	f7fe fd62 	bl	8000210 <__aeabi_uldivmod>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4613      	mov	r3, r2
 8001752:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001756:	e065      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x420>
 8001758:	40023800 	.word	0x40023800
 800175c:	00f42400 	.word	0x00f42400
 8001760:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001764:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <HAL_RCC_GetSysClockFreq+0x458>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	2200      	movs	r2, #0
 800176c:	4618      	mov	r0, r3
 800176e:	4611      	mov	r1, r2
 8001770:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001774:	653b      	str	r3, [r7, #80]	@ 0x50
 8001776:	2300      	movs	r3, #0
 8001778:	657b      	str	r3, [r7, #84]	@ 0x54
 800177a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800177e:	4642      	mov	r2, r8
 8001780:	464b      	mov	r3, r9
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	0159      	lsls	r1, r3, #5
 800178c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001790:	0150      	lsls	r0, r2, #5
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4641      	mov	r1, r8
 8001798:	1a51      	subs	r1, r2, r1
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	4649      	mov	r1, r9
 800179e:	eb63 0301 	sbc.w	r3, r3, r1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017b0:	4659      	mov	r1, fp
 80017b2:	018b      	lsls	r3, r1, #6
 80017b4:	4651      	mov	r1, sl
 80017b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ba:	4651      	mov	r1, sl
 80017bc:	018a      	lsls	r2, r1, #6
 80017be:	4651      	mov	r1, sl
 80017c0:	1a54      	subs	r4, r2, r1
 80017c2:	4659      	mov	r1, fp
 80017c4:	eb63 0501 	sbc.w	r5, r3, r1
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	00eb      	lsls	r3, r5, #3
 80017d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017d6:	00e2      	lsls	r2, r4, #3
 80017d8:	4614      	mov	r4, r2
 80017da:	461d      	mov	r5, r3
 80017dc:	4643      	mov	r3, r8
 80017de:	18e3      	adds	r3, r4, r3
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	464b      	mov	r3, r9
 80017e4:	eb45 0303 	adc.w	r3, r5, r3
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017f6:	4629      	mov	r1, r5
 80017f8:	028b      	lsls	r3, r1, #10
 80017fa:	4621      	mov	r1, r4
 80017fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001800:	4621      	mov	r1, r4
 8001802:	028a      	lsls	r2, r1, #10
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800180c:	2200      	movs	r2, #0
 800180e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001810:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001812:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001816:	f7fe fcfb 	bl	8000210 <__aeabi_uldivmod>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4613      	mov	r3, r2
 8001820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001824:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_RCC_GetSysClockFreq+0x458>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0f1b      	lsrs	r3, r3, #28
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001842:	e003      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800184a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800184c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001850:	4618      	mov	r0, r3
 8001852:	37b8      	adds	r7, #184	@ 0xb8
 8001854:	46bd      	mov	sp, r7
 8001856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400

08001864 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e28d      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8083 	beq.w	800198a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001884:	4b94      	ldr	r3, [pc, #592]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b04      	cmp	r3, #4
 800188e:	d019      	beq.n	80018c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001890:	4b91      	ldr	r3, [pc, #580]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
        || \
 8001898:	2b08      	cmp	r3, #8
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800189c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018a8:	d00c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018aa:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d112      	bne.n	80018dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b6:	4b88      	ldr	r3, [pc, #544]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018c2:	d10b      	bne.n	80018dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	4b84      	ldr	r3, [pc, #528]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d05b      	beq.n	8001988 <HAL_RCC_OscConfig+0x124>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d157      	bne.n	8001988 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e25a      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x90>
 80018e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7b      	ldr	r2, [pc, #492]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0xcc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0xb4>
 80018fe:	4b76      	ldr	r3, [pc, #472]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a75      	ldr	r2, [pc, #468]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b73      	ldr	r3, [pc, #460]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a72      	ldr	r2, [pc, #456]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0xcc>
 8001918:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6b      	ldr	r2, [pc, #428]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f926 	bl	8000b88 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff f922 	bl	8000b88 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	@ 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e21f      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b61      	ldr	r3, [pc, #388]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0xdc>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f912 	bl	8000b88 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f90e 	bl	8000b88 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	@ 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e20b      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b57      	ldr	r3, [pc, #348]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x104>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06f      	beq.n	8001a76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001996:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d017      	beq.n	80019d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019a2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d105      	bne.n	80019ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c6:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x186>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1d3      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4937      	ldr	r1, [pc, #220]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f8bb 	bl	8000b88 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff f8b7 	bl	8000b88 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1b4      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4925      	ldr	r1, [pc, #148]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f89a 	bl	8000b88 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff f896 	bl	8000b88 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e193      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d036      	beq.n	8001af0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f87a 	bl	8000b88 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff f876 	bl	8000b88 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e173      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x234>
 8001ab6:	e01b      	b.n	8001af0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abe:	f7ff f863 	bl	8000b88 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e00e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f85f 	bl	8000b88 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d907      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e15c      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	42470000 	.word	0x42470000
 8001ae0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b8a      	ldr	r3, [pc, #552]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ea      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8097 	beq.w	8001c2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b83      	ldr	r3, [pc, #524]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b7f      	ldr	r3, [pc, #508]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a7e      	ldr	r2, [pc, #504]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b79      	ldr	r3, [pc, #484]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b76      	ldr	r3, [pc, #472]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a75      	ldr	r2, [pc, #468]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff f81f 	bl	8000b88 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff f81b 	bl	8000b88 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e118      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b6c      	ldr	r3, [pc, #432]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x31e>
 8001b74:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b78:	4a65      	ldr	r2, [pc, #404]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x358>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x340>
 8001b8a:	4b61      	ldr	r3, [pc, #388]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	4a60      	ldr	r2, [pc, #384]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b96:	4b5e      	ldr	r3, [pc, #376]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0x358>
 8001ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a59      	ldr	r2, [pc, #356]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	4b57      	ldr	r3, [pc, #348]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	4a56      	ldr	r2, [pc, #344]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	f023 0304 	bic.w	r3, r3, #4
 8001bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d015      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7fe ffe0 	bl	8000b88 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7fe ffdc 	bl	8000b88 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0d7      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	4b4b      	ldr	r3, [pc, #300]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ee      	beq.n	8001bcc <HAL_RCC_OscConfig+0x368>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7fe ffca 	bl	8000b88 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7fe ffc6 	bl	8000b88 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0c1      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0e:	4b40      	ldr	r3, [pc, #256]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	4a3a      	ldr	r2, [pc, #232]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80ad 	beq.w	8001d90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c36:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d060      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d145      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe ff9a 	bl	8000b88 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe ff96 	bl	8000b88 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e093      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	071b      	lsls	r3, r3, #28
 8001ca2:	491b      	ldr	r1, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7fe ff6b 	bl	8000b88 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe ff67 	bl	8000b88 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e064      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x452>
 8001cd4:	e05c      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff54 	bl	8000b88 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe ff50 	bl	8000b88 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e04d      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x480>
 8001d02:	e045      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e040      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <HAL_RCC_OscConfig+0x538>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d030      	beq.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d129      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d122      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d119      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d10f      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e041      	b.n	8001e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f839 	bl	8001e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f000 f9c0 	bl	8002164 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d001      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e04e      	b.n	8001f0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a23      	ldr	r2, [pc, #140]	@ (8001f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d022      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e96:	d01d      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d018      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00e      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a1b      	ldr	r2, [pc, #108]	@ (8001f28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a19      	ldr	r2, [pc, #100]	@ (8001f2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d004      	beq.n	8001ed4 <HAL_TIM_Base_Start_IT+0x80>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d111      	bne.n	8001ef8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d010      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f042 0201 	orr.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ef6:	e007      	b.n	8001f08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f042 0201 	orr.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3714      	adds	r7, #20
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40010000 	.word	0x40010000
 8001f1c:	40000400 	.word	0x40000400
 8001f20:	40000800 	.word	0x40000800
 8001f24:	40000c00 	.word	0x40000c00
 8001f28:	40010400 	.word	0x40010400
 8001f2c:	40014000 	.word	0x40014000
 8001f30:	40001800 	.word	0x40001800

08001f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d020      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d01b      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0202 	mvn.w	r2, #2
 8001f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8d2 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8001f84:	e005      	b.n	8001f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f8c4 	bl	8002114 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f000 f8d5 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d020      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d01b      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0204 	mvn.w	r2, #4
 8001fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f8ac 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8001fd0:	e005      	b.n	8001fde <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f000 f89e 	bl	8002114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8af 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d020      	beq.n	8002030 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f003 0308 	and.w	r3, r3, #8
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d01b      	beq.n	8002030 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f06f 0208 	mvn.w	r2, #8
 8002000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2204      	movs	r2, #4
 8002006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f886 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 800201c:	e005      	b.n	800202a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 f878 	bl	8002114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f889 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 0310 	and.w	r3, r3, #16
 8002036:	2b00      	cmp	r3, #0
 8002038:	d020      	beq.n	800207c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	d01b      	beq.n	800207c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0210 	mvn.w	r2, #16
 800204c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2208      	movs	r2, #8
 8002052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f860 	bl	8002128 <HAL_TIM_IC_CaptureCallback>
 8002068:	e005      	b.n	8002076 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f852 	bl	8002114 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f863 	bl	800213c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00c      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f003 0301 	and.w	r3, r3, #1
 800208c:	2b00      	cmp	r3, #0
 800208e:	d007      	beq.n	80020a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f06f 0201 	mvn.w	r2, #1
 8002098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7fe fbb4 	bl	8000808 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f906 	bl	80022d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00c      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f834 	bl	8002150 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f003 0320 	and.w	r3, r3, #32
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0220 	mvn.w	r2, #32
 8002104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f8d8 	bl	80022bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a46      	ldr	r2, [pc, #280]	@ (8002290 <TIM_Base_SetConfig+0x12c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002182:	d00f      	beq.n	80021a4 <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a43      	ldr	r2, [pc, #268]	@ (8002294 <TIM_Base_SetConfig+0x130>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d00b      	beq.n	80021a4 <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a42      	ldr	r2, [pc, #264]	@ (8002298 <TIM_Base_SetConfig+0x134>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d007      	beq.n	80021a4 <TIM_Base_SetConfig+0x40>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4a41      	ldr	r2, [pc, #260]	@ (800229c <TIM_Base_SetConfig+0x138>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d003      	beq.n	80021a4 <TIM_Base_SetConfig+0x40>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a40      	ldr	r2, [pc, #256]	@ (80022a0 <TIM_Base_SetConfig+0x13c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d108      	bne.n	80021b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a35      	ldr	r2, [pc, #212]	@ (8002290 <TIM_Base_SetConfig+0x12c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d02b      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c4:	d027      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a32      	ldr	r2, [pc, #200]	@ (8002294 <TIM_Base_SetConfig+0x130>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d023      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a31      	ldr	r2, [pc, #196]	@ (8002298 <TIM_Base_SetConfig+0x134>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a30      	ldr	r2, [pc, #192]	@ (800229c <TIM_Base_SetConfig+0x138>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01b      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a2f      	ldr	r2, [pc, #188]	@ (80022a0 <TIM_Base_SetConfig+0x13c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d017      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a2e      	ldr	r2, [pc, #184]	@ (80022a4 <TIM_Base_SetConfig+0x140>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a2d      	ldr	r2, [pc, #180]	@ (80022a8 <TIM_Base_SetConfig+0x144>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00f      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a2c      	ldr	r2, [pc, #176]	@ (80022ac <TIM_Base_SetConfig+0x148>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00b      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a2b      	ldr	r2, [pc, #172]	@ (80022b0 <TIM_Base_SetConfig+0x14c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d007      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2a      	ldr	r2, [pc, #168]	@ (80022b4 <TIM_Base_SetConfig+0x150>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d003      	beq.n	8002216 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a29      	ldr	r2, [pc, #164]	@ (80022b8 <TIM_Base_SetConfig+0x154>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d108      	bne.n	8002228 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800221c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a10      	ldr	r2, [pc, #64]	@ (8002290 <TIM_Base_SetConfig+0x12c>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d003      	beq.n	800225c <TIM_Base_SetConfig+0xf8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a12      	ldr	r2, [pc, #72]	@ (80022a0 <TIM_Base_SetConfig+0x13c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d103      	bne.n	8002264 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	f023 0201 	bic.w	r2, r3, #1
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	611a      	str	r2, [r3, #16]
  }
}
 8002282:	bf00      	nop
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	40010000 	.word	0x40010000
 8002294:	40000400 	.word	0x40000400
 8002298:	40000800 	.word	0x40000800
 800229c:	40000c00 	.word	0x40000c00
 80022a0:	40010400 	.word	0x40010400
 80022a4:	40014000 	.word	0x40014000
 80022a8:	40014400 	.word	0x40014400
 80022ac:	40014800 	.word	0x40014800
 80022b0:	40001800 	.word	0x40001800
 80022b4:	40001c00 	.word	0x40001c00
 80022b8:	40002000 	.word	0x40002000

080022bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e042      	b.n	800237c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d106      	bne.n	8002310 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7fe fb94 	bl	8000a38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2224      	movs	r2, #36	@ 0x24
 8002314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002326:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f82b 	bl	8002384 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691a      	ldr	r2, [r3, #16]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800233c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695a      	ldr	r2, [r3, #20]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800234c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68da      	ldr	r2, [r3, #12]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800235c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002388:	b0c0      	sub	sp, #256	@ 0x100
 800238a:	af00      	add	r7, sp, #0
 800238c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	ea40 0301 	orr.w	r3, r0, r1
 80023ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023c8:	69db      	ldr	r3, [r3, #28]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80023d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80023dc:	f021 010c 	bic.w	r1, r1, #12
 80023e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80023ea:	430b      	orrs	r3, r1
 80023ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80023fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023fe:	6999      	ldr	r1, [r3, #24]
 8002400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	ea40 0301 	orr.w	r3, r0, r1
 800240a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	4b8f      	ldr	r3, [pc, #572]	@ (8002650 <UART_SetConfig+0x2cc>)
 8002414:	429a      	cmp	r2, r3
 8002416:	d005      	beq.n	8002424 <UART_SetConfig+0xa0>
 8002418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b8d      	ldr	r3, [pc, #564]	@ (8002654 <UART_SetConfig+0x2d0>)
 8002420:	429a      	cmp	r2, r3
 8002422:	d104      	bne.n	800242e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7fe ffa8 	bl	8001378 <HAL_RCC_GetPCLK2Freq>
 8002428:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800242c:	e003      	b.n	8002436 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800242e:	f7fe ff8f 	bl	8001350 <HAL_RCC_GetPCLK1Freq>
 8002432:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002440:	f040 810c 	bne.w	800265c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002448:	2200      	movs	r2, #0
 800244a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800244e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002452:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002456:	4622      	mov	r2, r4
 8002458:	462b      	mov	r3, r5
 800245a:	1891      	adds	r1, r2, r2
 800245c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800245e:	415b      	adcs	r3, r3
 8002460:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002462:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002466:	4621      	mov	r1, r4
 8002468:	eb12 0801 	adds.w	r8, r2, r1
 800246c:	4629      	mov	r1, r5
 800246e:	eb43 0901 	adc.w	r9, r3, r1
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002486:	4690      	mov	r8, r2
 8002488:	4699      	mov	r9, r3
 800248a:	4623      	mov	r3, r4
 800248c:	eb18 0303 	adds.w	r3, r8, r3
 8002490:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002494:	462b      	mov	r3, r5
 8002496:	eb49 0303 	adc.w	r3, r9, r3
 800249a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800249e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80024ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80024b2:	460b      	mov	r3, r1
 80024b4:	18db      	adds	r3, r3, r3
 80024b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80024b8:	4613      	mov	r3, r2
 80024ba:	eb42 0303 	adc.w	r3, r2, r3
 80024be:	657b      	str	r3, [r7, #84]	@ 0x54
 80024c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80024c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80024c8:	f7fd fea2 	bl	8000210 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4b61      	ldr	r3, [pc, #388]	@ (8002658 <UART_SetConfig+0x2d4>)
 80024d2:	fba3 2302 	umull	r2, r3, r3, r2
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	011c      	lsls	r4, r3, #4
 80024da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024de:	2200      	movs	r2, #0
 80024e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80024e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80024ec:	4642      	mov	r2, r8
 80024ee:	464b      	mov	r3, r9
 80024f0:	1891      	adds	r1, r2, r2
 80024f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80024f4:	415b      	adcs	r3, r3
 80024f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024fc:	4641      	mov	r1, r8
 80024fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002502:	4649      	mov	r1, r9
 8002504:	eb43 0b01 	adc.w	fp, r3, r1
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002514:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002518:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800251c:	4692      	mov	sl, r2
 800251e:	469b      	mov	fp, r3
 8002520:	4643      	mov	r3, r8
 8002522:	eb1a 0303 	adds.w	r3, sl, r3
 8002526:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800252a:	464b      	mov	r3, r9
 800252c:	eb4b 0303 	adc.w	r3, fp, r3
 8002530:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002540:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002544:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002548:	460b      	mov	r3, r1
 800254a:	18db      	adds	r3, r3, r3
 800254c:	643b      	str	r3, [r7, #64]	@ 0x40
 800254e:	4613      	mov	r3, r2
 8002550:	eb42 0303 	adc.w	r3, r2, r3
 8002554:	647b      	str	r3, [r7, #68]	@ 0x44
 8002556:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800255a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800255e:	f7fd fe57 	bl	8000210 <__aeabi_uldivmod>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4611      	mov	r1, r2
 8002568:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <UART_SetConfig+0x2d4>)
 800256a:	fba3 2301 	umull	r2, r3, r3, r1
 800256e:	095b      	lsrs	r3, r3, #5
 8002570:	2264      	movs	r2, #100	@ 0x64
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	1acb      	subs	r3, r1, r3
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800257e:	4b36      	ldr	r3, [pc, #216]	@ (8002658 <UART_SetConfig+0x2d4>)
 8002580:	fba3 2302 	umull	r2, r3, r3, r2
 8002584:	095b      	lsrs	r3, r3, #5
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800258c:	441c      	add	r4, r3
 800258e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002592:	2200      	movs	r2, #0
 8002594:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002598:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800259c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80025a0:	4642      	mov	r2, r8
 80025a2:	464b      	mov	r3, r9
 80025a4:	1891      	adds	r1, r2, r2
 80025a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80025a8:	415b      	adcs	r3, r3
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025b0:	4641      	mov	r1, r8
 80025b2:	1851      	adds	r1, r2, r1
 80025b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80025b6:	4649      	mov	r1, r9
 80025b8:	414b      	adcs	r3, r1
 80025ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80025bc:	f04f 0200 	mov.w	r2, #0
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80025c8:	4659      	mov	r1, fp
 80025ca:	00cb      	lsls	r3, r1, #3
 80025cc:	4651      	mov	r1, sl
 80025ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025d2:	4651      	mov	r1, sl
 80025d4:	00ca      	lsls	r2, r1, #3
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	4603      	mov	r3, r0
 80025dc:	4642      	mov	r2, r8
 80025de:	189b      	adds	r3, r3, r2
 80025e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80025e4:	464b      	mov	r3, r9
 80025e6:	460a      	mov	r2, r1
 80025e8:	eb42 0303 	adc.w	r3, r2, r3
 80025ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002600:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002604:	460b      	mov	r3, r1
 8002606:	18db      	adds	r3, r3, r3
 8002608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800260a:	4613      	mov	r3, r2
 800260c:	eb42 0303 	adc.w	r3, r2, r3
 8002610:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002612:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002616:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800261a:	f7fd fdf9 	bl	8000210 <__aeabi_uldivmod>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4b0d      	ldr	r3, [pc, #52]	@ (8002658 <UART_SetConfig+0x2d4>)
 8002624:	fba3 1302 	umull	r1, r3, r3, r2
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	2164      	movs	r1, #100	@ 0x64
 800262c:	fb01 f303 	mul.w	r3, r1, r3
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	3332      	adds	r3, #50	@ 0x32
 8002636:	4a08      	ldr	r2, [pc, #32]	@ (8002658 <UART_SetConfig+0x2d4>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	f003 0207 	and.w	r2, r3, #7
 8002642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4422      	add	r2, r4
 800264a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800264c:	e106      	b.n	800285c <UART_SetConfig+0x4d8>
 800264e:	bf00      	nop
 8002650:	40011000 	.word	0x40011000
 8002654:	40011400 	.word	0x40011400
 8002658:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800265c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002660:	2200      	movs	r2, #0
 8002662:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002666:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800266a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800266e:	4642      	mov	r2, r8
 8002670:	464b      	mov	r3, r9
 8002672:	1891      	adds	r1, r2, r2
 8002674:	6239      	str	r1, [r7, #32]
 8002676:	415b      	adcs	r3, r3
 8002678:	627b      	str	r3, [r7, #36]	@ 0x24
 800267a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800267e:	4641      	mov	r1, r8
 8002680:	1854      	adds	r4, r2, r1
 8002682:	4649      	mov	r1, r9
 8002684:	eb43 0501 	adc.w	r5, r3, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	00eb      	lsls	r3, r5, #3
 8002692:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002696:	00e2      	lsls	r2, r4, #3
 8002698:	4614      	mov	r4, r2
 800269a:	461d      	mov	r5, r3
 800269c:	4643      	mov	r3, r8
 800269e:	18e3      	adds	r3, r4, r3
 80026a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026a4:	464b      	mov	r3, r9
 80026a6:	eb45 0303 	adc.w	r3, r5, r3
 80026aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80026ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80026ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80026be:	f04f 0200 	mov.w	r2, #0
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80026ca:	4629      	mov	r1, r5
 80026cc:	008b      	lsls	r3, r1, #2
 80026ce:	4621      	mov	r1, r4
 80026d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026d4:	4621      	mov	r1, r4
 80026d6:	008a      	lsls	r2, r1, #2
 80026d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80026dc:	f7fd fd98 	bl	8000210 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4b60      	ldr	r3, [pc, #384]	@ (8002868 <UART_SetConfig+0x4e4>)
 80026e6:	fba3 2302 	umull	r2, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	011c      	lsls	r4, r3, #4
 80026ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026f2:	2200      	movs	r2, #0
 80026f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80026f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80026fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002700:	4642      	mov	r2, r8
 8002702:	464b      	mov	r3, r9
 8002704:	1891      	adds	r1, r2, r2
 8002706:	61b9      	str	r1, [r7, #24]
 8002708:	415b      	adcs	r3, r3
 800270a:	61fb      	str	r3, [r7, #28]
 800270c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002710:	4641      	mov	r1, r8
 8002712:	1851      	adds	r1, r2, r1
 8002714:	6139      	str	r1, [r7, #16]
 8002716:	4649      	mov	r1, r9
 8002718:	414b      	adcs	r3, r1
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002728:	4659      	mov	r1, fp
 800272a:	00cb      	lsls	r3, r1, #3
 800272c:	4651      	mov	r1, sl
 800272e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002732:	4651      	mov	r1, sl
 8002734:	00ca      	lsls	r2, r1, #3
 8002736:	4610      	mov	r0, r2
 8002738:	4619      	mov	r1, r3
 800273a:	4603      	mov	r3, r0
 800273c:	4642      	mov	r2, r8
 800273e:	189b      	adds	r3, r3, r2
 8002740:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002744:	464b      	mov	r3, r9
 8002746:	460a      	mov	r2, r1
 8002748:	eb42 0303 	adc.w	r3, r2, r3
 800274c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	67bb      	str	r3, [r7, #120]	@ 0x78
 800275a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002768:	4649      	mov	r1, r9
 800276a:	008b      	lsls	r3, r1, #2
 800276c:	4641      	mov	r1, r8
 800276e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002772:	4641      	mov	r1, r8
 8002774:	008a      	lsls	r2, r1, #2
 8002776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800277a:	f7fd fd49 	bl	8000210 <__aeabi_uldivmod>
 800277e:	4602      	mov	r2, r0
 8002780:	460b      	mov	r3, r1
 8002782:	4611      	mov	r1, r2
 8002784:	4b38      	ldr	r3, [pc, #224]	@ (8002868 <UART_SetConfig+0x4e4>)
 8002786:	fba3 2301 	umull	r2, r3, r3, r1
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2264      	movs	r2, #100	@ 0x64
 800278e:	fb02 f303 	mul.w	r3, r2, r3
 8002792:	1acb      	subs	r3, r1, r3
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	3332      	adds	r3, #50	@ 0x32
 8002798:	4a33      	ldr	r2, [pc, #204]	@ (8002868 <UART_SetConfig+0x4e4>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027a4:	441c      	add	r4, r3
 80027a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027aa:	2200      	movs	r2, #0
 80027ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80027ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80027b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80027b4:	4642      	mov	r2, r8
 80027b6:	464b      	mov	r3, r9
 80027b8:	1891      	adds	r1, r2, r2
 80027ba:	60b9      	str	r1, [r7, #8]
 80027bc:	415b      	adcs	r3, r3
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027c4:	4641      	mov	r1, r8
 80027c6:	1851      	adds	r1, r2, r1
 80027c8:	6039      	str	r1, [r7, #0]
 80027ca:	4649      	mov	r1, r9
 80027cc:	414b      	adcs	r3, r1
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	f04f 0200 	mov.w	r2, #0
 80027d4:	f04f 0300 	mov.w	r3, #0
 80027d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80027dc:	4659      	mov	r1, fp
 80027de:	00cb      	lsls	r3, r1, #3
 80027e0:	4651      	mov	r1, sl
 80027e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027e6:	4651      	mov	r1, sl
 80027e8:	00ca      	lsls	r2, r1, #3
 80027ea:	4610      	mov	r0, r2
 80027ec:	4619      	mov	r1, r3
 80027ee:	4603      	mov	r3, r0
 80027f0:	4642      	mov	r2, r8
 80027f2:	189b      	adds	r3, r3, r2
 80027f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027f6:	464b      	mov	r3, r9
 80027f8:	460a      	mov	r2, r1
 80027fa:	eb42 0303 	adc.w	r3, r2, r3
 80027fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	663b      	str	r3, [r7, #96]	@ 0x60
 800280a:	667a      	str	r2, [r7, #100]	@ 0x64
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002818:	4649      	mov	r1, r9
 800281a:	008b      	lsls	r3, r1, #2
 800281c:	4641      	mov	r1, r8
 800281e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002822:	4641      	mov	r1, r8
 8002824:	008a      	lsls	r2, r1, #2
 8002826:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800282a:	f7fd fcf1 	bl	8000210 <__aeabi_uldivmod>
 800282e:	4602      	mov	r2, r0
 8002830:	460b      	mov	r3, r1
 8002832:	4b0d      	ldr	r3, [pc, #52]	@ (8002868 <UART_SetConfig+0x4e4>)
 8002834:	fba3 1302 	umull	r1, r3, r3, r2
 8002838:	095b      	lsrs	r3, r3, #5
 800283a:	2164      	movs	r1, #100	@ 0x64
 800283c:	fb01 f303 	mul.w	r3, r1, r3
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	3332      	adds	r3, #50	@ 0x32
 8002846:	4a08      	ldr	r2, [pc, #32]	@ (8002868 <UART_SetConfig+0x4e4>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	f003 020f 	and.w	r2, r3, #15
 8002852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4422      	add	r2, r4
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002862:	46bd      	mov	sp, r7
 8002864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002868:	51eb851f 	.word	0x51eb851f

0800286c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800287a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800287e:	2b84      	cmp	r3, #132	@ 0x84
 8002880:	d005      	beq.n	800288e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002882:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4413      	add	r3, r2
 800288a:	3303      	adds	r3, #3
 800288c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80028a0:	f000 fae4 	bl	8002e6c <vTaskStartScheduler>
  
  return osOK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	bd80      	pop	{r7, pc}

080028aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80028aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ac:	b089      	sub	sp, #36	@ 0x24
 80028ae:	af04      	add	r7, sp, #16
 80028b0:	6078      	str	r0, [r7, #4]
 80028b2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d020      	beq.n	80028fe <osThreadCreate+0x54>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01c      	beq.n	80028fe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685c      	ldr	r4, [r3, #4]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	691e      	ldr	r6, [r3, #16]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff ffc8 	bl	800286c <makeFreeRtosPriority>
 80028dc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028e6:	9202      	str	r2, [sp, #8]
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	9100      	str	r1, [sp, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4632      	mov	r2, r6
 80028f0:	4629      	mov	r1, r5
 80028f2:	4620      	mov	r0, r4
 80028f4:	f000 f8ed 	bl	8002ad2 <xTaskCreateStatic>
 80028f8:	4603      	mov	r3, r0
 80028fa:	60fb      	str	r3, [r7, #12]
 80028fc:	e01c      	b.n	8002938 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685c      	ldr	r4, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800290a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff ffaa 	bl	800286c <makeFreeRtosPriority>
 8002918:	4602      	mov	r2, r0
 800291a:	f107 030c 	add.w	r3, r7, #12
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	9200      	str	r2, [sp, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	4632      	mov	r2, r6
 8002926:	4629      	mov	r1, r5
 8002928:	4620      	mov	r0, r4
 800292a:	f000 f932 	bl	8002b92 <xTaskCreate>
 800292e:	4603      	mov	r3, r0
 8002930:	2b01      	cmp	r3, #1
 8002932:	d001      	beq.n	8002938 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002934:	2300      	movs	r3, #0
 8002936:	e000      	b.n	800293a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002938:	68fb      	ldr	r3, [r7, #12]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002942 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <osDelay+0x16>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	e000      	b.n	800295a <osDelay+0x18>
 8002958:	2301      	movs	r3, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fa50 	bl	8002e00 <vTaskDelay>
  
  return osOK;
 8002960:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f103 0208 	add.w	r2, r3, #8
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f04f 32ff 	mov.w	r2, #4294967295
 8002982:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f103 0208 	add.w	r2, r3, #8
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f103 0208 	add.w	r2, r3, #8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	601a      	str	r2, [r3, #0]
}
 8002a00:	bf00      	nop
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a22:	d103      	bne.n	8002a2c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e00c      	b.n	8002a46 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3308      	adds	r3, #8
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	e002      	b.n	8002a3a <vListInsert+0x2e>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d2f6      	bcs.n	8002a34 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	601a      	str	r2, [r3, #0]
}
 8002a72:	bf00      	nop
 8002a74:	3714      	adds	r7, #20
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6852      	ldr	r2, [r2, #4]
 8002a9e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d103      	bne.n	8002ab2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b08e      	sub	sp, #56	@ 0x38
 8002ad6:	af04      	add	r7, sp, #16
 8002ad8:	60f8      	str	r0, [r7, #12]
 8002ada:	60b9      	str	r1, [r7, #8]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	e7fd      	b.n	8002afa <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <xTaskCreateStatic+0x4a>
	__asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	61fb      	str	r3, [r7, #28]
}
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b1c:	2354      	movs	r3, #84	@ 0x54
 8002b1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	2b54      	cmp	r3, #84	@ 0x54
 8002b24:	d00b      	beq.n	8002b3e <xTaskCreateStatic+0x6c>
	__asm volatile
 8002b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	f3bf 8f4f 	dsb	sy
 8002b36:	61bb      	str	r3, [r7, #24]
}
 8002b38:	bf00      	nop
 8002b3a:	bf00      	nop
 8002b3c:	e7fd      	b.n	8002b3a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01e      	beq.n	8002b84 <xTaskCreateStatic+0xb2>
 8002b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d01b      	beq.n	8002b84 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	2202      	movs	r2, #2
 8002b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9303      	str	r3, [sp, #12]
 8002b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b64:	9302      	str	r3, [sp, #8]
 8002b66:	f107 0314 	add.w	r3, r7, #20
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	68b9      	ldr	r1, [r7, #8]
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 f850 	bl	8002c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002b7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b7e:	f000 f8d5 	bl	8002d2c <prvAddNewTaskToReadyList>
 8002b82:	e001      	b.n	8002b88 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002b88:	697b      	ldr	r3, [r7, #20]
	}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3728      	adds	r7, #40	@ 0x28
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b08c      	sub	sp, #48	@ 0x30
 8002b96:	af04      	add	r7, sp, #16
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	603b      	str	r3, [r7, #0]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fece 	bl	8003948 <pvPortMalloc>
 8002bac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00e      	beq.n	8002bd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bb4:	2054      	movs	r0, #84	@ 0x54
 8002bb6:	f000 fec7 	bl	8003948 <pvPortMalloc>
 8002bba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d003      	beq.n	8002bca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002bc8:	e005      	b.n	8002bd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002bca:	6978      	ldr	r0, [r7, #20]
 8002bcc:	f000 ff8a 	bl	8003ae4 <vPortFree>
 8002bd0:	e001      	b.n	8002bd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d017      	beq.n	8002c0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	2300      	movs	r3, #0
 8002be8:	9303      	str	r3, [sp, #12]
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	9302      	str	r3, [sp, #8]
 8002bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 f80e 	bl	8002c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c00:	69f8      	ldr	r0, [r7, #28]
 8002c02:	f000 f893 	bl	8002d2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c06:	2301      	movs	r3, #1
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e002      	b.n	8002c12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c12:	69bb      	ldr	r3, [r7, #24]
	}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b088      	sub	sp, #32
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002c34:	3b01      	subs	r3, #1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f023 0307 	bic.w	r3, r3, #7
 8002c42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c52:	f383 8811 	msr	BASEPRI, r3
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	f3bf 8f4f 	dsb	sy
 8002c5e:	617b      	str	r3, [r7, #20]
}
 8002c60:	bf00      	nop
 8002c62:	bf00      	nop
 8002c64:	e7fd      	b.n	8002c62 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01f      	beq.n	8002cac <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
 8002c70:	e012      	b.n	8002c98 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	4413      	add	r3, r2
 8002c78:	7819      	ldrb	r1, [r3, #0]
 8002c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	3334      	adds	r3, #52	@ 0x34
 8002c82:	460a      	mov	r2, r1
 8002c84:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d006      	beq.n	8002ca0 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3301      	adds	r3, #1
 8002c96:	61fb      	str	r3, [r7, #28]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	2b0f      	cmp	r3, #15
 8002c9c:	d9e9      	bls.n	8002c72 <prvInitialiseNewTask+0x56>
 8002c9e:	e000      	b.n	8002ca2 <prvInitialiseNewTask+0x86>
			{
				break;
 8002ca0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002caa:	e003      	b.n	8002cb4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	2b06      	cmp	r3, #6
 8002cb8:	d901      	bls.n	8002cbe <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cba:	2306      	movs	r3, #6
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002cc8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	2200      	movs	r2, #0
 8002cce:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd2:	3304      	adds	r3, #4
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff fe68 	bl	80029aa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	3318      	adds	r3, #24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff fe63 	bl	80029aa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ce8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cec:	f1c3 0207 	rsb	r2, r3, #7
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	68f9      	ldr	r1, [r7, #12]
 8002d0c:	69b8      	ldr	r0, [r7, #24]
 8002d0e:	f000 fc0d 	bl	800352c <pxPortInitialiseStack>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d24:	bf00      	nop
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d34:	f000 fd28 	bl	8003788 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002d38:	4b2a      	ldr	r3, [pc, #168]	@ (8002de4 <prvAddNewTaskToReadyList+0xb8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	4a29      	ldr	r2, [pc, #164]	@ (8002de4 <prvAddNewTaskToReadyList+0xb8>)
 8002d40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002d42:	4b29      	ldr	r3, [pc, #164]	@ (8002de8 <prvAddNewTaskToReadyList+0xbc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002d4a:	4a27      	ldr	r2, [pc, #156]	@ (8002de8 <prvAddNewTaskToReadyList+0xbc>)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d50:	4b24      	ldr	r3, [pc, #144]	@ (8002de4 <prvAddNewTaskToReadyList+0xb8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d110      	bne.n	8002d7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002d58:	f000 fac4 	bl	80032e4 <prvInitialiseTaskLists>
 8002d5c:	e00d      	b.n	8002d7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002d5e:	4b23      	ldr	r3, [pc, #140]	@ (8002dec <prvAddNewTaskToReadyList+0xc0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d66:	4b20      	ldr	r3, [pc, #128]	@ (8002de8 <prvAddNewTaskToReadyList+0xbc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d802      	bhi.n	8002d7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002d74:	4a1c      	ldr	r2, [pc, #112]	@ (8002de8 <prvAddNewTaskToReadyList+0xbc>)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <prvAddNewTaskToReadyList+0xc4>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	4a1b      	ldr	r2, [pc, #108]	@ (8002df0 <prvAddNewTaskToReadyList+0xc4>)
 8002d82:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	2201      	movs	r2, #1
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <prvAddNewTaskToReadyList+0xc8>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	4a18      	ldr	r2, [pc, #96]	@ (8002df4 <prvAddNewTaskToReadyList+0xc8>)
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4a15      	ldr	r2, [pc, #84]	@ (8002df8 <prvAddNewTaskToReadyList+0xcc>)
 8002da4:	441a      	add	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f7ff fe09 	bl	80029c4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002db2:	f000 fd1b 	bl	80037ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002db6:	4b0d      	ldr	r3, [pc, #52]	@ (8002dec <prvAddNewTaskToReadyList+0xc0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002de8 <prvAddNewTaskToReadyList+0xbc>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d207      	bcs.n	8002ddc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <prvAddNewTaskToReadyList+0xd0>)
 8002dce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	f3bf 8f4f 	dsb	sy
 8002dd8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ddc:	bf00      	nop
 8002dde:	3708      	adds	r7, #8
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	20000420 	.word	0x20000420
 8002de8:	20000320 	.word	0x20000320
 8002dec:	2000042c 	.word	0x2000042c
 8002df0:	2000043c 	.word	0x2000043c
 8002df4:	20000428 	.word	0x20000428
 8002df8:	20000324 	.word	0x20000324
 8002dfc:	e000ed04 	.word	0xe000ed04

08002e00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d018      	beq.n	8002e44 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e12:	4b14      	ldr	r3, [pc, #80]	@ (8002e64 <vTaskDelay+0x64>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00b      	beq.n	8002e32 <vTaskDelay+0x32>
	__asm volatile
 8002e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	60bb      	str	r3, [r7, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	e7fd      	b.n	8002e2e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e32:	f000 f87d 	bl	8002f30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e36:	2100      	movs	r1, #0
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fb11 	bl	8003460 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002e3e:	f000 f885 	bl	8002f4c <xTaskResumeAll>
 8002e42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002e4a:	4b07      	ldr	r3, [pc, #28]	@ (8002e68 <vTaskDelay+0x68>)
 8002e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000448 	.word	0x20000448
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08a      	sub	sp, #40	@ 0x28
 8002e70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002e7a:	463a      	mov	r2, r7
 8002e7c:	1d39      	adds	r1, r7, #4
 8002e7e:	f107 0308 	add.w	r3, r7, #8
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb3c 	bl	8000500 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002e88:	6839      	ldr	r1, [r7, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	9202      	str	r2, [sp, #8]
 8002e90:	9301      	str	r3, [sp, #4]
 8002e92:	2300      	movs	r3, #0
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	460a      	mov	r2, r1
 8002e9a:	491f      	ldr	r1, [pc, #124]	@ (8002f18 <vTaskStartScheduler+0xac>)
 8002e9c:	481f      	ldr	r0, [pc, #124]	@ (8002f1c <vTaskStartScheduler+0xb0>)
 8002e9e:	f7ff fe18 	bl	8002ad2 <xTaskCreateStatic>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8002f20 <vTaskStartScheduler+0xb4>)
 8002ea6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8002f20 <vTaskStartScheduler+0xb4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d002      	beq.n	8002eb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
 8002eb4:	e001      	b.n	8002eba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d116      	bne.n	8002eee <vTaskStartScheduler+0x82>
	__asm volatile
 8002ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	613b      	str	r3, [r7, #16]
}
 8002ed2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002ed4:	4b13      	ldr	r3, [pc, #76]	@ (8002f24 <vTaskStartScheduler+0xb8>)
 8002ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8002eda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002edc:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <vTaskStartScheduler+0xbc>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ee2:	4b12      	ldr	r3, [pc, #72]	@ (8002f2c <vTaskStartScheduler+0xc0>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002ee8:	f000 fbaa 	bl	8003640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002eec:	e00f      	b.n	8002f0e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d10b      	bne.n	8002f0e <vTaskStartScheduler+0xa2>
	__asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	60fb      	str	r3, [r7, #12]
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	e7fd      	b.n	8002f0a <vTaskStartScheduler+0x9e>
}
 8002f0e:	bf00      	nop
 8002f10:	3718      	adds	r7, #24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	08003e04 	.word	0x08003e04
 8002f1c:	080032b5 	.word	0x080032b5
 8002f20:	20000444 	.word	0x20000444
 8002f24:	20000440 	.word	0x20000440
 8002f28:	2000042c 	.word	0x2000042c
 8002f2c:	20000424 	.word	0x20000424

08002f30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002f34:	4b04      	ldr	r3, [pc, #16]	@ (8002f48 <vTaskSuspendAll+0x18>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	4a03      	ldr	r2, [pc, #12]	@ (8002f48 <vTaskSuspendAll+0x18>)
 8002f3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002f3e:	bf00      	nop
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	20000448 	.word	0x20000448

08002f4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002f5a:	4b42      	ldr	r3, [pc, #264]	@ (8003064 <xTaskResumeAll+0x118>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10b      	bne.n	8002f7a <xTaskResumeAll+0x2e>
	__asm volatile
 8002f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f66:	f383 8811 	msr	BASEPRI, r3
 8002f6a:	f3bf 8f6f 	isb	sy
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	603b      	str	r3, [r7, #0]
}
 8002f74:	bf00      	nop
 8002f76:	bf00      	nop
 8002f78:	e7fd      	b.n	8002f76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002f7a:	f000 fc05 	bl	8003788 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002f7e:	4b39      	ldr	r3, [pc, #228]	@ (8003064 <xTaskResumeAll+0x118>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	4a37      	ldr	r2, [pc, #220]	@ (8003064 <xTaskResumeAll+0x118>)
 8002f86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f88:	4b36      	ldr	r3, [pc, #216]	@ (8003064 <xTaskResumeAll+0x118>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d161      	bne.n	8003054 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f90:	4b35      	ldr	r3, [pc, #212]	@ (8003068 <xTaskResumeAll+0x11c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d05d      	beq.n	8003054 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f98:	e02e      	b.n	8002ff8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9a:	4b34      	ldr	r3, [pc, #208]	@ (800306c <xTaskResumeAll+0x120>)
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	3318      	adds	r3, #24
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fd69 	bl	8002a7e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff fd64 	bl	8002a7e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fba:	2201      	movs	r2, #1
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8003070 <xTaskResumeAll+0x124>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003070 <xTaskResumeAll+0x124>)
 8002fc6:	6013      	str	r3, [r2, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4a27      	ldr	r2, [pc, #156]	@ (8003074 <xTaskResumeAll+0x128>)
 8002fd6:	441a      	add	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	3304      	adds	r3, #4
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4610      	mov	r0, r2
 8002fe0:	f7ff fcf0 	bl	80029c4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe8:	4b23      	ldr	r3, [pc, #140]	@ (8003078 <xTaskResumeAll+0x12c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d302      	bcc.n	8002ff8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002ff2:	4b22      	ldr	r3, [pc, #136]	@ (800307c <xTaskResumeAll+0x130>)
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800306c <xTaskResumeAll+0x120>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1cc      	bne.n	8002f9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003006:	f000 fa0b 	bl	8003420 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800300a:	4b1d      	ldr	r3, [pc, #116]	@ (8003080 <xTaskResumeAll+0x134>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003016:	f000 f837 	bl	8003088 <xTaskIncrementTick>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003020:	4b16      	ldr	r3, [pc, #88]	@ (800307c <xTaskResumeAll+0x130>)
 8003022:	2201      	movs	r2, #1
 8003024:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3b01      	subs	r3, #1
 800302a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1f1      	bne.n	8003016 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003032:	4b13      	ldr	r3, [pc, #76]	@ (8003080 <xTaskResumeAll+0x134>)
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003038:	4b10      	ldr	r3, [pc, #64]	@ (800307c <xTaskResumeAll+0x130>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d009      	beq.n	8003054 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003040:	2301      	movs	r3, #1
 8003042:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003044:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <xTaskResumeAll+0x138>)
 8003046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f3bf 8f4f 	dsb	sy
 8003050:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003054:	f000 fbca 	bl	80037ec <vPortExitCritical>

	return xAlreadyYielded;
 8003058:	68bb      	ldr	r3, [r7, #8]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000448 	.word	0x20000448
 8003068:	20000420 	.word	0x20000420
 800306c:	200003e0 	.word	0x200003e0
 8003070:	20000428 	.word	0x20000428
 8003074:	20000324 	.word	0x20000324
 8003078:	20000320 	.word	0x20000320
 800307c:	20000434 	.word	0x20000434
 8003080:	20000430 	.word	0x20000430
 8003084:	e000ed04 	.word	0xe000ed04

08003088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003092:	4b4f      	ldr	r3, [pc, #316]	@ (80031d0 <xTaskIncrementTick+0x148>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 808f 	bne.w	80031ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800309c:	4b4d      	ldr	r3, [pc, #308]	@ (80031d4 <xTaskIncrementTick+0x14c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80030a4:	4a4b      	ldr	r2, [pc, #300]	@ (80031d4 <xTaskIncrementTick+0x14c>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d121      	bne.n	80030f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80030b0:	4b49      	ldr	r3, [pc, #292]	@ (80031d8 <xTaskIncrementTick+0x150>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	603b      	str	r3, [r7, #0]
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	e7fd      	b.n	80030ce <xTaskIncrementTick+0x46>
 80030d2:	4b41      	ldr	r3, [pc, #260]	@ (80031d8 <xTaskIncrementTick+0x150>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	4b40      	ldr	r3, [pc, #256]	@ (80031dc <xTaskIncrementTick+0x154>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a3e      	ldr	r2, [pc, #248]	@ (80031d8 <xTaskIncrementTick+0x150>)
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4a3e      	ldr	r2, [pc, #248]	@ (80031dc <xTaskIncrementTick+0x154>)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b3e      	ldr	r3, [pc, #248]	@ (80031e0 <xTaskIncrementTick+0x158>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	4a3c      	ldr	r2, [pc, #240]	@ (80031e0 <xTaskIncrementTick+0x158>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	f000 f996 	bl	8003420 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030f4:	4b3b      	ldr	r3, [pc, #236]	@ (80031e4 <xTaskIncrementTick+0x15c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d348      	bcc.n	8003190 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030fe:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <xTaskIncrementTick+0x150>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003108:	4b36      	ldr	r3, [pc, #216]	@ (80031e4 <xTaskIncrementTick+0x15c>)
 800310a:	f04f 32ff 	mov.w	r2, #4294967295
 800310e:	601a      	str	r2, [r3, #0]
					break;
 8003110:	e03e      	b.n	8003190 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003112:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <xTaskIncrementTick+0x150>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	d203      	bcs.n	8003132 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800312a:	4a2e      	ldr	r2, [pc, #184]	@ (80031e4 <xTaskIncrementTick+0x15c>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003130:	e02e      	b.n	8003190 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3304      	adds	r3, #4
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fca1 	bl	8002a7e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003140:	2b00      	cmp	r3, #0
 8003142:	d004      	beq.n	800314e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3318      	adds	r3, #24
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fc98 	bl	8002a7e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003152:	2201      	movs	r2, #1
 8003154:	409a      	lsls	r2, r3
 8003156:	4b24      	ldr	r3, [pc, #144]	@ (80031e8 <xTaskIncrementTick+0x160>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	4a22      	ldr	r2, [pc, #136]	@ (80031e8 <xTaskIncrementTick+0x160>)
 800315e:	6013      	str	r3, [r2, #0]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	009b      	lsls	r3, r3, #2
 800316c:	4a1f      	ldr	r2, [pc, #124]	@ (80031ec <xTaskIncrementTick+0x164>)
 800316e:	441a      	add	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3304      	adds	r3, #4
 8003174:	4619      	mov	r1, r3
 8003176:	4610      	mov	r0, r2
 8003178:	f7ff fc24 	bl	80029c4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003180:	4b1b      	ldr	r3, [pc, #108]	@ (80031f0 <xTaskIncrementTick+0x168>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	429a      	cmp	r2, r3
 8003188:	d3b9      	bcc.n	80030fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800318a:	2301      	movs	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800318e:	e7b6      	b.n	80030fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003190:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <xTaskIncrementTick+0x168>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003196:	4915      	ldr	r1, [pc, #84]	@ (80031ec <xTaskIncrementTick+0x164>)
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d901      	bls.n	80031ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80031ac:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <xTaskIncrementTick+0x16c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80031b4:	2301      	movs	r3, #1
 80031b6:	617b      	str	r3, [r7, #20]
 80031b8:	e004      	b.n	80031c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80031ba:	4b0f      	ldr	r3, [pc, #60]	@ (80031f8 <xTaskIncrementTick+0x170>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	4a0d      	ldr	r2, [pc, #52]	@ (80031f8 <xTaskIncrementTick+0x170>)
 80031c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80031c4:	697b      	ldr	r3, [r7, #20]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000448 	.word	0x20000448
 80031d4:	20000424 	.word	0x20000424
 80031d8:	200003d8 	.word	0x200003d8
 80031dc:	200003dc 	.word	0x200003dc
 80031e0:	20000438 	.word	0x20000438
 80031e4:	20000440 	.word	0x20000440
 80031e8:	20000428 	.word	0x20000428
 80031ec:	20000324 	.word	0x20000324
 80031f0:	20000320 	.word	0x20000320
 80031f4:	20000434 	.word	0x20000434
 80031f8:	20000430 	.word	0x20000430

080031fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003202:	4b27      	ldr	r3, [pc, #156]	@ (80032a0 <vTaskSwitchContext+0xa4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800320a:	4b26      	ldr	r3, [pc, #152]	@ (80032a4 <vTaskSwitchContext+0xa8>)
 800320c:	2201      	movs	r2, #1
 800320e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003210:	e040      	b.n	8003294 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003212:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <vTaskSwitchContext+0xa8>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003218:	4b23      	ldr	r3, [pc, #140]	@ (80032a8 <vTaskSwitchContext+0xac>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	fab3 f383 	clz	r3, r3
 8003224:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	f1c3 031f 	rsb	r3, r3, #31
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	491f      	ldr	r1, [pc, #124]	@ (80032ac <vTaskSwitchContext+0xb0>)
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10b      	bne.n	800325a <vTaskSwitchContext+0x5e>
	__asm volatile
 8003242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003246:	f383 8811 	msr	BASEPRI, r3
 800324a:	f3bf 8f6f 	isb	sy
 800324e:	f3bf 8f4f 	dsb	sy
 8003252:	607b      	str	r3, [r7, #4]
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	e7fd      	b.n	8003256 <vTaskSwitchContext+0x5a>
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	4613      	mov	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	4a11      	ldr	r2, [pc, #68]	@ (80032ac <vTaskSwitchContext+0xb0>)
 8003266:	4413      	add	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	3308      	adds	r3, #8
 800327c:	429a      	cmp	r2, r3
 800327e:	d104      	bne.n	800328a <vTaskSwitchContext+0x8e>
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4a07      	ldr	r2, [pc, #28]	@ (80032b0 <vTaskSwitchContext+0xb4>)
 8003292:	6013      	str	r3, [r2, #0]
}
 8003294:	bf00      	nop
 8003296:	371c      	adds	r7, #28
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	20000448 	.word	0x20000448
 80032a4:	20000434 	.word	0x20000434
 80032a8:	20000428 	.word	0x20000428
 80032ac:	20000324 	.word	0x20000324
 80032b0:	20000320 	.word	0x20000320

080032b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032bc:	f000 f852 	bl	8003364 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <prvIdleTask+0x28>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d9f9      	bls.n	80032bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80032c8:	4b05      	ldr	r3, [pc, #20]	@ (80032e0 <prvIdleTask+0x2c>)
 80032ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032d8:	e7f0      	b.n	80032bc <prvIdleTask+0x8>
 80032da:	bf00      	nop
 80032dc:	20000324 	.word	0x20000324
 80032e0:	e000ed04 	.word	0xe000ed04

080032e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	e00c      	b.n	800330a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4a12      	ldr	r2, [pc, #72]	@ (8003344 <prvInitialiseTaskLists+0x60>)
 80032fc:	4413      	add	r3, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f7ff fb33 	bl	800296a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3301      	adds	r3, #1
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d9ef      	bls.n	80032f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003310:	480d      	ldr	r0, [pc, #52]	@ (8003348 <prvInitialiseTaskLists+0x64>)
 8003312:	f7ff fb2a 	bl	800296a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003316:	480d      	ldr	r0, [pc, #52]	@ (800334c <prvInitialiseTaskLists+0x68>)
 8003318:	f7ff fb27 	bl	800296a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800331c:	480c      	ldr	r0, [pc, #48]	@ (8003350 <prvInitialiseTaskLists+0x6c>)
 800331e:	f7ff fb24 	bl	800296a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003322:	480c      	ldr	r0, [pc, #48]	@ (8003354 <prvInitialiseTaskLists+0x70>)
 8003324:	f7ff fb21 	bl	800296a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003328:	480b      	ldr	r0, [pc, #44]	@ (8003358 <prvInitialiseTaskLists+0x74>)
 800332a:	f7ff fb1e 	bl	800296a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800332e:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <prvInitialiseTaskLists+0x78>)
 8003330:	4a05      	ldr	r2, [pc, #20]	@ (8003348 <prvInitialiseTaskLists+0x64>)
 8003332:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003334:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <prvInitialiseTaskLists+0x7c>)
 8003336:	4a05      	ldr	r2, [pc, #20]	@ (800334c <prvInitialiseTaskLists+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	20000324 	.word	0x20000324
 8003348:	200003b0 	.word	0x200003b0
 800334c:	200003c4 	.word	0x200003c4
 8003350:	200003e0 	.word	0x200003e0
 8003354:	200003f4 	.word	0x200003f4
 8003358:	2000040c 	.word	0x2000040c
 800335c:	200003d8 	.word	0x200003d8
 8003360:	200003dc 	.word	0x200003dc

08003364 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800336a:	e019      	b.n	80033a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800336c:	f000 fa0c 	bl	8003788 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003370:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <prvCheckTasksWaitingTermination+0x50>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3304      	adds	r3, #4
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fb7e 	bl	8002a7e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <prvCheckTasksWaitingTermination+0x54>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3b01      	subs	r3, #1
 8003388:	4a0b      	ldr	r2, [pc, #44]	@ (80033b8 <prvCheckTasksWaitingTermination+0x54>)
 800338a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800338c:	4b0b      	ldr	r3, [pc, #44]	@ (80033bc <prvCheckTasksWaitingTermination+0x58>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	3b01      	subs	r3, #1
 8003392:	4a0a      	ldr	r2, [pc, #40]	@ (80033bc <prvCheckTasksWaitingTermination+0x58>)
 8003394:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003396:	f000 fa29 	bl	80037ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f810 	bl	80033c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033a0:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <prvCheckTasksWaitingTermination+0x58>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1e1      	bne.n	800336c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80033a8:	bf00      	nop
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	200003f4 	.word	0x200003f4
 80033b8:	20000420 	.word	0x20000420
 80033bc:	20000408 	.word	0x20000408

080033c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 fb84 	bl	8003ae4 <vPortFree>
				vPortFree( pxTCB );
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 fb81 	bl	8003ae4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033e2:	e019      	b.n	8003418 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d103      	bne.n	80033f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 fb78 	bl	8003ae4 <vPortFree>
	}
 80033f4:	e010      	b.n	8003418 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d00b      	beq.n	8003418 <prvDeleteTCB+0x58>
	__asm volatile
 8003400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003404:	f383 8811 	msr	BASEPRI, r3
 8003408:	f3bf 8f6f 	isb	sy
 800340c:	f3bf 8f4f 	dsb	sy
 8003410:	60fb      	str	r3, [r7, #12]
}
 8003412:	bf00      	nop
 8003414:	bf00      	nop
 8003416:	e7fd      	b.n	8003414 <prvDeleteTCB+0x54>
	}
 8003418:	bf00      	nop
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003426:	4b0c      	ldr	r3, [pc, #48]	@ (8003458 <prvResetNextTaskUnblockTime+0x38>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d104      	bne.n	800343a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003430:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <prvResetNextTaskUnblockTime+0x3c>)
 8003432:	f04f 32ff 	mov.w	r2, #4294967295
 8003436:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003438:	e008      	b.n	800344c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800343a:	4b07      	ldr	r3, [pc, #28]	@ (8003458 <prvResetNextTaskUnblockTime+0x38>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	4a04      	ldr	r2, [pc, #16]	@ (800345c <prvResetNextTaskUnblockTime+0x3c>)
 800344a:	6013      	str	r3, [r2, #0]
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	200003d8 	.word	0x200003d8
 800345c:	20000440 	.word	0x20000440

08003460 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800346a:	4b29      	ldr	r3, [pc, #164]	@ (8003510 <prvAddCurrentTaskToDelayedList+0xb0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003470:	4b28      	ldr	r3, [pc, #160]	@ (8003514 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3304      	adds	r3, #4
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fb01 	bl	8002a7e <uxListRemove>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10b      	bne.n	800349a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003482:	4b24      	ldr	r3, [pc, #144]	@ (8003514 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	2201      	movs	r2, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	43da      	mvns	r2, r3
 8003490:	4b21      	ldr	r3, [pc, #132]	@ (8003518 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4013      	ands	r3, r2
 8003496:	4a20      	ldr	r2, [pc, #128]	@ (8003518 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003498:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d10a      	bne.n	80034b8 <prvAddCurrentTaskToDelayedList+0x58>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d007      	beq.n	80034b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	3304      	adds	r3, #4
 80034ae:	4619      	mov	r1, r3
 80034b0:	481a      	ldr	r0, [pc, #104]	@ (800351c <prvAddCurrentTaskToDelayedList+0xbc>)
 80034b2:	f7ff fa87 	bl	80029c4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034b6:	e026      	b.n	8003506 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4413      	add	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034c0:	4b14      	ldr	r3, [pc, #80]	@ (8003514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d209      	bcs.n	80034e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034d0:	4b13      	ldr	r3, [pc, #76]	@ (8003520 <prvAddCurrentTaskToDelayedList+0xc0>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	3304      	adds	r3, #4
 80034da:	4619      	mov	r1, r3
 80034dc:	4610      	mov	r0, r2
 80034de:	f7ff fa95 	bl	8002a0c <vListInsert>
}
 80034e2:	e010      	b.n	8003506 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003524 <prvAddCurrentTaskToDelayedList+0xc4>)
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003514 <prvAddCurrentTaskToDelayedList+0xb4>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3304      	adds	r3, #4
 80034ee:	4619      	mov	r1, r3
 80034f0:	4610      	mov	r0, r2
 80034f2:	f7ff fa8b 	bl	8002a0c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80034f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <prvAddCurrentTaskToDelayedList+0xc8>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d202      	bcs.n	8003506 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003500:	4a09      	ldr	r2, [pc, #36]	@ (8003528 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6013      	str	r3, [r2, #0]
}
 8003506:	bf00      	nop
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000424 	.word	0x20000424
 8003514:	20000320 	.word	0x20000320
 8003518:	20000428 	.word	0x20000428
 800351c:	2000040c 	.word	0x2000040c
 8003520:	200003dc 	.word	0x200003dc
 8003524:	200003d8 	.word	0x200003d8
 8003528:	20000440 	.word	0x20000440

0800352c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	3b04      	subs	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	3b04      	subs	r3, #4
 800354a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	f023 0201 	bic.w	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	3b04      	subs	r3, #4
 800355a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800355c:	4a0c      	ldr	r2, [pc, #48]	@ (8003590 <pxPortInitialiseStack+0x64>)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	3b14      	subs	r3, #20
 8003566:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	3b04      	subs	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f06f 0202 	mvn.w	r2, #2
 800357a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	3b20      	subs	r3, #32
 8003580:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003582:	68fb      	ldr	r3, [r7, #12]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	08003595 	.word	0x08003595

08003594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800359e:	4b13      	ldr	r3, [pc, #76]	@ (80035ec <prvTaskExitError+0x58>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d00b      	beq.n	80035c0 <prvTaskExitError+0x2c>
	__asm volatile
 80035a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	60fb      	str	r3, [r7, #12]
}
 80035ba:	bf00      	nop
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <prvTaskExitError+0x28>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	60bb      	str	r3, [r7, #8]
}
 80035d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80035d4:	bf00      	nop
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0fc      	beq.n	80035d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	2000000c 	.word	0x2000000c

080035f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80035f0:	4b07      	ldr	r3, [pc, #28]	@ (8003610 <pxCurrentTCBConst2>)
 80035f2:	6819      	ldr	r1, [r3, #0]
 80035f4:	6808      	ldr	r0, [r1, #0]
 80035f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035fa:	f380 8809 	msr	PSP, r0
 80035fe:	f3bf 8f6f 	isb	sy
 8003602:	f04f 0000 	mov.w	r0, #0
 8003606:	f380 8811 	msr	BASEPRI, r0
 800360a:	4770      	bx	lr
 800360c:	f3af 8000 	nop.w

08003610 <pxCurrentTCBConst2>:
 8003610:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop

08003618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003618:	4808      	ldr	r0, [pc, #32]	@ (800363c <prvPortStartFirstTask+0x24>)
 800361a:	6800      	ldr	r0, [r0, #0]
 800361c:	6800      	ldr	r0, [r0, #0]
 800361e:	f380 8808 	msr	MSP, r0
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f380 8814 	msr	CONTROL, r0
 800362a:	b662      	cpsie	i
 800362c:	b661      	cpsie	f
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	df00      	svc	0
 8003638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800363a:	bf00      	nop
 800363c:	e000ed08 	.word	0xe000ed08

08003640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003646:	4b47      	ldr	r3, [pc, #284]	@ (8003764 <xPortStartScheduler+0x124>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a47      	ldr	r2, [pc, #284]	@ (8003768 <xPortStartScheduler+0x128>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10b      	bne.n	8003668 <xPortStartScheduler+0x28>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	613b      	str	r3, [r7, #16]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003668:	4b3e      	ldr	r3, [pc, #248]	@ (8003764 <xPortStartScheduler+0x124>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a3f      	ldr	r2, [pc, #252]	@ (800376c <xPortStartScheduler+0x12c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d10b      	bne.n	800368a <xPortStartScheduler+0x4a>
	__asm volatile
 8003672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003676:	f383 8811 	msr	BASEPRI, r3
 800367a:	f3bf 8f6f 	isb	sy
 800367e:	f3bf 8f4f 	dsb	sy
 8003682:	60fb      	str	r3, [r7, #12]
}
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	e7fd      	b.n	8003686 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800368a:	4b39      	ldr	r3, [pc, #228]	@ (8003770 <xPortStartScheduler+0x130>)
 800368c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	22ff      	movs	r2, #255	@ 0xff
 800369a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80036ac:	b2da      	uxtb	r2, r3
 80036ae:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <xPortStartScheduler+0x134>)
 80036b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80036b2:	4b31      	ldr	r3, [pc, #196]	@ (8003778 <xPortStartScheduler+0x138>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036b8:	e009      	b.n	80036ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80036ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003778 <xPortStartScheduler+0x138>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	3b01      	subs	r3, #1
 80036c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003778 <xPortStartScheduler+0x138>)
 80036c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d6:	2b80      	cmp	r3, #128	@ 0x80
 80036d8:	d0ef      	beq.n	80036ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80036da:	4b27      	ldr	r3, [pc, #156]	@ (8003778 <xPortStartScheduler+0x138>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1c3 0307 	rsb	r3, r3, #7
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d00b      	beq.n	80036fe <xPortStartScheduler+0xbe>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ea:	f383 8811 	msr	BASEPRI, r3
 80036ee:	f3bf 8f6f 	isb	sy
 80036f2:	f3bf 8f4f 	dsb	sy
 80036f6:	60bb      	str	r3, [r7, #8]
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	e7fd      	b.n	80036fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80036fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003778 <xPortStartScheduler+0x138>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	4a1c      	ldr	r2, [pc, #112]	@ (8003778 <xPortStartScheduler+0x138>)
 8003706:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003708:	4b1b      	ldr	r3, [pc, #108]	@ (8003778 <xPortStartScheduler+0x138>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003710:	4a19      	ldr	r2, [pc, #100]	@ (8003778 <xPortStartScheduler+0x138>)
 8003712:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	b2da      	uxtb	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800371c:	4b17      	ldr	r3, [pc, #92]	@ (800377c <xPortStartScheduler+0x13c>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a16      	ldr	r2, [pc, #88]	@ (800377c <xPortStartScheduler+0x13c>)
 8003722:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003726:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003728:	4b14      	ldr	r3, [pc, #80]	@ (800377c <xPortStartScheduler+0x13c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a13      	ldr	r2, [pc, #76]	@ (800377c <xPortStartScheduler+0x13c>)
 800372e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003732:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003734:	f000 f8da 	bl	80038ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003738:	4b11      	ldr	r3, [pc, #68]	@ (8003780 <xPortStartScheduler+0x140>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800373e:	f000 f8f9 	bl	8003934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003742:	4b10      	ldr	r3, [pc, #64]	@ (8003784 <xPortStartScheduler+0x144>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a0f      	ldr	r2, [pc, #60]	@ (8003784 <xPortStartScheduler+0x144>)
 8003748:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800374c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800374e:	f7ff ff63 	bl	8003618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003752:	f7ff fd53 	bl	80031fc <vTaskSwitchContext>
	prvTaskExitError();
 8003756:	f7ff ff1d 	bl	8003594 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	e000ed00 	.word	0xe000ed00
 8003768:	410fc271 	.word	0x410fc271
 800376c:	410fc270 	.word	0x410fc270
 8003770:	e000e400 	.word	0xe000e400
 8003774:	2000044c 	.word	0x2000044c
 8003778:	20000450 	.word	0x20000450
 800377c:	e000ed20 	.word	0xe000ed20
 8003780:	2000000c 	.word	0x2000000c
 8003784:	e000ef34 	.word	0xe000ef34

08003788 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	607b      	str	r3, [r7, #4]
}
 80037a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <vPortEnterCritical+0x5c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	4a0e      	ldr	r2, [pc, #56]	@ (80037e4 <vPortEnterCritical+0x5c>)
 80037aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037ac:	4b0d      	ldr	r3, [pc, #52]	@ (80037e4 <vPortEnterCritical+0x5c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d110      	bne.n	80037d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80037b4:	4b0c      	ldr	r3, [pc, #48]	@ (80037e8 <vPortEnterCritical+0x60>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	603b      	str	r3, [r7, #0]
}
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	e7fd      	b.n	80037d2 <vPortEnterCritical+0x4a>
	}
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	2000000c 	.word	0x2000000c
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80037f2:	4b12      	ldr	r3, [pc, #72]	@ (800383c <vPortExitCritical+0x50>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10b      	bne.n	8003812 <vPortExitCritical+0x26>
	__asm volatile
 80037fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	607b      	str	r3, [r7, #4]
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	e7fd      	b.n	800380e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003812:	4b0a      	ldr	r3, [pc, #40]	@ (800383c <vPortExitCritical+0x50>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3b01      	subs	r3, #1
 8003818:	4a08      	ldr	r2, [pc, #32]	@ (800383c <vPortExitCritical+0x50>)
 800381a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800381c:	4b07      	ldr	r3, [pc, #28]	@ (800383c <vPortExitCritical+0x50>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <vPortExitCritical+0x44>
 8003824:	2300      	movs	r3, #0
 8003826:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800382e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	2000000c 	.word	0x2000000c

08003840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003840:	f3ef 8009 	mrs	r0, PSP
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <pxCurrentTCBConst>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	f01e 0f10 	tst.w	lr, #16
 8003850:	bf08      	it	eq
 8003852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385a:	6010      	str	r0, [r2, #0]
 800385c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003864:	f380 8811 	msr	BASEPRI, r0
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	f3bf 8f6f 	isb	sy
 8003870:	f7ff fcc4 	bl	80031fc <vTaskSwitchContext>
 8003874:	f04f 0000 	mov.w	r0, #0
 8003878:	f380 8811 	msr	BASEPRI, r0
 800387c:	bc09      	pop	{r0, r3}
 800387e:	6819      	ldr	r1, [r3, #0]
 8003880:	6808      	ldr	r0, [r1, #0]
 8003882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003886:	f01e 0f10 	tst.w	lr, #16
 800388a:	bf08      	it	eq
 800388c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003890:	f380 8809 	msr	PSP, r0
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	f3af 8000 	nop.w

080038a0 <pxCurrentTCBConst>:
 80038a0:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038a4:	bf00      	nop
 80038a6:	bf00      	nop

080038a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
	__asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	607b      	str	r3, [r7, #4]
}
 80038c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038c2:	f7ff fbe1 	bl	8003088 <xTaskIncrementTick>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <SysTick_Handler+0x40>)
 80038ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	2300      	movs	r3, #0
 80038d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	f383 8811 	msr	BASEPRI, r3
}
 80038de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	e000ed04 	.word	0xe000ed04

080038ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80038f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <vPortSetupTimerInterrupt+0x34>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80038f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <vPortSetupTimerInterrupt+0x38>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80038fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003928 <vPortSetupTimerInterrupt+0x3c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a0a      	ldr	r2, [pc, #40]	@ (800392c <vPortSetupTimerInterrupt+0x40>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	099b      	lsrs	r3, r3, #6
 8003908:	4a09      	ldr	r2, [pc, #36]	@ (8003930 <vPortSetupTimerInterrupt+0x44>)
 800390a:	3b01      	subs	r3, #1
 800390c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800390e:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <vPortSetupTimerInterrupt+0x34>)
 8003910:	2207      	movs	r2, #7
 8003912:	601a      	str	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	e000e010 	.word	0xe000e010
 8003924:	e000e018 	.word	0xe000e018
 8003928:	20000000 	.word	0x20000000
 800392c:	10624dd3 	.word	0x10624dd3
 8003930:	e000e014 	.word	0xe000e014

08003934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003934:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003944 <vPortEnableVFP+0x10>
 8003938:	6801      	ldr	r1, [r0, #0]
 800393a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800393e:	6001      	str	r1, [r0, #0]
 8003940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003942:	bf00      	nop
 8003944:	e000ed88 	.word	0xe000ed88

08003948 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	@ 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003954:	f7ff faec 	bl	8002f30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003958:	4b5c      	ldr	r3, [pc, #368]	@ (8003acc <pvPortMalloc+0x184>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003960:	f000 f924 	bl	8003bac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003964:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad0 <pvPortMalloc+0x188>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4013      	ands	r3, r2
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 8095 	bne.w	8003a9c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01e      	beq.n	80039b6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003978:	2208      	movs	r2, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4413      	add	r3, r2
 800397e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	2b00      	cmp	r3, #0
 8003988:	d015      	beq.n	80039b6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f023 0307 	bic.w	r3, r3, #7
 8003990:	3308      	adds	r3, #8
 8003992:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00b      	beq.n	80039b6 <pvPortMalloc+0x6e>
	__asm volatile
 800399e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a2:	f383 8811 	msr	BASEPRI, r3
 80039a6:	f3bf 8f6f 	isb	sy
 80039aa:	f3bf 8f4f 	dsb	sy
 80039ae:	617b      	str	r3, [r7, #20]
}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	e7fd      	b.n	80039b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d06f      	beq.n	8003a9c <pvPortMalloc+0x154>
 80039bc:	4b45      	ldr	r3, [pc, #276]	@ (8003ad4 <pvPortMalloc+0x18c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d86a      	bhi.n	8003a9c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039c6:	4b44      	ldr	r3, [pc, #272]	@ (8003ad8 <pvPortMalloc+0x190>)
 80039c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039ca:	4b43      	ldr	r3, [pc, #268]	@ (8003ad8 <pvPortMalloc+0x190>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039d0:	e004      	b.n	80039dc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d903      	bls.n	80039ee <pvPortMalloc+0xa6>
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f1      	bne.n	80039d2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039ee:	4b37      	ldr	r3, [pc, #220]	@ (8003acc <pvPortMalloc+0x184>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d051      	beq.n	8003a9c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2208      	movs	r2, #8
 80039fe:	4413      	add	r3, r2
 8003a00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad2      	subs	r2, r2, r3
 8003a12:	2308      	movs	r3, #8
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d920      	bls.n	8003a5c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <pvPortMalloc+0xfc>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	613b      	str	r3, [r7, #16]
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	1ad2      	subs	r2, r2, r3
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a56:	69b8      	ldr	r0, [r7, #24]
 8003a58:	f000 f90a 	bl	8003c70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad4 <pvPortMalloc+0x18c>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad4 <pvPortMalloc+0x18c>)
 8003a68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad4 <pvPortMalloc+0x18c>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003adc <pvPortMalloc+0x194>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d203      	bcs.n	8003a7e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a76:	4b17      	ldr	r3, [pc, #92]	@ (8003ad4 <pvPortMalloc+0x18c>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <pvPortMalloc+0x194>)
 8003a7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	4b13      	ldr	r3, [pc, #76]	@ (8003ad0 <pvPortMalloc+0x188>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	2200      	movs	r2, #0
 8003a90:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003a92:	4b13      	ldr	r3, [pc, #76]	@ (8003ae0 <pvPortMalloc+0x198>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	3301      	adds	r3, #1
 8003a98:	4a11      	ldr	r2, [pc, #68]	@ (8003ae0 <pvPortMalloc+0x198>)
 8003a9a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a9c:	f7ff fa56 	bl	8002f4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00b      	beq.n	8003ac2 <pvPortMalloc+0x17a>
	__asm volatile
 8003aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aae:	f383 8811 	msr	BASEPRI, r3
 8003ab2:	f3bf 8f6f 	isb	sy
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	60fb      	str	r3, [r7, #12]
}
 8003abc:	bf00      	nop
 8003abe:	bf00      	nop
 8003ac0:	e7fd      	b.n	8003abe <pvPortMalloc+0x176>
	return pvReturn;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3728      	adds	r7, #40	@ 0x28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	2000405c 	.word	0x2000405c
 8003ad0:	20004070 	.word	0x20004070
 8003ad4:	20004060 	.word	0x20004060
 8003ad8:	20004054 	.word	0x20004054
 8003adc:	20004064 	.word	0x20004064
 8003ae0:	20004068 	.word	0x20004068

08003ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d04f      	beq.n	8003b96 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003af6:	2308      	movs	r3, #8
 8003af8:	425b      	negs	r3, r3
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4413      	add	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	4b25      	ldr	r3, [pc, #148]	@ (8003ba0 <vPortFree+0xbc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10b      	bne.n	8003b2a <vPortFree+0x46>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	60fb      	str	r3, [r7, #12]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00b      	beq.n	8003b4a <vPortFree+0x66>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	60bb      	str	r3, [r7, #8]
}
 8003b44:	bf00      	nop
 8003b46:	bf00      	nop
 8003b48:	e7fd      	b.n	8003b46 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	4b14      	ldr	r3, [pc, #80]	@ (8003ba0 <vPortFree+0xbc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01e      	beq.n	8003b96 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11a      	bne.n	8003b96 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <vPortFree+0xbc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	43db      	mvns	r3, r3
 8003b6a:	401a      	ands	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b70:	f7ff f9de 	bl	8002f30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba4 <vPortFree+0xc0>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4a09      	ldr	r2, [pc, #36]	@ (8003ba4 <vPortFree+0xc0>)
 8003b80:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b82:	6938      	ldr	r0, [r7, #16]
 8003b84:	f000 f874 	bl	8003c70 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003b88:	4b07      	ldr	r3, [pc, #28]	@ (8003ba8 <vPortFree+0xc4>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	4a06      	ldr	r2, [pc, #24]	@ (8003ba8 <vPortFree+0xc4>)
 8003b90:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003b92:	f7ff f9db 	bl	8002f4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b96:	bf00      	nop
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20004070 	.word	0x20004070
 8003ba4:	20004060 	.word	0x20004060
 8003ba8:	2000406c 	.word	0x2000406c

08003bac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bb2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003bb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003bb8:	4b27      	ldr	r3, [pc, #156]	@ (8003c58 <prvHeapInit+0xac>)
 8003bba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00c      	beq.n	8003be0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3307      	adds	r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0307 	bic.w	r3, r3, #7
 8003bd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	4a1f      	ldr	r2, [pc, #124]	@ (8003c58 <prvHeapInit+0xac>)
 8003bdc:	4413      	add	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003be4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c5c <prvHeapInit+0xb0>)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bea:	4b1c      	ldr	r3, [pc, #112]	@ (8003c5c <prvHeapInit+0xb0>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68ba      	ldr	r2, [r7, #8]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	4a15      	ldr	r2, [pc, #84]	@ (8003c60 <prvHeapInit+0xb4>)
 8003c0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003c0e:	4b14      	ldr	r3, [pc, #80]	@ (8003c60 <prvHeapInit+0xb4>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2200      	movs	r2, #0
 8003c14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003c16:	4b12      	ldr	r3, [pc, #72]	@ (8003c60 <prvHeapInit+0xb4>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	1ad2      	subs	r2, r2, r3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <prvHeapInit+0xb4>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <prvHeapInit+0xb8>)
 8003c3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a09      	ldr	r2, [pc, #36]	@ (8003c68 <prvHeapInit+0xbc>)
 8003c42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c44:	4b09      	ldr	r3, [pc, #36]	@ (8003c6c <prvHeapInit+0xc0>)
 8003c46:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003c4a:	601a      	str	r2, [r3, #0]
}
 8003c4c:	bf00      	nop
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	20000454 	.word	0x20000454
 8003c5c:	20004054 	.word	0x20004054
 8003c60:	2000405c 	.word	0x2000405c
 8003c64:	20004064 	.word	0x20004064
 8003c68:	20004060 	.word	0x20004060
 8003c6c:	20004070 	.word	0x20004070

08003c70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c78:	4b28      	ldr	r3, [pc, #160]	@ (8003d1c <prvInsertBlockIntoFreeList+0xac>)
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e002      	b.n	8003c84 <prvInsertBlockIntoFreeList+0x14>
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d8f7      	bhi.n	8003c7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4413      	add	r3, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d108      	bne.n	8003cb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	441a      	add	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d118      	bne.n	8003cf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	4b15      	ldr	r3, [pc, #84]	@ (8003d20 <prvInsertBlockIntoFreeList+0xb0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d00d      	beq.n	8003cee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	441a      	add	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	e008      	b.n	8003d00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cee:	4b0c      	ldr	r3, [pc, #48]	@ (8003d20 <prvInsertBlockIntoFreeList+0xb0>)
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e003      	b.n	8003d00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d002      	beq.n	8003d0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20004054 	.word	0x20004054
 8003d20:	2000405c 	.word	0x2000405c

08003d24 <memset>:
 8003d24:	4402      	add	r2, r0
 8003d26:	4603      	mov	r3, r0
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d100      	bne.n	8003d2e <memset+0xa>
 8003d2c:	4770      	bx	lr
 8003d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d32:	e7f9      	b.n	8003d28 <memset+0x4>

08003d34 <__libc_init_array>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	4d0d      	ldr	r5, [pc, #52]	@ (8003d6c <__libc_init_array+0x38>)
 8003d38:	4c0d      	ldr	r4, [pc, #52]	@ (8003d70 <__libc_init_array+0x3c>)
 8003d3a:	1b64      	subs	r4, r4, r5
 8003d3c:	10a4      	asrs	r4, r4, #2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	42a6      	cmp	r6, r4
 8003d42:	d109      	bne.n	8003d58 <__libc_init_array+0x24>
 8003d44:	4d0b      	ldr	r5, [pc, #44]	@ (8003d74 <__libc_init_array+0x40>)
 8003d46:	4c0c      	ldr	r4, [pc, #48]	@ (8003d78 <__libc_init_array+0x44>)
 8003d48:	f000 f818 	bl	8003d7c <_init>
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	2600      	movs	r6, #0
 8003d52:	42a6      	cmp	r6, r4
 8003d54:	d105      	bne.n	8003d62 <__libc_init_array+0x2e>
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5c:	4798      	blx	r3
 8003d5e:	3601      	adds	r6, #1
 8003d60:	e7ee      	b.n	8003d40 <__libc_init_array+0xc>
 8003d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d66:	4798      	blx	r3
 8003d68:	3601      	adds	r6, #1
 8003d6a:	e7f2      	b.n	8003d52 <__libc_init_array+0x1e>
 8003d6c:	08003e2c 	.word	0x08003e2c
 8003d70:	08003e2c 	.word	0x08003e2c
 8003d74:	08003e2c 	.word	0x08003e2c
 8003d78:	08003e30 	.word	0x08003e30

08003d7c <_init>:
 8003d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7e:	bf00      	nop
 8003d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d82:	bc08      	pop	{r3}
 8003d84:	469e      	mov	lr, r3
 8003d86:	4770      	bx	lr

08003d88 <_fini>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr
