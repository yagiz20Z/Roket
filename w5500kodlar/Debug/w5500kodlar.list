
w5500kodlar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e80  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005050  08005050  00006050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b0  080051b0  000070a0  2**0
                  CONTENTS
  4 .ARM          00000008  080051b0  080051b0  000061b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051b8  080051b8  000070a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051bc  080051bc  000061bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  080051c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  200000a0  08005260  000070a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08005260  00007330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8b7  00000000  00000000  000070d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242d  00000000  00000000  00013987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00015db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008da  00000000  00000000  00016940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002239b  00000000  00000000  0001721a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec0b  00000000  00000000  000395b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce75e  00000000  00000000  000481c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011691e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003330  00000000  00000000  00116964  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00119c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a0 	.word	0x200000a0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005038 	.word	0x08005038

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a4 	.word	0x200000a4
 800020c:	08005038 	.word	0x08005038

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b08a      	sub	sp, #40	@ 0x28
 80005b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <MX_GPIO_Init+0xec>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a33      	ldr	r2, [pc, #204]	@ (800069c <MX_GPIO_Init+0xec>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b31      	ldr	r3, [pc, #196]	@ (800069c <MX_GPIO_Init+0xec>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <MX_GPIO_Init+0xec>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a2c      	ldr	r2, [pc, #176]	@ (800069c <MX_GPIO_Init+0xec>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <MX_GPIO_Init+0xec>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fa:	60fb      	str	r3, [r7, #12]
 80005fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	4b26      	ldr	r3, [pc, #152]	@ (800069c <MX_GPIO_Init+0xec>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a25      	ldr	r2, [pc, #148]	@ (800069c <MX_GPIO_Init+0xec>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <MX_GPIO_Init+0xec>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_GPIO_Init+0xec>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a1e      	ldr	r2, [pc, #120]	@ (800069c <MX_GPIO_Init+0xec>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_GPIO_Init+0xec>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|LED_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2122      	movs	r1, #34	@ 0x22
 800063a:	4819      	ldr	r0, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 800063c:	f002 f87c 	bl	8002738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000640:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000646:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4813      	ldr	r0, [pc, #76]	@ (80006a4 <MX_GPIO_Init+0xf4>)
 8000658:	f001 feda 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800065c:	2302      	movs	r3, #2
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000664:	2301      	movs	r3, #1
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	480b      	ldr	r0, [pc, #44]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000674:	f001 fecc 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000678:	2320      	movs	r3, #32
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0xf0>)
 8000690:	f001 febe 	bl	8002410 <HAL_GPIO_Init>

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	@ 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40020800 	.word	0x40020800

080006a8 <cs_sel>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void cs_sel() {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET); //CS LOW
 80006ac:	2200      	movs	r2, #0
 80006ae:	2102      	movs	r1, #2
 80006b0:	4802      	ldr	r0, [pc, #8]	@ (80006bc <cs_sel+0x14>)
 80006b2:	f002 f841 	bl	8002738 <HAL_GPIO_WritePin>
}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40020000 	.word	0x40020000

080006c0 <cs_desel>:

void cs_desel() {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET); //CS HIGH
 80006c4:	2201      	movs	r2, #1
 80006c6:	2102      	movs	r1, #2
 80006c8:	4802      	ldr	r0, [pc, #8]	@ (80006d4 <cs_desel+0x14>)
 80006ca:	f002 f835 	bl	8002738 <HAL_GPIO_WritePin>
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020000 	.word	0x40020000

080006d8 <spi_rb>:

uint8_t spi_rb(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
	uint8_t rbuf;
	HAL_SPI_Receive(&hspi2, &rbuf, 1, 0xFFFFFFFF);
 80006de:	1df9      	adds	r1, r7, #7
 80006e0:	f04f 33ff 	mov.w	r3, #4294967295
 80006e4:	2201      	movs	r2, #1
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <spi_rb+0x20>)
 80006e8:	f002 fff5 	bl	80036d6 <HAL_SPI_Receive>
	return rbuf;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000011c 	.word	0x2000011c

080006fc <spi_wb>:

void spi_wb(uint8_t b) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspi2, &b, 1, 0xFFFFFFFF);
 8000706:	1df9      	adds	r1, r7, #7
 8000708:	f04f 33ff 	mov.w	r3, #4294967295
 800070c:	2201      	movs	r2, #1
 800070e:	4803      	ldr	r0, [pc, #12]	@ (800071c <spi_wb+0x20>)
 8000710:	f002 fe9d 	bl	800344e <HAL_SPI_Transmit>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000011c 	.word	0x2000011c

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b5b0      	push	{r4, r5, r7, lr}
 8000722:	b08c      	sub	sp, #48	@ 0x30
 8000724:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
	uint8_t bufSize[] = {2, 2, 2, 2};
 8000726:	f04f 3302 	mov.w	r3, #33686018	@ 0x2020202
 800072a:	61bb      	str	r3, [r7, #24]
		uint16_t deneme=0;
 800072c:	2300      	movs	r3, #0
 800072e:	83fb      	strh	r3, [r7, #30]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000730:	f001 fcf2 	bl	8002118 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000734:	f000 f950 	bl	80009d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000738:	f7ff ff3a 	bl	80005b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800073c:	f000 fb0c 	bl	8000d58 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000740:	f000 f9bc 	bl	8000abc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  PRINT_HEADER();
 8000744:	2364      	movs	r3, #100	@ 0x64
 8000746:	222f      	movs	r2, #47	@ 0x2f
 8000748:	4989      	ldr	r1, [pc, #548]	@ (8000970 <main+0x250>)
 800074a:	488a      	ldr	r0, [pc, #552]	@ (8000974 <main+0x254>)
 800074c:	f003 fc18 	bl	8003f80 <HAL_UART_Transmit>
 8000750:	2364      	movs	r3, #100	@ 0x64
 8000752:	222f      	movs	r2, #47	@ 0x2f
 8000754:	4988      	ldr	r1, [pc, #544]	@ (8000978 <main+0x258>)
 8000756:	4887      	ldr	r0, [pc, #540]	@ (8000974 <main+0x254>)
 8000758:	f003 fc12 	bl	8003f80 <HAL_UART_Transmit>
 800075c:	2364      	movs	r3, #100	@ 0x64
 800075e:	222f      	movs	r2, #47	@ 0x2f
 8000760:	4983      	ldr	r1, [pc, #524]	@ (8000970 <main+0x250>)
 8000762:	4884      	ldr	r0, [pc, #528]	@ (8000974 <main+0x254>)
 8000764:	f003 fc0c 	bl	8003f80 <HAL_UART_Transmit>

      reg_wizchip_cs_cbfunc(cs_sel, cs_desel);
 8000768:	4984      	ldr	r1, [pc, #528]	@ (800097c <main+0x25c>)
 800076a:	4885      	ldr	r0, [pc, #532]	@ (8000980 <main+0x260>)
 800076c:	f001 fb00 	bl	8001d70 <reg_wizchip_cs_cbfunc>
      reg_wizchip_spi_cbfunc(spi_rb, spi_wb);
 8000770:	4984      	ldr	r1, [pc, #528]	@ (8000984 <main+0x264>)
 8000772:	4885      	ldr	r0, [pc, #532]	@ (8000988 <main+0x268>)
 8000774:	f001 fb22 	bl	8001dbc <reg_wizchip_spi_cbfunc>

      wizchip_init(bufSize, bufSize);
 8000778:	f107 0218 	add.w	r2, r7, #24
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4611      	mov	r1, r2
 8000782:	4618      	mov	r0, r3
 8000784:	f001 fb92 	bl	8001eac <wizchip_init>
      wiz_NetInfo netInfo = { .mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	f8c3 2013 	str.w	r2, [r3, #19]
 800079a:	4a7c      	ldr	r2, [pc, #496]	@ (800098c <main+0x26c>)
 800079c:	463b      	mov	r3, r7
 800079e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a2:	6018      	str	r0, [r3, #0]
 80007a4:	3304      	adds	r3, #4
 80007a6:	8019      	strh	r1, [r3, #0]
 80007a8:	4a79      	ldr	r2, [pc, #484]	@ (8000990 <main+0x270>)
 80007aa:	1dbb      	adds	r3, r7, #6
 80007ac:	6810      	ldr	r0, [r2, #0]
 80007ae:	6018      	str	r0, [r3, #0]
 80007b0:	4a78      	ldr	r2, [pc, #480]	@ (8000994 <main+0x274>)
 80007b2:	f107 030a 	add.w	r3, r7, #10
 80007b6:	6810      	ldr	r0, [r2, #0]
 80007b8:	6018      	str	r0, [r3, #0]
 80007ba:	4a77      	ldr	r2, [pc, #476]	@ (8000998 <main+0x278>)
 80007bc:	f107 030e 	add.w	r3, r7, #14
 80007c0:	6810      	ldr	r0, [r2, #0]
 80007c2:	6018      	str	r0, [r3, #0]
                              .ip 	= {192, 168, 1, 192},					// IP address
                              .sn 	= {255, 255, 255, 0},					// Subnet mask
                              .gw 	= {192, 168, 2, 1}};					// Gateway address
      wizchip_setnetinfo(&netInfo);
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 fbfc 	bl	8001fc4 <wizchip_setnetinfo>
      wizchip_getnetinfo(&netInfo);
 80007cc:	463b      	mov	r3, r7
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fc38 	bl	8002044 <wizchip_getnetinfo>
      PRINT_NETINFO(netInfo);
 80007d4:	2364      	movs	r3, #100	@ 0x64
 80007d6:	2218      	movs	r2, #24
 80007d8:	4970      	ldr	r1, [pc, #448]	@ (800099c <main+0x27c>)
 80007da:	4866      	ldr	r0, [pc, #408]	@ (8000974 <main+0x254>)
 80007dc:	f003 fbd0 	bl	8003f80 <HAL_UART_Transmit>
 80007e0:	783b      	ldrb	r3, [r7, #0]
 80007e2:	461c      	mov	r4, r3
 80007e4:	787b      	ldrb	r3, [r7, #1]
 80007e6:	461d      	mov	r5, r3
 80007e8:	78bb      	ldrb	r3, [r7, #2]
 80007ea:	78fa      	ldrb	r2, [r7, #3]
 80007ec:	7939      	ldrb	r1, [r7, #4]
 80007ee:	7978      	ldrb	r0, [r7, #5]
 80007f0:	9003      	str	r0, [sp, #12]
 80007f2:	9102      	str	r1, [sp, #8]
 80007f4:	9201      	str	r2, [sp, #4]
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	462b      	mov	r3, r5
 80007fa:	4622      	mov	r2, r4
 80007fc:	4968      	ldr	r1, [pc, #416]	@ (80009a0 <main+0x280>)
 80007fe:	4869      	ldr	r0, [pc, #420]	@ (80009a4 <main+0x284>)
 8000800:	f003 ff7a 	bl	80046f8 <siprintf>
 8000804:	4867      	ldr	r0, [pc, #412]	@ (80009a4 <main+0x284>)
 8000806:	f7ff fd03 	bl	8000210 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29a      	uxth	r2, r3
 800080e:	2364      	movs	r3, #100	@ 0x64
 8000810:	4964      	ldr	r1, [pc, #400]	@ (80009a4 <main+0x284>)
 8000812:	4858      	ldr	r0, [pc, #352]	@ (8000974 <main+0x254>)
 8000814:	f003 fbb4 	bl	8003f80 <HAL_UART_Transmit>
 8000818:	79bb      	ldrb	r3, [r7, #6]
 800081a:	4619      	mov	r1, r3
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	4618      	mov	r0, r3
 8000820:	7a3b      	ldrb	r3, [r7, #8]
 8000822:	7a7a      	ldrb	r2, [r7, #9]
 8000824:	9201      	str	r2, [sp, #4]
 8000826:	9300      	str	r3, [sp, #0]
 8000828:	4603      	mov	r3, r0
 800082a:	460a      	mov	r2, r1
 800082c:	495e      	ldr	r1, [pc, #376]	@ (80009a8 <main+0x288>)
 800082e:	485d      	ldr	r0, [pc, #372]	@ (80009a4 <main+0x284>)
 8000830:	f003 ff62 	bl	80046f8 <siprintf>
 8000834:	485b      	ldr	r0, [pc, #364]	@ (80009a4 <main+0x284>)
 8000836:	f7ff fceb 	bl	8000210 <strlen>
 800083a:	4603      	mov	r3, r0
 800083c:	b29a      	uxth	r2, r3
 800083e:	2364      	movs	r3, #100	@ 0x64
 8000840:	4958      	ldr	r1, [pc, #352]	@ (80009a4 <main+0x284>)
 8000842:	484c      	ldr	r0, [pc, #304]	@ (8000974 <main+0x254>)
 8000844:	f003 fb9c 	bl	8003f80 <HAL_UART_Transmit>
 8000848:	7abb      	ldrb	r3, [r7, #10]
 800084a:	4619      	mov	r1, r3
 800084c:	7afb      	ldrb	r3, [r7, #11]
 800084e:	4618      	mov	r0, r3
 8000850:	7b3b      	ldrb	r3, [r7, #12]
 8000852:	7b7a      	ldrb	r2, [r7, #13]
 8000854:	9201      	str	r2, [sp, #4]
 8000856:	9300      	str	r3, [sp, #0]
 8000858:	4603      	mov	r3, r0
 800085a:	460a      	mov	r2, r1
 800085c:	4953      	ldr	r1, [pc, #332]	@ (80009ac <main+0x28c>)
 800085e:	4851      	ldr	r0, [pc, #324]	@ (80009a4 <main+0x284>)
 8000860:	f003 ff4a 	bl	80046f8 <siprintf>
 8000864:	484f      	ldr	r0, [pc, #316]	@ (80009a4 <main+0x284>)
 8000866:	f7ff fcd3 	bl	8000210 <strlen>
 800086a:	4603      	mov	r3, r0
 800086c:	b29a      	uxth	r2, r3
 800086e:	2364      	movs	r3, #100	@ 0x64
 8000870:	494c      	ldr	r1, [pc, #304]	@ (80009a4 <main+0x284>)
 8000872:	4840      	ldr	r0, [pc, #256]	@ (8000974 <main+0x254>)
 8000874:	f003 fb84 	bl	8003f80 <HAL_UART_Transmit>
 8000878:	7bbb      	ldrb	r3, [r7, #14]
 800087a:	4619      	mov	r1, r3
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	4618      	mov	r0, r3
 8000880:	7c3b      	ldrb	r3, [r7, #16]
 8000882:	7c7a      	ldrb	r2, [r7, #17]
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	4603      	mov	r3, r0
 800088a:	460a      	mov	r2, r1
 800088c:	4948      	ldr	r1, [pc, #288]	@ (80009b0 <main+0x290>)
 800088e:	4845      	ldr	r0, [pc, #276]	@ (80009a4 <main+0x284>)
 8000890:	f003 ff32 	bl	80046f8 <siprintf>
 8000894:	4843      	ldr	r0, [pc, #268]	@ (80009a4 <main+0x284>)
 8000896:	f7ff fcbb 	bl	8000210 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	2364      	movs	r3, #100	@ 0x64
 80008a0:	4940      	ldr	r1, [pc, #256]	@ (80009a4 <main+0x284>)
 80008a2:	4834      	ldr	r0, [pc, #208]	@ (8000974 <main+0x254>)
 80008a4:	f003 fb6c 	bl	8003f80 <HAL_UART_Transmit>
      HAL_Delay(10);
 80008a8:	200a      	movs	r0, #10
 80008aa:	f001 fca7 	bl	80021fc <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  socket(s,Sn_MR_TCP,45000,SF_TCP_NODELAY);
 80008ae:	4b41      	ldr	r3, [pc, #260]	@ (80009b4 <main+0x294>)
 80008b0:	7818      	ldrb	r0, [r3, #0]
 80008b2:	2320      	movs	r3, #32
 80008b4:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 80008b8:	2101      	movs	r1, #1
 80008ba:	f000 fd5f 	bl	800137c <socket>


	  while(Baglan!=SOCK_OK){
 80008be:	e00b      	b.n	80008d8 <main+0x1b8>
		  Baglan=connect(s,serverip,45000);
 80008c0:	4b3c      	ldr	r3, [pc, #240]	@ (80009b4 <main+0x294>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	f64a 72c8 	movw	r2, #45000	@ 0xafc8
 80008c8:	493b      	ldr	r1, [pc, #236]	@ (80009b8 <main+0x298>)
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fef8 	bl	80016c0 <connect_W5x00>
 80008d0:	4603      	mov	r3, r0
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b39      	ldr	r3, [pc, #228]	@ (80009bc <main+0x29c>)
 80008d6:	701a      	strb	r2, [r3, #0]
	  while(Baglan!=SOCK_OK){
 80008d8:	4b38      	ldr	r3, [pc, #224]	@ (80009bc <main+0x29c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d1ef      	bne.n	80008c0 <main+0x1a0>
	  }


	  Baglan=0;
 80008e0:	4b36      	ldr	r3, [pc, #216]	@ (80009bc <main+0x29c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	701a      	strb	r2, [r3, #0]

	  send(s,gidenler,gidenler_len);
 80008e6:	4b33      	ldr	r3, [pc, #204]	@ (80009b4 <main+0x294>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	4a35      	ldr	r2, [pc, #212]	@ (80009c0 <main+0x2a0>)
 80008ec:	7812      	ldrb	r2, [r2, #0]
 80008ee:	4935      	ldr	r1, [pc, #212]	@ (80009c4 <main+0x2a4>)
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 ffeb 	bl	80018cc <send>

	  while(received_len==0){
 80008f6:	e01d      	b.n	8000934 <main+0x214>
		  if(RSR_len = getSn_RX_RSR(s)>0)
 80008f8:	4b2e      	ldr	r3, [pc, #184]	@ (80009b4 <main+0x294>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f000 fc40 	bl	8001182 <getSn_RX_RSR>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	bf14      	ite	ne
 8000908:	2301      	movne	r3, #1
 800090a:	2300      	moveq	r3, #0
 800090c:	b2db      	uxtb	r3, r3
 800090e:	461a      	mov	r2, r3
 8000910:	4b2d      	ldr	r3, [pc, #180]	@ (80009c8 <main+0x2a8>)
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	4b2c      	ldr	r3, [pc, #176]	@ (80009c8 <main+0x2a8>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d00b      	beq.n	8000934 <main+0x214>
			  received_len=recv(s,data_buf,RSR_len);
 800091c:	4b25      	ldr	r3, [pc, #148]	@ (80009b4 <main+0x294>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4a29      	ldr	r2, [pc, #164]	@ (80009c8 <main+0x2a8>)
 8000922:	7812      	ldrb	r2, [r2, #0]
 8000924:	4929      	ldr	r1, [pc, #164]	@ (80009cc <main+0x2ac>)
 8000926:	4618      	mov	r0, r3
 8000928:	f001 f924 	bl	8001b74 <recv>
 800092c:	4603      	mov	r3, r0
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <main+0x2b0>)
 8000932:	701a      	strb	r2, [r3, #0]
	  while(received_len==0){
 8000934:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <main+0x2b0>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d0dd      	beq.n	80008f8 <main+0x1d8>
	  }

	  while(SOCK_OK!=Kop)
 800093c:	e00b      	b.n	8000956 <main+0x236>
	  {
		  Kop=close(s);
 800093e:	4b1d      	ldr	r3, [pc, #116]	@ (80009b4 <main+0x294>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	4618      	mov	r0, r3
 8000944:	f000 fe4e 	bl	80015e4 <close>
 8000948:	4603      	mov	r3, r0
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b21      	ldr	r3, [pc, #132]	@ (80009d4 <main+0x2b4>)
 800094e:	701a      	strb	r2, [r3, #0]
		  Kop=0;
 8000950:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <main+0x2b4>)
 8000952:	2200      	movs	r2, #0
 8000954:	701a      	strb	r2, [r3, #0]
	  while(SOCK_OK!=Kop)
 8000956:	4b1f      	ldr	r3, [pc, #124]	@ (80009d4 <main+0x2b4>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d1ef      	bne.n	800093e <main+0x21e>
	  }

	  HAL_Delay(25000);
 800095e:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 8000962:	f001 fc4b 	bl	80021fc <HAL_Delay>
	  received_len=0;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <main+0x2b0>)
 8000968:	2200      	movs	r2, #0
 800096a:	701a      	strb	r2, [r3, #0]
	  socket(s,Sn_MR_TCP,45000,SF_TCP_NODELAY);
 800096c:	e79f      	b.n	80008ae <main+0x18e>
 800096e:	bf00      	nop
 8000970:	08005050 	.word	0x08005050
 8000974:	20000178 	.word	0x20000178
 8000978:	08005080 	.word	0x08005080
 800097c:	080006c1 	.word	0x080006c1
 8000980:	080006a9 	.word	0x080006a9
 8000984:	080006fd 	.word	0x080006fd
 8000988:	080006d9 	.word	0x080006d9
 800098c:	08005150 	.word	0x08005150
 8000990:	08005158 	.word	0x08005158
 8000994:	0800515c 	.word	0x0800515c
 8000998:	08005160 	.word	0x08005160
 800099c:	080050b0 	.word	0x080050b0
 80009a0:	080050cc 	.word	0x080050cc
 80009a4:	200000bc 	.word	0x200000bc
 80009a8:	080050f0 	.word	0x080050f0
 80009ac:	08005110 	.word	0x08005110
 80009b0:	08005130 	.word	0x08005130
 80009b4:	200000f8 	.word	0x200000f8
 80009b8:	20000000 	.word	0x20000000
 80009bc:	200000f9 	.word	0x200000f9
 80009c0:	20000012 	.word	0x20000012
 80009c4:	20000004 	.word	0x20000004
 80009c8:	200000fb 	.word	0x200000fb
 80009cc:	200000fc 	.word	0x200000fc
 80009d0:	200000fa 	.word	0x200000fa
 80009d4:	2000011a 	.word	0x2000011a

080009d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b094      	sub	sp, #80	@ 0x50
 80009dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	2234      	movs	r2, #52	@ 0x34
 80009e4:	2100      	movs	r1, #0
 80009e6:	4618      	mov	r0, r3
 80009e8:	f003 fea6 	bl	8004738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	4b29      	ldr	r3, [pc, #164]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	4a28      	ldr	r2, [pc, #160]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0c:	4b26      	ldr	r3, [pc, #152]	@ (8000aa8 <SystemClock_Config+0xd0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	4b23      	ldr	r3, [pc, #140]	@ (8000aac <SystemClock_Config+0xd4>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a24:	4a21      	ldr	r2, [pc, #132]	@ (8000aac <SystemClock_Config+0xd4>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000aac <SystemClock_Config+0xd4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a42:	2302      	movs	r3, #2
 8000a44:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 82;
 8000a50:	2352      	movs	r3, #82	@ 0x52
 8000a52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 031c 	add.w	r3, r7, #28
 8000a64:	4618      	mov	r0, r3
 8000a66:	f002 f9cb 	bl	8002e00 <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a70:	f000 f81e 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8a:	f107 0308 	add.w	r3, r7, #8
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f001 fe6b 	bl	800276c <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a9c:	f000 f808 	bl	8000ab0 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	@ 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	bf00      	nop
 8000aba:	e7fd      	b.n	8000ab8 <Error_Handler+0x8>

08000abc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ac0:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ac2:	4a18      	ldr	r2, [pc, #96]	@ (8000b24 <MX_SPI2_Init+0x68>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ac8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000acc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ada:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000ae8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000aec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000aee:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000af0:	2208      	movs	r2, #8
 8000af2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000b08:	220a      	movs	r2, #10
 8000b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <MX_SPI2_Init+0x64>)
 8000b0e:	f002 fc15 	bl	800333c <HAL_SPI_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000b18:	f7ff ffca 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b1c:	bf00      	nop
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	2000011c 	.word	0x2000011c
 8000b24:	40003800 	.word	0x40003800

08000b28 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a30      	ldr	r2, [pc, #192]	@ (8000c08 <HAL_SPI_MspInit+0xe0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d15a      	bne.n	8000c00 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	4a2e      	ldr	r2, [pc, #184]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a20      	ldr	r2, [pc, #128]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b1e      	ldr	r3, [pc, #120]	@ (8000c0c <HAL_SPI_MspInit+0xe4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4815      	ldr	r0, [pc, #84]	@ (8000c10 <HAL_SPI_MspInit+0xe8>)
 8000bba:	f001 fc29 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bce:	2305      	movs	r3, #5
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480d      	ldr	r0, [pc, #52]	@ (8000c10 <HAL_SPI_MspInit+0xe8>)
 8000bda:	f001 fc19 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bde:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000be2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be4:	2302      	movs	r3, #2
 8000be6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4806      	ldr	r0, [pc, #24]	@ (8000c14 <HAL_SPI_MspInit+0xec>)
 8000bfc:	f001 fc08 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000c00:	bf00      	nop
 8000c02:	3728      	adds	r7, #40	@ 0x28
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40003800 	.word	0x40003800
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40020800 	.word	0x40020800
 8000c14:	40020400 	.word	0x40020400

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	4b10      	ldr	r3, [pc, #64]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c26:	4a0f      	ldr	r2, [pc, #60]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	603b      	str	r3, [r7, #0]
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_MspInit+0x4c>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c56:	2007      	movs	r0, #7
 8000c58:	f001 fba6 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800

08000c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c6c:	bf00      	nop
 8000c6e:	e7fd      	b.n	8000c6c <NMI_Handler+0x4>

08000c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <HardFault_Handler+0x4>

08000c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <MemManage_Handler+0x4>

08000c80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbe:	f001 fa7d 	bl	80021bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f003 fd26 	bl	8004748 <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20020000 	.word	0x20020000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	20000174 	.word	0x20000174
 8000d30:	20000330 	.word	0x20000330

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <MX_USART2_UART_Init+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f003 f8a6 	bl	8003ee0 <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d9a:	f7ff fe89 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000178 	.word	0x20000178
 8000da8:	40004400 	.word	0x40004400

08000dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	@ (8000e30 <HAL_UART_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12b      	bne.n	8000e26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e06:	230c      	movs	r3, #12
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e16:	2307      	movs	r3, #7
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <HAL_UART_MspInit+0x8c>)
 8000e22:	f001 faf5 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000e4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d003      	beq.n	8000e60 <WIZCHIP_READ+0x24>
 8000e58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d114      	bne.n	8000e8a <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000e62:	6a1b      	ldr	r3, [r3, #32]
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	0c12      	lsrs	r2, r2, #16
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000e6e:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	0a12      	lsrs	r2, r2, #8
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	4610      	mov	r0, r2
 8000e7a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	4610      	mov	r0, r2
 8000e86:	4798      	blx	r3
 8000e88:	e011      	b.n	8000eae <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	0c1b      	lsrs	r3, r3, #16
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ea4:	f107 020c 	add.w	r2, r7, #12
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000eae:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4798      	blx	r3
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000ebe:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <WIZCHIP_READ+0x94>)
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	4798      	blx	r3
   return ret;
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2000001c 	.word	0x2000001c

08000ed4 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	460b      	mov	r3, r1
 8000ede:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000ee0:	4b22      	ldr	r3, [pc, #136]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d119      	bne.n	8000f30 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000efe:	6a1b      	ldr	r3, [r3, #32]
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	0c12      	lsrs	r2, r2, #16
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	4610      	mov	r0, r2
 8000f08:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	0a12      	lsrs	r2, r2, #8
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	4610      	mov	r0, r2
 8000f16:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000f18:	4b14      	ldr	r3, [pc, #80]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000f1a:	6a1b      	ldr	r3, [r3, #32]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	4610      	mov	r0, r2
 8000f22:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000f24:	4b11      	ldr	r3, [pc, #68]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000f26:	6a1b      	ldr	r3, [r3, #32]
 8000f28:	78fa      	ldrb	r2, [r7, #3]
 8000f2a:	4610      	mov	r0, r2
 8000f2c:	4798      	blx	r3
 8000f2e:	e013      	b.n	8000f58 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	0c1b      	lsrs	r3, r3, #16
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	0a1b      	lsrs	r3, r3, #8
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	b2db      	uxtb	r3, r3
 8000f44:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 8000f46:	78fb      	ldrb	r3, [r7, #3]
 8000f48:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000f4a:	4b08      	ldr	r3, [pc, #32]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f4e:	f107 020c 	add.w	r2, r7, #12
 8000f52:	2104      	movs	r1, #4
 8000f54:	4610      	mov	r0, r2
 8000f56:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000f5e:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <WIZCHIP_WRITE+0x98>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	4798      	blx	r3
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000001c 	.word	0x2000001c

08000f70 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b087      	sub	sp, #28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000f84:	4b29      	ldr	r3, [pc, #164]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8000f86:	695b      	ldr	r3, [r3, #20]
 8000f88:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000f8a:	4b28      	ldr	r3, [pc, #160]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d003      	beq.n	8000f9a <WIZCHIP_READ_BUF+0x2a>
 8000f92:	4b26      	ldr	r3, [pc, #152]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8000f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d126      	bne.n	8000fe8 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000f9a:	4b24      	ldr	r3, [pc, #144]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8000f9c:	6a1b      	ldr	r3, [r3, #32]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	0c12      	lsrs	r2, r2, #16
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000fa8:	4b20      	ldr	r3, [pc, #128]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8000faa:	6a1b      	ldr	r3, [r3, #32]
 8000fac:	68fa      	ldr	r2, [r7, #12]
 8000fae:	0a12      	lsrs	r2, r2, #8
 8000fb0:	b2d2      	uxtb	r2, r2
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	68fa      	ldr	r2, [r7, #12]
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	82fb      	strh	r3, [r7, #22]
 8000fc6:	e00a      	b.n	8000fde <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	8afa      	ldrh	r2, [r7, #22]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	188c      	adds	r4, r1, r2
 8000fd2:	4798      	blx	r3
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000fd8:	8afb      	ldrh	r3, [r7, #22]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	82fb      	strh	r3, [r7, #22]
 8000fde:	8afa      	ldrh	r2, [r7, #22]
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d3f0      	bcc.n	8000fc8 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000fe6:	e017      	b.n	8001018 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	0c1b      	lsrs	r3, r3, #16
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8001000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001002:	f107 0210 	add.w	r2, r7, #16
 8001006:	2103      	movs	r1, #3
 8001008:	4610      	mov	r0, r2
 800100a:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 800100e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001010:	88fa      	ldrh	r2, [r7, #6]
 8001012:	4611      	mov	r1, r2
 8001014:	68b8      	ldr	r0, [r7, #8]
 8001016:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800101e:	4b03      	ldr	r3, [pc, #12]	@ (800102c <WIZCHIP_READ_BUF+0xbc>)
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	4798      	blx	r3
}
 8001024:	bf00      	nop
 8001026:	371c      	adds	r7, #28
 8001028:	46bd      	mov	sp, r7
 800102a:	bd90      	pop	{r4, r7, pc}
 800102c:	2000001c 	.word	0x2000001c

08001030 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	4613      	mov	r3, r2
 800103c:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800103e:	4b2b      	ldr	r3, [pc, #172]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	4798      	blx	r3
   WIZCHIP.CS._select();
 8001044:	4b29      	ldr	r3, [pc, #164]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 8001046:	695b      	ldr	r3, [r3, #20]
 8001048:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8001052:	4b26      	ldr	r3, [pc, #152]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 8001054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001056:	2b00      	cmp	r3, #0
 8001058:	d126      	bne.n	80010a8 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800105a:	4b24      	ldr	r3, [pc, #144]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	0c12      	lsrs	r2, r2, #16
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	4610      	mov	r0, r2
 8001066:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8001068:	4b20      	ldr	r3, [pc, #128]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 800106a:	6a1b      	ldr	r3, [r3, #32]
 800106c:	68fa      	ldr	r2, [r7, #12]
 800106e:	0a12      	lsrs	r2, r2, #8
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	4610      	mov	r0, r2
 8001074:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8001076:	4b1d      	ldr	r3, [pc, #116]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	4610      	mov	r0, r2
 8001080:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001082:	2300      	movs	r3, #0
 8001084:	82fb      	strh	r3, [r7, #22]
 8001086:	e00a      	b.n	800109e <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 800108a:	6a1b      	ldr	r3, [r3, #32]
 800108c:	8afa      	ldrh	r2, [r7, #22]
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	440a      	add	r2, r1
 8001092:	7812      	ldrb	r2, [r2, #0]
 8001094:	4610      	mov	r0, r2
 8001096:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8001098:	8afb      	ldrh	r3, [r7, #22]
 800109a:	3301      	adds	r3, #1
 800109c:	82fb      	strh	r3, [r7, #22]
 800109e:	8afa      	ldrh	r2, [r7, #22]
 80010a0:	88fb      	ldrh	r3, [r7, #6]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3f0      	bcc.n	8001088 <WIZCHIP_WRITE_BUF+0x58>
 80010a6:	e017      	b.n	80010d8 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	0c1b      	lsrs	r3, r3, #16
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	0a1b      	lsrs	r3, r3, #8
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 80010c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c2:	f107 0210 	add.w	r2, r7, #16
 80010c6:	2103      	movs	r1, #3
 80010c8:	4610      	mov	r0, r2
 80010ca:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 80010ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d0:	88fa      	ldrh	r2, [r7, #6]
 80010d2:	4611      	mov	r1, r2
 80010d4:	68b8      	ldr	r0, [r7, #8]
 80010d6:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80010de:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <WIZCHIP_WRITE_BUF+0xbc>)
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	4798      	blx	r3
}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000001c 	.word	0x2000001c

080010f0 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	81fb      	strh	r3, [r7, #14]
 80010fe:	2300      	movs	r3, #0
 8001100:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	3301      	adds	r3, #1
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fe94 	bl	8000e3c <WIZCHIP_READ>
 8001114:	4603      	mov	r3, r0
 8001116:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001118:	89bb      	ldrh	r3, [r7, #12]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b29c      	uxth	r4, r3
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	3301      	adds	r3, #1
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fe86 	bl	8000e3c <WIZCHIP_READ>
 8001130:	4603      	mov	r3, r0
 8001132:	4423      	add	r3, r4
 8001134:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8001136:	89bb      	ldrh	r3, [r7, #12]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d019      	beq.n	8001170 <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	3301      	adds	r3, #1
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fe77 	bl	8000e3c <WIZCHIP_READ>
 800114e:	4603      	mov	r3, r0
 8001150:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8001152:	89fb      	ldrh	r3, [r7, #14]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b29c      	uxth	r4, r3
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	3301      	adds	r3, #1
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff fe69 	bl	8000e3c <WIZCHIP_READ>
 800116a:	4603      	mov	r3, r0
 800116c:	4423      	add	r3, r4
 800116e:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001170:	89fa      	ldrh	r2, [r7, #14]
 8001172:	89bb      	ldrh	r3, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d1c4      	bne.n	8001102 <getSn_TX_FSR+0x12>
   return val;
 8001178:	89fb      	ldrh	r3, [r7, #14]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}

08001182 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 800118c:	2300      	movs	r3, #0
 800118e:	81fb      	strh	r3, [r7, #14]
 8001190:	2300      	movs	r3, #0
 8001192:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	3301      	adds	r3, #1
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe4b 	bl	8000e3c <WIZCHIP_READ>
 80011a6:	4603      	mov	r3, r0
 80011a8:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80011aa:	89bb      	ldrh	r3, [r7, #12]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29c      	uxth	r4, r3
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	3301      	adds	r3, #1
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fe3d 	bl	8000e3c <WIZCHIP_READ>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4423      	add	r3, r4
 80011c6:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80011c8:	89bb      	ldrh	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d019      	beq.n	8001202 <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	3301      	adds	r3, #1
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fe2e 	bl	8000e3c <WIZCHIP_READ>
 80011e0:	4603      	mov	r3, r0
 80011e2:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80011e4:	89fb      	ldrh	r3, [r7, #14]
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b29c      	uxth	r4, r3
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	3301      	adds	r3, #1
 80011f0:	00db      	lsls	r3, r3, #3
 80011f2:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fe20 	bl	8000e3c <WIZCHIP_READ>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4423      	add	r3, r4
 8001200:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8001202:	89fa      	ldrh	r2, [r7, #14]
 8001204:	89bb      	ldrh	r3, [r7, #12]
 8001206:	429a      	cmp	r2, r3
 8001208:	d1c4      	bne.n	8001194 <getSn_RX_RSR+0x12>
   return val;
 800120a:	89fb      	ldrh	r3, [r7, #14]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	bd90      	pop	{r4, r7, pc}

08001214 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	71fb      	strb	r3, [r7, #7]
 8001220:	4613      	mov	r3, r2
 8001222:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800122c:	88bb      	ldrh	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d046      	beq.n	80012c0 <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	3301      	adds	r3, #1
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff fdfc 	bl	8000e3c <WIZCHIP_READ>
 8001244:	4603      	mov	r3, r0
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	b29c      	uxth	r4, r3
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	3301      	adds	r3, #1
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fdf0 	bl	8000e3c <WIZCHIP_READ>
 800125c:	4603      	mov	r3, r0
 800125e:	4423      	add	r3, r4
 8001260:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8001262:	89fb      	ldrh	r3, [r7, #14]
 8001264:	021b      	lsls	r3, r3, #8
 8001266:	79fa      	ldrb	r2, [r7, #7]
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	3202      	adds	r2, #2
 800126c:	00d2      	lsls	r2, r2, #3
 800126e:	4413      	add	r3, r2
 8001270:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8001272:	88bb      	ldrh	r3, [r7, #4]
 8001274:	461a      	mov	r2, r3
 8001276:	6839      	ldr	r1, [r7, #0]
 8001278:	68b8      	ldr	r0, [r7, #8]
 800127a:	f7ff fed9 	bl	8001030 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 800127e:	89fa      	ldrh	r2, [r7, #14]
 8001280:	88bb      	ldrh	r3, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	3301      	adds	r3, #1
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8001292:	461a      	mov	r2, r3
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	b29b      	uxth	r3, r3
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f7ff fe18 	bl	8000ed4 <WIZCHIP_WRITE>
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	3301      	adds	r3, #1
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 80012b0:	461a      	mov	r2, r3
 80012b2:	89fb      	ldrh	r3, [r7, #14]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4619      	mov	r1, r3
 80012b8:	4610      	mov	r0, r2
 80012ba:	f7ff fe0b 	bl	8000ed4 <WIZCHIP_WRITE>
 80012be:	e000      	b.n	80012c2 <wiz_send_data+0xae>
   if(len == 0)  return;
 80012c0:	bf00      	nop
}
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd90      	pop	{r4, r7, pc}

080012c8 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
 80012d4:	4613      	mov	r3, r2
 80012d6:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80012e0:	88bb      	ldrh	r3, [r7, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d046      	beq.n	8001374 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	3301      	adds	r3, #1
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fda2 	bl	8000e3c <WIZCHIP_READ>
 80012f8:	4603      	mov	r3, r0
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	b29c      	uxth	r4, r3
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	3301      	adds	r3, #1
 8001304:	00db      	lsls	r3, r3, #3
 8001306:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fd96 	bl	8000e3c <WIZCHIP_READ>
 8001310:	4603      	mov	r3, r0
 8001312:	4423      	add	r3, r4
 8001314:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	0092      	lsls	r2, r2, #2
 800131e:	3203      	adds	r2, #3
 8001320:	00d2      	lsls	r2, r2, #3
 8001322:	4413      	add	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	461a      	mov	r2, r3
 800132a:	6839      	ldr	r1, [r7, #0]
 800132c:	68b8      	ldr	r0, [r7, #8]
 800132e:	f7ff fe1f 	bl	8000f70 <WIZCHIP_READ_BUF>
   ptr += len;
 8001332:	89fa      	ldrh	r2, [r7, #14]
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	4413      	add	r3, r2
 8001338:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	3301      	adds	r3, #1
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8001346:	461a      	mov	r2, r3
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	b29b      	uxth	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	4619      	mov	r1, r3
 8001352:	4610      	mov	r0, r2
 8001354:	f7ff fdbe 	bl	8000ed4 <WIZCHIP_WRITE>
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	3301      	adds	r3, #1
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8001364:	461a      	mov	r2, r3
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	4610      	mov	r0, r2
 800136e:	f7ff fdb1 	bl	8000ed4 <WIZCHIP_WRITE>
 8001372:	e000      	b.n	8001376 <wiz_recv_data+0xae>
   if(len == 0) return;
 8001374:	bf00      	nop
}
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	bd90      	pop	{r4, r7, pc}

0800137c <socket>:




int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{ 
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	4604      	mov	r4, r0
 8001384:	4608      	mov	r0, r1
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	4623      	mov	r3, r4
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	4603      	mov	r3, r0
 8001390:	71bb      	strb	r3, [r7, #6]
 8001392:	460b      	mov	r3, r1
 8001394:	80bb      	strh	r3, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	70fb      	strb	r3, [r7, #3]

   uint8_t taddr[16];
   uint16_t local_port=0;
 800139a:	2300      	movs	r3, #0
 800139c:	83fb      	strh	r3, [r7, #30]
   CHECK_SOCKNUM(); 
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	d902      	bls.n	80013aa <socket+0x2e>
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
 80013a8:	e10e      	b.n	80015c8 <socket+0x24c>
   switch (protocol & 0x0F)
 80013aa:	79bb      	ldrb	r3, [r7, #6]
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	3b01      	subs	r3, #1
 80013b2:	2b0d      	cmp	r3, #13
 80013b4:	d82c      	bhi.n	8001410 <socket+0x94>
 80013b6:	a201      	add	r2, pc, #4	@ (adr r2, 80013bc <socket+0x40>)
 80013b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013bc:	080013f5 	.word	0x080013f5
 80013c0:	08001417 	.word	0x08001417
 80013c4:	08001417 	.word	0x08001417
 80013c8:	08001417 	.word	0x08001417
 80013cc:	08001411 	.word	0x08001411
 80013d0:	08001411 	.word	0x08001411
 80013d4:	08001411 	.word	0x08001411
 80013d8:	08001411 	.word	0x08001411
 80013dc:	08001411 	.word	0x08001411
 80013e0:	08001417 	.word	0x08001417
 80013e4:	08001417 	.word	0x08001417
 80013e8:	08001411 	.word	0x08001411
 80013ec:	08001411 	.word	0x08001411
 80013f0:	08001417 	.word	0x08001417
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 80013f4:	f107 0308 	add.w	r3, r7, #8
 80013f8:	2204      	movs	r2, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001400:	f7ff fdb6 	bl	8000f70 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <socket+0x9e>
 800140a:	f06f 0302 	mvn.w	r3, #2
 800140e:	e0db      	b.n	80015c8 <socket+0x24c>
      #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
      #endif
      default :
        return SOCKERR_SOCKMODE;
 8001410:	f06f 0304 	mvn.w	r3, #4
 8001414:	e0d8      	b.n	80015c8 <socket+0x24c>
         break; 
 8001416:	bf00      	nop
 8001418:	e000      	b.n	800141c <socket+0xa0>
            break;
 800141a:	bf00      	nop
   } 
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 800141c:	78fb      	ldrb	r3, [r7, #3]
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	d002      	beq.n	800142c <socket+0xb0>
 8001426:	f06f 0305 	mvn.w	r3, #5
 800142a:	e0cd      	b.n	80015c8 <socket+0x24c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
   if(flag != 0)
 800142c:	78fb      	ldrb	r3, [r7, #3]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d028      	beq.n	8001484 <socket+0x108>
   {
      switch(protocol)
 8001432:	79bb      	ldrb	r3, [r7, #6]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d002      	beq.n	800143e <socket+0xc2>
 8001438:	2b02      	cmp	r3, #2
 800143a:	d008      	beq.n	800144e <socket+0xd2>
         break;

#endif 

         default:
            break;
 800143c:	e022      	b.n	8001484 <socket+0x108>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800143e:	78fb      	ldrb	r3, [r7, #3]
 8001440:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8001444:	2b00      	cmp	r3, #0
 8001446:	d11a      	bne.n	800147e <socket+0x102>
 8001448:	f06f 0305 	mvn.w	r3, #5
 800144c:	e0bc      	b.n	80015c8 <socket+0x24c>
   	      if(flag & SF_IGMP_VER2)
 800144e:	78fb      	ldrb	r3, [r7, #3]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	2b00      	cmp	r3, #0
 8001456:	d006      	beq.n	8001466 <socket+0xea>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8001458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800145c:	2b00      	cmp	r3, #0
 800145e:	db02      	blt.n	8001466 <socket+0xea>
 8001460:	f06f 0305 	mvn.w	r3, #5
 8001464:	e0b0      	b.n	80015c8 <socket+0x24c>
      	      if(flag & SF_UNI_BLOCK)
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <socket+0x106>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8001470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db04      	blt.n	8001482 <socket+0x106>
 8001478:	f06f 0305 	mvn.w	r3, #5
 800147c:	e0a4      	b.n	80015c8 <socket+0x24c>
   	      break;
 800147e:	bf00      	nop
 8001480:	e000      	b.n	8001484 <socket+0x108>
         break;
 8001482:	bf00      	nop
      }
   }
   close(sn);
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f8ac 	bl	80015e4 <close>
	//M20150601
#if _WIZCHIP_ == 5300   
   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
#else
   setSn_MR(sn, (protocol | (flag & 0xF0)));
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	3301      	adds	r3, #1
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4618      	mov	r0, r3
 8001496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800149a:	f023 030f 	bic.w	r3, r3, #15
 800149e:	b25a      	sxtb	r2, r3
 80014a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fd12 	bl	8000ed4 <WIZCHIP_WRITE>
#endif
#ifdef IPV6_AVAILABLE
   setSn_MR2(sn, flag & 0x03);  
#endif 
   if(!port)
 80014b0:	88bb      	ldrh	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d110      	bne.n	80014d8 <socket+0x15c>
   {
      port = sock_any_port++;
 80014b6:	4b46      	ldr	r3, [pc, #280]	@ (80015d0 <socket+0x254>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	b291      	uxth	r1, r2
 80014be:	4a44      	ldr	r2, [pc, #272]	@ (80015d0 <socket+0x254>)
 80014c0:	8011      	strh	r1, [r2, #0]
 80014c2:	80bb      	strh	r3, [r7, #4]
      if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 80014c4:	4b42      	ldr	r3, [pc, #264]	@ (80015d0 <socket+0x254>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d103      	bne.n	80014d8 <socket+0x15c>
 80014d0:	4b3f      	ldr	r3, [pc, #252]	@ (80015d0 <socket+0x254>)
 80014d2:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80014d6:	801a      	strh	r2, [r3, #0]
   }
   setSn_PORTR(sn,port);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	3301      	adds	r3, #1
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80014e4:	461a      	mov	r2, r3
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f7ff fcef 	bl	8000ed4 <WIZCHIP_WRITE>
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	3301      	adds	r3, #1
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001502:	461a      	mov	r2, r3
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4619      	mov	r1, r3
 800150a:	4610      	mov	r0, r2
 800150c:	f7ff fce2 	bl	8000ed4 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	3301      	adds	r3, #1
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fcd8 	bl	8000ed4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8001524:	bf00      	nop
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	3301      	adds	r3, #1
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff fc82 	bl	8000e3c <WIZCHIP_READ>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f3      	bne.n	8001526 <socket+0x1aa>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2201      	movs	r2, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	b21b      	sxth	r3, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	b21a      	sxth	r2, r3
 800154c:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <socket+0x258>)
 800154e:	881b      	ldrh	r3, [r3, #0]
 8001550:	b21b      	sxth	r3, r3
 8001552:	4013      	ands	r3, r2
 8001554:	b21b      	sxth	r3, r3
 8001556:	b29a      	uxth	r2, r3
 8001558:	4b1e      	ldr	r3, [pc, #120]	@ (80015d4 <socket+0x258>)
 800155a:	801a      	strh	r2, [r3, #0]
   //
#ifndef IPV6_AVAILABLE
   sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800155c:	78fb      	ldrb	r3, [r7, #3]
 800155e:	f003 0201 	and.w	r2, r3, #1
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <socket+0x258>)
 800156c:	881b      	ldrh	r3, [r3, #0]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21b      	sxth	r3, r3
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <socket+0x258>)
 8001578:	801a      	strh	r2, [r3, #0]
#else
   sock_io_mode |= ((flag & (SF_IO_NONBLOCK>>3)) << sn);
#endif
   sock_is_sending &= ~(1<<sn);
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2201      	movs	r2, #1
 800157e:	fa02 f303 	lsl.w	r3, r2, r3
 8001582:	b21b      	sxth	r3, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <socket+0x25c>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	b21b      	sxth	r3, r3
 800158e:	4013      	ands	r3, r2
 8001590:	b21b      	sxth	r3, r3
 8001592:	b29a      	uxth	r2, r3
 8001594:	4b10      	ldr	r3, [pc, #64]	@ (80015d8 <socket+0x25c>)
 8001596:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4a10      	ldr	r2, [pc, #64]	@ (80015dc <socket+0x260>)
 800159c:	2100      	movs	r1, #0
 800159e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;//PACK_COMPLETED //TODO::need verify:LINAN 20250421
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <socket+0x264>)
 80015a6:	2100      	movs	r1, #0
 80015a8:	54d1      	strb	r1, [r2, r3]
  //
   while(getSn_SR(sn) == SOCK_CLOSED);
 80015aa:	bf00      	nop
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	3301      	adds	r3, #1
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fc3f 	bl	8000e3c <WIZCHIP_READ>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f3      	beq.n	80015ac <socket+0x230>
   return (int8_t)sn;
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}  
 80015c8:	4618      	mov	r0, r3
 80015ca:	3724      	adds	r7, #36	@ 0x24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	20000018 	.word	0x20000018
 80015d4:	200001c0 	.word	0x200001c0
 80015d8:	200001c2 	.word	0x200001c2
 80015dc:	200001c4 	.word	0x200001c4
 80015e0:	200001d4 	.word	0x200001d4

080015e4 <close>:

int8_t close(uint8_t sn)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	d902      	bls.n	80015fa <close+0x16>
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295
 80015f8:	e055      	b.n	80016a6 <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
   setSn_CR(sn,Sn_CR_CLOSE);
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	3301      	adds	r3, #1
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001606:	2110      	movs	r1, #16
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fc63 	bl	8000ed4 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while( getSn_CR(sn) );
 800160e:	bf00      	nop
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	3301      	adds	r3, #1
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fc0d 	bl	8000e3c <WIZCHIP_READ>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f3      	bne.n	8001610 <close+0x2c>
   /* clear all interrupt of SOCKETn. */
   setSn_IR(sn, 0xFF);  	
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	3301      	adds	r3, #1
 800162e:	00db      	lsls	r3, r3, #3
 8001630:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001634:	211f      	movs	r1, #31
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fc4c 	bl	8000ed4 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
   sock_io_mode &= ~(1<<sn); 
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	2201      	movs	r2, #1
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	b21b      	sxth	r3, r3
 8001646:	43db      	mvns	r3, r3
 8001648:	b21a      	sxth	r2, r3
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <close+0xcc>)
 800164c:	881b      	ldrh	r3, [r3, #0]
 800164e:	b21b      	sxth	r3, r3
 8001650:	4013      	ands	r3, r2
 8001652:	b21b      	sxth	r3, r3
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <close+0xcc>)
 8001658:	801a      	strh	r2, [r3, #0]
	//
   sock_is_sending &= ~(1<<sn);
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2201      	movs	r2, #1
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	b21b      	sxth	r3, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	b21a      	sxth	r2, r3
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <close+0xd0>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	b21b      	sxth	r3, r3
 800166e:	4013      	ands	r3, r2
 8001670:	b21b      	sxth	r3, r3
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <close+0xd0>)
 8001676:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <close+0xd4>)
 800167c:	2100      	movs	r1, #0
 800167e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   sock_pack_info[sn] = PACK_NONE;
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4a0d      	ldr	r2, [pc, #52]	@ (80016bc <close+0xd8>)
 8001686:	2100      	movs	r1, #0
 8001688:	54d1      	strb	r1, [r2, r3]
   while(getSn_SR(sn) != SOCK_CLOSED);
 800168a:	bf00      	nop
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	3301      	adds	r3, #1
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fbcf 	bl	8000e3c <WIZCHIP_READ>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f3      	bne.n	800168c <close+0xa8>
   return SOCK_OK;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200001c0 	.word	0x200001c0
 80016b4:	200001c2 	.word	0x200001c2
 80016b8:	200001c4 	.word	0x200001c4
 80016bc:	200001d4 	.word	0x200001d4

080016c0 <connect_W5x00>:
      return SOCKERR_SOCKCLOSED;
   }
   return SOCK_OK;
}
//int8_t connect (uint8_t sn, uint8_t * addr, uint16_t port )
int8_t connect_W5x00(uint8_t sn, uint8_t * addr, uint16_t port  ){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
 80016cc:	4613      	mov	r3, r2
 80016ce:	80bb      	strh	r3, [r7, #4]
   // printf(" W5x00 - connect - addrlen = %d \r\n" , 4 );
   // #ifdef IPV6_AVAILABLE
   // TODO :define how to work, when IPV6_AVAILABLE is defined
   // #endif 
   return connect_IO_6(sn , addr , port, 4 );
 80016d0:	88ba      	ldrh	r2, [r7, #4]
 80016d2:	79f8      	ldrb	r0, [r7, #7]
 80016d4:	2304      	movs	r3, #4
 80016d6:	6839      	ldr	r1, [r7, #0]
 80016d8:	f000 f806 	bl	80016e8 <connect_IO_6>
 80016dc:	4603      	mov	r3, r0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <connect_IO_6>:
   // #endif 
   return connect_IO_6(sn , addr , port ,addrlen );
}

static int8_t connect_IO_6 (uint8_t sn, uint8_t * addr, uint16_t port, uint8_t addrlen )
{ 
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6039      	str	r1, [r7, #0]
 80016f0:	4611      	mov	r1, r2
 80016f2:	461a      	mov	r2, r3
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
 80016f8:	460b      	mov	r3, r1
 80016fa:	80bb      	strh	r3, [r7, #4]
 80016fc:	4613      	mov	r3, r2
 80016fe:	71bb      	strb	r3, [r7, #6]

   // printf(" connect - addrlen = %d \r\n" , addrlen );

   CHECK_SOCKNUM();
 8001700:	79fb      	ldrb	r3, [r7, #7]
 8001702:	2b07      	cmp	r3, #7
 8001704:	d902      	bls.n	800170c <connect_IO_6+0x24>
 8001706:	f04f 33ff 	mov.w	r3, #4294967295
 800170a:	e0d9      	b.n	80018c0 <connect_IO_6+0x1d8>
   CHECK_TCPMODE(); // same macro " CHECK_SOCKMODE(Sn_MR_TCP);"
 800170c:	79fb      	ldrb	r3, [r7, #7]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	3301      	adds	r3, #1
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fb91 	bl	8000e3c <WIZCHIP_READ>
 800171a:	4603      	mov	r3, r0
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d002      	beq.n	800172a <connect_IO_6+0x42>
 8001724:	f06f 0304 	mvn.w	r3, #4
 8001728:	e0ca      	b.n	80018c0 <connect_IO_6+0x1d8>
   CHECK_SOCKINIT();
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	3301      	adds	r3, #1
 8001730:	00db      	lsls	r3, r3, #3
 8001732:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fb80 	bl	8000e3c <WIZCHIP_READ>
 800173c:	4603      	mov	r3, r0
 800173e:	2b13      	cmp	r3, #19
 8001740:	d002      	beq.n	8001748 <connect_IO_6+0x60>
 8001742:	f06f 0302 	mvn.w	r3, #2
 8001746:	e0bb      	b.n	80018c0 <connect_IO_6+0x1d8>
#else
//M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
   uint32_t taddr;
   taddr = ((uint32_t)addr[0] & 0x000000FF);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	021b      	lsls	r3, r3, #8
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	3201      	adds	r2, #1
 8001756:	7812      	ldrb	r2, [r2, #0]
 8001758:	4413      	add	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	3202      	adds	r2, #2
 8001764:	7812      	ldrb	r2, [r2, #0]
 8001766:	4413      	add	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]
   taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	021b      	lsls	r3, r3, #8
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	3203      	adds	r2, #3
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	4413      	add	r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
   if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177e:	d002      	beq.n	8001786 <connect_IO_6+0x9e>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d102      	bne.n	800178c <connect_IO_6+0xa4>
 8001786:	f06f 030b 	mvn.w	r3, #11
 800178a:	e099      	b.n	80018c0 <connect_IO_6+0x1d8>
   }
   #endif 

   if(port == 0) return SOCKERR_PORTZERO;
 800178c:	88bb      	ldrh	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <connect_IO_6+0xb0>
 8001792:	f06f 030a 	mvn.w	r3, #10
 8001796:	e093      	b.n	80018c0 <connect_IO_6+0x1d8>

   setSn_DPORTR(sn, port);
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	3301      	adds	r3, #1
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a4:	461a      	mov	r2, r3
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	0a1b      	lsrs	r3, r3, #8
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	4619      	mov	r1, r3
 80017b0:	4610      	mov	r0, r2
 80017b2:	f7ff fb8f 	bl	8000ed4 <WIZCHIP_WRITE>
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	3301      	adds	r3, #1
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 80017c2:	461a      	mov	r2, r3
 80017c4:	88bb      	ldrh	r3, [r7, #4]
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	4619      	mov	r1, r3
 80017ca:	4610      	mov	r0, r2
 80017cc:	f7ff fb82 	bl	8000ed4 <WIZCHIP_WRITE>
  
   if (addrlen == 16)     // addrlen=16, Sn_MR_TCP6(1001), Sn_MR_TCPD(1101))
 80017d0:	79bb      	ldrb	r3, [r7, #6]
 80017d2:	2b10      	cmp	r3, #16
 80017d4:	d102      	bne.n	80017dc <connect_IO_6+0xf4>
         setSn_DIP6R(sn,addr);
         setSn_CR(sn,Sn_CR_CONNECT6);
      }
      else 
#endif 
      return SOCKERR_SOCKMODE;
 80017d6:	f06f 0304 	mvn.w	r3, #4
 80017da:	e071      	b.n	80018c0 <connect_IO_6+0x1d8>
   } 
   else           // addrlen=4, Sn_MR_TCP4(0001), Sn_MR_TCPD(1101)
   {
      if(getSn_MR(sn) == Sn_MR_TCP6) return SOCKERR_SOCKMODE;
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	3301      	adds	r3, #1
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fb29 	bl	8000e3c <WIZCHIP_READ>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	d102      	bne.n	80017f6 <connect_IO_6+0x10e>
 80017f0:	f06f 0304 	mvn.w	r3, #4
 80017f4:	e064      	b.n	80018c0 <connect_IO_6+0x1d8>
      setSn_DIPR(sn,addr);
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	3301      	adds	r3, #1
 80017fc:	00db      	lsls	r3, r3, #3
 80017fe:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8001802:	2204      	movs	r2, #4
 8001804:	6839      	ldr	r1, [r7, #0]
 8001806:	4618      	mov	r0, r3
 8001808:	f7ff fc12 	bl	8001030 <WIZCHIP_WRITE_BUF>
	   //setSn_DPORT(sn,port); //TODO::need verify:LINAN 20250421
      setSn_CR(sn,Sn_CR_CONNECT);
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	3301      	adds	r3, #1
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001818:	2104      	movs	r1, #4
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff fb5a 	bl	8000ed4 <WIZCHIP_WRITE>
   }
   while(getSn_CR(sn));
 8001820:	bf00      	nop
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	3301      	adds	r3, #1
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fb04 	bl	8000e3c <WIZCHIP_READ>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f3      	bne.n	8001822 <connect_IO_6+0x13a>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 800183a:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <connect_IO_6+0x1e0>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	fa42 f303 	asr.w	r3, r2, r3
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d02b      	beq.n	80018a6 <connect_IO_6+0x1be>
 800184e:	2300      	movs	r3, #0
 8001850:	e036      	b.n	80018c0 <connect_IO_6+0x1d8>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
      if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	3301      	adds	r3, #1
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff faec 	bl	8000e3c <WIZCHIP_READ>
 8001864:	4603      	mov	r3, r0
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d00c      	beq.n	8001888 <connect_IO_6+0x1a0>
      {
         setSn_IR(sn, Sn_IR_TIMEOUT);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	3301      	adds	r3, #1
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800187a:	2108      	movs	r1, #8
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fb29 	bl	8000ed4 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8001882:	f06f 030c 	mvn.w	r3, #12
 8001886:	e01b      	b.n	80018c0 <connect_IO_6+0x1d8>
      }

      if (getSn_SR(sn) == SOCK_CLOSED)
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	3301      	adds	r3, #1
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff fad1 	bl	8000e3c <WIZCHIP_READ>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d102      	bne.n	80018a6 <connect_IO_6+0x1be>
      {
         return SOCKERR_SOCKCLOSED;
 80018a0:	f06f 0303 	mvn.w	r3, #3
 80018a4:	e00c      	b.n	80018c0 <connect_IO_6+0x1d8>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	3301      	adds	r3, #1
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff fac2 	bl	8000e3c <WIZCHIP_READ>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b17      	cmp	r3, #23
 80018bc:	d1c9      	bne.n	8001852 <connect_IO_6+0x16a>
      }
   } 
   
   return SOCK_OK;
 80018be:	2301      	movs	r3, #1
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	200001c0 	.word	0x200001c0

080018cc <send>:
}


#if 1
int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	4613      	mov	r3, r2
 80018da:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	81bb      	strh	r3, [r7, #12]
    */
   //CHECK_SOCKNUM();
   //CHECK_TCPMODE(Sn_MR_TCP4);
   /************/
#ifndef IPV6_AVAILABLE
   CHECK_SOCKNUM();
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	2b07      	cmp	r3, #7
 80018e8:	d902      	bls.n	80018f0 <send+0x24>
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	e138      	b.n	8001b62 <send+0x296>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	3301      	adds	r3, #1
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fa9f 	bl	8000e3c <WIZCHIP_READ>
 80018fe:	4603      	mov	r3, r0
 8001900:	f003 030f 	and.w	r3, r3, #15
 8001904:	2b01      	cmp	r3, #1
 8001906:	d002      	beq.n	800190e <send+0x42>
 8001908:	f06f 0304 	mvn.w	r3, #4
 800190c:	e129      	b.n	8001b62 <send+0x296>
   CHECK_SOCKDATA();
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d102      	bne.n	800191a <send+0x4e>
 8001914:	f06f 030d 	mvn.w	r3, #13
 8001918:	e123      	b.n	8001b62 <send+0x296>
   tmp = getSn_SR(sn);
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	3301      	adds	r3, #1
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff fa88 	bl	8000e3c <WIZCHIP_READ>
 800192c:	4603      	mov	r3, r0
 800192e:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2b17      	cmp	r3, #23
 8001934:	d005      	beq.n	8001942 <send+0x76>
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	2b1c      	cmp	r3, #28
 800193a:	d002      	beq.n	8001942 <send+0x76>
 800193c:	f06f 0306 	mvn.w	r3, #6
 8001940:	e10f      	b.n	8001b62 <send+0x296>
   if( sock_is_sending & (1<<sn) )
 8001942:	4b8a      	ldr	r3, [pc, #552]	@ (8001b6c <send+0x2a0>)
 8001944:	881b      	ldrh	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	fa42 f303 	asr.w	r3, r2, r3
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d039      	beq.n	80019ca <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	3301      	adds	r3, #1
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fa6a 	bl	8000e3c <WIZCHIP_READ>
 8001968:	4603      	mov	r3, r0
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	d019      	beq.n	80019ae <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	3301      	adds	r3, #1
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001986:	2110      	movs	r1, #16
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff faa3 	bl	8000ed4 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2201      	movs	r2, #1
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	b21b      	sxth	r3, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	b21a      	sxth	r2, r3
 800199c:	4b73      	ldr	r3, [pc, #460]	@ (8001b6c <send+0x2a0>)
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	b21b      	sxth	r3, r3
 80019a2:	4013      	ands	r3, r2
 80019a4:	b21b      	sxth	r3, r3
 80019a6:	b29a      	uxth	r2, r3
 80019a8:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <send+0x2a0>)
 80019aa:	801a      	strh	r2, [r3, #0]
 80019ac:	e00d      	b.n	80019ca <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d006      	beq.n	80019c6 <send+0xfa>
      {
         close(sn);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fe12 	bl	80015e4 <close>
         return SOCKERR_TIMEOUT;
 80019c0:	f06f 030c 	mvn.w	r3, #12
 80019c4:	e0cd      	b.n	8001b62 <send+0x296>
      }
      else return SOCK_BUSY;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e0cb      	b.n	8001b62 <send+0x296>
   }
#endif 
   freesize = getSn_TxMAX(sn);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	3301      	adds	r3, #1
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fa30 	bl	8000e3c <WIZCHIP_READ>
 80019dc:	4603      	mov	r3, r0
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 80019e2:	88ba      	ldrh	r2, [r7, #4]
 80019e4:	89bb      	ldrh	r3, [r7, #12]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d901      	bls.n	80019ee <send+0x122>
 80019ea:	89bb      	ldrh	r3, [r7, #12]
 80019ec:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = (uint16_t)getSn_TX_FSR(sn);
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fb7d 	bl	80010f0 <getSn_TX_FSR>
 80019f6:	4603      	mov	r3, r0
 80019f8:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	3301      	adds	r3, #1
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fa18 	bl	8000e3c <WIZCHIP_READ>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b17      	cmp	r3, #23
 8001a14:	d00c      	beq.n	8001a30 <send+0x164>
 8001a16:	7bfb      	ldrb	r3, [r7, #15]
 8001a18:	2b1c      	cmp	r3, #28
 8001a1a:	d009      	beq.n	8001a30 <send+0x164>
      {
         if(tmp == SOCK_CLOSED) close(sn);
 8001a1c:	7bfb      	ldrb	r3, [r7, #15]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d103      	bne.n	8001a2a <send+0x15e>
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fddd 	bl	80015e4 <close>
         return SOCKERR_SOCKSTATUS;
 8001a2a:	f06f 0306 	mvn.w	r3, #6
 8001a2e:	e098      	b.n	8001b62 <send+0x296>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY; //TODO::need verify:LINAN 20250421
 8001a30:	4b4f      	ldr	r3, [pc, #316]	@ (8001b70 <send+0x2a4>)
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	fa42 f303 	asr.w	r3, r2, r3
 8001a3c:	f003 0301 	and.w	r3, r3, #1
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <send+0x184>
 8001a44:	88ba      	ldrh	r2, [r7, #4]
 8001a46:	89bb      	ldrh	r3, [r7, #12]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d901      	bls.n	8001a50 <send+0x184>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e088      	b.n	8001b62 <send+0x296>
     // if( sock_io_mode & (1<<sn) ) return SOCK_BUSY;  //TODO::need verify:LINAN 20250421
      if(len <= freesize) break;
 8001a50:	88ba      	ldrh	r2, [r7, #4]
 8001a52:	89bb      	ldrh	r3, [r7, #12]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d900      	bls.n	8001a5a <send+0x18e>
      freesize = (uint16_t)getSn_TX_FSR(sn);
 8001a58:	e7c9      	b.n	80019ee <send+0x122>
      if(len <= freesize) break;
 8001a5a:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001a5c:	88ba      	ldrh	r2, [r7, #4]
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7ff fbd6 	bl	8001214 <wiz_send_data>
#endif

#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn,len);
#endif
   if(sock_is_sending & (1<<sn))
 8001a68:	4b40      	ldr	r3, [pc, #256]	@ (8001b6c <send+0x2a0>)
 8001a6a:	881b      	ldrh	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	fa42 f303 	asr.w	r3, r2, r3
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d04d      	beq.n	8001b18 <send+0x24c>
   {
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8001a7c:	e034      	b.n	8001ae8 <send+0x21c>
      {    
         tmp = getSn_SR(sn);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	3301      	adds	r3, #1
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff f9d6 	bl	8000e3c <WIZCHIP_READ>
 8001a90:	4603      	mov	r3, r0
 8001a92:	73fb      	strb	r3, [r7, #15]
         if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT) )
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
 8001a96:	2b17      	cmp	r3, #23
 8001a98:	d01a      	beq.n	8001ad0 <send+0x204>
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	2b1c      	cmp	r3, #28
 8001a9e:	d017      	beq.n	8001ad0 <send+0x204>
         {
            if( (tmp == SOCK_CLOSED) || (getSn_IR(sn) & Sn_IR_TIMEOUT) ) close(sn);
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00d      	beq.n	8001ac2 <send+0x1f6>
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	3301      	adds	r3, #1
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f9c2 	bl	8000e3c <WIZCHIP_READ>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d003      	beq.n	8001aca <send+0x1fe>
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fd8d 	bl	80015e4 <close>
            return SOCKERR_SOCKSTATUS;
 8001aca:	f06f 0306 	mvn.w	r3, #6
 8001ace:	e048      	b.n	8001b62 <send+0x296>
         }
         if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001ad0:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <send+0x2a4>)
 8001ad2:	881b      	ldrh	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	fa42 f303 	asr.w	r3, r2, r3
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <send+0x21c>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	e03c      	b.n	8001b62 <send+0x296>
      while ( !(getSn_IR(sn) & Sn_IR_SENDOK) )
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	3301      	adds	r3, #1
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff f9a1 	bl	8000e3c <WIZCHIP_READ>
 8001afa:	4603      	mov	r3, r0
 8001afc:	f003 0310 	and.w	r3, r3, #16
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0bc      	beq.n	8001a7e <send+0x1b2>
      } 
      setSn_IR(sn, Sn_IR_SENDOK);
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	3301      	adds	r3, #1
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001b10:	2110      	movs	r1, #16
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff f9de 	bl	8000ed4 <WIZCHIP_WRITE>
   }
   setSn_CR(sn,Sn_CR_SEND);
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001b24:	2120      	movs	r1, #32
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff f9d4 	bl	8000ed4 <WIZCHIP_WRITE>
 
   while(getSn_CR(sn));   // wait to process the command...
 8001b2c:	bf00      	nop
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	3301      	adds	r3, #1
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff f97e 	bl	8000e3c <WIZCHIP_READ>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f3      	bne.n	8001b2e <send+0x262>
   sock_is_sending |= (1<<sn);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <send+0x2a0>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	b21b      	sxth	r3, r3
 8001b56:	4313      	orrs	r3, r2
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	b29a      	uxth	r2, r3
 8001b5c:	4b03      	ldr	r3, [pc, #12]	@ (8001b6c <send+0x2a0>)
 8001b5e:	801a      	strh	r2, [r3, #0]
 
   return len;
 8001b60:	88bb      	ldrh	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200001c2 	.word	0x200001c2
 8001b70:	200001c0 	.word	0x200001c0

08001b74 <recv>:
 
   return len;
}
#endif 
int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)//lihan
{
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
 8001b80:	4613      	mov	r3, r2
 8001b82:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b07      	cmp	r3, #7
 8001b90:	d902      	bls.n	8001b98 <recv+0x24>
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	e098      	b.n	8001cca <recv+0x156>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	3301      	adds	r3, #1
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff f94b 	bl	8000e3c <WIZCHIP_READ>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d002      	beq.n	8001bb6 <recv+0x42>
 8001bb0:	f06f 0304 	mvn.w	r3, #4
 8001bb4:	e089      	b.n	8001cca <recv+0x156>
   CHECK_SOCKDATA();
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d102      	bne.n	8001bc2 <recv+0x4e>
 8001bbc:	f06f 030d 	mvn.w	r3, #13
 8001bc0:	e083      	b.n	8001cca <recv+0x156>
   
   recvsize = getSn_RxMAX(sn); 
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff f934 	bl	8000e3c <WIZCHIP_READ>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	029b      	lsls	r3, r3, #10
 8001bd8:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 8001bda:	89ba      	ldrh	r2, [r7, #12]
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d201      	bcs.n	8001be6 <recv+0x72>
 8001be2:	89bb      	ldrh	r3, [r7, #12]
 8001be4:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
   while(1)
   {
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff faca 	bl	8001182 <getSn_RX_RSR>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff f91c 	bl	8000e3c <WIZCHIP_READ>
 8001c04:	4603      	mov	r3, r0
 8001c06:	73fb      	strb	r3, [r7, #15]
      if (tmp != SOCK_ESTABLISHED)
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	2b17      	cmp	r3, #23
 8001c0c:	d026      	beq.n	8001c5c <recv+0xe8>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b1c      	cmp	r3, #28
 8001c12:	d11c      	bne.n	8001c4e <recv+0xda>
         {
            if(recvsize != 0) break;
 8001c14:	89bb      	ldrh	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d130      	bne.n	8001c7c <recv+0x108>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff fa67 	bl	80010f0 <getSn_TX_FSR>
 8001c22:	4603      	mov	r3, r0
 8001c24:	461c      	mov	r4, r3
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f902 	bl	8000e3c <WIZCHIP_READ>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	029b      	lsls	r3, r3, #10
 8001c3c:	429c      	cmp	r4, r3
 8001c3e:	d10d      	bne.n	8001c5c <recv+0xe8>
            {
               close(sn);
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fcce 	bl	80015e4 <close>
               return SOCKERR_SOCKSTATUS;
 8001c48:	f06f 0306 	mvn.w	r3, #6
 8001c4c:	e03d      	b.n	8001cca <recv+0x156>
            }
         }
         else
         {
            close(sn);
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fcc7 	bl	80015e4 <close>
            return SOCKERR_SOCKSTATUS;
 8001c56:	f06f 0306 	mvn.w	r3, #6
 8001c5a:	e036      	b.n	8001cca <recv+0x156>
      }
#ifdef IPV6_AVAILABLE
      if(recvsize != 0) break;
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
#else
      if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <recv+0x160>)
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	79fb      	ldrb	r3, [r7, #7]
 8001c64:	fa42 f303 	asr.w	r3, r2, r3
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <recv+0x100>
 8001c70:	2300      	movs	r3, #0
 8001c72:	e02a      	b.n	8001cca <recv+0x156>
      if(recvsize != 0) break;
 8001c74:	89bb      	ldrh	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <recv+0x10c>
      recvsize = (uint16_t)getSn_RX_RSR(sn);
 8001c7a:	e7b4      	b.n	8001be6 <recv+0x72>
            if(recvsize != 0) break;
 8001c7c:	bf00      	nop
 8001c7e:	e000      	b.n	8001c82 <recv+0x10e>
      if(recvsize != 0) break;
 8001c80:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;
 8001c82:	89ba      	ldrh	r2, [r7, #12]
 8001c84:	88bb      	ldrh	r3, [r7, #4]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d201      	bcs.n	8001c8e <recv+0x11a>
 8001c8a:	89bb      	ldrh	r3, [r7, #12]
 8001c8c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len); 
 8001c8e:	88ba      	ldrh	r2, [r7, #4]
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	6839      	ldr	r1, [r7, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff fb17 	bl	80012c8 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV); 
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001ca6:	2140      	movs	r1, #64	@ 0x40
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff f913 	bl	8000ed4 <WIZCHIP_WRITE>
   while(getSn_CR(sn));  
 8001cae:	bf00      	nop
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f8bd 	bl	8000e3c <WIZCHIP_READ>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1f3      	bne.n	8001cb0 <recv+0x13c>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8001cc8:	88bb      	ldrh	r3, [r7, #4]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd90      	pop	{r4, r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200001c0 	.word	0x200001c0

08001cd8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr

08001d2a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70fb      	strb	r3, [r7, #3]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	78fa      	ldrb	r2, [r7, #3]
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <reg_wizchip_cs_cbfunc+0x16>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <reg_wizchip_cs_cbfunc+0x40>)
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <reg_wizchip_cs_cbfunc+0x44>)
 8001d8a:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <reg_wizchip_cs_cbfunc+0x40>)
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <reg_wizchip_cs_cbfunc+0x48>)
 8001d90:	619a      	str	r2, [r3, #24]
 8001d92:	e006      	b.n	8001da2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001d94:	4a06      	ldr	r2, [pc, #24]	@ (8001db0 <reg_wizchip_cs_cbfunc+0x40>)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <reg_wizchip_cs_cbfunc+0x40>)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6193      	str	r3, [r2, #24]
   }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	2000001c 	.word	0x2000001c
 8001db4:	08001cf5 	.word	0x08001cf5
 8001db8:	08001d03 	.word	0x08001d03

08001dbc <reg_wizchip_spi_cbfunc>:
   else           WIZCHIP.IF.SPI._write_burst = spi_wbuf;
}
#else 

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8001dc6:	bf00      	nop
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e08 <reg_wizchip_spi_cbfunc+0x4c>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f9      	beq.n	8001dc8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <reg_wizchip_spi_cbfunc+0x24>
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d106      	bne.n	8001dee <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001de0:	4b09      	ldr	r3, [pc, #36]	@ (8001e08 <reg_wizchip_spi_cbfunc+0x4c>)
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <reg_wizchip_spi_cbfunc+0x50>)
 8001de4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8001de6:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <reg_wizchip_spi_cbfunc+0x4c>)
 8001de8:	4a09      	ldr	r2, [pc, #36]	@ (8001e10 <reg_wizchip_spi_cbfunc+0x54>)
 8001dea:	621a      	str	r2, [r3, #32]
 8001dec:	e006      	b.n	8001dfc <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001dee:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <reg_wizchip_spi_cbfunc+0x4c>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8001df4:	4a04      	ldr	r2, [pc, #16]	@ (8001e08 <reg_wizchip_spi_cbfunc+0x4c>)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6213      	str	r3, [r2, #32]
   }
}
 8001dfa:	bf00      	nop
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	2000001c 	.word	0x2000001c
 8001e0c:	08001d49 	.word	0x08001d49
 8001e10:	08001d59 	.word	0x08001d59

08001e14 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2206      	movs	r2, #6
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001e24:	f7ff f8a4 	bl	8000f70 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2204      	movs	r2, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e34:	f7ff f89c 	bl	8000f70 <WIZCHIP_READ_BUF>
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001e44:	f7ff f894 	bl	8000f70 <WIZCHIP_READ_BUF>
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001e54:	f7ff f88c 	bl	8000f70 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f7ff f83a 	bl	8000ed4 <WIZCHIP_WRITE>
   getMR(); // for delay
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7fe ffeb 	bl	8000e3c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8001e66:	1d3b      	adds	r3, r7, #4
 8001e68:	2206      	movs	r2, #6
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001e70:	f7ff f8de 	bl	8001030 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2204      	movs	r2, #4
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e80:	f7ff f8d6 	bl	8001030 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	2204      	movs	r2, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001e90:	f7ff f8ce 	bl	8001030 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8001e94:	f107 030c 	add.w	r3, r7, #12
 8001e98:	2204      	movs	r2, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8001ea0:	f7ff f8c6 	bl	8001030 <WIZCHIP_WRITE_BUF>
  setLLAR(lla);
  setGUAR(gua);
  if(islock & SYSR_CHPL) CHIPLOCK();
  if(islock & SYSR_NETL) NETLOCK();
#endif
}
 8001ea4:	bf00      	nop
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8001eba:	f7ff ffab 	bl	8001e14 <wizchip_sw_reset>
   if(txsize)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d03b      	beq.n	8001f3c <wizchip_init+0x90>
   {
      tmp = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	e015      	b.n	8001efa <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8001ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	781a      	ldrb	r2, [r3, #0]
 8001ed8:	7bbb      	ldrb	r3, [r7, #14]
 8001eda:	4413      	add	r3, r2
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8001ee0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	dd02      	ble.n	8001eee <wizchip_init+0x42>
 8001ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8001eec:	e066      	b.n	8001fbc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	73fb      	strb	r3, [r7, #15]
 8001efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001efe:	2b07      	cmp	r3, #7
 8001f00:	dde5      	ble.n	8001ece <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f02:	2300      	movs	r3, #0
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	e015      	b.n	8001f34 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	3301      	adds	r3, #1
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8001f16:	4618      	mov	r0, r3
 8001f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4619      	mov	r1, r3
 8001f24:	f7fe ffd6 	bl	8000ed4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	dde5      	ble.n	8001f08 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03b      	beq.n	8001fba <wizchip_init+0x10e>
   {
      tmp = 0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	73fb      	strb	r3, [r7, #15]
 8001f4a:	e015      	b.n	8001f78 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8001f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	781a      	ldrb	r2, [r3, #0]
 8001f56:	7bbb      	ldrb	r3, [r7, #14]
 8001f58:	4413      	add	r3, r2
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#elif  _WIZCHIP_ == W6300
			if(tmp > 32) return -1;
#else
			if(tmp > 16) return -1;
 8001f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f62:	2b10      	cmp	r3, #16
 8001f64:	dd02      	ble.n	8001f6c <wizchip_init+0xc0>
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	e027      	b.n	8001fbc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3301      	adds	r3, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	73fb      	strb	r3, [r7, #15]
 8001f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7c:	2b07      	cmp	r3, #7
 8001f7e:	dde5      	ble.n	8001f4c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	e015      	b.n	8001fb2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8001f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8001f94:	4618      	mov	r0, r3
 8001f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f7fe ff97 	bl	8000ed4 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	3301      	adds	r3, #1
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	73fb      	strb	r3, [r7, #15]
 8001fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fb6:	2b07      	cmp	r3, #7
 8001fb8:	dde5      	ble.n	8001f86 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <wizchip_setnetinfo>:

#endif

#if (_WIZCHIP_ == W5100 || _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5300 || _WIZCHIP_ == W5500)
void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2206      	movs	r2, #6
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001fd6:	f7ff f82b 	bl	8001030 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	330e      	adds	r3, #14
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001fe6:	f7ff f823 	bl	8001030 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	330a      	adds	r3, #10
 8001fee:	2204      	movs	r2, #4
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001ff6:	f7ff f81b 	bl	8001030 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3306      	adds	r3, #6
 8001ffe:	2204      	movs	r2, #4
 8002000:	4619      	mov	r1, r3
 8002002:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002006:	f7ff f813 	bl	8001030 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7c9a      	ldrb	r2, [r3, #18]
 800200e:	4b0b      	ldr	r3, [pc, #44]	@ (800203c <wizchip_setnetinfo+0x78>)
 8002010:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	7cda      	ldrb	r2, [r3, #19]
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <wizchip_setnetinfo+0x78>)
 8002018:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	7d1a      	ldrb	r2, [r3, #20]
 800201e:	4b07      	ldr	r3, [pc, #28]	@ (800203c <wizchip_setnetinfo+0x78>)
 8002020:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	7d5a      	ldrb	r2, [r3, #21]
 8002026:	4b05      	ldr	r3, [pc, #20]	@ (800203c <wizchip_setnetinfo+0x78>)
 8002028:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7d9a      	ldrb	r2, [r3, #22]
 800202e:	4b04      	ldr	r3, [pc, #16]	@ (8002040 <wizchip_setnetinfo+0x7c>)
 8002030:	701a      	strb	r2, [r3, #0]
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200001dc 	.word	0x200001dc
 8002040:	200001e0 	.word	0x200001e0

08002044 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2206      	movs	r2, #6
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002056:	f7fe ff8b 	bl	8000f70 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	330e      	adds	r3, #14
 800205e:	2204      	movs	r2, #4
 8002060:	4619      	mov	r1, r3
 8002062:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002066:	f7fe ff83 	bl	8000f70 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	330a      	adds	r3, #10
 800206e:	2204      	movs	r2, #4
 8002070:	4619      	mov	r1, r3
 8002072:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8002076:	f7fe ff7b 	bl	8000f70 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3306      	adds	r3, #6
 800207e:	2204      	movs	r2, #4
 8002080:	4619      	mov	r1, r3
 8002082:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002086:	f7fe ff73 	bl	8000f70 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800208a:	4b0c      	ldr	r3, [pc, #48]	@ (80020bc <wizchip_getnetinfo+0x78>)
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8002092:	4b0a      	ldr	r3, [pc, #40]	@ (80020bc <wizchip_getnetinfo+0x78>)
 8002094:	785a      	ldrb	r2, [r3, #1]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800209a:	4b08      	ldr	r3, [pc, #32]	@ (80020bc <wizchip_getnetinfo+0x78>)
 800209c:	789a      	ldrb	r2, [r3, #2]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80020a2:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <wizchip_getnetinfo+0x78>)
 80020a4:	78da      	ldrb	r2, [r3, #3]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80020aa:	4b05      	ldr	r3, [pc, #20]	@ (80020c0 <wizchip_getnetinfo+0x7c>)
 80020ac:	781a      	ldrb	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	759a      	strb	r2, [r3, #22]
}
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	200001dc 	.word	0x200001dc
 80020c0:	200001e0 	.word	0x200001e0

080020c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020c8:	f7fe fe34 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020cc:	480c      	ldr	r0, [pc, #48]	@ (8002100 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ce:	490d      	ldr	r1, [pc, #52]	@ (8002104 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d4:	e002      	b.n	80020dc <LoopCopyDataInit>

080020d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020da:	3304      	adds	r3, #4

080020dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e0:	d3f9      	bcc.n	80020d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e2:	4a0a      	ldr	r2, [pc, #40]	@ (800210c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002110 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e8:	e001      	b.n	80020ee <LoopFillZerobss>

080020ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020ec:	3204      	adds	r2, #4

080020ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f0:	d3fb      	bcc.n	80020ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020f2:	f002 fb2f 	bl	8004754 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f6:	f7fe fb13 	bl	8000720 <main>
  bx  lr    
 80020fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002104:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8002108:	080051c0 	.word	0x080051c0
  ldr r2, =_sbss
 800210c:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002110:	20000330 	.word	0x20000330

08002114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002114:	e7fe      	b.n	8002114 <ADC_IRQHandler>
	...

08002118 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800211c:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <HAL_Init+0x40>)
 8002122:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002126:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002128:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0a      	ldr	r2, [pc, #40]	@ (8002158 <HAL_Init+0x40>)
 800212e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002132:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a07      	ldr	r2, [pc, #28]	@ (8002158 <HAL_Init+0x40>)
 800213a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002140:	2003      	movs	r0, #3
 8002142:	f000 f931 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002146:	2000      	movs	r0, #0
 8002148:	f000 f808 	bl	800215c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800214c:	f7fe fd64 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023c00 	.word	0x40023c00

0800215c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_InitTick+0x54>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b12      	ldr	r3, [pc, #72]	@ (80021b4 <HAL_InitTick+0x58>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	4619      	mov	r1, r3
 800216e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002172:	fbb3 f3f1 	udiv	r3, r3, r1
 8002176:	fbb2 f3f3 	udiv	r3, r2, r3
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f93b 	bl	80023f6 <HAL_SYSTICK_Config>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e00e      	b.n	80021a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2b0f      	cmp	r3, #15
 800218e:	d80a      	bhi.n	80021a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002190:	2200      	movs	r2, #0
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	f04f 30ff 	mov.w	r0, #4294967295
 8002198:	f000 f911 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800219c:	4a06      	ldr	r2, [pc, #24]	@ (80021b8 <HAL_InitTick+0x5c>)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	e000      	b.n	80021a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000014 	.word	0x20000014
 80021b4:	2000004c 	.word	0x2000004c
 80021b8:	20000048 	.word	0x20000048

080021bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021c0:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_IncTick+0x20>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	461a      	mov	r2, r3
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_IncTick+0x24>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4413      	add	r3, r2
 80021cc:	4a04      	ldr	r2, [pc, #16]	@ (80021e0 <HAL_IncTick+0x24>)
 80021ce:	6013      	str	r3, [r2, #0]
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	2000004c 	.word	0x2000004c
 80021e0:	200001e4 	.word	0x200001e4

080021e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return uwTick;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_GetTick+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200001e4 	.word	0x200001e4

080021fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002204:	f7ff ffee 	bl	80021e4 <HAL_GetTick>
 8002208:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002214:	d005      	beq.n	8002222 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_Delay+0x44>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4413      	add	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002222:	bf00      	nop
 8002224:	f7ff ffde 	bl	80021e4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	429a      	cmp	r2, r3
 8002232:	d8f7      	bhi.n	8002224 <HAL_Delay+0x28>
  {
  }
}
 8002234:	bf00      	nop
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	2000004c 	.word	0x2000004c

08002244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800225a:	68ba      	ldr	r2, [r7, #8]
 800225c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800226c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002276:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <__NVIC_SetPriorityGrouping+0x44>)
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	60d3      	str	r3, [r2, #12]
}
 800227c:	bf00      	nop
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	0a1b      	lsrs	r3, r3, #8
 8002296:	f003 0307 	and.w	r3, r3, #7
}
 800229a:	4618      	mov	r0, r3
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000ed00 	.word	0xe000ed00

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	@ (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	@ (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	@ 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	@ 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	@ (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff47 	bl	8002244 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff5c 	bl	800228c <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffb0 	bl	8002364 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	@ 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e165      	b.n	80026f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8154 	bne.w	80026f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	2b02      	cmp	r3, #2
 8002460:	d130      	bne.n	80024c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0201 	and.w	r2, r3, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d017      	beq.n	8002500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80ae 	beq.w	80026f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b5d      	ldr	r3, [pc, #372]	@ (8002710 <HAL_GPIO_Init+0x300>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	4a5c      	ldr	r2, [pc, #368]	@ (8002710 <HAL_GPIO_Init+0x300>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002710 <HAL_GPIO_Init+0x300>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b2:	4a58      	ldr	r2, [pc, #352]	@ (8002714 <HAL_GPIO_Init+0x304>)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002718 <HAL_GPIO_Init+0x308>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d025      	beq.n	800262a <HAL_GPIO_Init+0x21a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a4e      	ldr	r2, [pc, #312]	@ (800271c <HAL_GPIO_Init+0x30c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d01f      	beq.n	8002626 <HAL_GPIO_Init+0x216>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002720 <HAL_GPIO_Init+0x310>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d019      	beq.n	8002622 <HAL_GPIO_Init+0x212>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002724 <HAL_GPIO_Init+0x314>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_GPIO_Init+0x20e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002728 <HAL_GPIO_Init+0x318>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d00d      	beq.n	800261a <HAL_GPIO_Init+0x20a>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4a      	ldr	r2, [pc, #296]	@ (800272c <HAL_GPIO_Init+0x31c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d007      	beq.n	8002616 <HAL_GPIO_Init+0x206>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a49      	ldr	r2, [pc, #292]	@ (8002730 <HAL_GPIO_Init+0x320>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d101      	bne.n	8002612 <HAL_GPIO_Init+0x202>
 800260e:	2306      	movs	r3, #6
 8002610:	e00c      	b.n	800262c <HAL_GPIO_Init+0x21c>
 8002612:	2307      	movs	r3, #7
 8002614:	e00a      	b.n	800262c <HAL_GPIO_Init+0x21c>
 8002616:	2305      	movs	r3, #5
 8002618:	e008      	b.n	800262c <HAL_GPIO_Init+0x21c>
 800261a:	2304      	movs	r3, #4
 800261c:	e006      	b.n	800262c <HAL_GPIO_Init+0x21c>
 800261e:	2303      	movs	r3, #3
 8002620:	e004      	b.n	800262c <HAL_GPIO_Init+0x21c>
 8002622:	2302      	movs	r3, #2
 8002624:	e002      	b.n	800262c <HAL_GPIO_Init+0x21c>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_GPIO_Init+0x21c>
 800262a:	2300      	movs	r3, #0
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	f002 0203 	and.w	r2, r2, #3
 8002632:	0092      	lsls	r2, r2, #2
 8002634:	4093      	lsls	r3, r2
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800263c:	4935      	ldr	r1, [pc, #212]	@ (8002714 <HAL_GPIO_Init+0x304>)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	089b      	lsrs	r3, r3, #2
 8002642:	3302      	adds	r3, #2
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800264a:	4b3a      	ldr	r3, [pc, #232]	@ (8002734 <HAL_GPIO_Init+0x324>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800266e:	4a31      	ldr	r2, [pc, #196]	@ (8002734 <HAL_GPIO_Init+0x324>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002674:	4b2f      	ldr	r3, [pc, #188]	@ (8002734 <HAL_GPIO_Init+0x324>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002698:	4a26      	ldr	r2, [pc, #152]	@ (8002734 <HAL_GPIO_Init+0x324>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800269e:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026ec:	4a11      	ldr	r2, [pc, #68]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61fb      	str	r3, [r7, #28]
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	f67f ae96 	bls.w	800242c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	3724      	adds	r7, #36	@ 0x24
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800
 8002714:	40013800 	.word	0x40013800
 8002718:	40020000 	.word	0x40020000
 800271c:	40020400 	.word	0x40020400
 8002720:	40020800 	.word	0x40020800
 8002724:	40020c00 	.word	0x40020c00
 8002728:	40021000 	.word	0x40021000
 800272c:	40021400 	.word	0x40021400
 8002730:	40021800 	.word	0x40021800
 8002734:	40013c00 	.word	0x40013c00

08002738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	460b      	mov	r3, r1
 8002742:	807b      	strh	r3, [r7, #2]
 8002744:	4613      	mov	r3, r2
 8002746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d003      	beq.n	8002756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800274e:	887a      	ldrh	r2, [r7, #2]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002754:	e003      	b.n	800275e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002756:	887b      	ldrh	r3, [r7, #2]
 8002758:	041a      	lsls	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	619a      	str	r2, [r3, #24]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
	...

0800276c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d101      	bne.n	8002780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e0cc      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002780:	4b68      	ldr	r3, [pc, #416]	@ (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d90c      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278e:	4b65      	ldr	r3, [pc, #404]	@ (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b63      	ldr	r3, [pc, #396]	@ (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d001      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0b8      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0304 	and.w	r3, r3, #4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c0:	4b59      	ldr	r3, [pc, #356]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	4a58      	ldr	r2, [pc, #352]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0308 	and.w	r3, r3, #8
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027d8:	4b53      	ldr	r3, [pc, #332]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	4a52      	ldr	r2, [pc, #328]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e4:	4b50      	ldr	r3, [pc, #320]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	494d      	ldr	r1, [pc, #308]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d044      	beq.n	800288c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d107      	bne.n	800281a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280a:	4b47      	ldr	r3, [pc, #284]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d119      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e07f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d003      	beq.n	800282a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002826:	2b03      	cmp	r3, #3
 8002828:	d107      	bne.n	800283a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282a:	4b3f      	ldr	r3, [pc, #252]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e06f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800283a:	4b3b      	ldr	r3, [pc, #236]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e067      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800284a:	4b37      	ldr	r3, [pc, #220]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f023 0203 	bic.w	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4934      	ldr	r1, [pc, #208]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	4313      	orrs	r3, r2
 800285a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800285c:	f7ff fcc2 	bl	80021e4 <HAL_GetTick>
 8002860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002862:	e00a      	b.n	800287a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002864:	f7ff fcbe 	bl	80021e4 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e04f      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287a:	4b2b      	ldr	r3, [pc, #172]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 020c 	and.w	r2, r3, #12
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d1eb      	bne.n	8002864 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800288c:	4b25      	ldr	r3, [pc, #148]	@ (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d20c      	bcs.n	80028b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800289a:	4b22      	ldr	r3, [pc, #136]	@ (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	4b20      	ldr	r3, [pc, #128]	@ (8002924 <HAL_RCC_ClockConfig+0x1b8>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d001      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e032      	b.n	800291a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d008      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c0:	4b19      	ldr	r3, [pc, #100]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	4916      	ldr	r1, [pc, #88]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0308 	and.w	r3, r3, #8
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d009      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028de:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	490e      	ldr	r1, [pc, #56]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f2:	f000 f855 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 80028f6:	4602      	mov	r2, r0
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_RCC_ClockConfig+0x1bc>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	490a      	ldr	r1, [pc, #40]	@ (800292c <HAL_RCC_ClockConfig+0x1c0>)
 8002904:	5ccb      	ldrb	r3, [r1, r3]
 8002906:	fa22 f303 	lsr.w	r3, r2, r3
 800290a:	4a09      	ldr	r2, [pc, #36]	@ (8002930 <HAL_RCC_ClockConfig+0x1c4>)
 800290c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_RCC_ClockConfig+0x1c8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fc22 	bl	800215c <HAL_InitTick>

  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023c00 	.word	0x40023c00
 8002928:	40023800 	.word	0x40023800
 800292c:	08005164 	.word	0x08005164
 8002930:	20000014 	.word	0x20000014
 8002934:	20000048 	.word	0x20000048

08002938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002938:	b480      	push	{r7}
 800293a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800293c:	4b03      	ldr	r3, [pc, #12]	@ (800294c <HAL_RCC_GetHCLKFreq+0x14>)
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000014 	.word	0x20000014

08002950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002954:	f7ff fff0 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002958:	4602      	mov	r2, r0
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	0a9b      	lsrs	r3, r3, #10
 8002960:	f003 0307 	and.w	r3, r3, #7
 8002964:	4903      	ldr	r1, [pc, #12]	@ (8002974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002966:	5ccb      	ldrb	r3, [r1, r3]
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40023800 	.word	0x40023800
 8002974:	08005174 	.word	0x08005174

08002978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800297c:	f7ff ffdc 	bl	8002938 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0b5b      	lsrs	r3, r3, #13
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK2Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	08005174 	.word	0x08005174

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b0ae      	sub	sp, #184	@ 0xb8
 80029a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c6:	4bcb      	ldr	r3, [pc, #812]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b0c      	cmp	r3, #12
 80029d0:	f200 8206 	bhi.w	8002de0 <HAL_RCC_GetSysClockFreq+0x440>
 80029d4:	a201      	add	r2, pc, #4	@ (adr r2, 80029dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80029d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029da:	bf00      	nop
 80029dc:	08002a11 	.word	0x08002a11
 80029e0:	08002de1 	.word	0x08002de1
 80029e4:	08002de1 	.word	0x08002de1
 80029e8:	08002de1 	.word	0x08002de1
 80029ec:	08002a19 	.word	0x08002a19
 80029f0:	08002de1 	.word	0x08002de1
 80029f4:	08002de1 	.word	0x08002de1
 80029f8:	08002de1 	.word	0x08002de1
 80029fc:	08002a21 	.word	0x08002a21
 8002a00:	08002de1 	.word	0x08002de1
 8002a04:	08002de1 	.word	0x08002de1
 8002a08:	08002de1 	.word	0x08002de1
 8002a0c:	08002c11 	.word	0x08002c11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4bb9      	ldr	r3, [pc, #740]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a16:	e1e7      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a18:	4bb8      	ldr	r3, [pc, #736]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a1e:	e1e3      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a20:	4bb4      	ldr	r3, [pc, #720]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a2c:	4bb1      	ldr	r3, [pc, #708]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d071      	beq.n	8002b1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a38:	4bae      	ldr	r3, [pc, #696]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	099b      	lsrs	r3, r3, #6
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a54:	2300      	movs	r3, #0
 8002a56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a5e:	4622      	mov	r2, r4
 8002a60:	462b      	mov	r3, r5
 8002a62:	f04f 0000 	mov.w	r0, #0
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	0159      	lsls	r1, r3, #5
 8002a6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a70:	0150      	lsls	r0, r2, #5
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4621      	mov	r1, r4
 8002a78:	1a51      	subs	r1, r2, r1
 8002a7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002a7c:	4629      	mov	r1, r5
 8002a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002a90:	4649      	mov	r1, r9
 8002a92:	018b      	lsls	r3, r1, #6
 8002a94:	4641      	mov	r1, r8
 8002a96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a9a:	4641      	mov	r1, r8
 8002a9c:	018a      	lsls	r2, r1, #6
 8002a9e:	4641      	mov	r1, r8
 8002aa0:	1a51      	subs	r1, r2, r1
 8002aa2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002aa4:	4649      	mov	r1, r9
 8002aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ab8:	4649      	mov	r1, r9
 8002aba:	00cb      	lsls	r3, r1, #3
 8002abc:	4641      	mov	r1, r8
 8002abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ac2:	4641      	mov	r1, r8
 8002ac4:	00ca      	lsls	r2, r1, #3
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	4622      	mov	r2, r4
 8002ace:	189b      	adds	r3, r3, r2
 8002ad0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ad2:	462b      	mov	r3, r5
 8002ad4:	460a      	mov	r2, r1
 8002ad6:	eb42 0303 	adc.w	r3, r2, r3
 8002ada:	637b      	str	r3, [r7, #52]	@ 0x34
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ae8:	4629      	mov	r1, r5
 8002aea:	024b      	lsls	r3, r1, #9
 8002aec:	4621      	mov	r1, r4
 8002aee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002af2:	4621      	mov	r1, r4
 8002af4:	024a      	lsls	r2, r1, #9
 8002af6:	4610      	mov	r0, r2
 8002af8:	4619      	mov	r1, r3
 8002afa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b0c:	f7fd fbd8 	bl	80002c0 <__aeabi_uldivmod>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4613      	mov	r3, r2
 8002b16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b1a:	e067      	b.n	8002bec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1c:	4b75      	ldr	r3, [pc, #468]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	099b      	lsrs	r3, r3, #6
 8002b22:	2200      	movs	r2, #0
 8002b24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b28:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b36:	2300      	movs	r3, #0
 8002b38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b50:	0150      	lsls	r0, r2, #5
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4621      	mov	r1, r4
 8002b58:	1a51      	subs	r1, r2, r1
 8002b5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002b70:	4649      	mov	r1, r9
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	4641      	mov	r1, r8
 8002b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	018a      	lsls	r2, r1, #6
 8002b7e:	4641      	mov	r1, r8
 8002b80:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b84:	4649      	mov	r1, r9
 8002b86:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b8a:	f04f 0200 	mov.w	r2, #0
 8002b8e:	f04f 0300 	mov.w	r3, #0
 8002b92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002b96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002b9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b9e:	4692      	mov	sl, r2
 8002ba0:	469b      	mov	fp, r3
 8002ba2:	4623      	mov	r3, r4
 8002ba4:	eb1a 0303 	adds.w	r3, sl, r3
 8002ba8:	623b      	str	r3, [r7, #32]
 8002baa:	462b      	mov	r3, r5
 8002bac:	eb4b 0303 	adc.w	r3, fp, r3
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002bbe:	4629      	mov	r1, r5
 8002bc0:	028b      	lsls	r3, r1, #10
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc8:	4621      	mov	r1, r4
 8002bca:	028a      	lsls	r2, r1, #10
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002bd8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002bda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002bde:	f7fd fb6f 	bl	80002c0 <__aeabi_uldivmod>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4613      	mov	r3, r2
 8002be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bec:	4b41      	ldr	r3, [pc, #260]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	0c1b      	lsrs	r3, r3, #16
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c0e:	e0eb      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c10:	4b38      	ldr	r3, [pc, #224]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c1c:	4b35      	ldr	r3, [pc, #212]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d06b      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c28:	4b32      	ldr	r3, [pc, #200]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	099b      	lsrs	r3, r3, #6
 8002c2e:	2200      	movs	r2, #0
 8002c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c44:	4622      	mov	r2, r4
 8002c46:	462b      	mov	r3, r5
 8002c48:	f04f 0000 	mov.w	r0, #0
 8002c4c:	f04f 0100 	mov.w	r1, #0
 8002c50:	0159      	lsls	r1, r3, #5
 8002c52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c56:	0150      	lsls	r0, r2, #5
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4621      	mov	r1, r4
 8002c5e:	1a51      	subs	r1, r2, r1
 8002c60:	61b9      	str	r1, [r7, #24]
 8002c62:	4629      	mov	r1, r5
 8002c64:	eb63 0301 	sbc.w	r3, r3, r1
 8002c68:	61fb      	str	r3, [r7, #28]
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c76:	4659      	mov	r1, fp
 8002c78:	018b      	lsls	r3, r1, #6
 8002c7a:	4651      	mov	r1, sl
 8002c7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c80:	4651      	mov	r1, sl
 8002c82:	018a      	lsls	r2, r1, #6
 8002c84:	4651      	mov	r1, sl
 8002c86:	ebb2 0801 	subs.w	r8, r2, r1
 8002c8a:	4659      	mov	r1, fp
 8002c8c:	eb63 0901 	sbc.w	r9, r3, r1
 8002c90:	f04f 0200 	mov.w	r2, #0
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ca0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ca4:	4690      	mov	r8, r2
 8002ca6:	4699      	mov	r9, r3
 8002ca8:	4623      	mov	r3, r4
 8002caa:	eb18 0303 	adds.w	r3, r8, r3
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	462b      	mov	r3, r5
 8002cb2:	eb49 0303 	adc.w	r3, r9, r3
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	024b      	lsls	r3, r1, #9
 8002cc8:	4621      	mov	r1, r4
 8002cca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cce:	4621      	mov	r1, r4
 8002cd0:	024a      	lsls	r2, r1, #9
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cda:	2200      	movs	r2, #0
 8002cdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cde:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002ce0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002ce4:	f7fd faec 	bl	80002c0 <__aeabi_uldivmod>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	460b      	mov	r3, r1
 8002cec:	4613      	mov	r3, r2
 8002cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cf2:	e065      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x420>
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	00f42400 	.word	0x00f42400
 8002cfc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d00:	4b3d      	ldr	r3, [pc, #244]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	2200      	movs	r2, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d10:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d12:	2300      	movs	r3, #0
 8002d14:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d16:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d1a:	4642      	mov	r2, r8
 8002d1c:	464b      	mov	r3, r9
 8002d1e:	f04f 0000 	mov.w	r0, #0
 8002d22:	f04f 0100 	mov.w	r1, #0
 8002d26:	0159      	lsls	r1, r3, #5
 8002d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2c:	0150      	lsls	r0, r2, #5
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4641      	mov	r1, r8
 8002d34:	1a51      	subs	r1, r2, r1
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	4649      	mov	r1, r9
 8002d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d4c:	4659      	mov	r1, fp
 8002d4e:	018b      	lsls	r3, r1, #6
 8002d50:	4651      	mov	r1, sl
 8002d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d56:	4651      	mov	r1, sl
 8002d58:	018a      	lsls	r2, r1, #6
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	1a54      	subs	r4, r2, r1
 8002d5e:	4659      	mov	r1, fp
 8002d60:	eb63 0501 	sbc.w	r5, r3, r1
 8002d64:	f04f 0200 	mov.w	r2, #0
 8002d68:	f04f 0300 	mov.w	r3, #0
 8002d6c:	00eb      	lsls	r3, r5, #3
 8002d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d72:	00e2      	lsls	r2, r4, #3
 8002d74:	4614      	mov	r4, r2
 8002d76:	461d      	mov	r5, r3
 8002d78:	4643      	mov	r3, r8
 8002d7a:	18e3      	adds	r3, r4, r3
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	464b      	mov	r3, r9
 8002d80:	eb45 0303 	adc.w	r3, r5, r3
 8002d84:	607b      	str	r3, [r7, #4]
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d92:	4629      	mov	r1, r5
 8002d94:	028b      	lsls	r3, r1, #10
 8002d96:	4621      	mov	r1, r4
 8002d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d9c:	4621      	mov	r1, r4
 8002d9e:	028a      	lsls	r2, r1, #10
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002da8:	2200      	movs	r2, #0
 8002daa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002dae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002db2:	f7fd fa85 	bl	80002c0 <__aeabi_uldivmod>
 8002db6:	4602      	mov	r2, r0
 8002db8:	460b      	mov	r3, r1
 8002dba:	4613      	mov	r3, r2
 8002dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	0f1b      	lsrs	r3, r3, #28
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002dce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002dde:	e003      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de0:	4b06      	ldr	r3, [pc, #24]	@ (8002dfc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002de2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002de6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	37b8      	adds	r7, #184	@ 0xb8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	00f42400 	.word	0x00f42400

08002e00 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e28d      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8083 	beq.w	8002f26 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002e20:	4b94      	ldr	r3, [pc, #592]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d019      	beq.n	8002e60 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e2c:	4b91      	ldr	r3, [pc, #580]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 030c 	and.w	r3, r3, #12
        || \
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d106      	bne.n	8002e46 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e38:	4b8e      	ldr	r3, [pc, #568]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e44:	d00c      	beq.n	8002e60 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e46:	4b8b      	ldr	r3, [pc, #556]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002e4e:	2b0c      	cmp	r3, #12
 8002e50:	d112      	bne.n	8002e78 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e52:	4b88      	ldr	r3, [pc, #544]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e5e:	d10b      	bne.n	8002e78 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e60:	4b84      	ldr	r3, [pc, #528]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d05b      	beq.n	8002f24 <HAL_RCC_OscConfig+0x124>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d157      	bne.n	8002f24 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	e25a      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e80:	d106      	bne.n	8002e90 <HAL_RCC_OscConfig+0x90>
 8002e82:	4b7c      	ldr	r3, [pc, #496]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a7b      	ldr	r2, [pc, #492]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e01d      	b.n	8002ecc <HAL_RCC_OscConfig+0xcc>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e98:	d10c      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xb4>
 8002e9a:	4b76      	ldr	r3, [pc, #472]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a75      	ldr	r2, [pc, #468]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea4:	6013      	str	r3, [r2, #0]
 8002ea6:	4b73      	ldr	r3, [pc, #460]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a72      	ldr	r2, [pc, #456]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002eac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb0:	6013      	str	r3, [r2, #0]
 8002eb2:	e00b      	b.n	8002ecc <HAL_RCC_OscConfig+0xcc>
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6e      	ldr	r2, [pc, #440]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ebe:	6013      	str	r3, [r2, #0]
 8002ec0:	4b6c      	ldr	r3, [pc, #432]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a6b      	ldr	r2, [pc, #428]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002eca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d013      	beq.n	8002efc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed4:	f7ff f986 	bl	80021e4 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002edc:	f7ff f982 	bl	80021e4 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b64      	cmp	r3, #100	@ 0x64
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e21f      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	4b61      	ldr	r3, [pc, #388]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0xdc>
 8002efa:	e014      	b.n	8002f26 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7ff f972 	bl	80021e4 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f04:	f7ff f96e 	bl	80021e4 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e20b      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	4b57      	ldr	r3, [pc, #348]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x104>
 8002f22:	e000      	b.n	8002f26 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d06f      	beq.n	8003012 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002f32:	4b50      	ldr	r3, [pc, #320]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d017      	beq.n	8002f6e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f3e:	4b4d      	ldr	r3, [pc, #308]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d105      	bne.n	8002f56 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00b      	beq.n	8002f6e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f56:	4b47      	ldr	r3, [pc, #284]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002f5e:	2b0c      	cmp	r3, #12
 8002f60:	d11c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f62:	4b44      	ldr	r3, [pc, #272]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d116      	bne.n	8002f9c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6e:	4b41      	ldr	r3, [pc, #260]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d005      	beq.n	8002f86 <HAL_RCC_OscConfig+0x186>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d001      	beq.n	8002f86 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e1d3      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	4937      	ldr	r1, [pc, #220]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f9a:	e03a      	b.n	8003012 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa4:	4b34      	ldr	r3, [pc, #208]	@ (8003078 <HAL_RCC_OscConfig+0x278>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002faa:	f7ff f91b 	bl	80021e4 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	e008      	b.n	8002fc4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb2:	f7ff f917 	bl	80021e4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d901      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e1b4      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d0f0      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fd0:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691b      	ldr	r3, [r3, #16]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	4925      	ldr	r1, [pc, #148]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	600b      	str	r3, [r1, #0]
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe6:	4b24      	ldr	r3, [pc, #144]	@ (8003078 <HAL_RCC_OscConfig+0x278>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7ff f8fa 	bl	80021e4 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	e008      	b.n	8003006 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff4:	f7ff f8f6 	bl	80021e4 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d901      	bls.n	8003006 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e193      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	4b1b      	ldr	r3, [pc, #108]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0308 	and.w	r3, r3, #8
 800301a:	2b00      	cmp	r3, #0
 800301c:	d036      	beq.n	800308c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d016      	beq.n	8003054 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_RCC_OscConfig+0x27c>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7ff f8da 	bl	80021e4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7ff f8d6 	bl	80021e4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e173      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003046:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_OscConfig+0x274>)
 8003048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x234>
 8003052:	e01b      	b.n	800308c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003054:	4b09      	ldr	r3, [pc, #36]	@ (800307c <HAL_RCC_OscConfig+0x27c>)
 8003056:	2200      	movs	r2, #0
 8003058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7ff f8c3 	bl	80021e4 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003060:	e00e      	b.n	8003080 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003062:	f7ff f8bf 	bl	80021e4 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d907      	bls.n	8003080 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e15c      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
 8003074:	40023800 	.word	0x40023800
 8003078:	42470000 	.word	0x42470000
 800307c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	4b8a      	ldr	r3, [pc, #552]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1ea      	bne.n	8003062 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8097 	beq.w	80031c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800309a:	2300      	movs	r3, #0
 800309c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309e:	4b83      	ldr	r3, [pc, #524]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10f      	bne.n	80030ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	4b7f      	ldr	r3, [pc, #508]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	4a7e      	ldr	r2, [pc, #504]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 80030b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80030ba:	4b7c      	ldr	r3, [pc, #496]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	60bb      	str	r3, [r7, #8]
 80030c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c6:	2301      	movs	r3, #1
 80030c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ca:	4b79      	ldr	r3, [pc, #484]	@ (80032b0 <HAL_RCC_OscConfig+0x4b0>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d118      	bne.n	8003108 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d6:	4b76      	ldr	r3, [pc, #472]	@ (80032b0 <HAL_RCC_OscConfig+0x4b0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a75      	ldr	r2, [pc, #468]	@ (80032b0 <HAL_RCC_OscConfig+0x4b0>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030e2:	f7ff f87f 	bl	80021e4 <HAL_GetTick>
 80030e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	e008      	b.n	80030fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ea:	f7ff f87b 	bl	80021e4 <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d901      	bls.n	80030fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e118      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030fc:	4b6c      	ldr	r3, [pc, #432]	@ (80032b0 <HAL_RCC_OscConfig+0x4b0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0f0      	beq.n	80030ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d106      	bne.n	800311e <HAL_RCC_OscConfig+0x31e>
 8003110:	4b66      	ldr	r3, [pc, #408]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003114:	4a65      	ldr	r2, [pc, #404]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6713      	str	r3, [r2, #112]	@ 0x70
 800311c:	e01c      	b.n	8003158 <HAL_RCC_OscConfig+0x358>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b05      	cmp	r3, #5
 8003124:	d10c      	bne.n	8003140 <HAL_RCC_OscConfig+0x340>
 8003126:	4b61      	ldr	r3, [pc, #388]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800312a:	4a60      	ldr	r2, [pc, #384]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 800312c:	f043 0304 	orr.w	r3, r3, #4
 8003130:	6713      	str	r3, [r2, #112]	@ 0x70
 8003132:	4b5e      	ldr	r3, [pc, #376]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003136:	4a5d      	ldr	r2, [pc, #372]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	@ 0x70
 800313e:	e00b      	b.n	8003158 <HAL_RCC_OscConfig+0x358>
 8003140:	4b5a      	ldr	r3, [pc, #360]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003144:	4a59      	ldr	r2, [pc, #356]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003146:	f023 0301 	bic.w	r3, r3, #1
 800314a:	6713      	str	r3, [r2, #112]	@ 0x70
 800314c:	4b57      	ldr	r3, [pc, #348]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 800314e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003150:	4a56      	ldr	r2, [pc, #344]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003152:	f023 0304 	bic.w	r3, r3, #4
 8003156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d015      	beq.n	800318c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7ff f840 	bl	80021e4 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003166:	e00a      	b.n	800317e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003168:	f7ff f83c 	bl	80021e4 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e0d7      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317e:	4b4b      	ldr	r3, [pc, #300]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d0ee      	beq.n	8003168 <HAL_RCC_OscConfig+0x368>
 800318a:	e014      	b.n	80031b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7ff f82a 	bl	80021e4 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003192:	e00a      	b.n	80031aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003194:	f7ff f826 	bl	80021e4 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e0c1      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031aa:	4b40      	ldr	r3, [pc, #256]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ee      	bne.n	8003194 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031b6:	7dfb      	ldrb	r3, [r7, #23]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b3b      	ldr	r3, [pc, #236]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c0:	4a3a      	ldr	r2, [pc, #232]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80ad 	beq.w	800332c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d2:	4b36      	ldr	r3, [pc, #216]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d060      	beq.n	80032a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d145      	bne.n	8003272 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b33      	ldr	r3, [pc, #204]	@ (80032b4 <HAL_RCC_OscConfig+0x4b4>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ec:	f7fe fffa 	bl	80021e4 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fff6 	bl	80021e4 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e093      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003206:	4b29      	ldr	r3, [pc, #164]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69da      	ldr	r2, [r3, #28]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	491b      	ldr	r1, [pc, #108]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003244:	4b1b      	ldr	r3, [pc, #108]	@ (80032b4 <HAL_RCC_OscConfig+0x4b4>)
 8003246:	2201      	movs	r2, #1
 8003248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324a:	f7fe ffcb 	bl	80021e4 <HAL_GetTick>
 800324e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003250:	e008      	b.n	8003264 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003252:	f7fe ffc7 	bl	80021e4 <HAL_GetTick>
 8003256:	4602      	mov	r2, r0
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e064      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003264:	4b11      	ldr	r3, [pc, #68]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d0f0      	beq.n	8003252 <HAL_RCC_OscConfig+0x452>
 8003270:	e05c      	b.n	800332c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003272:	4b10      	ldr	r3, [pc, #64]	@ (80032b4 <HAL_RCC_OscConfig+0x4b4>)
 8003274:	2200      	movs	r2, #0
 8003276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003278:	f7fe ffb4 	bl	80021e4 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003280:	f7fe ffb0 	bl	80021e4 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b02      	cmp	r3, #2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e04d      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003292:	4b06      	ldr	r3, [pc, #24]	@ (80032ac <HAL_RCC_OscConfig+0x4ac>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1f0      	bne.n	8003280 <HAL_RCC_OscConfig+0x480>
 800329e:	e045      	b.n	800332c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e040      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40007000 	.word	0x40007000
 80032b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003338 <HAL_RCC_OscConfig+0x538>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d030      	beq.n	8003328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d129      	bne.n	8003328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032de:	429a      	cmp	r2, r3
 80032e0:	d122      	bne.n	8003328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032e8:	4013      	ands	r3, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d119      	bne.n	8003328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	3b01      	subs	r3, #1
 8003302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d10f      	bne.n	8003328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d107      	bne.n	8003328 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003322:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e000      	b.n	800332e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800

0800333c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e07b      	b.n	8003446 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	2b00      	cmp	r3, #0
 8003354:	d108      	bne.n	8003368 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800335e:	d009      	beq.n	8003374 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
 8003366:	e005      	b.n	8003374 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fd fbca 	bl	8000b28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2202      	movs	r2, #2
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033e4:	431a      	orrs	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f8:	ea42 0103 	orr.w	r1, r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003400:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	f003 0104 	and.w	r1, r3, #4
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800341a:	f003 0210 	and.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	69da      	ldr	r2, [r3, #28]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003434:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b088      	sub	sp, #32
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800345e:	f7fe fec1 	bl	80021e4 <HAL_GetTick>
 8003462:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003474:	2302      	movs	r3, #2
 8003476:	e12a      	b.n	80036ce <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <HAL_SPI_Transmit+0x36>
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e122      	b.n	80036ce <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_SPI_Transmit+0x48>
 8003492:	2302      	movs	r3, #2
 8003494:	e11b      	b.n	80036ce <HAL_SPI_Transmit+0x280>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2203      	movs	r2, #3
 80034a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	88fa      	ldrh	r2, [r7, #6]
 80034b6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	88fa      	ldrh	r2, [r7, #6]
 80034bc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2200      	movs	r2, #0
 80034c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034e4:	d10f      	bne.n	8003506 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003510:	2b40      	cmp	r3, #64	@ 0x40
 8003512:	d007      	beq.n	8003524 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800352c:	d152      	bne.n	80035d4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_SPI_Transmit+0xee>
 8003536:	8b7b      	ldrh	r3, [r7, #26]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d145      	bne.n	80035c8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	881a      	ldrh	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800354c:	1c9a      	adds	r2, r3, #2
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003560:	e032      	b.n	80035c8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b02      	cmp	r3, #2
 800356e:	d112      	bne.n	8003596 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	881a      	ldrh	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003580:	1c9a      	adds	r2, r3, #2
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003594:	e018      	b.n	80035c8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003596:	f7fe fe25 	bl	80021e4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d803      	bhi.n	80035ae <HAL_SPI_Transmit+0x160>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d102      	bne.n	80035b4 <HAL_SPI_Transmit+0x166>
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d109      	bne.n	80035c8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e082      	b.n	80036ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1c7      	bne.n	8003562 <HAL_SPI_Transmit+0x114>
 80035d2:	e053      	b.n	800367c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d002      	beq.n	80035e2 <HAL_SPI_Transmit+0x194>
 80035dc:	8b7b      	ldrh	r3, [r7, #26]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d147      	bne.n	8003672 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	330c      	adds	r3, #12
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003608:	e033      	b.n	8003672 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b02      	cmp	r3, #2
 8003616:	d113      	bne.n	8003640 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	7812      	ldrb	r2, [r2, #0]
 8003624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800363e:	e018      	b.n	8003672 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003640:	f7fe fdd0 	bl	80021e4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d803      	bhi.n	8003658 <HAL_SPI_Transmit+0x20a>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003656:	d102      	bne.n	800365e <HAL_SPI_Transmit+0x210>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e02d      	b.n	80036ce <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1c6      	bne.n	800360a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800367c:	69fa      	ldr	r2, [r7, #28]
 800367e:	6839      	ldr	r1, [r7, #0]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 fbd9 	bl	8003e38 <SPI_EndRxTxTransaction>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10a      	bne.n	80036b0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80036cc:	2300      	movs	r3, #0
  }
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3720      	adds	r7, #32
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b088      	sub	sp, #32
 80036da:	af02      	add	r7, sp, #8
 80036dc:	60f8      	str	r0, [r7, #12]
 80036de:	60b9      	str	r1, [r7, #8]
 80036e0:	603b      	str	r3, [r7, #0]
 80036e2:	4613      	mov	r3, r2
 80036e4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d001      	beq.n	80036f6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
 80036f4:	e104      	b.n	8003900 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_SPI_Receive+0x2c>
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e0fc      	b.n	8003900 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800370e:	d112      	bne.n	8003736 <HAL_SPI_Receive+0x60>
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10e      	bne.n	8003736 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2204      	movs	r2, #4
 800371c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003720:	88fa      	ldrh	r2, [r7, #6]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	4613      	mov	r3, r2
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f8eb 	bl	8003908 <HAL_SPI_TransmitReceive>
 8003732:	4603      	mov	r3, r0
 8003734:	e0e4      	b.n	8003900 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003736:	f7fe fd55 	bl	80021e4 <HAL_GetTick>
 800373a:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_SPI_Receive+0x74>
 8003746:	2302      	movs	r3, #2
 8003748:	e0da      	b.n	8003900 <HAL_SPI_Receive+0x22a>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2204      	movs	r2, #4
 8003756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003798:	d10f      	bne.n	80037ba <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037b8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c4:	2b40      	cmp	r3, #64	@ 0x40
 80037c6:	d007      	beq.n	80037d8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d170      	bne.n	80038c2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037e0:	e035      	b.n	800384e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d115      	bne.n	800381c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f103 020c 	add.w	r2, r3, #12
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fc:	7812      	ldrb	r2, [r2, #0]
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800381a:	e018      	b.n	800384e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381c:	f7fe fce2 	bl	80021e4 <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d803      	bhi.n	8003834 <HAL_SPI_Receive+0x15e>
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003832:	d102      	bne.n	800383a <HAL_SPI_Receive+0x164>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e058      	b.n	8003900 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1c4      	bne.n	80037e2 <HAL_SPI_Receive+0x10c>
 8003858:	e038      	b.n	80038cc <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d113      	bne.n	8003890 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003872:	b292      	uxth	r2, r2
 8003874:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800387a:	1c9a      	adds	r2, r3, #2
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003884:	b29b      	uxth	r3, r3
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800388e:	e018      	b.n	80038c2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003890:	f7fe fca8 	bl	80021e4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d803      	bhi.n	80038a8 <HAL_SPI_Receive+0x1d2>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a6:	d102      	bne.n	80038ae <HAL_SPI_Receive+0x1d8>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e01e      	b.n	8003900 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1c6      	bne.n	800385a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	6839      	ldr	r1, [r7, #0]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fa4b 	bl	8003d6c <SPI_EndRxTransaction>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d002      	beq.n	80038e2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80038fe:	2300      	movs	r3, #0
  }
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	@ 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003916:	2301      	movs	r3, #1
 8003918:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800391a:	f7fe fc63 	bl	80021e4 <HAL_GetTick>
 800391e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003926:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800392e:	887b      	ldrh	r3, [r7, #2]
 8003930:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003932:	7ffb      	ldrb	r3, [r7, #31]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d00c      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x4a>
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800393e:	d106      	bne.n	800394e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d102      	bne.n	800394e <HAL_SPI_TransmitReceive+0x46>
 8003948:	7ffb      	ldrb	r3, [r7, #31]
 800394a:	2b04      	cmp	r3, #4
 800394c:	d001      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800394e:	2302      	movs	r3, #2
 8003950:	e17f      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x5c>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_SPI_TransmitReceive+0x5c>
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e174      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800396e:	2b01      	cmp	r3, #1
 8003970:	d101      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x6e>
 8003972:	2302      	movs	r3, #2
 8003974:	e16d      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x34a>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b04      	cmp	r3, #4
 8003988:	d003      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2205      	movs	r2, #5
 800398e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	887a      	ldrh	r2, [r7, #2]
 80039a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	887a      	ldrh	r2, [r7, #2]
 80039a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	68ba      	ldr	r2, [r7, #8]
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	887a      	ldrh	r2, [r7, #2]
 80039ba:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2200      	movs	r2, #0
 80039c6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d2:	2b40      	cmp	r3, #64	@ 0x40
 80039d4:	d007      	beq.n	80039e6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ee:	d17e      	bne.n	8003aee <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_SPI_TransmitReceive+0xf6>
 80039f8:	8afb      	ldrh	r3, [r7, #22]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d16c      	bne.n	8003ad8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a02:	881a      	ldrh	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0e:	1c9a      	adds	r2, r3, #2
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a22:	e059      	b.n	8003ad8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d11b      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x162>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d016      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x162>
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d113      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a52:	1c9a      	adds	r2, r3, #2
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0301 	and.w	r3, r3, #1
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d119      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x1a4>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d014      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68da      	ldr	r2, [r3, #12]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	1c9a      	adds	r2, r3, #2
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003aac:	f7fe fb9a 	bl	80021e4 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d80d      	bhi.n	8003ad8 <HAL_SPI_TransmitReceive+0x1d0>
 8003abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac2:	d009      	beq.n	8003ad8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e0bc      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1a0      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x11c>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d19b      	bne.n	8003a24 <HAL_SPI_TransmitReceive+0x11c>
 8003aec:	e082      	b.n	8003bf4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_SPI_TransmitReceive+0x1f4>
 8003af6:	8afb      	ldrh	r3, [r7, #22]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d171      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	330c      	adds	r3, #12
 8003b06:	7812      	ldrb	r2, [r2, #0]
 8003b08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b22:	e05d      	b.n	8003be0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d11c      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x264>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d017      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x264>
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d114      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	330c      	adds	r3, #12
 8003b4c:	7812      	ldrb	r2, [r2, #0]
 8003b4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d119      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x2a6>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d014      	beq.n	8003bae <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003baa:	2301      	movs	r3, #1
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003bae:	f7fe fb19 	bl	80021e4 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d803      	bhi.n	8003bc6 <HAL_SPI_TransmitReceive+0x2be>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d102      	bne.n	8003bcc <HAL_SPI_TransmitReceive+0x2c4>
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d109      	bne.n	8003be0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e038      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d19c      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x21c>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d197      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bf4:	6a3a      	ldr	r2, [r7, #32]
 8003bf6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 f91d 	bl	8003e38 <SPI_EndRxTxTransaction>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d008      	beq.n	8003c16 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e01d      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c1e:	2300      	movs	r3, #0
 8003c20:	613b      	str	r3, [r7, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003c50:	2300      	movs	r3, #0
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3728      	adds	r7, #40	@ 0x28
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c6c:	f7fe faba 	bl	80021e4 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	4413      	add	r3, r2
 8003c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c7c:	f7fe fab2 	bl	80021e4 <HAL_GetTick>
 8003c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c82:	4b39      	ldr	r3, [pc, #228]	@ (8003d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	015b      	lsls	r3, r3, #5
 8003c88:	0d1b      	lsrs	r3, r3, #20
 8003c8a:	69fa      	ldr	r2, [r7, #28]
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c92:	e055      	b.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9a:	d051      	beq.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c9c:	f7fe faa2 	bl	80021e4 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d902      	bls.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d13d      	bne.n	8003d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cca:	d111      	bne.n	8003cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cd4:	d004      	beq.n	8003ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cde:	d107      	bne.n	8003cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cf8:	d10f      	bne.n	8003d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e018      	b.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	61fb      	str	r3, [r7, #28]
 8003d38:	e002      	b.n	8003d40 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	79fb      	ldrb	r3, [r7, #7]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d19a      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000014 	.word	0x20000014

08003d6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d80:	d111      	bne.n	8003da6 <SPI_EndRxTransaction+0x3a>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d8a:	d004      	beq.n	8003d96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d94:	d107      	bne.n	8003da6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dae:	d12a      	bne.n	8003e06 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003db8:	d012      	beq.n	8003de0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2180      	movs	r1, #128	@ 0x80
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f7ff ff49 	bl	8003c5c <SPI_WaitFlagStateUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d02d      	beq.n	8003e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e026      	b.n	8003e2e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2200      	movs	r2, #0
 8003de8:	2101      	movs	r1, #1
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f7ff ff36 	bl	8003c5c <SPI_WaitFlagStateUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01a      	beq.n	8003e2c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e013      	b.n	8003e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2101      	movs	r1, #1
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff ff23 	bl	8003c5c <SPI_WaitFlagStateUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e000      	b.n	8003e2e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff ff04 	bl	8003c5c <SPI_WaitFlagStateUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e032      	b.n	8003ed0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <SPI_EndRxTxTransaction+0xa0>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8003edc <SPI_EndRxTxTransaction+0xa4>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	0d5b      	lsrs	r3, r3, #21
 8003e76:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e88:	d112      	bne.n	8003eb0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2200      	movs	r2, #0
 8003e92:	2180      	movs	r1, #128	@ 0x80
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7ff fee1 	bl	8003c5c <SPI_WaitFlagStateUntilTimeout>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d016      	beq.n	8003ece <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea4:	f043 0220 	orr.w	r2, r3, #32
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e00f      	b.n	8003ed0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec6:	2b80      	cmp	r3, #128	@ 0x80
 8003ec8:	d0f2      	beq.n	8003eb0 <SPI_EndRxTxTransaction+0x78>
 8003eca:	e000      	b.n	8003ece <SPI_EndRxTxTransaction+0x96>
        break;
 8003ecc:	bf00      	nop
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000014 	.word	0x20000014
 8003edc:	165e9f81 	.word	0x165e9f81

08003ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e042      	b.n	8003f78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fc ff50 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2224      	movs	r2, #36	@ 0x24
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f973 	bl	8004210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	@ 0x28
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d175      	bne.n	800408c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_UART_Transmit+0x2c>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e06e      	b.n	800408e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2221      	movs	r2, #33	@ 0x21
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fbe:	f7fe f911 	bl	80021e4 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd8:	d108      	bne.n	8003fec <HAL_UART_Transmit+0x6c>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e003      	b.n	8003ff4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ff4:	e02e      	b.n	8004054 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2180      	movs	r1, #128	@ 0x80
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f848 	bl	8004096 <UART_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e03a      	b.n	800408e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	3302      	adds	r3, #2
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e007      	b.n	8004046 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	3301      	adds	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1cb      	bne.n	8003ff6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	2140      	movs	r1, #64	@ 0x40
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 f814 	bl	8004096 <UART_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e006      	b.n	800408e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a6:	e03b      	b.n	8004120 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d037      	beq.n	8004120 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b0:	f7fe f898 	bl	80021e4 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	6a3a      	ldr	r2, [r7, #32]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d302      	bcc.n	80040c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80040c0:	6a3b      	ldr	r3, [r7, #32]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e03a      	b.n	8004140 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d023      	beq.n	8004120 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b80      	cmp	r3, #128	@ 0x80
 80040dc:	d020      	beq.n	8004120 <UART_WaitOnFlagUntilTimeout+0x8a>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b40      	cmp	r3, #64	@ 0x40
 80040e2:	d01d      	beq.n	8004120 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d116      	bne.n	8004120 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	617b      	str	r3, [r7, #20]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	617b      	str	r3, [r7, #20]
 8004106:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f81d 	bl	8004148 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2208      	movs	r2, #8
 8004112:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e00f      	b.n	8004140 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4013      	ands	r3, r2
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	429a      	cmp	r2, r3
 800412e:	bf0c      	ite	eq
 8004130:	2301      	moveq	r3, #1
 8004132:	2300      	movne	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	461a      	mov	r2, r3
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	429a      	cmp	r2, r3
 800413c:	d0b4      	beq.n	80040a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b095      	sub	sp, #84	@ 0x54
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004162:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004170:	643a      	str	r2, [r7, #64]	@ 0x40
 8004172:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004176:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800417e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3314      	adds	r3, #20
 800418a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418c:	6a3b      	ldr	r3, [r7, #32]
 800418e:	e853 3f00 	ldrex	r3, [r3]
 8004192:	61fb      	str	r3, [r7, #28]
   return(result);
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f023 0301 	bic.w	r3, r3, #1
 800419a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80041a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041ac:	e841 2300 	strex	r3, r2, [r1]
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1e5      	bne.n	8004184 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d119      	bne.n	80041f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f023 0310 	bic.w	r3, r3, #16
 80041d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041e0:	61ba      	str	r2, [r7, #24]
 80041e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6979      	ldr	r1, [r7, #20]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	613b      	str	r3, [r7, #16]
   return(result);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e5      	bne.n	80041c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004202:	bf00      	nop
 8004204:	3754      	adds	r7, #84	@ 0x54
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr
	...

08004210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004214:	b0c0      	sub	sp, #256	@ 0x100
 8004216:	af00      	add	r7, sp, #0
 8004218:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	68d9      	ldr	r1, [r3, #12]
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	ea40 0301 	orr.w	r3, r0, r1
 8004238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423e:	689a      	ldr	r2, [r3, #8]
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	431a      	orrs	r2, r3
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	431a      	orrs	r2, r3
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	69db      	ldr	r3, [r3, #28]
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800425c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004268:	f021 010c 	bic.w	r1, r1, #12
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004276:	430b      	orrs	r3, r1
 8004278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800427a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428a:	6999      	ldr	r1, [r3, #24]
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	ea40 0301 	orr.w	r3, r0, r1
 8004296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	4b8f      	ldr	r3, [pc, #572]	@ (80044dc <UART_SetConfig+0x2cc>)
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d005      	beq.n	80042b0 <UART_SetConfig+0xa0>
 80042a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	4b8d      	ldr	r3, [pc, #564]	@ (80044e0 <UART_SetConfig+0x2d0>)
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d104      	bne.n	80042ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042b0:	f7fe fb62 	bl	8002978 <HAL_RCC_GetPCLK2Freq>
 80042b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042b8:	e003      	b.n	80042c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ba:	f7fe fb49 	bl	8002950 <HAL_RCC_GetPCLK1Freq>
 80042be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042cc:	f040 810c 	bne.w	80044e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042e2:	4622      	mov	r2, r4
 80042e4:	462b      	mov	r3, r5
 80042e6:	1891      	adds	r1, r2, r2
 80042e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042ea:	415b      	adcs	r3, r3
 80042ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042f2:	4621      	mov	r1, r4
 80042f4:	eb12 0801 	adds.w	r8, r2, r1
 80042f8:	4629      	mov	r1, r5
 80042fa:	eb43 0901 	adc.w	r9, r3, r1
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800430a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004312:	4690      	mov	r8, r2
 8004314:	4699      	mov	r9, r3
 8004316:	4623      	mov	r3, r4
 8004318:	eb18 0303 	adds.w	r3, r8, r3
 800431c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004320:	462b      	mov	r3, r5
 8004322:	eb49 0303 	adc.w	r3, r9, r3
 8004326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800432a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004336:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800433a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800433e:	460b      	mov	r3, r1
 8004340:	18db      	adds	r3, r3, r3
 8004342:	653b      	str	r3, [r7, #80]	@ 0x50
 8004344:	4613      	mov	r3, r2
 8004346:	eb42 0303 	adc.w	r3, r2, r3
 800434a:	657b      	str	r3, [r7, #84]	@ 0x54
 800434c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004354:	f7fb ffb4 	bl	80002c0 <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4b61      	ldr	r3, [pc, #388]	@ (80044e4 <UART_SetConfig+0x2d4>)
 800435e:	fba3 2302 	umull	r2, r3, r3, r2
 8004362:	095b      	lsrs	r3, r3, #5
 8004364:	011c      	lsls	r4, r3, #4
 8004366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004370:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	1891      	adds	r1, r2, r2
 800437e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004380:	415b      	adcs	r3, r3
 8004382:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004388:	4641      	mov	r1, r8
 800438a:	eb12 0a01 	adds.w	sl, r2, r1
 800438e:	4649      	mov	r1, r9
 8004390:	eb43 0b01 	adc.w	fp, r3, r1
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043a8:	4692      	mov	sl, r2
 80043aa:	469b      	mov	fp, r3
 80043ac:	4643      	mov	r3, r8
 80043ae:	eb1a 0303 	adds.w	r3, sl, r3
 80043b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043b6:	464b      	mov	r3, r9
 80043b8:	eb4b 0303 	adc.w	r3, fp, r3
 80043bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043d4:	460b      	mov	r3, r1
 80043d6:	18db      	adds	r3, r3, r3
 80043d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043da:	4613      	mov	r3, r2
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043ea:	f7fb ff69 	bl	80002c0 <__aeabi_uldivmod>
 80043ee:	4602      	mov	r2, r0
 80043f0:	460b      	mov	r3, r1
 80043f2:	4611      	mov	r1, r2
 80043f4:	4b3b      	ldr	r3, [pc, #236]	@ (80044e4 <UART_SetConfig+0x2d4>)
 80043f6:	fba3 2301 	umull	r2, r3, r3, r1
 80043fa:	095b      	lsrs	r3, r3, #5
 80043fc:	2264      	movs	r2, #100	@ 0x64
 80043fe:	fb02 f303 	mul.w	r3, r2, r3
 8004402:	1acb      	subs	r3, r1, r3
 8004404:	00db      	lsls	r3, r3, #3
 8004406:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800440a:	4b36      	ldr	r3, [pc, #216]	@ (80044e4 <UART_SetConfig+0x2d4>)
 800440c:	fba3 2302 	umull	r2, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004418:	441c      	add	r4, r3
 800441a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004424:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800442c:	4642      	mov	r2, r8
 800442e:	464b      	mov	r3, r9
 8004430:	1891      	adds	r1, r2, r2
 8004432:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004434:	415b      	adcs	r3, r3
 8004436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800443c:	4641      	mov	r1, r8
 800443e:	1851      	adds	r1, r2, r1
 8004440:	6339      	str	r1, [r7, #48]	@ 0x30
 8004442:	4649      	mov	r1, r9
 8004444:	414b      	adcs	r3, r1
 8004446:	637b      	str	r3, [r7, #52]	@ 0x34
 8004448:	f04f 0200 	mov.w	r2, #0
 800444c:	f04f 0300 	mov.w	r3, #0
 8004450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004454:	4659      	mov	r1, fp
 8004456:	00cb      	lsls	r3, r1, #3
 8004458:	4651      	mov	r1, sl
 800445a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800445e:	4651      	mov	r1, sl
 8004460:	00ca      	lsls	r2, r1, #3
 8004462:	4610      	mov	r0, r2
 8004464:	4619      	mov	r1, r3
 8004466:	4603      	mov	r3, r0
 8004468:	4642      	mov	r2, r8
 800446a:	189b      	adds	r3, r3, r2
 800446c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004470:	464b      	mov	r3, r9
 8004472:	460a      	mov	r2, r1
 8004474:	eb42 0303 	adc.w	r3, r2, r3
 8004478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004488:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800448c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004490:	460b      	mov	r3, r1
 8004492:	18db      	adds	r3, r3, r3
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004496:	4613      	mov	r3, r2
 8004498:	eb42 0303 	adc.w	r3, r2, r3
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800449e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044a6:	f7fb ff0b 	bl	80002c0 <__aeabi_uldivmod>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <UART_SetConfig+0x2d4>)
 80044b0:	fba3 1302 	umull	r1, r3, r3, r2
 80044b4:	095b      	lsrs	r3, r3, #5
 80044b6:	2164      	movs	r1, #100	@ 0x64
 80044b8:	fb01 f303 	mul.w	r3, r1, r3
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	00db      	lsls	r3, r3, #3
 80044c0:	3332      	adds	r3, #50	@ 0x32
 80044c2:	4a08      	ldr	r2, [pc, #32]	@ (80044e4 <UART_SetConfig+0x2d4>)
 80044c4:	fba2 2303 	umull	r2, r3, r2, r3
 80044c8:	095b      	lsrs	r3, r3, #5
 80044ca:	f003 0207 	and.w	r2, r3, #7
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4422      	add	r2, r4
 80044d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044d8:	e106      	b.n	80046e8 <UART_SetConfig+0x4d8>
 80044da:	bf00      	nop
 80044dc:	40011000 	.word	0x40011000
 80044e0:	40011400 	.word	0x40011400
 80044e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ec:	2200      	movs	r2, #0
 80044ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044fa:	4642      	mov	r2, r8
 80044fc:	464b      	mov	r3, r9
 80044fe:	1891      	adds	r1, r2, r2
 8004500:	6239      	str	r1, [r7, #32]
 8004502:	415b      	adcs	r3, r3
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
 8004506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800450a:	4641      	mov	r1, r8
 800450c:	1854      	adds	r4, r2, r1
 800450e:	4649      	mov	r1, r9
 8004510:	eb43 0501 	adc.w	r5, r3, r1
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	00eb      	lsls	r3, r5, #3
 800451e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004522:	00e2      	lsls	r2, r4, #3
 8004524:	4614      	mov	r4, r2
 8004526:	461d      	mov	r5, r3
 8004528:	4643      	mov	r3, r8
 800452a:	18e3      	adds	r3, r4, r3
 800452c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004530:	464b      	mov	r3, r9
 8004532:	eb45 0303 	adc.w	r3, r5, r3
 8004536:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800453a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004546:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	f04f 0300 	mov.w	r3, #0
 8004552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004556:	4629      	mov	r1, r5
 8004558:	008b      	lsls	r3, r1, #2
 800455a:	4621      	mov	r1, r4
 800455c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004560:	4621      	mov	r1, r4
 8004562:	008a      	lsls	r2, r1, #2
 8004564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004568:	f7fb feaa 	bl	80002c0 <__aeabi_uldivmod>
 800456c:	4602      	mov	r2, r0
 800456e:	460b      	mov	r3, r1
 8004570:	4b60      	ldr	r3, [pc, #384]	@ (80046f4 <UART_SetConfig+0x4e4>)
 8004572:	fba3 2302 	umull	r2, r3, r3, r2
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	011c      	lsls	r4, r3, #4
 800457a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800457e:	2200      	movs	r2, #0
 8004580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004584:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800458c:	4642      	mov	r2, r8
 800458e:	464b      	mov	r3, r9
 8004590:	1891      	adds	r1, r2, r2
 8004592:	61b9      	str	r1, [r7, #24]
 8004594:	415b      	adcs	r3, r3
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800459c:	4641      	mov	r1, r8
 800459e:	1851      	adds	r1, r2, r1
 80045a0:	6139      	str	r1, [r7, #16]
 80045a2:	4649      	mov	r1, r9
 80045a4:	414b      	adcs	r3, r1
 80045a6:	617b      	str	r3, [r7, #20]
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045b4:	4659      	mov	r1, fp
 80045b6:	00cb      	lsls	r3, r1, #3
 80045b8:	4651      	mov	r1, sl
 80045ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045be:	4651      	mov	r1, sl
 80045c0:	00ca      	lsls	r2, r1, #3
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	4642      	mov	r2, r8
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045d0:	464b      	mov	r3, r9
 80045d2:	460a      	mov	r2, r1
 80045d4:	eb42 0303 	adc.w	r3, r2, r3
 80045d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045f4:	4649      	mov	r1, r9
 80045f6:	008b      	lsls	r3, r1, #2
 80045f8:	4641      	mov	r1, r8
 80045fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fe:	4641      	mov	r1, r8
 8004600:	008a      	lsls	r2, r1, #2
 8004602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004606:	f7fb fe5b 	bl	80002c0 <__aeabi_uldivmod>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4611      	mov	r1, r2
 8004610:	4b38      	ldr	r3, [pc, #224]	@ (80046f4 <UART_SetConfig+0x4e4>)
 8004612:	fba3 2301 	umull	r2, r3, r3, r1
 8004616:	095b      	lsrs	r3, r3, #5
 8004618:	2264      	movs	r2, #100	@ 0x64
 800461a:	fb02 f303 	mul.w	r3, r2, r3
 800461e:	1acb      	subs	r3, r1, r3
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	3332      	adds	r3, #50	@ 0x32
 8004624:	4a33      	ldr	r2, [pc, #204]	@ (80046f4 <UART_SetConfig+0x4e4>)
 8004626:	fba2 2303 	umull	r2, r3, r2, r3
 800462a:	095b      	lsrs	r3, r3, #5
 800462c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004630:	441c      	add	r4, r3
 8004632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004636:	2200      	movs	r2, #0
 8004638:	673b      	str	r3, [r7, #112]	@ 0x70
 800463a:	677a      	str	r2, [r7, #116]	@ 0x74
 800463c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004640:	4642      	mov	r2, r8
 8004642:	464b      	mov	r3, r9
 8004644:	1891      	adds	r1, r2, r2
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	415b      	adcs	r3, r3
 800464a:	60fb      	str	r3, [r7, #12]
 800464c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004650:	4641      	mov	r1, r8
 8004652:	1851      	adds	r1, r2, r1
 8004654:	6039      	str	r1, [r7, #0]
 8004656:	4649      	mov	r1, r9
 8004658:	414b      	adcs	r3, r1
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	f04f 0300 	mov.w	r3, #0
 8004664:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004668:	4659      	mov	r1, fp
 800466a:	00cb      	lsls	r3, r1, #3
 800466c:	4651      	mov	r1, sl
 800466e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004672:	4651      	mov	r1, sl
 8004674:	00ca      	lsls	r2, r1, #3
 8004676:	4610      	mov	r0, r2
 8004678:	4619      	mov	r1, r3
 800467a:	4603      	mov	r3, r0
 800467c:	4642      	mov	r2, r8
 800467e:	189b      	adds	r3, r3, r2
 8004680:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004682:	464b      	mov	r3, r9
 8004684:	460a      	mov	r2, r1
 8004686:	eb42 0303 	adc.w	r3, r2, r3
 800468a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	663b      	str	r3, [r7, #96]	@ 0x60
 8004696:	667a      	str	r2, [r7, #100]	@ 0x64
 8004698:	f04f 0200 	mov.w	r2, #0
 800469c:	f04f 0300 	mov.w	r3, #0
 80046a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046a4:	4649      	mov	r1, r9
 80046a6:	008b      	lsls	r3, r1, #2
 80046a8:	4641      	mov	r1, r8
 80046aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046ae:	4641      	mov	r1, r8
 80046b0:	008a      	lsls	r2, r1, #2
 80046b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046b6:	f7fb fe03 	bl	80002c0 <__aeabi_uldivmod>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4b0d      	ldr	r3, [pc, #52]	@ (80046f4 <UART_SetConfig+0x4e4>)
 80046c0:	fba3 1302 	umull	r1, r3, r3, r2
 80046c4:	095b      	lsrs	r3, r3, #5
 80046c6:	2164      	movs	r1, #100	@ 0x64
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	011b      	lsls	r3, r3, #4
 80046d0:	3332      	adds	r3, #50	@ 0x32
 80046d2:	4a08      	ldr	r2, [pc, #32]	@ (80046f4 <UART_SetConfig+0x4e4>)
 80046d4:	fba2 2303 	umull	r2, r3, r2, r3
 80046d8:	095b      	lsrs	r3, r3, #5
 80046da:	f003 020f 	and.w	r2, r3, #15
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4422      	add	r2, r4
 80046e6:	609a      	str	r2, [r3, #8]
}
 80046e8:	bf00      	nop
 80046ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046ee:	46bd      	mov	sp, r7
 80046f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046f4:	51eb851f 	.word	0x51eb851f

080046f8 <siprintf>:
 80046f8:	b40e      	push	{r1, r2, r3}
 80046fa:	b500      	push	{lr}
 80046fc:	b09c      	sub	sp, #112	@ 0x70
 80046fe:	ab1d      	add	r3, sp, #116	@ 0x74
 8004700:	9002      	str	r0, [sp, #8]
 8004702:	9006      	str	r0, [sp, #24]
 8004704:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004708:	4809      	ldr	r0, [pc, #36]	@ (8004730 <siprintf+0x38>)
 800470a:	9107      	str	r1, [sp, #28]
 800470c:	9104      	str	r1, [sp, #16]
 800470e:	4909      	ldr	r1, [pc, #36]	@ (8004734 <siprintf+0x3c>)
 8004710:	f853 2b04 	ldr.w	r2, [r3], #4
 8004714:	9105      	str	r1, [sp, #20]
 8004716:	6800      	ldr	r0, [r0, #0]
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	a902      	add	r1, sp, #8
 800471c:	f000 f994 	bl	8004a48 <_svfiprintf_r>
 8004720:	9b02      	ldr	r3, [sp, #8]
 8004722:	2200      	movs	r2, #0
 8004724:	701a      	strb	r2, [r3, #0]
 8004726:	b01c      	add	sp, #112	@ 0x70
 8004728:	f85d eb04 	ldr.w	lr, [sp], #4
 800472c:	b003      	add	sp, #12
 800472e:	4770      	bx	lr
 8004730:	20000050 	.word	0x20000050
 8004734:	ffff0208 	.word	0xffff0208

08004738 <memset>:
 8004738:	4402      	add	r2, r0
 800473a:	4603      	mov	r3, r0
 800473c:	4293      	cmp	r3, r2
 800473e:	d100      	bne.n	8004742 <memset+0xa>
 8004740:	4770      	bx	lr
 8004742:	f803 1b01 	strb.w	r1, [r3], #1
 8004746:	e7f9      	b.n	800473c <memset+0x4>

08004748 <__errno>:
 8004748:	4b01      	ldr	r3, [pc, #4]	@ (8004750 <__errno+0x8>)
 800474a:	6818      	ldr	r0, [r3, #0]
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	20000050 	.word	0x20000050

08004754 <__libc_init_array>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4d0d      	ldr	r5, [pc, #52]	@ (800478c <__libc_init_array+0x38>)
 8004758:	4c0d      	ldr	r4, [pc, #52]	@ (8004790 <__libc_init_array+0x3c>)
 800475a:	1b64      	subs	r4, r4, r5
 800475c:	10a4      	asrs	r4, r4, #2
 800475e:	2600      	movs	r6, #0
 8004760:	42a6      	cmp	r6, r4
 8004762:	d109      	bne.n	8004778 <__libc_init_array+0x24>
 8004764:	4d0b      	ldr	r5, [pc, #44]	@ (8004794 <__libc_init_array+0x40>)
 8004766:	4c0c      	ldr	r4, [pc, #48]	@ (8004798 <__libc_init_array+0x44>)
 8004768:	f000 fc66 	bl	8005038 <_init>
 800476c:	1b64      	subs	r4, r4, r5
 800476e:	10a4      	asrs	r4, r4, #2
 8004770:	2600      	movs	r6, #0
 8004772:	42a6      	cmp	r6, r4
 8004774:	d105      	bne.n	8004782 <__libc_init_array+0x2e>
 8004776:	bd70      	pop	{r4, r5, r6, pc}
 8004778:	f855 3b04 	ldr.w	r3, [r5], #4
 800477c:	4798      	blx	r3
 800477e:	3601      	adds	r6, #1
 8004780:	e7ee      	b.n	8004760 <__libc_init_array+0xc>
 8004782:	f855 3b04 	ldr.w	r3, [r5], #4
 8004786:	4798      	blx	r3
 8004788:	3601      	adds	r6, #1
 800478a:	e7f2      	b.n	8004772 <__libc_init_array+0x1e>
 800478c:	080051b8 	.word	0x080051b8
 8004790:	080051b8 	.word	0x080051b8
 8004794:	080051b8 	.word	0x080051b8
 8004798:	080051bc 	.word	0x080051bc

0800479c <__retarget_lock_acquire_recursive>:
 800479c:	4770      	bx	lr

0800479e <__retarget_lock_release_recursive>:
 800479e:	4770      	bx	lr

080047a0 <_free_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4605      	mov	r5, r0
 80047a4:	2900      	cmp	r1, #0
 80047a6:	d041      	beq.n	800482c <_free_r+0x8c>
 80047a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047ac:	1f0c      	subs	r4, r1, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bfb8      	it	lt
 80047b2:	18e4      	addlt	r4, r4, r3
 80047b4:	f000 f8e0 	bl	8004978 <__malloc_lock>
 80047b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004830 <_free_r+0x90>)
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	b933      	cbnz	r3, 80047cc <_free_r+0x2c>
 80047be:	6063      	str	r3, [r4, #4]
 80047c0:	6014      	str	r4, [r2, #0]
 80047c2:	4628      	mov	r0, r5
 80047c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047c8:	f000 b8dc 	b.w	8004984 <__malloc_unlock>
 80047cc:	42a3      	cmp	r3, r4
 80047ce:	d908      	bls.n	80047e2 <_free_r+0x42>
 80047d0:	6820      	ldr	r0, [r4, #0]
 80047d2:	1821      	adds	r1, r4, r0
 80047d4:	428b      	cmp	r3, r1
 80047d6:	bf01      	itttt	eq
 80047d8:	6819      	ldreq	r1, [r3, #0]
 80047da:	685b      	ldreq	r3, [r3, #4]
 80047dc:	1809      	addeq	r1, r1, r0
 80047de:	6021      	streq	r1, [r4, #0]
 80047e0:	e7ed      	b.n	80047be <_free_r+0x1e>
 80047e2:	461a      	mov	r2, r3
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	b10b      	cbz	r3, 80047ec <_free_r+0x4c>
 80047e8:	42a3      	cmp	r3, r4
 80047ea:	d9fa      	bls.n	80047e2 <_free_r+0x42>
 80047ec:	6811      	ldr	r1, [r2, #0]
 80047ee:	1850      	adds	r0, r2, r1
 80047f0:	42a0      	cmp	r0, r4
 80047f2:	d10b      	bne.n	800480c <_free_r+0x6c>
 80047f4:	6820      	ldr	r0, [r4, #0]
 80047f6:	4401      	add	r1, r0
 80047f8:	1850      	adds	r0, r2, r1
 80047fa:	4283      	cmp	r3, r0
 80047fc:	6011      	str	r1, [r2, #0]
 80047fe:	d1e0      	bne.n	80047c2 <_free_r+0x22>
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	6053      	str	r3, [r2, #4]
 8004806:	4408      	add	r0, r1
 8004808:	6010      	str	r0, [r2, #0]
 800480a:	e7da      	b.n	80047c2 <_free_r+0x22>
 800480c:	d902      	bls.n	8004814 <_free_r+0x74>
 800480e:	230c      	movs	r3, #12
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	e7d6      	b.n	80047c2 <_free_r+0x22>
 8004814:	6820      	ldr	r0, [r4, #0]
 8004816:	1821      	adds	r1, r4, r0
 8004818:	428b      	cmp	r3, r1
 800481a:	bf04      	itt	eq
 800481c:	6819      	ldreq	r1, [r3, #0]
 800481e:	685b      	ldreq	r3, [r3, #4]
 8004820:	6063      	str	r3, [r4, #4]
 8004822:	bf04      	itt	eq
 8004824:	1809      	addeq	r1, r1, r0
 8004826:	6021      	streq	r1, [r4, #0]
 8004828:	6054      	str	r4, [r2, #4]
 800482a:	e7ca      	b.n	80047c2 <_free_r+0x22>
 800482c:	bd38      	pop	{r3, r4, r5, pc}
 800482e:	bf00      	nop
 8004830:	2000032c 	.word	0x2000032c

08004834 <sbrk_aligned>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	4e0f      	ldr	r6, [pc, #60]	@ (8004874 <sbrk_aligned+0x40>)
 8004838:	460c      	mov	r4, r1
 800483a:	6831      	ldr	r1, [r6, #0]
 800483c:	4605      	mov	r5, r0
 800483e:	b911      	cbnz	r1, 8004846 <sbrk_aligned+0x12>
 8004840:	f000 fba6 	bl	8004f90 <_sbrk_r>
 8004844:	6030      	str	r0, [r6, #0]
 8004846:	4621      	mov	r1, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f000 fba1 	bl	8004f90 <_sbrk_r>
 800484e:	1c43      	adds	r3, r0, #1
 8004850:	d103      	bne.n	800485a <sbrk_aligned+0x26>
 8004852:	f04f 34ff 	mov.w	r4, #4294967295
 8004856:	4620      	mov	r0, r4
 8004858:	bd70      	pop	{r4, r5, r6, pc}
 800485a:	1cc4      	adds	r4, r0, #3
 800485c:	f024 0403 	bic.w	r4, r4, #3
 8004860:	42a0      	cmp	r0, r4
 8004862:	d0f8      	beq.n	8004856 <sbrk_aligned+0x22>
 8004864:	1a21      	subs	r1, r4, r0
 8004866:	4628      	mov	r0, r5
 8004868:	f000 fb92 	bl	8004f90 <_sbrk_r>
 800486c:	3001      	adds	r0, #1
 800486e:	d1f2      	bne.n	8004856 <sbrk_aligned+0x22>
 8004870:	e7ef      	b.n	8004852 <sbrk_aligned+0x1e>
 8004872:	bf00      	nop
 8004874:	20000328 	.word	0x20000328

08004878 <_malloc_r>:
 8004878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800487c:	1ccd      	adds	r5, r1, #3
 800487e:	f025 0503 	bic.w	r5, r5, #3
 8004882:	3508      	adds	r5, #8
 8004884:	2d0c      	cmp	r5, #12
 8004886:	bf38      	it	cc
 8004888:	250c      	movcc	r5, #12
 800488a:	2d00      	cmp	r5, #0
 800488c:	4606      	mov	r6, r0
 800488e:	db01      	blt.n	8004894 <_malloc_r+0x1c>
 8004890:	42a9      	cmp	r1, r5
 8004892:	d904      	bls.n	800489e <_malloc_r+0x26>
 8004894:	230c      	movs	r3, #12
 8004896:	6033      	str	r3, [r6, #0]
 8004898:	2000      	movs	r0, #0
 800489a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800489e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004974 <_malloc_r+0xfc>
 80048a2:	f000 f869 	bl	8004978 <__malloc_lock>
 80048a6:	f8d8 3000 	ldr.w	r3, [r8]
 80048aa:	461c      	mov	r4, r3
 80048ac:	bb44      	cbnz	r4, 8004900 <_malloc_r+0x88>
 80048ae:	4629      	mov	r1, r5
 80048b0:	4630      	mov	r0, r6
 80048b2:	f7ff ffbf 	bl	8004834 <sbrk_aligned>
 80048b6:	1c43      	adds	r3, r0, #1
 80048b8:	4604      	mov	r4, r0
 80048ba:	d158      	bne.n	800496e <_malloc_r+0xf6>
 80048bc:	f8d8 4000 	ldr.w	r4, [r8]
 80048c0:	4627      	mov	r7, r4
 80048c2:	2f00      	cmp	r7, #0
 80048c4:	d143      	bne.n	800494e <_malloc_r+0xd6>
 80048c6:	2c00      	cmp	r4, #0
 80048c8:	d04b      	beq.n	8004962 <_malloc_r+0xea>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	4639      	mov	r1, r7
 80048ce:	4630      	mov	r0, r6
 80048d0:	eb04 0903 	add.w	r9, r4, r3
 80048d4:	f000 fb5c 	bl	8004f90 <_sbrk_r>
 80048d8:	4581      	cmp	r9, r0
 80048da:	d142      	bne.n	8004962 <_malloc_r+0xea>
 80048dc:	6821      	ldr	r1, [r4, #0]
 80048de:	1a6d      	subs	r5, r5, r1
 80048e0:	4629      	mov	r1, r5
 80048e2:	4630      	mov	r0, r6
 80048e4:	f7ff ffa6 	bl	8004834 <sbrk_aligned>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d03a      	beq.n	8004962 <_malloc_r+0xea>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	442b      	add	r3, r5
 80048f0:	6023      	str	r3, [r4, #0]
 80048f2:	f8d8 3000 	ldr.w	r3, [r8]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	bb62      	cbnz	r2, 8004954 <_malloc_r+0xdc>
 80048fa:	f8c8 7000 	str.w	r7, [r8]
 80048fe:	e00f      	b.n	8004920 <_malloc_r+0xa8>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	1b52      	subs	r2, r2, r5
 8004904:	d420      	bmi.n	8004948 <_malloc_r+0xd0>
 8004906:	2a0b      	cmp	r2, #11
 8004908:	d917      	bls.n	800493a <_malloc_r+0xc2>
 800490a:	1961      	adds	r1, r4, r5
 800490c:	42a3      	cmp	r3, r4
 800490e:	6025      	str	r5, [r4, #0]
 8004910:	bf18      	it	ne
 8004912:	6059      	strne	r1, [r3, #4]
 8004914:	6863      	ldr	r3, [r4, #4]
 8004916:	bf08      	it	eq
 8004918:	f8c8 1000 	streq.w	r1, [r8]
 800491c:	5162      	str	r2, [r4, r5]
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	4630      	mov	r0, r6
 8004922:	f000 f82f 	bl	8004984 <__malloc_unlock>
 8004926:	f104 000b 	add.w	r0, r4, #11
 800492a:	1d23      	adds	r3, r4, #4
 800492c:	f020 0007 	bic.w	r0, r0, #7
 8004930:	1ac2      	subs	r2, r0, r3
 8004932:	bf1c      	itt	ne
 8004934:	1a1b      	subne	r3, r3, r0
 8004936:	50a3      	strne	r3, [r4, r2]
 8004938:	e7af      	b.n	800489a <_malloc_r+0x22>
 800493a:	6862      	ldr	r2, [r4, #4]
 800493c:	42a3      	cmp	r3, r4
 800493e:	bf0c      	ite	eq
 8004940:	f8c8 2000 	streq.w	r2, [r8]
 8004944:	605a      	strne	r2, [r3, #4]
 8004946:	e7eb      	b.n	8004920 <_malloc_r+0xa8>
 8004948:	4623      	mov	r3, r4
 800494a:	6864      	ldr	r4, [r4, #4]
 800494c:	e7ae      	b.n	80048ac <_malloc_r+0x34>
 800494e:	463c      	mov	r4, r7
 8004950:	687f      	ldr	r7, [r7, #4]
 8004952:	e7b6      	b.n	80048c2 <_malloc_r+0x4a>
 8004954:	461a      	mov	r2, r3
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	42a3      	cmp	r3, r4
 800495a:	d1fb      	bne.n	8004954 <_malloc_r+0xdc>
 800495c:	2300      	movs	r3, #0
 800495e:	6053      	str	r3, [r2, #4]
 8004960:	e7de      	b.n	8004920 <_malloc_r+0xa8>
 8004962:	230c      	movs	r3, #12
 8004964:	6033      	str	r3, [r6, #0]
 8004966:	4630      	mov	r0, r6
 8004968:	f000 f80c 	bl	8004984 <__malloc_unlock>
 800496c:	e794      	b.n	8004898 <_malloc_r+0x20>
 800496e:	6005      	str	r5, [r0, #0]
 8004970:	e7d6      	b.n	8004920 <_malloc_r+0xa8>
 8004972:	bf00      	nop
 8004974:	2000032c 	.word	0x2000032c

08004978 <__malloc_lock>:
 8004978:	4801      	ldr	r0, [pc, #4]	@ (8004980 <__malloc_lock+0x8>)
 800497a:	f7ff bf0f 	b.w	800479c <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	20000324 	.word	0x20000324

08004984 <__malloc_unlock>:
 8004984:	4801      	ldr	r0, [pc, #4]	@ (800498c <__malloc_unlock+0x8>)
 8004986:	f7ff bf0a 	b.w	800479e <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	20000324 	.word	0x20000324

08004990 <__ssputs_r>:
 8004990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004994:	688e      	ldr	r6, [r1, #8]
 8004996:	461f      	mov	r7, r3
 8004998:	42be      	cmp	r6, r7
 800499a:	680b      	ldr	r3, [r1, #0]
 800499c:	4682      	mov	sl, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	4690      	mov	r8, r2
 80049a2:	d82d      	bhi.n	8004a00 <__ssputs_r+0x70>
 80049a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049ac:	d026      	beq.n	80049fc <__ssputs_r+0x6c>
 80049ae:	6965      	ldr	r5, [r4, #20]
 80049b0:	6909      	ldr	r1, [r1, #16]
 80049b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049b6:	eba3 0901 	sub.w	r9, r3, r1
 80049ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049be:	1c7b      	adds	r3, r7, #1
 80049c0:	444b      	add	r3, r9
 80049c2:	106d      	asrs	r5, r5, #1
 80049c4:	429d      	cmp	r5, r3
 80049c6:	bf38      	it	cc
 80049c8:	461d      	movcc	r5, r3
 80049ca:	0553      	lsls	r3, r2, #21
 80049cc:	d527      	bpl.n	8004a1e <__ssputs_r+0x8e>
 80049ce:	4629      	mov	r1, r5
 80049d0:	f7ff ff52 	bl	8004878 <_malloc_r>
 80049d4:	4606      	mov	r6, r0
 80049d6:	b360      	cbz	r0, 8004a32 <__ssputs_r+0xa2>
 80049d8:	6921      	ldr	r1, [r4, #16]
 80049da:	464a      	mov	r2, r9
 80049dc:	f000 fae8 	bl	8004fb0 <memcpy>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80049e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ea:	81a3      	strh	r3, [r4, #12]
 80049ec:	6126      	str	r6, [r4, #16]
 80049ee:	6165      	str	r5, [r4, #20]
 80049f0:	444e      	add	r6, r9
 80049f2:	eba5 0509 	sub.w	r5, r5, r9
 80049f6:	6026      	str	r6, [r4, #0]
 80049f8:	60a5      	str	r5, [r4, #8]
 80049fa:	463e      	mov	r6, r7
 80049fc:	42be      	cmp	r6, r7
 80049fe:	d900      	bls.n	8004a02 <__ssputs_r+0x72>
 8004a00:	463e      	mov	r6, r7
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	4632      	mov	r2, r6
 8004a06:	4641      	mov	r1, r8
 8004a08:	f000 faa8 	bl	8004f5c <memmove>
 8004a0c:	68a3      	ldr	r3, [r4, #8]
 8004a0e:	1b9b      	subs	r3, r3, r6
 8004a10:	60a3      	str	r3, [r4, #8]
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	4433      	add	r3, r6
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a1e:	462a      	mov	r2, r5
 8004a20:	f000 fad4 	bl	8004fcc <_realloc_r>
 8004a24:	4606      	mov	r6, r0
 8004a26:	2800      	cmp	r0, #0
 8004a28:	d1e0      	bne.n	80049ec <__ssputs_r+0x5c>
 8004a2a:	6921      	ldr	r1, [r4, #16]
 8004a2c:	4650      	mov	r0, sl
 8004a2e:	f7ff feb7 	bl	80047a0 <_free_r>
 8004a32:	230c      	movs	r3, #12
 8004a34:	f8ca 3000 	str.w	r3, [sl]
 8004a38:	89a3      	ldrh	r3, [r4, #12]
 8004a3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a3e:	81a3      	strh	r3, [r4, #12]
 8004a40:	f04f 30ff 	mov.w	r0, #4294967295
 8004a44:	e7e9      	b.n	8004a1a <__ssputs_r+0x8a>
	...

08004a48 <_svfiprintf_r>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	4698      	mov	r8, r3
 8004a4e:	898b      	ldrh	r3, [r1, #12]
 8004a50:	061b      	lsls	r3, r3, #24
 8004a52:	b09d      	sub	sp, #116	@ 0x74
 8004a54:	4607      	mov	r7, r0
 8004a56:	460d      	mov	r5, r1
 8004a58:	4614      	mov	r4, r2
 8004a5a:	d510      	bpl.n	8004a7e <_svfiprintf_r+0x36>
 8004a5c:	690b      	ldr	r3, [r1, #16]
 8004a5e:	b973      	cbnz	r3, 8004a7e <_svfiprintf_r+0x36>
 8004a60:	2140      	movs	r1, #64	@ 0x40
 8004a62:	f7ff ff09 	bl	8004878 <_malloc_r>
 8004a66:	6028      	str	r0, [r5, #0]
 8004a68:	6128      	str	r0, [r5, #16]
 8004a6a:	b930      	cbnz	r0, 8004a7a <_svfiprintf_r+0x32>
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	603b      	str	r3, [r7, #0]
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	b01d      	add	sp, #116	@ 0x74
 8004a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7a:	2340      	movs	r3, #64	@ 0x40
 8004a7c:	616b      	str	r3, [r5, #20]
 8004a7e:	2300      	movs	r3, #0
 8004a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a82:	2320      	movs	r3, #32
 8004a84:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a88:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a8c:	2330      	movs	r3, #48	@ 0x30
 8004a8e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c2c <_svfiprintf_r+0x1e4>
 8004a92:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004a96:	f04f 0901 	mov.w	r9, #1
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	469a      	mov	sl, r3
 8004a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aa2:	b10a      	cbz	r2, 8004aa8 <_svfiprintf_r+0x60>
 8004aa4:	2a25      	cmp	r2, #37	@ 0x25
 8004aa6:	d1f9      	bne.n	8004a9c <_svfiprintf_r+0x54>
 8004aa8:	ebba 0b04 	subs.w	fp, sl, r4
 8004aac:	d00b      	beq.n	8004ac6 <_svfiprintf_r+0x7e>
 8004aae:	465b      	mov	r3, fp
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	4629      	mov	r1, r5
 8004ab4:	4638      	mov	r0, r7
 8004ab6:	f7ff ff6b 	bl	8004990 <__ssputs_r>
 8004aba:	3001      	adds	r0, #1
 8004abc:	f000 80a7 	beq.w	8004c0e <_svfiprintf_r+0x1c6>
 8004ac0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ac2:	445a      	add	r2, fp
 8004ac4:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 809f 	beq.w	8004c0e <_svfiprintf_r+0x1c6>
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ada:	f10a 0a01 	add.w	sl, sl, #1
 8004ade:	9304      	str	r3, [sp, #16]
 8004ae0:	9307      	str	r3, [sp, #28]
 8004ae2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004ae6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004ae8:	4654      	mov	r4, sl
 8004aea:	2205      	movs	r2, #5
 8004aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004af0:	484e      	ldr	r0, [pc, #312]	@ (8004c2c <_svfiprintf_r+0x1e4>)
 8004af2:	f7fb fb95 	bl	8000220 <memchr>
 8004af6:	9a04      	ldr	r2, [sp, #16]
 8004af8:	b9d8      	cbnz	r0, 8004b32 <_svfiprintf_r+0xea>
 8004afa:	06d0      	lsls	r0, r2, #27
 8004afc:	bf44      	itt	mi
 8004afe:	2320      	movmi	r3, #32
 8004b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b04:	0711      	lsls	r1, r2, #28
 8004b06:	bf44      	itt	mi
 8004b08:	232b      	movmi	r3, #43	@ 0x2b
 8004b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b14:	d015      	beq.n	8004b42 <_svfiprintf_r+0xfa>
 8004b16:	9a07      	ldr	r2, [sp, #28]
 8004b18:	4654      	mov	r4, sl
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f04f 0c0a 	mov.w	ip, #10
 8004b20:	4621      	mov	r1, r4
 8004b22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b26:	3b30      	subs	r3, #48	@ 0x30
 8004b28:	2b09      	cmp	r3, #9
 8004b2a:	d94b      	bls.n	8004bc4 <_svfiprintf_r+0x17c>
 8004b2c:	b1b0      	cbz	r0, 8004b5c <_svfiprintf_r+0x114>
 8004b2e:	9207      	str	r2, [sp, #28]
 8004b30:	e014      	b.n	8004b5c <_svfiprintf_r+0x114>
 8004b32:	eba0 0308 	sub.w	r3, r0, r8
 8004b36:	fa09 f303 	lsl.w	r3, r9, r3
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	9304      	str	r3, [sp, #16]
 8004b3e:	46a2      	mov	sl, r4
 8004b40:	e7d2      	b.n	8004ae8 <_svfiprintf_r+0xa0>
 8004b42:	9b03      	ldr	r3, [sp, #12]
 8004b44:	1d19      	adds	r1, r3, #4
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	9103      	str	r1, [sp, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	bfbb      	ittet	lt
 8004b4e:	425b      	neglt	r3, r3
 8004b50:	f042 0202 	orrlt.w	r2, r2, #2
 8004b54:	9307      	strge	r3, [sp, #28]
 8004b56:	9307      	strlt	r3, [sp, #28]
 8004b58:	bfb8      	it	lt
 8004b5a:	9204      	strlt	r2, [sp, #16]
 8004b5c:	7823      	ldrb	r3, [r4, #0]
 8004b5e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b60:	d10a      	bne.n	8004b78 <_svfiprintf_r+0x130>
 8004b62:	7863      	ldrb	r3, [r4, #1]
 8004b64:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b66:	d132      	bne.n	8004bce <_svfiprintf_r+0x186>
 8004b68:	9b03      	ldr	r3, [sp, #12]
 8004b6a:	1d1a      	adds	r2, r3, #4
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	9203      	str	r2, [sp, #12]
 8004b70:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b74:	3402      	adds	r4, #2
 8004b76:	9305      	str	r3, [sp, #20]
 8004b78:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c3c <_svfiprintf_r+0x1f4>
 8004b7c:	7821      	ldrb	r1, [r4, #0]
 8004b7e:	2203      	movs	r2, #3
 8004b80:	4650      	mov	r0, sl
 8004b82:	f7fb fb4d 	bl	8000220 <memchr>
 8004b86:	b138      	cbz	r0, 8004b98 <_svfiprintf_r+0x150>
 8004b88:	9b04      	ldr	r3, [sp, #16]
 8004b8a:	eba0 000a 	sub.w	r0, r0, sl
 8004b8e:	2240      	movs	r2, #64	@ 0x40
 8004b90:	4082      	lsls	r2, r0
 8004b92:	4313      	orrs	r3, r2
 8004b94:	3401      	adds	r4, #1
 8004b96:	9304      	str	r3, [sp, #16]
 8004b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b9c:	4824      	ldr	r0, [pc, #144]	@ (8004c30 <_svfiprintf_r+0x1e8>)
 8004b9e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004ba2:	2206      	movs	r2, #6
 8004ba4:	f7fb fb3c 	bl	8000220 <memchr>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d036      	beq.n	8004c1a <_svfiprintf_r+0x1d2>
 8004bac:	4b21      	ldr	r3, [pc, #132]	@ (8004c34 <_svfiprintf_r+0x1ec>)
 8004bae:	bb1b      	cbnz	r3, 8004bf8 <_svfiprintf_r+0x1b0>
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	3307      	adds	r3, #7
 8004bb4:	f023 0307 	bic.w	r3, r3, #7
 8004bb8:	3308      	adds	r3, #8
 8004bba:	9303      	str	r3, [sp, #12]
 8004bbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bbe:	4433      	add	r3, r6
 8004bc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bc2:	e76a      	b.n	8004a9a <_svfiprintf_r+0x52>
 8004bc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bc8:	460c      	mov	r4, r1
 8004bca:	2001      	movs	r0, #1
 8004bcc:	e7a8      	b.n	8004b20 <_svfiprintf_r+0xd8>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	3401      	adds	r4, #1
 8004bd2:	9305      	str	r3, [sp, #20]
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	f04f 0c0a 	mov.w	ip, #10
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004be0:	3a30      	subs	r2, #48	@ 0x30
 8004be2:	2a09      	cmp	r2, #9
 8004be4:	d903      	bls.n	8004bee <_svfiprintf_r+0x1a6>
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0c6      	beq.n	8004b78 <_svfiprintf_r+0x130>
 8004bea:	9105      	str	r1, [sp, #20]
 8004bec:	e7c4      	b.n	8004b78 <_svfiprintf_r+0x130>
 8004bee:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e7f0      	b.n	8004bda <_svfiprintf_r+0x192>
 8004bf8:	ab03      	add	r3, sp, #12
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	462a      	mov	r2, r5
 8004bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8004c38 <_svfiprintf_r+0x1f0>)
 8004c00:	a904      	add	r1, sp, #16
 8004c02:	4638      	mov	r0, r7
 8004c04:	f3af 8000 	nop.w
 8004c08:	1c42      	adds	r2, r0, #1
 8004c0a:	4606      	mov	r6, r0
 8004c0c:	d1d6      	bne.n	8004bbc <_svfiprintf_r+0x174>
 8004c0e:	89ab      	ldrh	r3, [r5, #12]
 8004c10:	065b      	lsls	r3, r3, #25
 8004c12:	f53f af2d 	bmi.w	8004a70 <_svfiprintf_r+0x28>
 8004c16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c18:	e72c      	b.n	8004a74 <_svfiprintf_r+0x2c>
 8004c1a:	ab03      	add	r3, sp, #12
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	462a      	mov	r2, r5
 8004c20:	4b05      	ldr	r3, [pc, #20]	@ (8004c38 <_svfiprintf_r+0x1f0>)
 8004c22:	a904      	add	r1, sp, #16
 8004c24:	4638      	mov	r0, r7
 8004c26:	f000 f879 	bl	8004d1c <_printf_i>
 8004c2a:	e7ed      	b.n	8004c08 <_svfiprintf_r+0x1c0>
 8004c2c:	0800517c 	.word	0x0800517c
 8004c30:	08005186 	.word	0x08005186
 8004c34:	00000000 	.word	0x00000000
 8004c38:	08004991 	.word	0x08004991
 8004c3c:	08005182 	.word	0x08005182

08004c40 <_printf_common>:
 8004c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c44:	4616      	mov	r6, r2
 8004c46:	4698      	mov	r8, r3
 8004c48:	688a      	ldr	r2, [r1, #8]
 8004c4a:	690b      	ldr	r3, [r1, #16]
 8004c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	bfb8      	it	lt
 8004c54:	4613      	movlt	r3, r2
 8004c56:	6033      	str	r3, [r6, #0]
 8004c58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	460c      	mov	r4, r1
 8004c60:	b10a      	cbz	r2, 8004c66 <_printf_common+0x26>
 8004c62:	3301      	adds	r3, #1
 8004c64:	6033      	str	r3, [r6, #0]
 8004c66:	6823      	ldr	r3, [r4, #0]
 8004c68:	0699      	lsls	r1, r3, #26
 8004c6a:	bf42      	ittt	mi
 8004c6c:	6833      	ldrmi	r3, [r6, #0]
 8004c6e:	3302      	addmi	r3, #2
 8004c70:	6033      	strmi	r3, [r6, #0]
 8004c72:	6825      	ldr	r5, [r4, #0]
 8004c74:	f015 0506 	ands.w	r5, r5, #6
 8004c78:	d106      	bne.n	8004c88 <_printf_common+0x48>
 8004c7a:	f104 0a19 	add.w	sl, r4, #25
 8004c7e:	68e3      	ldr	r3, [r4, #12]
 8004c80:	6832      	ldr	r2, [r6, #0]
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	42ab      	cmp	r3, r5
 8004c86:	dc26      	bgt.n	8004cd6 <_printf_common+0x96>
 8004c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c8c:	6822      	ldr	r2, [r4, #0]
 8004c8e:	3b00      	subs	r3, #0
 8004c90:	bf18      	it	ne
 8004c92:	2301      	movne	r3, #1
 8004c94:	0692      	lsls	r2, r2, #26
 8004c96:	d42b      	bmi.n	8004cf0 <_printf_common+0xb0>
 8004c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	47c8      	blx	r9
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d01e      	beq.n	8004ce4 <_printf_common+0xa4>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	6922      	ldr	r2, [r4, #16]
 8004caa:	f003 0306 	and.w	r3, r3, #6
 8004cae:	2b04      	cmp	r3, #4
 8004cb0:	bf02      	ittt	eq
 8004cb2:	68e5      	ldreq	r5, [r4, #12]
 8004cb4:	6833      	ldreq	r3, [r6, #0]
 8004cb6:	1aed      	subeq	r5, r5, r3
 8004cb8:	68a3      	ldr	r3, [r4, #8]
 8004cba:	bf0c      	ite	eq
 8004cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cc0:	2500      	movne	r5, #0
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	bfc4      	itt	gt
 8004cc6:	1a9b      	subgt	r3, r3, r2
 8004cc8:	18ed      	addgt	r5, r5, r3
 8004cca:	2600      	movs	r6, #0
 8004ccc:	341a      	adds	r4, #26
 8004cce:	42b5      	cmp	r5, r6
 8004cd0:	d11a      	bne.n	8004d08 <_printf_common+0xc8>
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e008      	b.n	8004ce8 <_printf_common+0xa8>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4652      	mov	r2, sl
 8004cda:	4641      	mov	r1, r8
 8004cdc:	4638      	mov	r0, r7
 8004cde:	47c8      	blx	r9
 8004ce0:	3001      	adds	r0, #1
 8004ce2:	d103      	bne.n	8004cec <_printf_common+0xac>
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cec:	3501      	adds	r5, #1
 8004cee:	e7c6      	b.n	8004c7e <_printf_common+0x3e>
 8004cf0:	18e1      	adds	r1, r4, r3
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	2030      	movs	r0, #48	@ 0x30
 8004cf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004cfa:	4422      	add	r2, r4
 8004cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d04:	3302      	adds	r3, #2
 8004d06:	e7c7      	b.n	8004c98 <_printf_common+0x58>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	4641      	mov	r1, r8
 8004d0e:	4638      	mov	r0, r7
 8004d10:	47c8      	blx	r9
 8004d12:	3001      	adds	r0, #1
 8004d14:	d0e6      	beq.n	8004ce4 <_printf_common+0xa4>
 8004d16:	3601      	adds	r6, #1
 8004d18:	e7d9      	b.n	8004cce <_printf_common+0x8e>
	...

08004d1c <_printf_i>:
 8004d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d20:	7e0f      	ldrb	r7, [r1, #24]
 8004d22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d24:	2f78      	cmp	r7, #120	@ 0x78
 8004d26:	4691      	mov	r9, r2
 8004d28:	4680      	mov	r8, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	469a      	mov	sl, r3
 8004d2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d32:	d807      	bhi.n	8004d44 <_printf_i+0x28>
 8004d34:	2f62      	cmp	r7, #98	@ 0x62
 8004d36:	d80a      	bhi.n	8004d4e <_printf_i+0x32>
 8004d38:	2f00      	cmp	r7, #0
 8004d3a:	f000 80d2 	beq.w	8004ee2 <_printf_i+0x1c6>
 8004d3e:	2f58      	cmp	r7, #88	@ 0x58
 8004d40:	f000 80b9 	beq.w	8004eb6 <_printf_i+0x19a>
 8004d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d4c:	e03a      	b.n	8004dc4 <_printf_i+0xa8>
 8004d4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d52:	2b15      	cmp	r3, #21
 8004d54:	d8f6      	bhi.n	8004d44 <_printf_i+0x28>
 8004d56:	a101      	add	r1, pc, #4	@ (adr r1, 8004d5c <_printf_i+0x40>)
 8004d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d5c:	08004db5 	.word	0x08004db5
 8004d60:	08004dc9 	.word	0x08004dc9
 8004d64:	08004d45 	.word	0x08004d45
 8004d68:	08004d45 	.word	0x08004d45
 8004d6c:	08004d45 	.word	0x08004d45
 8004d70:	08004d45 	.word	0x08004d45
 8004d74:	08004dc9 	.word	0x08004dc9
 8004d78:	08004d45 	.word	0x08004d45
 8004d7c:	08004d45 	.word	0x08004d45
 8004d80:	08004d45 	.word	0x08004d45
 8004d84:	08004d45 	.word	0x08004d45
 8004d88:	08004ec9 	.word	0x08004ec9
 8004d8c:	08004df3 	.word	0x08004df3
 8004d90:	08004e83 	.word	0x08004e83
 8004d94:	08004d45 	.word	0x08004d45
 8004d98:	08004d45 	.word	0x08004d45
 8004d9c:	08004eeb 	.word	0x08004eeb
 8004da0:	08004d45 	.word	0x08004d45
 8004da4:	08004df3 	.word	0x08004df3
 8004da8:	08004d45 	.word	0x08004d45
 8004dac:	08004d45 	.word	0x08004d45
 8004db0:	08004e8b 	.word	0x08004e8b
 8004db4:	6833      	ldr	r3, [r6, #0]
 8004db6:	1d1a      	adds	r2, r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6032      	str	r2, [r6, #0]
 8004dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004dc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e09d      	b.n	8004f04 <_printf_i+0x1e8>
 8004dc8:	6833      	ldr	r3, [r6, #0]
 8004dca:	6820      	ldr	r0, [r4, #0]
 8004dcc:	1d19      	adds	r1, r3, #4
 8004dce:	6031      	str	r1, [r6, #0]
 8004dd0:	0606      	lsls	r6, r0, #24
 8004dd2:	d501      	bpl.n	8004dd8 <_printf_i+0xbc>
 8004dd4:	681d      	ldr	r5, [r3, #0]
 8004dd6:	e003      	b.n	8004de0 <_printf_i+0xc4>
 8004dd8:	0645      	lsls	r5, r0, #25
 8004dda:	d5fb      	bpl.n	8004dd4 <_printf_i+0xb8>
 8004ddc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004de0:	2d00      	cmp	r5, #0
 8004de2:	da03      	bge.n	8004dec <_printf_i+0xd0>
 8004de4:	232d      	movs	r3, #45	@ 0x2d
 8004de6:	426d      	negs	r5, r5
 8004de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dec:	4859      	ldr	r0, [pc, #356]	@ (8004f54 <_printf_i+0x238>)
 8004dee:	230a      	movs	r3, #10
 8004df0:	e011      	b.n	8004e16 <_printf_i+0xfa>
 8004df2:	6821      	ldr	r1, [r4, #0]
 8004df4:	6833      	ldr	r3, [r6, #0]
 8004df6:	0608      	lsls	r0, r1, #24
 8004df8:	f853 5b04 	ldr.w	r5, [r3], #4
 8004dfc:	d402      	bmi.n	8004e04 <_printf_i+0xe8>
 8004dfe:	0649      	lsls	r1, r1, #25
 8004e00:	bf48      	it	mi
 8004e02:	b2ad      	uxthmi	r5, r5
 8004e04:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e06:	4853      	ldr	r0, [pc, #332]	@ (8004f54 <_printf_i+0x238>)
 8004e08:	6033      	str	r3, [r6, #0]
 8004e0a:	bf14      	ite	ne
 8004e0c:	230a      	movne	r3, #10
 8004e0e:	2308      	moveq	r3, #8
 8004e10:	2100      	movs	r1, #0
 8004e12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e16:	6866      	ldr	r6, [r4, #4]
 8004e18:	60a6      	str	r6, [r4, #8]
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	bfa2      	ittt	ge
 8004e1e:	6821      	ldrge	r1, [r4, #0]
 8004e20:	f021 0104 	bicge.w	r1, r1, #4
 8004e24:	6021      	strge	r1, [r4, #0]
 8004e26:	b90d      	cbnz	r5, 8004e2c <_printf_i+0x110>
 8004e28:	2e00      	cmp	r6, #0
 8004e2a:	d04b      	beq.n	8004ec4 <_printf_i+0x1a8>
 8004e2c:	4616      	mov	r6, r2
 8004e2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e32:	fb03 5711 	mls	r7, r3, r1, r5
 8004e36:	5dc7      	ldrb	r7, [r0, r7]
 8004e38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e3c:	462f      	mov	r7, r5
 8004e3e:	42bb      	cmp	r3, r7
 8004e40:	460d      	mov	r5, r1
 8004e42:	d9f4      	bls.n	8004e2e <_printf_i+0x112>
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d10b      	bne.n	8004e60 <_printf_i+0x144>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07df      	lsls	r7, r3, #31
 8004e4c:	d508      	bpl.n	8004e60 <_printf_i+0x144>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	6861      	ldr	r1, [r4, #4]
 8004e52:	4299      	cmp	r1, r3
 8004e54:	bfde      	ittt	le
 8004e56:	2330      	movle	r3, #48	@ 0x30
 8004e58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e60:	1b92      	subs	r2, r2, r6
 8004e62:	6122      	str	r2, [r4, #16]
 8004e64:	f8cd a000 	str.w	sl, [sp]
 8004e68:	464b      	mov	r3, r9
 8004e6a:	aa03      	add	r2, sp, #12
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4640      	mov	r0, r8
 8004e70:	f7ff fee6 	bl	8004c40 <_printf_common>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d14a      	bne.n	8004f0e <_printf_i+0x1f2>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	b004      	add	sp, #16
 8004e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	f043 0320 	orr.w	r3, r3, #32
 8004e88:	6023      	str	r3, [r4, #0]
 8004e8a:	4833      	ldr	r0, [pc, #204]	@ (8004f58 <_printf_i+0x23c>)
 8004e8c:	2778      	movs	r7, #120	@ 0x78
 8004e8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	6831      	ldr	r1, [r6, #0]
 8004e96:	061f      	lsls	r7, r3, #24
 8004e98:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e9c:	d402      	bmi.n	8004ea4 <_printf_i+0x188>
 8004e9e:	065f      	lsls	r7, r3, #25
 8004ea0:	bf48      	it	mi
 8004ea2:	b2ad      	uxthmi	r5, r5
 8004ea4:	6031      	str	r1, [r6, #0]
 8004ea6:	07d9      	lsls	r1, r3, #31
 8004ea8:	bf44      	itt	mi
 8004eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8004eae:	6023      	strmi	r3, [r4, #0]
 8004eb0:	b11d      	cbz	r5, 8004eba <_printf_i+0x19e>
 8004eb2:	2310      	movs	r3, #16
 8004eb4:	e7ac      	b.n	8004e10 <_printf_i+0xf4>
 8004eb6:	4827      	ldr	r0, [pc, #156]	@ (8004f54 <_printf_i+0x238>)
 8004eb8:	e7e9      	b.n	8004e8e <_printf_i+0x172>
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	f023 0320 	bic.w	r3, r3, #32
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	e7f6      	b.n	8004eb2 <_printf_i+0x196>
 8004ec4:	4616      	mov	r6, r2
 8004ec6:	e7bd      	b.n	8004e44 <_printf_i+0x128>
 8004ec8:	6833      	ldr	r3, [r6, #0]
 8004eca:	6825      	ldr	r5, [r4, #0]
 8004ecc:	6961      	ldr	r1, [r4, #20]
 8004ece:	1d18      	adds	r0, r3, #4
 8004ed0:	6030      	str	r0, [r6, #0]
 8004ed2:	062e      	lsls	r6, r5, #24
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	d501      	bpl.n	8004edc <_printf_i+0x1c0>
 8004ed8:	6019      	str	r1, [r3, #0]
 8004eda:	e002      	b.n	8004ee2 <_printf_i+0x1c6>
 8004edc:	0668      	lsls	r0, r5, #25
 8004ede:	d5fb      	bpl.n	8004ed8 <_printf_i+0x1bc>
 8004ee0:	8019      	strh	r1, [r3, #0]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	6123      	str	r3, [r4, #16]
 8004ee6:	4616      	mov	r6, r2
 8004ee8:	e7bc      	b.n	8004e64 <_printf_i+0x148>
 8004eea:	6833      	ldr	r3, [r6, #0]
 8004eec:	1d1a      	adds	r2, r3, #4
 8004eee:	6032      	str	r2, [r6, #0]
 8004ef0:	681e      	ldr	r6, [r3, #0]
 8004ef2:	6862      	ldr	r2, [r4, #4]
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7fb f992 	bl	8000220 <memchr>
 8004efc:	b108      	cbz	r0, 8004f02 <_printf_i+0x1e6>
 8004efe:	1b80      	subs	r0, r0, r6
 8004f00:	6060      	str	r0, [r4, #4]
 8004f02:	6863      	ldr	r3, [r4, #4]
 8004f04:	6123      	str	r3, [r4, #16]
 8004f06:	2300      	movs	r3, #0
 8004f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f0c:	e7aa      	b.n	8004e64 <_printf_i+0x148>
 8004f0e:	6923      	ldr	r3, [r4, #16]
 8004f10:	4632      	mov	r2, r6
 8004f12:	4649      	mov	r1, r9
 8004f14:	4640      	mov	r0, r8
 8004f16:	47d0      	blx	sl
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d0ad      	beq.n	8004e78 <_printf_i+0x15c>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	079b      	lsls	r3, r3, #30
 8004f20:	d413      	bmi.n	8004f4a <_printf_i+0x22e>
 8004f22:	68e0      	ldr	r0, [r4, #12]
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	4298      	cmp	r0, r3
 8004f28:	bfb8      	it	lt
 8004f2a:	4618      	movlt	r0, r3
 8004f2c:	e7a6      	b.n	8004e7c <_printf_i+0x160>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	4632      	mov	r2, r6
 8004f32:	4649      	mov	r1, r9
 8004f34:	4640      	mov	r0, r8
 8004f36:	47d0      	blx	sl
 8004f38:	3001      	adds	r0, #1
 8004f3a:	d09d      	beq.n	8004e78 <_printf_i+0x15c>
 8004f3c:	3501      	adds	r5, #1
 8004f3e:	68e3      	ldr	r3, [r4, #12]
 8004f40:	9903      	ldr	r1, [sp, #12]
 8004f42:	1a5b      	subs	r3, r3, r1
 8004f44:	42ab      	cmp	r3, r5
 8004f46:	dcf2      	bgt.n	8004f2e <_printf_i+0x212>
 8004f48:	e7eb      	b.n	8004f22 <_printf_i+0x206>
 8004f4a:	2500      	movs	r5, #0
 8004f4c:	f104 0619 	add.w	r6, r4, #25
 8004f50:	e7f5      	b.n	8004f3e <_printf_i+0x222>
 8004f52:	bf00      	nop
 8004f54:	0800518d 	.word	0x0800518d
 8004f58:	0800519e 	.word	0x0800519e

08004f5c <memmove>:
 8004f5c:	4288      	cmp	r0, r1
 8004f5e:	b510      	push	{r4, lr}
 8004f60:	eb01 0402 	add.w	r4, r1, r2
 8004f64:	d902      	bls.n	8004f6c <memmove+0x10>
 8004f66:	4284      	cmp	r4, r0
 8004f68:	4623      	mov	r3, r4
 8004f6a:	d807      	bhi.n	8004f7c <memmove+0x20>
 8004f6c:	1e43      	subs	r3, r0, #1
 8004f6e:	42a1      	cmp	r1, r4
 8004f70:	d008      	beq.n	8004f84 <memmove+0x28>
 8004f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f7a:	e7f8      	b.n	8004f6e <memmove+0x12>
 8004f7c:	4402      	add	r2, r0
 8004f7e:	4601      	mov	r1, r0
 8004f80:	428a      	cmp	r2, r1
 8004f82:	d100      	bne.n	8004f86 <memmove+0x2a>
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f8e:	e7f7      	b.n	8004f80 <memmove+0x24>

08004f90 <_sbrk_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d06      	ldr	r5, [pc, #24]	@ (8004fac <_sbrk_r+0x1c>)
 8004f94:	2300      	movs	r3, #0
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f7fb fe94 	bl	8000cc8 <_sbrk>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_sbrk_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_sbrk_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000320 	.word	0x20000320

08004fb0 <memcpy>:
 8004fb0:	440a      	add	r2, r1
 8004fb2:	4291      	cmp	r1, r2
 8004fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004fb8:	d100      	bne.n	8004fbc <memcpy+0xc>
 8004fba:	4770      	bx	lr
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fc6:	4291      	cmp	r1, r2
 8004fc8:	d1f9      	bne.n	8004fbe <memcpy+0xe>
 8004fca:	bd10      	pop	{r4, pc}

08004fcc <_realloc_r>:
 8004fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fd0:	4680      	mov	r8, r0
 8004fd2:	4615      	mov	r5, r2
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	b921      	cbnz	r1, 8004fe2 <_realloc_r+0x16>
 8004fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fdc:	4611      	mov	r1, r2
 8004fde:	f7ff bc4b 	b.w	8004878 <_malloc_r>
 8004fe2:	b92a      	cbnz	r2, 8004ff0 <_realloc_r+0x24>
 8004fe4:	f7ff fbdc 	bl	80047a0 <_free_r>
 8004fe8:	2400      	movs	r4, #0
 8004fea:	4620      	mov	r0, r4
 8004fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ff0:	f000 f81a 	bl	8005028 <_malloc_usable_size_r>
 8004ff4:	4285      	cmp	r5, r0
 8004ff6:	4606      	mov	r6, r0
 8004ff8:	d802      	bhi.n	8005000 <_realloc_r+0x34>
 8004ffa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004ffe:	d8f4      	bhi.n	8004fea <_realloc_r+0x1e>
 8005000:	4629      	mov	r1, r5
 8005002:	4640      	mov	r0, r8
 8005004:	f7ff fc38 	bl	8004878 <_malloc_r>
 8005008:	4607      	mov	r7, r0
 800500a:	2800      	cmp	r0, #0
 800500c:	d0ec      	beq.n	8004fe8 <_realloc_r+0x1c>
 800500e:	42b5      	cmp	r5, r6
 8005010:	462a      	mov	r2, r5
 8005012:	4621      	mov	r1, r4
 8005014:	bf28      	it	cs
 8005016:	4632      	movcs	r2, r6
 8005018:	f7ff ffca 	bl	8004fb0 <memcpy>
 800501c:	4621      	mov	r1, r4
 800501e:	4640      	mov	r0, r8
 8005020:	f7ff fbbe 	bl	80047a0 <_free_r>
 8005024:	463c      	mov	r4, r7
 8005026:	e7e0      	b.n	8004fea <_realloc_r+0x1e>

08005028 <_malloc_usable_size_r>:
 8005028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800502c:	1f18      	subs	r0, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	bfbc      	itt	lt
 8005032:	580b      	ldrlt	r3, [r1, r0]
 8005034:	18c0      	addlt	r0, r0, r3
 8005036:	4770      	bx	lr

08005038 <_init>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	bf00      	nop
 800503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800503e:	bc08      	pop	{r3}
 8005040:	469e      	mov	lr, r3
 8005042:	4770      	bx	lr

08005044 <_fini>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr
